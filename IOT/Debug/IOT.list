
IOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  0800eab8  0800eab8  0001eab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f60c  0800f60c  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800f60c  0800f60c  0001f60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f614  0800f614  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f614  0800f614  0001f614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f618  0800f618  0001f618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800f61c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  20000228  0800f844  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  0800f844  00020ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013716  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003428  00000000  00000000  000339aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  00036dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000107f  00000000  00000000  000382b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ace3  00000000  00000000  0003932f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018123  00000000  00000000  00054012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099344  00000000  00000000  0006c135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070d0  00000000  00000000  0010547c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0010c54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000228 	.word	0x20000228
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ea9c 	.word	0x0800ea9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000022c 	.word	0x2000022c
 800014c:	0800ea9c 	.word	0x0800ea9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b9aa 	b.w	8000ed4 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f83e 	bl	8000c08 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2lz>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	4605      	mov	r5, r0
 8000b9c:	460c      	mov	r4, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	4621      	mov	r1, r4
 8000ba6:	f7ff ff09 	bl	80009bc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x20>
 8000bac:	4628      	mov	r0, r5
 8000bae:	4621      	mov	r1, r4
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fc7f 	bl	80004d8 <__aeabi_dmul>
 8000bda:	f7ff ff55 	bl	8000a88 <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc00 	bl	80003e4 <__aeabi_ui2d>
 8000be4:	2200      	movs	r2, #0
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <__aeabi_d2ulz+0x38>)
 8000be8:	f7ff fc76 	bl	80004d8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fab8 	bl	8000168 <__aeabi_dsub>
 8000bf8:	f7ff ff46 	bl	8000a88 <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	468e      	mov	lr, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14c      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d967      	bls.n	8000cee <__udivmoddi4+0xe6>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b153      	cbz	r3, 8000c3a <__udivmoddi4+0x32>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	fa01 fe03 	lsl.w	lr, r1, r3
 8000c30:	fa20 f202 	lsr.w	r2, r0, r2
 8000c34:	ea42 0e0e 	orr.w	lr, r2, lr
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3e:	fbbe f1f7 	udiv	r1, lr, r7
 8000c42:	fa1f f58c 	uxth.w	r5, ip
 8000c46:	fb07 ee11 	mls	lr, r7, r1, lr
 8000c4a:	fb01 f005 	mul.w	r0, r1, r5
 8000c4e:	0c22      	lsrs	r2, r4, #16
 8000c50:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x66>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 3eff 	add.w	lr, r1, #4294967295
 8000c60:	f080 8119 	bcs.w	8000e96 <__udivmoddi4+0x28e>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8116 	bls.w	8000e96 <__udivmoddi4+0x28e>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c74:	fb07 2210 	mls	r2, r7, r0, r2
 8000c78:	fb00 f505 	mul.w	r5, r0, r5
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8e:	f080 8104 	bcs.w	8000e9a <__udivmoddi4+0x292>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8101 	bls.w	8000e9a <__udivmoddi4+0x292>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	1b64      	subs	r4, r4, r5
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xc0>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ea 	beq.w	8000e90 <__udivmoddi4+0x288>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d148      	bne.n	8000d62 <__udivmoddi4+0x15a>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xd2>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4696      	mov	lr, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xea>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 808e 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cfc:	1a88      	subs	r0, r1, r2
 8000cfe:	2101      	movs	r1, #1
 8000d00:	0c17      	lsrs	r7, r2, #16
 8000d02:	fa1f fe82 	uxth.w	lr, r2
 8000d06:	fbb0 f5f7 	udiv	r5, r0, r7
 8000d0a:	fb07 0015 	mls	r0, r7, r5, r0
 8000d0e:	0c22      	lsrs	r2, r4, #16
 8000d10:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d14:	fb0e f005 	mul.w	r0, lr, r5
 8000d18:	4290      	cmp	r0, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x126>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x124>
 8000d26:	4290      	cmp	r0, r2
 8000d28:	f200 80cc 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d2c:	4645      	mov	r5, r8
 8000d2e:	1a12      	subs	r2, r2, r0
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	fb0e fe00 	mul.w	lr, lr, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x150>
 8000d46:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x14e>
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	f200 80b4 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000d56:	4610      	mov	r0, r2
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d60:	e7a0      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d62:	f1c1 0720 	rsb	r7, r1, #32
 8000d66:	408b      	lsls	r3, r1
 8000d68:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d70:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d78:	fbba f8f9 	udiv	r8, sl, r9
 8000d7c:	408d      	lsls	r5, r1
 8000d7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d82:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	432b      	orrs	r3, r5
 8000d8c:	fa00 f501 	lsl.w	r5, r0, r1
 8000d90:	fb08 f00e 	mul.w	r0, r8, lr
 8000d94:	0c1c      	lsrs	r4, r3, #16
 8000d96:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d9a:	42a0      	cmp	r0, r4
 8000d9c:	fa02 f201 	lsl.w	r2, r2, r1
 8000da0:	d90b      	bls.n	8000dba <__udivmoddi4+0x1b2>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f108 3aff 	add.w	sl, r8, #4294967295
 8000daa:	f080 8086 	bcs.w	8000eba <__udivmoddi4+0x2b2>
 8000dae:	42a0      	cmp	r0, r4
 8000db0:	f240 8083 	bls.w	8000eba <__udivmoddi4+0x2b2>
 8000db4:	f1a8 0802 	sub.w	r8, r8, #2
 8000db8:	4464      	add	r4, ip
 8000dba:	1a24      	subs	r4, r4, r0
 8000dbc:	b298      	uxth	r0, r3
 8000dbe:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc2:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc6:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dca:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x1dc>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dda:	d26a      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d968      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	4464      	add	r4, ip
 8000de4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000de8:	fba0 9302 	umull	r9, r3, r0, r2
 8000dec:	eba4 040e 	sub.w	r4, r4, lr
 8000df0:	429c      	cmp	r4, r3
 8000df2:	46c8      	mov	r8, r9
 8000df4:	469e      	mov	lr, r3
 8000df6:	d354      	bcc.n	8000ea2 <__udivmoddi4+0x29a>
 8000df8:	d051      	beq.n	8000e9e <__udivmoddi4+0x296>
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d067      	beq.n	8000ece <__udivmoddi4+0x2c6>
 8000dfe:	ebb5 0308 	subs.w	r3, r5, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	40cb      	lsrs	r3, r1
 8000e08:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	2100      	movs	r1, #0
 8000e16:	e74a      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e1c:	f1c3 0020 	rsb	r0, r3, #32
 8000e20:	40c1      	lsrs	r1, r0
 8000e22:	409d      	lsls	r5, r3
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2c:	4328      	orrs	r0, r5
 8000e2e:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e32:	fb07 1115 	mls	r1, r7, r5, r1
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	0c02      	lsrs	r2, r0, #16
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x256>
 8000e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e54:	d22f      	bcs.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e56:	4291      	cmp	r1, r2
 8000e58:	d92d      	bls.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e5a:	3d02      	subs	r5, #2
 8000e5c:	4462      	add	r2, ip
 8000e5e:	1a52      	subs	r2, r2, r1
 8000e60:	fbb2 f1f7 	udiv	r1, r2, r7
 8000e64:	fb07 2211 	mls	r2, r7, r1, r2
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e6e:	fb01 f20e 	mul.w	r2, r1, lr
 8000e72:	4282      	cmp	r2, r0
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x280>
 8000e76:	eb1c 0000 	adds.w	r0, ip, r0
 8000e7a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e7e:	d216      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000e80:	4282      	cmp	r2, r0
 8000e82:	d914      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000e84:	3902      	subs	r1, #2
 8000e86:	4460      	add	r0, ip
 8000e88:	1a80      	subs	r0, r0, r2
 8000e8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e8e:	e73a      	b.n	8000d06 <__udivmoddi4+0xfe>
 8000e90:	4631      	mov	r1, r6
 8000e92:	4630      	mov	r0, r6
 8000e94:	e70b      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e96:	4671      	mov	r1, lr
 8000e98:	e6e9      	b.n	8000c6e <__udivmoddi4+0x66>
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	e6fe      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e9e:	454d      	cmp	r5, r9
 8000ea0:	d2ab      	bcs.n	8000dfa <__udivmoddi4+0x1f2>
 8000ea2:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea6:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a5      	b.n	8000dfa <__udivmoddi4+0x1f2>
 8000eae:	4641      	mov	r1, r8
 8000eb0:	e7ea      	b.n	8000e88 <__udivmoddi4+0x280>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e796      	b.n	8000de4 <__udivmoddi4+0x1dc>
 8000eb6:	4645      	mov	r5, r8
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x256>
 8000eba:	46d0      	mov	r8, sl
 8000ebc:	e77d      	b.n	8000dba <__udivmoddi4+0x1b2>
 8000ebe:	4464      	add	r4, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e749      	b.n	8000d58 <__udivmoddi4+0x150>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e731      	b.n	8000d2e <__udivmoddi4+0x126>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xdc>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e6ed      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <AHT20_Init>:
	uint32_t DATA_Humi;
	I2C_HandleTypeDef *_aht20_ui2c;


/*  ----------------* Functions *-----------------  */
void AHT20_Init(I2C_HandleTypeDef *hi2c){
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	_aht20_ui2c = hi2c;
 8000ee0:	4a03      	ldr	r2, [pc, #12]	; (8000ef0 <AHT20_Init+0x18>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000250 	.word	0x20000250

08000ef4 <AHT20_Measure>:
	HAL_I2C_Master_Transmit(_aht20_ui2c, AHT20_ADDRESS << 1, &cmd, 1, AHT20_TIMEOUT);
}


void AHT20_Measure(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af02      	add	r7, sp, #8
	HAL_Delay(50);
 8000efa:	2032      	movs	r0, #50	; 0x32
 8000efc:	f005 f8c0 	bl	8006080 <HAL_Delay>
	uint8_t ahtTData[3];
	uint8_t ahtRData[7];
	ahtTData[0]=0xAC;
 8000f00:	23ac      	movs	r3, #172	; 0xac
 8000f02:	733b      	strb	r3, [r7, #12]
	ahtTData[1]=0x33;
 8000f04:	2333      	movs	r3, #51	; 0x33
 8000f06:	737b      	strb	r3, [r7, #13]
	ahtTData[2]=0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(_aht20_ui2c, AHT20_ADDRESS<<1, ahtTData, 3, AHT20_TIMEOUT);
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <AHT20_Measure+0xc0>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	f107 020c 	add.w	r2, r7, #12
 8000f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	2170      	movs	r1, #112	; 0x70
 8000f1e:	f005 ffbd 	bl	8006e9c <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8000f22:	2064      	movs	r0, #100	; 0x64
 8000f24:	f005 f8ac 	bl	8006080 <HAL_Delay>
    while(1){
    	HAL_I2C_Master_Receive(_aht20_ui2c, AHT20_ADDRESS<<1, ahtRData, 7, AHT20_TIMEOUT);
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <AHT20_Measure+0xc0>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	1d3a      	adds	r2, r7, #4
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2307      	movs	r3, #7
 8000f36:	2170      	movs	r1, #112	; 0x70
 8000f38:	f006 f8ae 	bl	8007098 <HAL_I2C_Master_Receive>
    	DATA_State=ahtRData[0];
 8000f3c:	793a      	ldrb	r2, [r7, #4]
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <AHT20_Measure+0xc4>)
 8000f40:	701a      	strb	r2, [r3, #0]
    	if((DATA_State&(1<<7))==0)
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <AHT20_Measure+0xc4>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	db2a      	blt.n	8000fa2 <AHT20_Measure+0xae>
    		{
    	    DATA_Humi=ahtRData[1];
 8000f4c:	797b      	ldrb	r3, [r7, #5]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <AHT20_Measure+0xc8>)
 8000f52:	601a      	str	r2, [r3, #0]
    	    DATA_Humi=(DATA_Humi<<8)|ahtRData[2];
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <AHT20_Measure+0xc8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	79ba      	ldrb	r2, [r7, #6]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <AHT20_Measure+0xc8>)
 8000f60:	6013      	str	r3, [r2, #0]
    	    DATA_Humi=(DATA_Humi<<4)|(ahtRData[3]>>4);
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <AHT20_Measure+0xc8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	79fa      	ldrb	r2, [r7, #7]
 8000f6a:	0912      	lsrs	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <AHT20_Measure+0xc8>)
 8000f72:	6013      	str	r3, [r2, #0]
    	    DATA_Temp=ahtRData[3]&0x0F;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <AHT20_Measure+0xcc>)
 8000f7c:	6013      	str	r3, [r2, #0]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[4];
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <AHT20_Measure+0xcc>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	7a3a      	ldrb	r2, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <AHT20_Measure+0xcc>)
 8000f8a:	6013      	str	r3, [r2, #0]
    	    DATA_Temp=(DATA_Temp<<8)|ahtRData[5];
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <AHT20_Measure+0xcc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	7a7a      	ldrb	r2, [r7, #9]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <AHT20_Measure+0xcc>)
 8000f98:	6013      	str	r3, [r2, #0]
    	    DATA_CRCreg= ahtRData[6];
 8000f9a:	7aba      	ldrb	r2, [r7, #10]
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <AHT20_Measure+0xd0>)
 8000f9e:	701a      	strb	r2, [r3, #0]
    		break;
 8000fa0:	e003      	b.n	8000faa <AHT20_Measure+0xb6>
    		}
    	else HAL_Delay(10);
 8000fa2:	200a      	movs	r0, #10
 8000fa4:	f005 f86c 	bl	8006080 <HAL_Delay>
    	HAL_I2C_Master_Receive(_aht20_ui2c, AHT20_ADDRESS<<1, ahtRData, 7, AHT20_TIMEOUT);
 8000fa8:	e7be      	b.n	8000f28 <AHT20_Measure+0x34>
    }
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000250 	.word	0x20000250
 8000fb8:	20000244 	.word	0x20000244
 8000fbc:	2000024c 	.word	0x2000024c
 8000fc0:	20000248 	.word	0x20000248
 8000fc4:	20000245 	.word	0x20000245

08000fc8 <AHT20_Temp>:


double AHT20_Temp(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	double TEMP_CALC;
	TEMP_CALC= (((DATA_Temp/1024.0)/1024.0) * 200.0) -50.0;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <AHT20_Temp+0x68>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa06 	bl	80003e4 <__aeabi_ui2d>
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <AHT20_Temp+0x6c>)
 8000fde:	f7ff fba5 	bl	800072c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <AHT20_Temp+0x6c>)
 8000ff0:	f7ff fb9c 	bl	800072c <__aeabi_ddiv>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <AHT20_Temp+0x70>)
 8001002:	f7ff fa69 	bl	80004d8 <__aeabi_dmul>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <AHT20_Temp+0x74>)
 8001014:	f7ff f8a8 	bl	8000168 <__aeabi_dsub>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	e9c7 2300 	strd	r2, r3, [r7]
	return TEMP_CALC;
 8001020:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000248 	.word	0x20000248
 8001034:	40900000 	.word	0x40900000
 8001038:	40690000 	.word	0x40690000
 800103c:	40490000 	.word	0x40490000

08001040 <AHT20_Humid>:

double AHT20_Humid(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	double HUMID_CALC;
	HUMID_CALC = ((DATA_Humi/1024.0)/1024.0)*100;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <AHT20_Humid+0x54>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f9ca 	bl	80003e4 <__aeabi_ui2d>
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <AHT20_Humid+0x58>)
 8001056:	f7ff fb69 	bl	800072c <__aeabi_ddiv>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <AHT20_Humid+0x58>)
 8001068:	f7ff fb60 	bl	800072c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <AHT20_Humid+0x5c>)
 800107a:	f7ff fa2d 	bl	80004d8 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	e9c7 2300 	strd	r2, r3, [r7]
	return HUMID_CALC;
 8001086:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000024c 	.word	0x2000024c
 8001098:	40900000 	.word	0x40900000
 800109c:	40590000 	.word	0x40590000

080010a0 <HTTP_REQ_make>:
  hettp request maker with Header and Body
  param1  structure of a request
  param2  URI addre
  param3  output
*/
int8_t HTTP_REQ_make(st_http_request REQ, uint8_t * body, uint8_t * buf) {
 80010a0:	b084      	sub	sp, #16
 80010a2:	b590      	push	{r4, r7, lr}
 80010a4:	b0c1      	sub	sp, #260	; 0x104
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80010ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char tbuf[MAX_BUF_SIZE]; // a buffer to save and storing data

 /*-----------------------------------   1   ---------------------------------------------*/
    // find method and put it in output string
    if (!HTTP_REQ_methode_maker(REQ.METHOD, tbuf)) { //error handler
 80010b0:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80010b4:	463a      	mov	r2, r7
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f899 	bl	80011f0 <HTTP_REQ_methode_maker>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <HTTP_REQ_make+0x2a>
        return -11;
 80010c4:	f06f 030a 	mvn.w	r3, #10
 80010c8:	e085      	b.n	80011d6 <HTTP_REQ_make+0x136>
    }
    strcpy((char*)buf, tbuf); // Copy the method string to the output
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 80010d2:	f00a fd6d 	bl	800bbb0 <strcpy>

 /*-----------------------------------   2   ---------------------------------------------*/
    // put URI and API in output string
    if (!HTTP_REQ_uri_maker(REQ.URI, REQ.API, tbuf)) {  //error handler
 80010d6:	463a      	mov	r2, r7
 80010d8:	f207 1119 	addw	r1, r7, #281	; 0x119
 80010dc:	f207 2319 	addw	r3, r7, #537	; 0x219
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 f90d 	bl	8001300 <HTTP_REQ_uri_maker>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <HTTP_REQ_make+0x52>
        return -12;
 80010ec:	f06f 030b 	mvn.w	r3, #11
 80010f0:	e071      	b.n	80011d6 <HTTP_REQ_make+0x136>
    }
    strcat((char*)buf, tbuf);     // Concatenate the URI and API to the output
 80010f2:	463b      	mov	r3, r7
 80010f4:	4619      	mov	r1, r3
 80010f6:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 80010fa:	f00a fc9f 	bl	800ba3c <strcat>

 /*-----------------------------------   3   ---------------------------------------------*/
    strcat((char*)buf, " HTTP/1.1\r\n"); // Concatenate HTTP/1.1
 80010fe:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 8001102:	f7ff f825 	bl	8000150 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800110e:	4413      	add	r3, r2
 8001110:	4a35      	ldr	r2, [pc, #212]	; (80011e8 <HTTP_REQ_make+0x148>)
 8001112:	461c      	mov	r4, r3
 8001114:	4613      	mov	r3, r2
 8001116:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001118:	6020      	str	r0, [r4, #0]
 800111a:	6061      	str	r1, [r4, #4]
 800111c:	60a2      	str	r2, [r4, #8]

 /*-----------------------------------   4   ---------------------------------------------*/
    // assigning Host name with it's 
    if (!HTTP_REQ_hostname_maker(REQ.HOST, REQ.PORT, tbuf)){     //error handler
 800111e:	f8b7 131a 	ldrh.w	r1, [r7, #794]	; 0x31a
 8001122:	463a      	mov	r2, r7
 8001124:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f929 	bl	8001380 <HTTP_REQ_hostname_maker>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <HTTP_REQ_make+0x9a>
        return -13;
 8001134:	f06f 030c 	mvn.w	r3, #12
 8001138:	e04d      	b.n	80011d6 <HTTP_REQ_make+0x136>
    }
    strcat((char*)buf, tbuf);
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 8001142:	f00a fc7b 	bl	800ba3c <strcat>

 /*-----------------------------------   5   ---------------------------------------------*/  
     if (!HTTP_REQ_date_maker( REQ.DATE , tbuf)){
 8001146:	463a      	mov	r2, r7
 8001148:	f507 7389 	add.w	r3, r7, #274	; 0x112
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f966 	bl	8001420 <HTTP_REQ_date_maker>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <HTTP_REQ_make+0xc0>
        return -14;
 800115a:	f06f 030d 	mvn.w	r3, #13
 800115e:	e03a      	b.n	80011d6 <HTTP_REQ_make+0x136>
     }
    strcat((char*)buf, tbuf);
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 8001168:	f00a fc68 	bl	800ba3c <strcat>

 /*-----------------------------------   6   ---------------------------------------------*/
    // Checking content and assign content length and type
    if (!HTTP_REQ_content_maker( REQ.TYPE, strlen((char*)body), tbuf)) { //error handler
 800116c:	f897 4111 	ldrb.w	r4, [r7, #273]	; 0x111
 8001170:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8001174:	f7fe ffec 	bl	8000150 <strlen>
 8001178:	4603      	mov	r3, r0
 800117a:	b29b      	uxth	r3, r3
 800117c:	463a      	mov	r2, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4620      	mov	r0, r4
 8001182:	f000 f9d1 	bl	8001528 <HTTP_REQ_content_maker>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <HTTP_REQ_make+0xf2>
        return -15;
 800118c:	f06f 030e 	mvn.w	r3, #14
 8001190:	e021      	b.n	80011d6 <HTTP_REQ_make+0x136>
    }
    strcat((char*)buf, tbuf);
 8001192:	463b      	mov	r3, r7
 8001194:	4619      	mov	r1, r3
 8001196:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 800119a:	f00a fc4f 	bl	800ba3c <strcat>

 /*-----------------------------------   7   ---------------------------------------------*/
    // 
    strcat((char*)buf, "\r\n");
 800119e:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 80011a2:	f7fe ffd5 	bl	8000150 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80011ae:	4413      	add	r3, r2
 80011b0:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HTTP_REQ_make+0x14c>)
 80011b2:	8811      	ldrh	r1, [r2, #0]
 80011b4:	7892      	ldrb	r2, [r2, #2]
 80011b6:	8019      	strh	r1, [r3, #0]
 80011b8:	709a      	strb	r2, [r3, #2]

 /*-----------------------------------   8   ---------------------------------------------*/
    // Concatenate body if there is anything
    if(strlen((char*)body)>0){
 80011ba:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <HTTP_REQ_make+0x134>
        strcat((char*)buf, (char*)body);
 80011c4:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 80011c8:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 80011cc:	f00a fc36 	bl	800ba3c <strcat>
        return 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <HTTP_REQ_make+0x136>
    }else{
        return 2;
 80011d4:	2302      	movs	r3, #2
    }
    return 0;
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	f507 7782 	add.w	r7, r7, #260	; 0x104
 80011dc:	46bd      	mov	sp, r7
 80011de:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011e2:	b004      	add	sp, #16
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	0800eab8 	.word	0x0800eab8
 80011ec:	0800eac4 	.word	0x0800eac4

080011f0 <HTTP_REQ_methode_maker>:

// HTTP method maker
uint8_t HTTP_REQ_methode_maker(uint8_t method, char * tbuf) {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
    switch (method) {
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	3b01      	subs	r3, #1
 8001200:	2b07      	cmp	r3, #7
 8001202:	d85c      	bhi.n	80012be <HTTP_REQ_methode_maker+0xce>
 8001204:	a201      	add	r2, pc, #4	; (adr r2, 800120c <HTTP_REQ_methode_maker+0x1c>)
 8001206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120a:	bf00      	nop
 800120c:	0800122d 	.word	0x0800122d
 8001210:	0800123d 	.word	0x0800123d
 8001214:	0800124d 	.word	0x0800124d
 8001218:	0800125d 	.word	0x0800125d
 800121c:	0800126d 	.word	0x0800126d
 8001220:	0800127f 	.word	0x0800127f
 8001224:	08001295 	.word	0x08001295
 8001228:	080012ab 	.word	0x080012ab
    case METHOD_GET:
        strcpy(tbuf , "GET ");
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	4a2b      	ldr	r2, [pc, #172]	; (80012dc <HTTP_REQ_methode_maker+0xec>)
 8001230:	6810      	ldr	r0, [r2, #0]
 8001232:	6018      	str	r0, [r3, #0]
 8001234:	7912      	ldrb	r2, [r2, #4]
 8001236:	711a      	strb	r2, [r3, #4]
        return 1;
 8001238:	2301      	movs	r3, #1
 800123a:	e049      	b.n	80012d0 <HTTP_REQ_methode_maker+0xe0>
    case METHOD_HEAD:
    	strcpy(tbuf , "HEAD ");
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <HTTP_REQ_methode_maker+0xf0>)
 8001240:	6810      	ldr	r0, [r2, #0]
 8001242:	6018      	str	r0, [r3, #0]
 8001244:	8892      	ldrh	r2, [r2, #4]
 8001246:	809a      	strh	r2, [r3, #4]
        return 2;
 8001248:	2302      	movs	r3, #2
 800124a:	e041      	b.n	80012d0 <HTTP_REQ_methode_maker+0xe0>
    case METHOD_POST:
    	strcpy(tbuf , "POST ");
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <HTTP_REQ_methode_maker+0xf4>)
 8001250:	6810      	ldr	r0, [r2, #0]
 8001252:	6018      	str	r0, [r3, #0]
 8001254:	8892      	ldrh	r2, [r2, #4]
 8001256:	809a      	strh	r2, [r3, #4]
        return 3;
 8001258:	2303      	movs	r3, #3
 800125a:	e039      	b.n	80012d0 <HTTP_REQ_methode_maker+0xe0>
    case METHOD_PUT:
    	strcpy(tbuf , "PUT ");
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <HTTP_REQ_methode_maker+0xf8>)
 8001260:	6810      	ldr	r0, [r2, #0]
 8001262:	6018      	str	r0, [r3, #0]
 8001264:	7912      	ldrb	r2, [r2, #4]
 8001266:	711a      	strb	r2, [r3, #4]
        return 4;
 8001268:	2304      	movs	r3, #4
 800126a:	e031      	b.n	80012d0 <HTTP_REQ_methode_maker+0xe0>
    case METHOD_DELETE:
    	strcpy(tbuf , "DELETE ");
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	491f      	ldr	r1, [pc, #124]	; (80012ec <HTTP_REQ_methode_maker+0xfc>)
 8001270:	461a      	mov	r2, r3
 8001272:	460b      	mov	r3, r1
 8001274:	cb03      	ldmia	r3!, {r0, r1}
 8001276:	6010      	str	r0, [r2, #0]
 8001278:	6051      	str	r1, [r2, #4]
        return 5;
 800127a:	2305      	movs	r3, #5
 800127c:	e028      	b.n	80012d0 <HTTP_REQ_methode_maker+0xe0>
    case METHOD_CONNECT:
    	strcpy(tbuf , "CONNECT ");
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	491b      	ldr	r1, [pc, #108]	; (80012f0 <HTTP_REQ_methode_maker+0x100>)
 8001282:	461a      	mov	r2, r3
 8001284:	460b      	mov	r3, r1
 8001286:	cb03      	ldmia	r3!, {r0, r1}
 8001288:	6010      	str	r0, [r2, #0]
 800128a:	6051      	str	r1, [r2, #4]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	7213      	strb	r3, [r2, #8]
        return 6;
 8001290:	2306      	movs	r3, #6
 8001292:	e01d      	b.n	80012d0 <HTTP_REQ_methode_maker+0xe0>
    case METHOD_OPTIONS:
    	strcpy(tbuf , "OPTIONS ");
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	4917      	ldr	r1, [pc, #92]	; (80012f4 <HTTP_REQ_methode_maker+0x104>)
 8001298:	461a      	mov	r2, r3
 800129a:	460b      	mov	r3, r1
 800129c:	cb03      	ldmia	r3!, {r0, r1}
 800129e:	6010      	str	r0, [r2, #0]
 80012a0:	6051      	str	r1, [r2, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	7213      	strb	r3, [r2, #8]
        return 7;
 80012a6:	2307      	movs	r3, #7
 80012a8:	e012      	b.n	80012d0 <HTTP_REQ_methode_maker+0xe0>
    case METHOD_TRACE:
    	strcpy(tbuf , "TRACE ");
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <HTTP_REQ_methode_maker+0x108>)
 80012ae:	6810      	ldr	r0, [r2, #0]
 80012b0:	6018      	str	r0, [r3, #0]
 80012b2:	8891      	ldrh	r1, [r2, #4]
 80012b4:	7992      	ldrb	r2, [r2, #6]
 80012b6:	8099      	strh	r1, [r3, #4]
 80012b8:	719a      	strb	r2, [r3, #6]
        return 8;
 80012ba:	2308      	movs	r3, #8
 80012bc:	e008      	b.n	80012d0 <HTTP_REQ_methode_maker+0xe0>
    default:
    	strcpy(tbuf , "ERROR ");
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HTTP_REQ_methode_maker+0x10c>)
 80012c2:	6810      	ldr	r0, [r2, #0]
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	8891      	ldrh	r1, [r2, #4]
 80012c8:	7992      	ldrb	r2, [r2, #6]
 80012ca:	8099      	strh	r1, [r3, #4]
 80012cc:	719a      	strb	r2, [r3, #6]
        return 0;
 80012ce:	2300      	movs	r3, #0
    }
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	0800eac8 	.word	0x0800eac8
 80012e0:	0800ead0 	.word	0x0800ead0
 80012e4:	0800ead8 	.word	0x0800ead8
 80012e8:	0800eae0 	.word	0x0800eae0
 80012ec:	0800eae8 	.word	0x0800eae8
 80012f0:	0800eaf0 	.word	0x0800eaf0
 80012f4:	0800eafc 	.word	0x0800eafc
 80012f8:	0800eb08 	.word	0x0800eb08
 80012fc:	0800eb10 	.word	0x0800eb10

08001300 <HTTP_REQ_uri_maker>:

// HTTP URI/API maker
uint8_t HTTP_REQ_uri_maker(const uint8_t* uri, const uint8_t* api, char * tbuf){
 8001300:	b580      	push	{r7, lr}
 8001302:	b0a4      	sub	sp, #144	; 0x90
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
    char str[MID_BUF_SIZE]={0};
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	227c      	movs	r2, #124	; 0x7c
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f00a fb87 	bl	800ba2c <memset>
    *tbuf = '\0';
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
    if(api[0]!=0){
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HTTP_REQ_uri_maker+0x46>
        sprintf(str,"/api/%s",api);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	4911      	ldr	r1, [pc, #68]	; (8001378 <HTTP_REQ_uri_maker+0x78>)
 8001334:	4618      	mov	r0, r3
 8001336:	f00a fa55 	bl	800b7e4 <siprintf>
        strcpy(tbuf,str);
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4619      	mov	r1, r3
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f00a fc35 	bl	800bbb0 <strcpy>
    }
    if(uri[0]!=0){
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00e      	beq.n	800136c <HTTP_REQ_uri_maker+0x6c>
        sprintf(str,"/%s ",uri);
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4909      	ldr	r1, [pc, #36]	; (800137c <HTTP_REQ_uri_maker+0x7c>)
 8001356:	4618      	mov	r0, r3
 8001358:	f00a fa44 	bl	800b7e4 <siprintf>
        strcat(tbuf,str);
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f00a fb6a 	bl	800ba3c <strcat>
        return 1;
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HTTP_REQ_uri_maker+0x6e>
    }
    return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3790      	adds	r7, #144	; 0x90
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	0800eb18 	.word	0x0800eb18
 800137c:	0800eb20 	.word	0x0800eb20

08001380 <HTTP_REQ_hostname_maker>:

// HTTP Hostname maker
uint8_t HTTP_REQ_hostname_maker(const uint8_t* host, uint16_t port, char * tbuf){
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	; 0x50
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	460b      	mov	r3, r1
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	817b      	strh	r3, [r7, #10]
    char str[MIN_BUF_SIZE]={0};
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	223c      	movs	r2, #60	; 0x3c
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f00a fb46 	bl	800ba2c <memset>
    *tbuf='\0';
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
    if(host!=NULL){
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d02e      	beq.n	800140a <HTTP_REQ_hostname_maker+0x8a>
    sprintf(tbuf, "Host: %s",host);
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4919      	ldr	r1, [pc, #100]	; (8001414 <HTTP_REQ_hostname_maker+0x94>)
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f00a fa17 	bl	800b7e4 <siprintf>
        if(port>0){
 80013b6:	897b      	ldrh	r3, [r7, #10]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d018      	beq.n	80013ee <HTTP_REQ_hostname_maker+0x6e>
            strcat(tbuf,":");
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7fe fec7 	bl	8000150 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	4913      	ldr	r1, [pc, #76]	; (8001418 <HTTP_REQ_hostname_maker+0x98>)
 80013cc:	461a      	mov	r2, r3
 80013ce:	460b      	mov	r3, r1
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	8013      	strh	r3, [r2, #0]
            itoa(port,str,10);
 80013d4:	897b      	ldrh	r3, [r7, #10]
 80013d6:	f107 0110 	add.w	r1, r7, #16
 80013da:	220a      	movs	r2, #10
 80013dc:	4618      	mov	r0, r3
 80013de:	f008 faa4 	bl	800992a <itoa>
            strcat(tbuf,str);
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4619      	mov	r1, r3
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f00a fb27 	bl	800ba3c <strcat>
        }
        strcat(tbuf,"\r\n");
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7fe feae 	bl	8000150 <strlen>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HTTP_REQ_hostname_maker+0x9c>)
 80013fe:	8811      	ldrh	r1, [r2, #0]
 8001400:	7892      	ldrb	r2, [r2, #2]
 8001402:	8019      	strh	r1, [r3, #0]
 8001404:	709a      	strb	r2, [r3, #2]
        return 1;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HTTP_REQ_hostname_maker+0x8c>
    }
    return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3750      	adds	r7, #80	; 0x50
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	0800eb28 	.word	0x0800eb28
 8001418:	0800eb34 	.word	0x0800eb34
 800141c:	0800eac4 	.word	0x0800eac4

08001420 <HTTP_REQ_date_maker>:

// HTTP Date maker
uint8_t HTTP_REQ_date_maker(uint8_t date[7], char * tbuf){
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af06      	add	r7, sp, #24
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
    *tbuf='\0';
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
    if(date[2] != 0 && date[3] != 0){
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3302      	adds	r3, #2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d06b      	beq.n	8001512 <HTTP_REQ_date_maker+0xf2>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3303      	adds	r3, #3
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d066      	beq.n	8001512 <HTTP_REQ_date_maker+0xf2>
        if(!(date[0]>=0 && date[0]<=7)) return 0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b07      	cmp	r3, #7
 800144a:	d901      	bls.n	8001450 <HTTP_REQ_date_maker+0x30>
 800144c:	2300      	movs	r3, #0
 800144e:	e061      	b.n	8001514 <HTTP_REQ_date_maker+0xf4>
        else if(!(date[1]>=0 && date[1]<=99)) return 0;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3301      	adds	r3, #1
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b63      	cmp	r3, #99	; 0x63
 8001458:	d901      	bls.n	800145e <HTTP_REQ_date_maker+0x3e>
 800145a:	2300      	movs	r3, #0
 800145c:	e05a      	b.n	8001514 <HTTP_REQ_date_maker+0xf4>
        else if(!(date[2]>=1 && date[2]<=12)) return 0;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3302      	adds	r3, #2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <HTTP_REQ_date_maker+0x52>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3302      	adds	r3, #2
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b0c      	cmp	r3, #12
 8001470:	d901      	bls.n	8001476 <HTTP_REQ_date_maker+0x56>
 8001472:	2300      	movs	r3, #0
 8001474:	e04e      	b.n	8001514 <HTTP_REQ_date_maker+0xf4>
        else if(!(date[3]>=1 && date[3]<=31)) return 0;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3303      	adds	r3, #3
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <HTTP_REQ_date_maker+0x6a>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3303      	adds	r3, #3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b1f      	cmp	r3, #31
 8001488:	d901      	bls.n	800148e <HTTP_REQ_date_maker+0x6e>
 800148a:	2300      	movs	r3, #0
 800148c:	e042      	b.n	8001514 <HTTP_REQ_date_maker+0xf4>
        else if(!(date[4]>=0 && date[4]<=23)) return 0;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3304      	adds	r3, #4
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b17      	cmp	r3, #23
 8001496:	d901      	bls.n	800149c <HTTP_REQ_date_maker+0x7c>
 8001498:	2300      	movs	r3, #0
 800149a:	e03b      	b.n	8001514 <HTTP_REQ_date_maker+0xf4>
        else if(!(date[5]>=0 && date[5]<=59)) return 0;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3305      	adds	r3, #5
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b3b      	cmp	r3, #59	; 0x3b
 80014a4:	d901      	bls.n	80014aa <HTTP_REQ_date_maker+0x8a>
 80014a6:	2300      	movs	r3, #0
 80014a8:	e034      	b.n	8001514 <HTTP_REQ_date_maker+0xf4>
        else if(!(date[6]>=0 && date[6]<=59)) return 0;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3306      	adds	r3, #6
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b3b      	cmp	r3, #59	; 0x3b
 80014b2:	d901      	bls.n	80014b8 <HTTP_REQ_date_maker+0x98>
 80014b4:	2300      	movs	r3, #0
 80014b6:	e02d      	b.n	8001514 <HTTP_REQ_date_maker+0xf4>
        else{
        sprintf(tbuf, "Date: %s, %02d %s 20%02d %02d:%02d:%02d GMT\r\n",Weekday_name[date[0]-1],date[3],Month_name[date[2]-1],date[1],date[4],date[5],date[6]);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	3b01      	subs	r3, #1
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4a16      	ldr	r2, [pc, #88]	; (800151c <HTTP_REQ_date_maker+0xfc>)
 80014c2:	1899      	adds	r1, r3, r2
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3303      	adds	r3, #3
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461e      	mov	r6, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3302      	adds	r3, #2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <HTTP_REQ_date_maker+0x100>)
 80014d8:	4413      	add	r3, r2
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	3201      	adds	r2, #1
 80014de:	7812      	ldrb	r2, [r2, #0]
 80014e0:	4610      	mov	r0, r2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	3204      	adds	r2, #4
 80014e6:	7812      	ldrb	r2, [r2, #0]
 80014e8:	4614      	mov	r4, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	3205      	adds	r2, #5
 80014ee:	7812      	ldrb	r2, [r2, #0]
 80014f0:	4615      	mov	r5, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	3206      	adds	r2, #6
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	9204      	str	r2, [sp, #16]
 80014fa:	9503      	str	r5, [sp, #12]
 80014fc:	9402      	str	r4, [sp, #8]
 80014fe:	9001      	str	r0, [sp, #4]
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	4633      	mov	r3, r6
 8001504:	460a      	mov	r2, r1
 8001506:	4907      	ldr	r1, [pc, #28]	; (8001524 <HTTP_REQ_date_maker+0x104>)
 8001508:	6838      	ldr	r0, [r7, #0]
 800150a:	f00a f96b 	bl	800b7e4 <siprintf>
        return 1;
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HTTP_REQ_date_maker+0xf4>
        }
    }
    return 2;
 8001512:	2302      	movs	r3, #2
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151c:	0800f158 	.word	0x0800f158
 8001520:	0800f128 	.word	0x0800f128
 8001524:	0800eb38 	.word	0x0800eb38

08001528 <HTTP_REQ_content_maker>:


// HTTP content maker
uint8_t HTTP_REQ_content_maker(uint8_t ptype,uint16_t contsize, char *tbuf) {
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b0a2      	sub	sp, #136	; 0x88
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	603a      	str	r2, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	460b      	mov	r3, r1
 8001536:	80bb      	strh	r3, [r7, #4]
    char str[MID_BUF_SIZE]={0};
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	227c      	movs	r2, #124	; 0x7c
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f00a fa71 	bl	800ba2c <memset>
    sprintf(str, "Content-Length: %u\r\n", contsize); //Contract Content-Length
 800154a:	88ba      	ldrh	r2, [r7, #4]
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	4956      	ldr	r1, [pc, #344]	; (80016ac <HTTP_REQ_content_maker+0x184>)
 8001552:	4618      	mov	r0, r3
 8001554:	f00a f946 	bl	800b7e4 <siprintf>
    strcpy(tbuf,str);
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	4619      	mov	r1, r3
 800155e:	6838      	ldr	r0, [r7, #0]
 8001560:	f00a fb26 	bl	800bbb0 <strcpy>
    if(contsize>0 && ptype!=PTYPE_NOTHING){
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 809a 	beq.w	80016a0 <HTTP_REQ_content_maker+0x178>
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b7f      	cmp	r3, #127	; 0x7f
 8001570:	f000 8096 	beq.w	80016a0 <HTTP_REQ_content_maker+0x178>
        strcat(tbuf,"Content-type: ");
 8001574:	6838      	ldr	r0, [r7, #0]
 8001576:	f7fe fdeb 	bl	8000150 <strlen>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HTTP_REQ_content_maker+0x188>)
 8001584:	461c      	mov	r4, r3
 8001586:	4613      	mov	r3, r2
 8001588:	cb07      	ldmia	r3!, {r0, r1, r2}
 800158a:	6020      	str	r0, [r4, #0]
 800158c:	6061      	str	r1, [r4, #4]
 800158e:	60a2      	str	r2, [r4, #8]
 8001590:	881a      	ldrh	r2, [r3, #0]
 8001592:	789b      	ldrb	r3, [r3, #2]
 8001594:	81a2      	strh	r2, [r4, #12]
 8001596:	73a3      	strb	r3, [r4, #14]
        *str='\0';
 8001598:	2300      	movs	r3, #0
 800159a:	723b      	strb	r3, [r7, #8]
        switch (ptype) { 
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	3b01      	subs	r3, #1
 80015a0:	2b07      	cmp	r3, #7
 80015a2:	d864      	bhi.n	800166e <HTTP_REQ_content_maker+0x146>
 80015a4:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <HTTP_REQ_content_maker+0x84>)
 80015a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015aa:	bf00      	nop
 80015ac:	080015cd 	.word	0x080015cd
 80015b0:	080015db 	.word	0x080015db
 80015b4:	080015e9 	.word	0x080015e9
 80015b8:	08001609 	.word	0x08001609
 80015bc:	0800161d 	.word	0x0800161d
 80015c0:	0800162f 	.word	0x0800162f
 80015c4:	08001657 	.word	0x08001657
 80015c8:	08001643 	.word	0x08001643
        case PTYPE_HTML:
            strcpy(str , NTYPE_HTML);
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4a38      	ldr	r2, [pc, #224]	; (80016b4 <HTTP_REQ_content_maker+0x18c>)
 80015d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80015d4:	c303      	stmia	r3!, {r0, r1}
 80015d6:	801a      	strh	r2, [r3, #0]
            break;
 80015d8:	e04b      	b.n	8001672 <HTTP_REQ_content_maker+0x14a>
        case PTYPE_CSS:
        	strcpy(str , NTYPE_CSS);
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	4a36      	ldr	r2, [pc, #216]	; (80016b8 <HTTP_REQ_content_maker+0x190>)
 80015e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015e2:	c303      	stmia	r3!, {r0, r1}
 80015e4:	701a      	strb	r2, [r3, #0]
            break;
 80015e6:	e044      	b.n	8001672 <HTTP_REQ_content_maker+0x14a>
        case PTYPE_JS:
        	strcpy(str , NTYPE_JS);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4a33      	ldr	r2, [pc, #204]	; (80016bc <HTTP_REQ_content_maker+0x194>)
 80015ee:	461c      	mov	r4, r3
 80015f0:	4615      	mov	r5, r2
 80015f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015fa:	6020      	str	r0, [r4, #0]
 80015fc:	3404      	adds	r4, #4
 80015fe:	8021      	strh	r1, [r4, #0]
 8001600:	3402      	adds	r4, #2
 8001602:	0c0b      	lsrs	r3, r1, #16
 8001604:	7023      	strb	r3, [r4, #0]
            break;
 8001606:	e034      	b.n	8001672 <HTTP_REQ_content_maker+0x14a>
        case PTYPE_JSON:
        	strcpy(str , NTYPE_JSON);
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	4a2c      	ldr	r2, [pc, #176]	; (80016c0 <HTTP_REQ_content_maker+0x198>)
 800160e:	461c      	mov	r4, r3
 8001610:	4615      	mov	r5, r2
 8001612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001616:	682b      	ldr	r3, [r5, #0]
 8001618:	7023      	strb	r3, [r4, #0]
            break;
 800161a:	e02a      	b.n	8001672 <HTTP_REQ_content_maker+0x14a>
        case PTYPE_XML:
        	strcpy(str , NTYPE_XML);
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	4a28      	ldr	r2, [pc, #160]	; (80016c4 <HTTP_REQ_content_maker+0x19c>)
 8001622:	461c      	mov	r4, r3
 8001624:	4613      	mov	r3, r2
 8001626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            break;
 800162c:	e021      	b.n	8001672 <HTTP_REQ_content_maker+0x14a>
        case PTYPE_TEXT:
        	strcpy(str , NTYPE_TEXT);
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <HTTP_REQ_content_maker+0x1a0>)
 8001634:	ca07      	ldmia	r2, {r0, r1, r2}
 8001636:	c303      	stmia	r3!, {r0, r1}
 8001638:	801a      	strh	r2, [r3, #0]
 800163a:	3302      	adds	r3, #2
 800163c:	0c12      	lsrs	r2, r2, #16
 800163e:	701a      	strb	r2, [r3, #0]
            break;
 8001640:	e017      	b.n	8001672 <HTTP_REQ_content_maker+0x14a>
        case PTYPE_CGI:
        	strcpy(str , NTYPE_CGI);
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	4a21      	ldr	r2, [pc, #132]	; (80016cc <HTTP_REQ_content_maker+0x1a4>)
 8001648:	461c      	mov	r4, r3
 800164a:	4615      	mov	r5, r2
 800164c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	8023      	strh	r3, [r4, #0]
            break;
 8001654:	e00d      	b.n	8001672 <HTTP_REQ_content_maker+0x14a>
        case PTYPE_FLASH:
        	strcpy(str , NTYPE_FLASH);
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <HTTP_REQ_content_maker+0x1a8>)
 800165c:	461c      	mov	r4, r3
 800165e:	4615      	mov	r5, r2
 8001660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001664:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001668:	c407      	stmia	r4!, {r0, r1, r2}
 800166a:	8023      	strh	r3, [r4, #0]
            break;
 800166c:	e001      	b.n	8001672 <HTTP_REQ_content_maker+0x14a>
        default:
            return 0;
 800166e:	2300      	movs	r3, #0
 8001670:	e017      	b.n	80016a2 <HTTP_REQ_content_maker+0x17a>
        }
        strcat(str,"\r\n");
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fd6a 	bl	8000150 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4413      	add	r3, r2
 8001686:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <HTTP_REQ_content_maker+0x1ac>)
 8001688:	8811      	ldrh	r1, [r2, #0]
 800168a:	7892      	ldrb	r2, [r2, #2]
 800168c:	8019      	strh	r1, [r3, #0]
 800168e:	709a      	strb	r2, [r3, #2]
        strcat(tbuf,str);
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	4619      	mov	r1, r3
 8001696:	6838      	ldr	r0, [r7, #0]
 8001698:	f00a f9d0 	bl	800ba3c <strcat>
        return 2;
 800169c:	2302      	movs	r3, #2
 800169e:	e000      	b.n	80016a2 <HTTP_REQ_content_maker+0x17a>
    }
    return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3788      	adds	r7, #136	; 0x88
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bdb0      	pop	{r4, r5, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	0800eb68 	.word	0x0800eb68
 80016b0:	0800eb80 	.word	0x0800eb80
 80016b4:	0800eb90 	.word	0x0800eb90
 80016b8:	0800eb9c 	.word	0x0800eb9c
 80016bc:	0800eba8 	.word	0x0800eba8
 80016c0:	0800ebc0 	.word	0x0800ebc0
 80016c4:	0800ebd4 	.word	0x0800ebd4
 80016c8:	0800ebe4 	.word	0x0800ebe4
 80016cc:	0800ebf0 	.word	0x0800ebf0
 80016d0:	0800ec04 	.word	0x0800ec04
 80016d4:	0800eac4 	.word	0x0800eac4

080016d8 <HTTP_ERROR_HANDLER>:
    return 1;
}


// this fonction tells you where is the error
void HTTP_ERROR_HANDLER(int8_t errCode){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
    switch (errCode){
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	3321      	adds	r3, #33	; 0x21
 80016e8:	2b16      	cmp	r3, #22
 80016ea:	d851      	bhi.n	8001790 <HTTP_ERROR_HANDLER+0xb8>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <HTTP_ERROR_HANDLER+0x1c>)
 80016ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f2:	bf00      	nop
 80016f4:	08001789 	.word	0x08001789
 80016f8:	08001781 	.word	0x08001781
 80016fc:	08001779 	.word	0x08001779
 8001700:	08001791 	.word	0x08001791
 8001704:	08001791 	.word	0x08001791
 8001708:	08001791 	.word	0x08001791
 800170c:	08001791 	.word	0x08001791
 8001710:	08001791 	.word	0x08001791
 8001714:	08001791 	.word	0x08001791
 8001718:	08001791 	.word	0x08001791
 800171c:	08001791 	.word	0x08001791
 8001720:	08001791 	.word	0x08001791
 8001724:	08001791 	.word	0x08001791
 8001728:	08001791 	.word	0x08001791
 800172c:	08001791 	.word	0x08001791
 8001730:	08001791 	.word	0x08001791
 8001734:	08001791 	.word	0x08001791
 8001738:	08001791 	.word	0x08001791
 800173c:	08001771 	.word	0x08001771
 8001740:	08001769 	.word	0x08001769
 8001744:	08001761 	.word	0x08001761
 8001748:	08001759 	.word	0x08001759
 800174c:	08001751 	.word	0x08001751
        case -11:   
                printf("Error during making HTTP Request Method, Methode is unvalid or do not exist\r\n");             
 8001750:	4811      	ldr	r0, [pc, #68]	; (8001798 <HTTP_ERROR_HANDLER+0xc0>)
 8001752:	f00a f83f 	bl	800b7d4 <puts>
                break;
 8001756:	e01b      	b.n	8001790 <HTTP_ERROR_HANDLER+0xb8>
        case -12:  
                printf("Error during making HTTP Request URI/API, URI (or API) is uncleared or didn't assign\r\n");                
 8001758:	4810      	ldr	r0, [pc, #64]	; (800179c <HTTP_ERROR_HANDLER+0xc4>)
 800175a:	f00a f83b 	bl	800b7d4 <puts>
                break;
 800175e:	e017      	b.n	8001790 <HTTP_ERROR_HANDLER+0xb8>
        case -13:    
                printf("Error during making HTTP Header HOST name, Host name is null or other problems\r\n");           
 8001760:	480f      	ldr	r0, [pc, #60]	; (80017a0 <HTTP_ERROR_HANDLER+0xc8>)
 8001762:	f00a f837 	bl	800b7d4 <puts>
                break;
 8001766:	e013      	b.n	8001790 <HTTP_ERROR_HANDLER+0xb8>
        case -14:    
                printf("Error during making HTTP Header Date, input numbers are invalid\r\n");           
 8001768:	480e      	ldr	r0, [pc, #56]	; (80017a4 <HTTP_ERROR_HANDLER+0xcc>)
 800176a:	f00a f833 	bl	800b7d4 <puts>
                break;       
 800176e:	e00f      	b.n	8001790 <HTTP_ERROR_HANDLER+0xb8>
        case -15:
                printf("Error during making HTTP Header Content, Content-Length or Content-type error \r\n");                
 8001770:	480d      	ldr	r0, [pc, #52]	; (80017a8 <HTTP_ERROR_HANDLER+0xd0>)
 8001772:	f00a f82f 	bl	800b7d4 <puts>
                break;
 8001776:	e00b      	b.n	8001790 <HTTP_ERROR_HANDLER+0xb8>
        case -31:
                printf("Error during extracting HTTP Response Status Code, invalid code\r\n");                
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <HTTP_ERROR_HANDLER+0xd4>)
 800177a:	f00a f82b 	bl	800b7d4 <puts>
                break;
 800177e:	e007      	b.n	8001790 <HTTP_ERROR_HANDLER+0xb8>
        case -32:
                printf("Error during extracting HTTP Response Content-Length, \r\n");                  
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <HTTP_ERROR_HANDLER+0xd8>)
 8001782:	f00a f827 	bl	800b7d4 <puts>
                break;
 8001786:	e003      	b.n	8001790 <HTTP_ERROR_HANDLER+0xb8>
        case -33:
                printf("Error during extracting HTTP Response Content-Type, \r\n");                  
 8001788:	480a      	ldr	r0, [pc, #40]	; (80017b4 <HTTP_ERROR_HANDLER+0xdc>)
 800178a:	f00a f823 	bl	800b7d4 <puts>
                break;        
 800178e:	bf00      	nop
    }
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	0800ec50 	.word	0x0800ec50
 800179c:	0800eca0 	.word	0x0800eca0
 80017a0:	0800ecf8 	.word	0x0800ecf8
 80017a4:	0800ed48 	.word	0x0800ed48
 80017a8:	0800ed8c 	.word	0x0800ed8c
 80017ac:	0800eddc 	.word	0x0800eddc
 80017b0:	0800ee20 	.word	0x0800ee20
 80017b4:	0800ee58 	.word	0x0800ee58

080017b8 <get_seconds_from_ntp_server>:
47) UTC+12:45 (Summer)New Zealand
48) UTC+13:00 Tonga
49) UTC+14:00 Kiribati (Line Islands)
*/
tstamp get_seconds_from_ntp_server(uint8_t *buf, uint16_t idx)
{
 80017b8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80017bc:	b0d1      	sub	sp, #324	; 0x144
 80017be:	af00      	add	r7, sp, #0
 80017c0:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 80017c4:	460b      	mov	r3, r1
 80017c6:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	tstamp seconds = 0;
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint8_t i=0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	for (i = 0; i < 4; i++)
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80017e2:	e028      	b.n	8001836 <get_seconds_from_ntp_server+0x7e>
	{
		seconds = (seconds << 8) | buf[idx + i];
 80017e4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80017e8:	f04f 0000 	mov.w	r0, #0
 80017ec:	f04f 0100 	mov.w	r1, #0
 80017f0:	0219      	lsls	r1, r3, #8
 80017f2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80017f6:	0210      	lsls	r0, r2, #8
 80017f8:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 80017fc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001800:	4413      	add	r3, r2
 8001802:	461a      	mov	r2, r3
 8001804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001808:	4413      	add	r3, r2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2200      	movs	r2, #0
 8001810:	461c      	mov	r4, r3
 8001812:	4615      	mov	r5, r2
 8001814:	ea40 0304 	orr.w	r3, r0, r4
 8001818:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800181c:	ea41 0305 	orr.w	r3, r1, r5
 8001820:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001824:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001828:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	for (i = 0; i < 4; i++)
 800182c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001830:	3301      	adds	r3, #1
 8001832:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8001836:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800183a:	2b03      	cmp	r3, #3
 800183c:	d9d2      	bls.n	80017e4 <get_seconds_from_ntp_server+0x2c>
	}
	switch (time_zone)
 800183e:	4bb6      	ldr	r3, [pc, #728]	; (8001b18 <get_seconds_from_ntp_server+0x360>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b31      	cmp	r3, #49	; 0x31
 8001844:	f200 82a4 	bhi.w	8001d90 <get_seconds_from_ntp_server+0x5d8>
 8001848:	a201      	add	r2, pc, #4	; (adr r2, 8001850 <get_seconds_from_ntp_server+0x98>)
 800184a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184e:	bf00      	nop
 8001850:	08001919 	.word	0x08001919
 8001854:	08001937 	.word	0x08001937
 8001858:	08001955 	.word	0x08001955
 800185c:	08001973 	.word	0x08001973
 8001860:	08001991 	.word	0x08001991
 8001864:	080019af 	.word	0x080019af
 8001868:	080019af 	.word	0x080019af
 800186c:	080019cd 	.word	0x080019cd
 8001870:	080019cd 	.word	0x080019cd
 8001874:	080019eb 	.word	0x080019eb
 8001878:	080019eb 	.word	0x080019eb
 800187c:	08001a09 	.word	0x08001a09
 8001880:	08001a09 	.word	0x08001a09
 8001884:	08001a09 	.word	0x08001a09
 8001888:	08001a27 	.word	0x08001a27
 800188c:	08001a45 	.word	0x08001a45
 8001890:	08001a45 	.word	0x08001a45
 8001894:	08001a63 	.word	0x08001a63
 8001898:	08001a81 	.word	0x08001a81
 800189c:	08001a9f 	.word	0x08001a9f
 80018a0:	08001abd 	.word	0x08001abd
 80018a4:	08001d91 	.word	0x08001d91
 80018a8:	08001d91 	.word	0x08001d91
 80018ac:	08001adb 	.word	0x08001adb
 80018b0:	08001adb 	.word	0x08001adb
 80018b4:	08001adb 	.word	0x08001adb
 80018b8:	08001af9 	.word	0x08001af9
 80018bc:	08001af9 	.word	0x08001af9
 80018c0:	08001b49 	.word	0x08001b49
 80018c4:	08001b49 	.word	0x08001b49
 80018c8:	08001b69 	.word	0x08001b69
 80018cc:	08001b89 	.word	0x08001b89
 80018d0:	08001ba7 	.word	0x08001ba7
 80018d4:	08001bc3 	.word	0x08001bc3
 80018d8:	08001bdf 	.word	0x08001bdf
 80018dc:	08001bfb 	.word	0x08001bfb
 80018e0:	08001c17 	.word	0x08001c17
 80018e4:	08001c33 	.word	0x08001c33
 80018e8:	08001c4f 	.word	0x08001c4f
 80018ec:	08001c6b 	.word	0x08001c6b
 80018f0:	08001c85 	.word	0x08001c85
 80018f4:	08001ca1 	.word	0x08001ca1
 80018f8:	08001cbd 	.word	0x08001cbd
 80018fc:	08001cd9 	.word	0x08001cd9
 8001900:	08001cf5 	.word	0x08001cf5
 8001904:	08001d11 	.word	0x08001d11
 8001908:	08001d2d 	.word	0x08001d2d
 800190c:	08001d49 	.word	0x08001d49
 8001910:	08001d65 	.word	0x08001d65
 8001914:	08001d7b 	.word	0x08001d7b
	{
	case 0:
		seconds -=  12*3600;
 8001918:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800191c:	497f      	ldr	r1, [pc, #508]	; (8001b1c <get_seconds_from_ntp_server+0x364>)
 800191e:	1851      	adds	r1, r2, r1
 8001920:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8001924:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001928:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800192c:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8001930:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001934:	e22c      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 1:
		seconds -=  11*3600;
 8001936:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800193a:	4979      	ldr	r1, [pc, #484]	; (8001b20 <get_seconds_from_ntp_server+0x368>)
 800193c:	1851      	adds	r1, r2, r1
 800193e:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001942:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001946:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800194a:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800194e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001952:	e21d      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 2:
		seconds -=  10*3600;
 8001954:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001958:	4972      	ldr	r1, [pc, #456]	; (8001b24 <get_seconds_from_ntp_server+0x36c>)
 800195a:	1851      	adds	r1, r2, r1
 800195c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8001960:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001964:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001968:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800196c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001970:	e20e      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 3:
		seconds -=  (9*3600+30*60);
 8001972:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001976:	496c      	ldr	r1, [pc, #432]	; (8001b28 <get_seconds_from_ntp_server+0x370>)
 8001978:	1851      	adds	r1, r2, r1
 800197a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800197e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001982:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001986:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800198a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800198e:	e1ff      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 4:
		seconds -=  9*3600;
 8001990:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001994:	4965      	ldr	r1, [pc, #404]	; (8001b2c <get_seconds_from_ntp_server+0x374>)
 8001996:	1851      	adds	r1, r2, r1
 8001998:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800199c:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80019a4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80019a8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80019ac:	e1f0      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 5:
	case 6:
		seconds -=  8*3600;
 80019ae:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80019b2:	f5b2 41e1 	subs.w	r1, r2, #28800	; 0x7080
 80019b6:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80019ba:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80019c2:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80019c6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80019ca:	e1e1      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 7:
	case 8:
		seconds -=  7*3600;
 80019cc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80019d0:	4957      	ldr	r1, [pc, #348]	; (8001b30 <get_seconds_from_ntp_server+0x378>)
 80019d2:	1851      	adds	r1, r2, r1
 80019d4:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80019d8:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80019e0:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80019e4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80019e8:	e1d2      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 9:
	case 10:
		seconds -=  6*3600;
 80019ea:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80019ee:	4951      	ldr	r1, [pc, #324]	; (8001b34 <get_seconds_from_ntp_server+0x37c>)
 80019f0:	1851      	adds	r1, r2, r1
 80019f2:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80019f6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80019fe:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8001a02:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001a06:	e1c3      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 11:
	case 12:
	case 13:
		seconds -= 5*3600;
 8001a08:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001a0c:	494a      	ldr	r1, [pc, #296]	; (8001b38 <get_seconds_from_ntp_server+0x380>)
 8001a0e:	1851      	adds	r1, r2, r1
 8001a10:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8001a14:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001a18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001a1c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8001a20:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001a24:	e1b4      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 14:
		seconds -=  (4*3600+30*60);
 8001a26:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001a2a:	4944      	ldr	r1, [pc, #272]	; (8001b3c <get_seconds_from_ntp_server+0x384>)
 8001a2c:	1851      	adds	r1, r2, r1
 8001a2e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001a32:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a3a:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8001a3e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001a42:	e1a5      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 15:
	case 16:
		seconds -=  4*3600;
 8001a44:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001a48:	f5b2 5161 	subs.w	r1, r2, #14400	; 0x3840
 8001a4c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001a50:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001a54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a58:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8001a5c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001a60:	e196      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 17:
		seconds -=  (3*3600+30*60);
 8001a62:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001a66:	4936      	ldr	r1, [pc, #216]	; (8001b40 <get_seconds_from_ntp_server+0x388>)
 8001a68:	1851      	adds	r1, r2, r1
 8001a6a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001a6e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a76:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001a7a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001a7e:	e187      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 18:
		seconds -=  3*3600;
 8001a80:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001a84:	492f      	ldr	r1, [pc, #188]	; (8001b44 <get_seconds_from_ntp_server+0x38c>)
 8001a86:	1851      	adds	r1, r2, r1
 8001a88:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001a8c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a94:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8001a98:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001a9c:	e178      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 19:
		seconds -=  2*3600;
 8001a9e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001aa2:	f5b2 51e1 	subs.w	r1, r2, #7200	; 0x1c20
 8001aa6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001aaa:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001aae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ab2:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8001ab6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001aba:	e169      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 20:
		seconds -=  1*3600;
 8001abc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001ac0:	f5b2 6161 	subs.w	r1, r2, #3600	; 0xe10
 8001ac4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8001ac8:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001ad0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8001ad4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001ad8:	e15a      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 22:
		break;
	case 23:
	case 24:
	case 25:
		seconds +=  1*3600;
 8001ada:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001ade:	f512 6161 	adds.w	r1, r2, #3600	; 0xe10
 8001ae2:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001ae6:	f143 0300 	adc.w	r3, r3, #0
 8001aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001aee:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8001af2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001af6:	e14b      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 26:
	case 27:
		seconds +=  2*3600;
 8001af8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001afc:	f512 51e1 	adds.w	r1, r2, #7200	; 0x1c20
 8001b00:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001b04:	f143 0300 	adc.w	r3, r3, #0
 8001b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b0c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8001b10:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001b14:	e13c      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
 8001b16:	bf00      	nop
 8001b18:	200002c5 	.word	0x200002c5
 8001b1c:	ffff5740 	.word	0xffff5740
 8001b20:	ffff6550 	.word	0xffff6550
 8001b24:	ffff7360 	.word	0xffff7360
 8001b28:	ffff7a68 	.word	0xffff7a68
 8001b2c:	ffff8170 	.word	0xffff8170
 8001b30:	ffff9d90 	.word	0xffff9d90
 8001b34:	ffffaba0 	.word	0xffffaba0
 8001b38:	ffffb9b0 	.word	0xffffb9b0
 8001b3c:	ffffc0b8 	.word	0xffffc0b8
 8001b40:	ffffcec8 	.word	0xffffcec8
 8001b44:	ffffd5d0 	.word	0xffffd5d0
	case 28:
	case 29:
		seconds +=  3*3600;
 8001b48:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001b4c:	f642 2130 	movw	r1, #10800	; 0x2a30
 8001b50:	1851      	adds	r1, r2, r1
 8001b52:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8001b56:	f143 0300 	adc.w	r3, r3, #0
 8001b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b5e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001b62:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001b66:	e113      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 30:
		seconds +=  (3*3600+30*60);
 8001b68:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001b6c:	f243 1138 	movw	r1, #12600	; 0x3138
 8001b70:	1851      	adds	r1, r2, r1
 8001b72:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001b76:	f143 0300 	adc.w	r3, r3, #0
 8001b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b7e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8001b82:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001b86:	e103      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 31:
		seconds +=  4*3600;
 8001b88:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001b8c:	f512 5161 	adds.w	r1, r2, #14400	; 0x3840
 8001b90:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001b94:	f143 0300 	adc.w	r3, r3, #0
 8001b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b9c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8001ba0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001ba4:	e0f4      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 32:
		seconds +=  (4*3600+30*60);
 8001ba6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001baa:	f643 7148 	movw	r1, #16200	; 0x3f48
 8001bae:	1851      	adds	r1, r2, r1
 8001bb0:	67b9      	str	r1, [r7, #120]	; 0x78
 8001bb2:	f143 0300 	adc.w	r3, r3, #0
 8001bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bb8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8001bbc:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001bc0:	e0e6      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 33:
		seconds +=  5*3600;
 8001bc2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001bc6:	f244 6150 	movw	r1, #18000	; 0x4650
 8001bca:	1851      	adds	r1, r2, r1
 8001bcc:	6739      	str	r1, [r7, #112]	; 0x70
 8001bce:	f143 0300 	adc.w	r3, r3, #0
 8001bd2:	677b      	str	r3, [r7, #116]	; 0x74
 8001bd4:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8001bd8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001bdc:	e0d8      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 34:
		seconds +=  (5*3600+30*60);
 8001bde:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001be2:	f644 5158 	movw	r1, #19800	; 0x4d58
 8001be6:	1851      	adds	r1, r2, r1
 8001be8:	66b9      	str	r1, [r7, #104]	; 0x68
 8001bea:	f143 0300 	adc.w	r3, r3, #0
 8001bee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bf0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8001bf4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001bf8:	e0ca      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 35:
		seconds +=  (5*3600+45*60);
 8001bfa:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001bfe:	f245 01dc 	movw	r1, #20700	; 0x50dc
 8001c02:	1851      	adds	r1, r2, r1
 8001c04:	6639      	str	r1, [r7, #96]	; 0x60
 8001c06:	f143 0300 	adc.w	r3, r3, #0
 8001c0a:	667b      	str	r3, [r7, #100]	; 0x64
 8001c0c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001c10:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001c14:	e0bc      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 36:
		seconds +=  6*3600;
 8001c16:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001c1a:	f245 4160 	movw	r1, #21600	; 0x5460
 8001c1e:	1851      	adds	r1, r2, r1
 8001c20:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c22:	f143 0300 	adc.w	r3, r3, #0
 8001c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c28:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001c2c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001c30:	e0ae      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 37:
		seconds +=  (6*3600+30*60);
 8001c32:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001c36:	f645 3168 	movw	r1, #23400	; 0x5b68
 8001c3a:	1851      	adds	r1, r2, r1
 8001c3c:	6539      	str	r1, [r7, #80]	; 0x50
 8001c3e:	f143 0300 	adc.w	r3, r3, #0
 8001c42:	657b      	str	r3, [r7, #84]	; 0x54
 8001c44:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001c48:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001c4c:	e0a0      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 38:
		seconds +=  7*3600;
 8001c4e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001c52:	f246 2170 	movw	r1, #25200	; 0x6270
 8001c56:	1851      	adds	r1, r2, r1
 8001c58:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c5a:	f143 0300 	adc.w	r3, r3, #0
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c60:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001c64:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001c68:	e092      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 39:
		seconds +=  8*3600;
 8001c6a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001c6e:	f512 41e1 	adds.w	r1, r2, #28800	; 0x7080
 8001c72:	6439      	str	r1, [r7, #64]	; 0x40
 8001c74:	f143 0300 	adc.w	r3, r3, #0
 8001c78:	647b      	str	r3, [r7, #68]	; 0x44
 8001c7a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001c7e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001c82:	e085      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 40:
		seconds +=  9*3600;
 8001c84:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001c88:	f647 6190 	movw	r1, #32400	; 0x7e90
 8001c8c:	1851      	adds	r1, r2, r1
 8001c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c90:	f143 0300 	adc.w	r3, r3, #0
 8001c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c96:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001c9a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001c9e:	e077      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 41:
		seconds +=  (9*3600+30*60);
 8001ca0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001ca4:	f248 5198 	movw	r1, #34200	; 0x8598
 8001ca8:	1851      	adds	r1, r2, r1
 8001caa:	6339      	str	r1, [r7, #48]	; 0x30
 8001cac:	f143 0300 	adc.w	r3, r3, #0
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001cb6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001cba:	e069      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 42:
		seconds +=  10*3600;
 8001cbc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001cc0:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8001cc4:	1851      	adds	r1, r2, r1
 8001cc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001cc8:	f143 0300 	adc.w	r3, r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cce:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001cd2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001cd6:	e05b      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 43:
		seconds +=  (10*3600+30*60);
 8001cd8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001cdc:	f249 31a8 	movw	r1, #37800	; 0x93a8
 8001ce0:	1851      	adds	r1, r2, r1
 8001ce2:	6239      	str	r1, [r7, #32]
 8001ce4:	f143 0300 	adc.w	r3, r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001cee:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001cf2:	e04d      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 44:
		seconds +=  11*3600;
 8001cf4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001cf8:	f649 21b0 	movw	r1, #39600	; 0x9ab0
 8001cfc:	1851      	adds	r1, r2, r1
 8001cfe:	61b9      	str	r1, [r7, #24]
 8001d00:	f143 0300 	adc.w	r3, r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001d0a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001d0e:	e03f      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 45:
		seconds +=  (11*3600+30*60);
 8001d10:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001d14:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
 8001d18:	1851      	adds	r1, r2, r1
 8001d1a:	6139      	str	r1, [r7, #16]
 8001d1c:	f143 0300 	adc.w	r3, r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d26:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001d2a:	e031      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 46:
		seconds +=  12*3600;
 8001d2c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001d30:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 8001d34:	1851      	adds	r1, r2, r1
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	f143 0300 	adc.w	r3, r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d42:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001d46:	e023      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 47:
		seconds +=  (12*3600+45*60);
 8001d48:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001d4c:	f24b 314c 	movw	r1, #45900	; 0xb34c
 8001d50:	1851      	adds	r1, r2, r1
 8001d52:	6039      	str	r1, [r7, #0]
 8001d54:	f143 0300 	adc.w	r3, r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d5e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8001d62:	e015      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 48:
		seconds +=  13*3600;
 8001d64:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001d68:	f24b 61d0 	movw	r1, #46800	; 0xb6d0
 8001d6c:	eb12 0a01 	adds.w	sl, r2, r1
 8001d70:	f143 0b00 	adc.w	fp, r3, #0
 8001d74:	e9c7 ab4e 	strd	sl, fp, [r7, #312]	; 0x138
		break;
 8001d78:	e00a      	b.n	8001d90 <get_seconds_from_ntp_server+0x5d8>
	case 49:
		seconds +=  14*3600;
 8001d7a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001d7e:	f24c 41e0 	movw	r1, #50400	; 0xc4e0
 8001d82:	eb12 0801 	adds.w	r8, r2, r1
 8001d86:	f143 0900 	adc.w	r9, r3, #0
 8001d8a:	e9c7 894e 	strd	r8, r9, [r7, #312]	; 0x138
		break;
 8001d8e:	bf00      	nop

	}

	//calculation for date
	return seconds;
 8001d90:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
}
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001da2:	4770      	bx	lr

08001da4 <SNTP_init>:

void SNTP_init(uint8_t s, uint8_t *ntp_server, uint8_t tz, uint8_t *buf)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	4603      	mov	r3, r0
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	4613      	mov	r3, r2
 8001db4:	73bb      	strb	r3, [r7, #14]
	NTP_SOCKET = s;
 8001db6:	4a33      	ldr	r2, [pc, #204]	; (8001e84 <SNTP_init+0xe0>)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	7013      	strb	r3, [r2, #0]

	NTPformat.dstaddr[0] = ntp_server[0];
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <SNTP_init+0xe4>)
 8001dc2:	701a      	strb	r2, [r3, #0]
	NTPformat.dstaddr[1] = ntp_server[1];
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	785a      	ldrb	r2, [r3, #1]
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <SNTP_init+0xe4>)
 8001dca:	705a      	strb	r2, [r3, #1]
	NTPformat.dstaddr[2] = ntp_server[2];
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	789a      	ldrb	r2, [r3, #2]
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <SNTP_init+0xe4>)
 8001dd2:	709a      	strb	r2, [r3, #2]
	NTPformat.dstaddr[3] = ntp_server[3];
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	78da      	ldrb	r2, [r3, #3]
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <SNTP_init+0xe4>)
 8001dda:	70da      	strb	r2, [r3, #3]

	time_zone = tz;
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <SNTP_init+0xe8>)
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	7013      	strb	r3, [r2, #0]

	data_buf = buf;
 8001de2:	4a2b      	ldr	r2, [pc, #172]	; (8001e90 <SNTP_init+0xec>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6013      	str	r3, [r2, #0]

	uint8_t Flag;
	NTPformat.leap = 0;           /* leap indicator */
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <SNTP_init+0xe4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	715a      	strb	r2, [r3, #5]
	NTPformat.version = 4;        /* version number */
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <SNTP_init+0xe4>)
 8001df0:	2204      	movs	r2, #4
 8001df2:	711a      	strb	r2, [r3, #4]
	NTPformat.mode = 3;           /* mode */
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <SNTP_init+0xe4>)
 8001df6:	2203      	movs	r2, #3
 8001df8:	719a      	strb	r2, [r3, #6]
	NTPformat.stratum = 0;        /* stratum */
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <SNTP_init+0xe4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	71da      	strb	r2, [r3, #7]
	NTPformat.poll = 0;           /* poll interval */
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <SNTP_init+0xe4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	721a      	strb	r2, [r3, #8]
	NTPformat.precision = 0;      /* precision */
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <SNTP_init+0xe4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	725a      	strb	r2, [r3, #9]
	NTPformat.rootdelay = 0;      /* root delay */
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <SNTP_init+0xe4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
	NTPformat.rootdisp = 0;       /* root dispersion */
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <SNTP_init+0xe4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
	NTPformat.refid = 0;          /* reference ID */
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <SNTP_init+0xe4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	751a      	strb	r2, [r3, #20]
	NTPformat.reftime = 0;        /* reference time */
 8001e1e:	491a      	ldr	r1, [pc, #104]	; (8001e88 <SNTP_init+0xe4>)
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9c1 2306 	strd	r2, r3, [r1, #24]
	NTPformat.org = 0;            /* origin timestamp */
 8001e2c:	4916      	ldr	r1, [pc, #88]	; (8001e88 <SNTP_init+0xe4>)
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9c1 2308 	strd	r2, r3, [r1, #32]
	NTPformat.rec = 0;            /* receive timestamp */
 8001e3a:	4913      	ldr	r1, [pc, #76]	; (8001e88 <SNTP_init+0xe4>)
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	NTPformat.xmt = 1;            /* transmit timestamp */
 8001e48:	490f      	ldr	r1, [pc, #60]	; (8001e88 <SNTP_init+0xe4>)
 8001e4a:	f04f 0201 	mov.w	r2, #1
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	Flag = (NTPformat.leap<<6)+(NTPformat.version<<3)+NTPformat.mode; //one byte Flag
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <SNTP_init+0xe4>)
 8001e58:	795b      	ldrb	r3, [r3, #5]
 8001e5a:	019b      	lsls	r3, r3, #6
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <SNTP_init+0xe4>)
 8001e60:	791b      	ldrb	r3, [r3, #4]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <SNTP_init+0xe4>)
 8001e6c:	799b      	ldrb	r3, [r3, #6]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	75fb      	strb	r3, [r7, #23]
 8001e74:	7dfa      	ldrb	r2, [r7, #23]
	memcpy(ntpmessage,(void const*)(&Flag),1);
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <SNTP_init+0xf0>)
 8001e78:	701a      	strb	r2, [r3, #0]
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	200002c4 	.word	0x200002c4
 8001e88:	20000258 	.word	0x20000258
 8001e8c:	200002c5 	.word	0x200002c5
 8001e90:	200002c0 	.word	0x200002c0
 8001e94:	20000290 	.word	0x20000290

08001e98 <SNTP_run>:

tstamp SNTP_run(datetime *time)
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b08d      	sub	sp, #52	; 0x34
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	6078      	str	r0, [r7, #4]
	uint16_t RSR_len;
	uint32_t destip = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
	uint16_t destport;
	uint16_t startindex = 40; //last 8-byte of data_buf[size is 48 byte] is xmt, so the startindex should be 40
 8001ea4:	2328      	movs	r3, #40	; 0x28
 8001ea6:	84bb      	strh	r3, [r7, #36]	; 0x24

	switch(getSn_SR(NTP_SOCKET))
 8001ea8:	4b58      	ldr	r3, [pc, #352]	; (800200c <SNTP_run+0x174>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	3301      	adds	r3, #1
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f001 f808 	bl	8002ecc <WIZCHIP_READ>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8092 	beq.w	8001fe8 <SNTP_run+0x150>
 8001ec4:	2b22      	cmp	r3, #34	; 0x22
 8001ec6:	f040 8098 	bne.w	8001ffa <SNTP_run+0x162>
	{
	case SOCK_UDP:
		if ((RSR_len = getSn_RX_RSR(NTP_SOCKET)) > 0)
 8001eca:	4b50      	ldr	r3, [pc, #320]	; (800200c <SNTP_run+0x174>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f001 f9a1 	bl	8003216 <getSn_RX_RSR>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ed8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d041      	beq.n	8001f62 <SNTP_run+0xca>
		{
			if (RSR_len > MAX_SNTP_BUF_SIZE) RSR_len = MAX_SNTP_BUF_SIZE;	// if Rx data size is lager than TX_RX_MAX_BUF_SIZE
 8001ede:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ee0:	2b38      	cmp	r3, #56	; 0x38
 8001ee2:	d901      	bls.n	8001ee8 <SNTP_run+0x50>
 8001ee4:	2338      	movs	r3, #56	; 0x38
 8001ee6:	84fb      	strh	r3, [r7, #38]	; 0x26
			recvfrom(NTP_SOCKET, data_buf, RSR_len, (uint8_t *)&destip, &destport);
 8001ee8:	4b48      	ldr	r3, [pc, #288]	; (800200c <SNTP_run+0x174>)
 8001eea:	7818      	ldrb	r0, [r3, #0]
 8001eec:	4b48      	ldr	r3, [pc, #288]	; (8002010 <SNTP_run+0x178>)
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	f107 0414 	add.w	r4, r7, #20
 8001ef4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001ef6:	f107 0312 	add.w	r3, r7, #18
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	4623      	mov	r3, r4
 8001efe:	f000 fdf7 	bl	8002af0 <recvfrom>
			datetime Nowdatetime;
			tstamp SEC = get_seconds_from_ntp_server(data_buf,startindex);
 8001f02:	4b43      	ldr	r3, [pc, #268]	; (8002010 <SNTP_run+0x178>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fc54 	bl	80017b8 <get_seconds_from_ntp_server>
 8001f10:	e9c7 0106 	strd	r0, r1, [r7, #24]
			calcdatetime(SEC , &Nowdatetime);
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	461a      	mov	r2, r3
 8001f1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f1e:	f000 f881 	bl	8002024 <calcdatetime>
			time->yy = Nowdatetime.yy;
 8001f22:	893a      	ldrh	r2, [r7, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	801a      	strh	r2, [r3, #0]
			time->mo = Nowdatetime.mo;
 8001f28:	7aba      	ldrb	r2, [r7, #10]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	709a      	strb	r2, [r3, #2]
			time->dd = Nowdatetime.dd;
 8001f2e:	7afa      	ldrb	r2, [r7, #11]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	70da      	strb	r2, [r3, #3]
			time->hh = Nowdatetime.hh;
 8001f34:	7b3a      	ldrb	r2, [r7, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	711a      	strb	r2, [r3, #4]
			time->mm = Nowdatetime.mm;
 8001f3a:	7b7a      	ldrb	r2, [r7, #13]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	715a      	strb	r2, [r3, #5]
			time->ss = Nowdatetime.ss;
 8001f40:	7bba      	ldrb	r2, [r7, #14]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	719a      	strb	r2, [r3, #6]
			time->wd = Nowdatetime.wd;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	71da      	strb	r2, [r3, #7]
			//printf("\r\ntp: %d %d/%02d/%02d %02d:%02d:%02d\r\n",Nowdatetime.wd,Nowdatetime.yy,Nowdatetime.mo,Nowdatetime.dd,Nowdatetime.hh,Nowdatetime.mm,Nowdatetime.ss);
			ntp_retry_cnt=0;
 8001f4c:	4b31      	ldr	r3, [pc, #196]	; (8002014 <SNTP_run+0x17c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 8001f52:	4b2e      	ldr	r3, [pc, #184]	; (800200c <SNTP_run+0x174>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fc26 	bl	80027a8 <close>

			return SEC;
 8001f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f60:	e04f      	b.n	8002002 <SNTP_run+0x16a>
		}

		if(ntp_retry_cnt<0xFFFF)
 8001f62:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <SNTP_run+0x17c>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d033      	beq.n	8001fd6 <SNTP_run+0x13e>
		{
			if(ntp_retry_cnt==0)//first send request, no need to wait
 8001f6e:	4b29      	ldr	r3, [pc, #164]	; (8002014 <SNTP_run+0x17c>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10f      	bne.n	8001f96 <SNTP_run+0xfe>
			{
				sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 8001f76:	4b25      	ldr	r3, [pc, #148]	; (800200c <SNTP_run+0x174>)
 8001f78:	7818      	ldrb	r0, [r3, #0]
 8001f7a:	237b      	movs	r3, #123	; 0x7b
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	4b26      	ldr	r3, [pc, #152]	; (8002018 <SNTP_run+0x180>)
 8001f80:	2230      	movs	r2, #48	; 0x30
 8001f82:	4926      	ldr	r1, [pc, #152]	; (800201c <SNTP_run+0x184>)
 8001f84:	f000 fc7e 	bl	8002884 <sendto>
				ntp_retry_cnt++;
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <SNTP_run+0x17c>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	4b20      	ldr	r3, [pc, #128]	; (8002014 <SNTP_run+0x17c>)
 8001f92:	801a      	strh	r2, [r3, #0]
#ifdef _SNTP_DEBUG_
			printf("ntp retry failed!\r\n");
#endif
			close(NTP_SOCKET);
		}
		break;
 8001f94:	e030      	b.n	8001ff8 <SNTP_run+0x160>
				if((ntp_retry_cnt % 0xFFF) == 0) //wait time
 8001f96:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <SNTP_run+0x17c>)
 8001f98:	881a      	ldrh	r2, [r3, #0]
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <SNTP_run+0x188>)
 8001f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001fa0:	1ad1      	subs	r1, r2, r3
 8001fa2:	0849      	lsrs	r1, r1, #1
 8001fa4:	440b      	add	r3, r1
 8001fa6:	0ad9      	lsrs	r1, r3, #11
 8001fa8:	460b      	mov	r3, r1
 8001faa:	031b      	lsls	r3, r3, #12
 8001fac:	1a5b      	subs	r3, r3, r1
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d120      	bne.n	8001ff8 <SNTP_run+0x160>
					sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <SNTP_run+0x174>)
 8001fb8:	7818      	ldrb	r0, [r3, #0]
 8001fba:	237b      	movs	r3, #123	; 0x7b
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <SNTP_run+0x180>)
 8001fc0:	2230      	movs	r2, #48	; 0x30
 8001fc2:	4916      	ldr	r1, [pc, #88]	; (800201c <SNTP_run+0x184>)
 8001fc4:	f000 fc5e 	bl	8002884 <sendto>
					ntp_retry_cnt++;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <SNTP_run+0x17c>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <SNTP_run+0x17c>)
 8001fd2:	801a      	strh	r2, [r3, #0]
		break;
 8001fd4:	e010      	b.n	8001ff8 <SNTP_run+0x160>
			ntp_retry_cnt=0;
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <SNTP_run+0x17c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <SNTP_run+0x174>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fbe1 	bl	80027a8 <close>
		break;
 8001fe6:	e007      	b.n	8001ff8 <SNTP_run+0x160>
	case SOCK_CLOSED:
		socket(NTP_SOCKET,Sn_MR_UDP,ntp_port,0);
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <SNTP_run+0x174>)
 8001fea:	7818      	ldrb	r0, [r3, #0]
 8001fec:	2300      	movs	r3, #0
 8001fee:	227b      	movs	r2, #123	; 0x7b
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	f000 fac5 	bl	8002580 <socket>
		break;
 8001ff6:	e000      	b.n	8001ffa <SNTP_run+0x162>
		break;
 8001ff8:	bf00      	nop
	}
	// Return value
	// 0 - failed / 1 - success
	return 0;
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
}
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	372c      	adds	r7, #44	; 0x2c
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}
 800200c:	200002c4 	.word	0x200002c4
 8002010:	200002c0 	.word	0x200002c0
 8002014:	200002c6 	.word	0x200002c6
 8002018:	20000258 	.word	0x20000258
 800201c:	20000290 	.word	0x20000290
 8002020:	00100101 	.word	0x00100101

08002024 <calcdatetime>:

void calcdatetime(tstamp seconds,datetime *Nowdatetime)
{
 8002024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002028:	b0b2      	sub	sp, #200	; 0xc8
 800202a:	af00      	add	r7, sp, #0
 800202c:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
 8002030:	677a      	str	r2, [r7, #116]	; 0x74
	uint8_t yf=0;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	tstamp n=0,d=0,total_d=0,rz=0;
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	uint16_t y=0,r=0,yr=0;
 8002068:	2300      	movs	r3, #0
 800206a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800206e:	2300      	movs	r3, #0
 8002070:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002074:	2300      	movs	r3, #0
 8002076:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	signed long long yd=0;
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	n = seconds;
 8002086:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800208a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	total_d = seconds/(SECS_PERDAY);
 800208e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002092:	4aa0      	ldr	r2, [pc, #640]	; (8002314 <calcdatetime+0x2f0>)
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	f7fe fd66 	bl	8000b68 <__aeabi_uldivmod>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	d=0;
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	Nowdatetime->wd=(uint8_t)((total_d - monday_offset)% 7);
 80020b0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80020b4:	4998      	ldr	r1, [pc, #608]	; (8002318 <calcdatetime+0x2f4>)
 80020b6:	1854      	adds	r4, r2, r1
 80020b8:	f143 35ff 	adc.w	r5, r3, #4294967295
 80020bc:	f04f 0207 	mov.w	r2, #7
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	4620      	mov	r0, r4
 80020c6:	4629      	mov	r1, r5
 80020c8:	f7fe fd4e 	bl	8000b68 <__aeabi_uldivmod>
 80020cc:	b2d3      	uxtb	r3, r2
 80020ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020d0:	71d3      	strb	r3, [r2, #7]
	uint32_t p_year_total_sec=SECS_PERDAY*365;
 80020d2:	4b92      	ldr	r3, [pc, #584]	; (800231c <calcdatetime+0x2f8>)
 80020d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint32_t r_year_total_sec=SECS_PERDAY*366;
 80020d8:	4b91      	ldr	r3, [pc, #580]	; (8002320 <calcdatetime+0x2fc>)
 80020da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	while(n>=p_year_total_sec)
 80020de:	e070      	b.n	80021c2 <calcdatetime+0x19e>
	{
		if((EPOCH+r)%400==0 || ((EPOCH+r)%100!=0 && (EPOCH+r)%4==0))
 80020e0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80020e4:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 80020e8:	4b8e      	ldr	r3, [pc, #568]	; (8002324 <calcdatetime+0x300>)
 80020ea:	fb83 2301 	smull	r2, r3, r3, r1
 80020ee:	11da      	asrs	r2, r3, #7
 80020f0:	17cb      	asrs	r3, r1, #31
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	1acb      	subs	r3, r1, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d017      	beq.n	8002132 <calcdatetime+0x10e>
 8002102:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002106:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 800210a:	4b86      	ldr	r3, [pc, #536]	; (8002324 <calcdatetime+0x300>)
 800210c:	fb83 2301 	smull	r2, r3, r3, r1
 8002110:	115a      	asrs	r2, r3, #5
 8002112:	17cb      	asrs	r3, r1, #31
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2264      	movs	r2, #100	; 0x64
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	1acb      	subs	r3, r1, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d025      	beq.n	800216e <calcdatetime+0x14a>
 8002122:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002126:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d11d      	bne.n	800216e <calcdatetime+0x14a>
		{
			n = n -(r_year_total_sec);
 8002132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002136:	2200      	movs	r2, #0
 8002138:	469a      	mov	sl, r3
 800213a:	4693      	mov	fp, r2
 800213c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002140:	ebb2 010a 	subs.w	r1, r2, sl
 8002144:	65b9      	str	r1, [r7, #88]	; 0x58
 8002146:	eb63 030b 	sbc.w	r3, r3, fp
 800214a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800214c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002150:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			d = d + 366;
 8002154:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002158:	f512 71b7 	adds.w	r1, r2, #366	; 0x16e
 800215c:	6539      	str	r1, [r7, #80]	; 0x50
 800215e:	f143 0300 	adc.w	r3, r3, #0
 8002162:	657b      	str	r3, [r7, #84]	; 0x54
 8002164:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002168:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 800216c:	e01f      	b.n	80021ae <calcdatetime+0x18a>
		}
		else
		{
			n = n - (p_year_total_sec);
 800216e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002172:	2200      	movs	r2, #0
 8002174:	66bb      	str	r3, [r7, #104]	; 0x68
 8002176:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002178:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800217c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002180:	4604      	mov	r4, r0
 8002182:	1b14      	subs	r4, r2, r4
 8002184:	64bc      	str	r4, [r7, #72]	; 0x48
 8002186:	eb63 0301 	sbc.w	r3, r3, r1
 800218a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800218c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002190:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			d = d + 365;
 8002194:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002198:	f240 116d 	movw	r1, #365	; 0x16d
 800219c:	1851      	adds	r1, r2, r1
 800219e:	6439      	str	r1, [r7, #64]	; 0x40
 80021a0:	f143 0300 	adc.w	r3, r3, #0
 80021a4:	647b      	str	r3, [r7, #68]	; 0x44
 80021a6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80021aa:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		}
		r+=1;
 80021ae:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80021b2:	3301      	adds	r3, #1
 80021b4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
		y+=1;
 80021b8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80021bc:	3301      	adds	r3, #1
 80021be:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	while(n>=p_year_total_sec)
 80021c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021c6:	2200      	movs	r2, #0
 80021c8:	4698      	mov	r8, r3
 80021ca:	4691      	mov	r9, r2
 80021cc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80021d0:	4542      	cmp	r2, r8
 80021d2:	eb73 0309 	sbcs.w	r3, r3, r9
 80021d6:	d283      	bcs.n	80020e0 <calcdatetime+0xbc>

	}

	y += EPOCH;
 80021d8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80021dc:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80021e0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

	Nowdatetime->yy = y;
 80021e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021e6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80021ea:	8013      	strh	r3, [r2, #0]

	yd=0;
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	yd = total_d - d;
 80021f8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80021fc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002200:	1a84      	subs	r4, r0, r2
 8002202:	663c      	str	r4, [r7, #96]	; 0x60
 8002204:	eb61 0303 	sbc.w	r3, r1, r3
 8002208:	667b      	str	r3, [r7, #100]	; 0x64
 800220a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800220e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98

	yf=1;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	while(yd>=28)
 8002218:	e0d3      	b.n	80023c2 <calcdatetime+0x39e>
	{

		if(yf==1 || yf==3 || yf==5 || yf==7 || yf==8 || yf==10 || yf==12)
 800221a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800221e:	2b01      	cmp	r3, #1
 8002220:	d017      	beq.n	8002252 <calcdatetime+0x22e>
 8002222:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002226:	2b03      	cmp	r3, #3
 8002228:	d013      	beq.n	8002252 <calcdatetime+0x22e>
 800222a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800222e:	2b05      	cmp	r3, #5
 8002230:	d00f      	beq.n	8002252 <calcdatetime+0x22e>
 8002232:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002236:	2b07      	cmp	r3, #7
 8002238:	d00b      	beq.n	8002252 <calcdatetime+0x22e>
 800223a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800223e:	2b08      	cmp	r3, #8
 8002240:	d007      	beq.n	8002252 <calcdatetime+0x22e>
 8002242:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002246:	2b0a      	cmp	r3, #10
 8002248:	d003      	beq.n	8002252 <calcdatetime+0x22e>
 800224a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d11c      	bne.n	800228c <calcdatetime+0x268>
		{
			yd -= 31;
 8002252:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002256:	f1b2 011f 	subs.w	r1, r2, #31
 800225a:	63b9      	str	r1, [r7, #56]	; 0x38
 800225c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002262:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002266:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			if(yd<0)break;
 800226a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800226e:	2b00      	cmp	r3, #0
 8002270:	f2c0 80af 	blt.w	80023d2 <calcdatetime+0x3ae>
			rz += 31;
 8002274:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002278:	f112 011f 	adds.w	r1, r2, #31
 800227c:	6339      	str	r1, [r7, #48]	; 0x30
 800227e:	f143 0300 	adc.w	r3, r3, #0
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
 8002284:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002288:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		}

		if (yf==2)
 800228c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002290:	2b02      	cmp	r3, #2
 8002292:	d165      	bne.n	8002360 <calcdatetime+0x33c>
		{
			if (y%400==0 || (y%100!=0 && y%4==0))
 8002294:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8002298:	4b22      	ldr	r3, [pc, #136]	; (8002324 <calcdatetime+0x300>)
 800229a:	fba3 2301 	umull	r2, r3, r3, r1
 800229e:	09da      	lsrs	r2, r3, #7
 80022a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	1acb      	subs	r3, r1, r3
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <calcdatetime+0x2b4>
 80022b0:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <calcdatetime+0x300>)
 80022b6:	fba3 2301 	umull	r2, r3, r3, r1
 80022ba:	095a      	lsrs	r2, r3, #5
 80022bc:	2364      	movs	r3, #100	; 0x64
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	1acb      	subs	r3, r1, r3
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02e      	beq.n	8002328 <calcdatetime+0x304>
 80022ca:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d127      	bne.n	8002328 <calcdatetime+0x304>
			{
				yd -= 29;
 80022d8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80022dc:	f1b2 011d 	subs.w	r1, r2, #29
 80022e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80022e2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80022ec:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				if(yd<0)break;
 80022f0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db6e      	blt.n	80023d6 <calcdatetime+0x3b2>
				rz += 29;
 80022f8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80022fc:	f112 011d 	adds.w	r1, r2, #29
 8002300:	6239      	str	r1, [r7, #32]
 8002302:	f143 0300 	adc.w	r3, r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800230c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8002310:	e026      	b.n	8002360 <calcdatetime+0x33c>
 8002312:	bf00      	nop
 8002314:	00015180 	.word	0x00015180
 8002318:	ffff7152 	.word	0xffff7152
 800231c:	01e13380 	.word	0x01e13380
 8002320:	01e28500 	.word	0x01e28500
 8002324:	51eb851f 	.word	0x51eb851f
			}
			else
			{
				yd -= 28;
 8002328:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800232c:	f1b2 011c 	subs.w	r1, r2, #28
 8002330:	61b9      	str	r1, [r7, #24]
 8002332:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800233c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				if(yd<0)break;
 8002340:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002344:	2b00      	cmp	r3, #0
 8002346:	db48      	blt.n	80023da <calcdatetime+0x3b6>
				rz += 28;
 8002348:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800234c:	f112 011c 	adds.w	r1, r2, #28
 8002350:	6139      	str	r1, [r7, #16]
 8002352:	f143 0300 	adc.w	r3, r3, #0
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800235c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			}
		}
		if(yf==4 || yf==6 || yf==9 || yf==11 )
 8002360:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00b      	beq.n	8002380 <calcdatetime+0x35c>
 8002368:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800236c:	2b06      	cmp	r3, #6
 800236e:	d007      	beq.n	8002380 <calcdatetime+0x35c>
 8002370:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002374:	2b09      	cmp	r3, #9
 8002376:	d003      	beq.n	8002380 <calcdatetime+0x35c>
 8002378:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800237c:	2b0b      	cmp	r3, #11
 800237e:	d11b      	bne.n	80023b8 <calcdatetime+0x394>
		{
			yd -= 30;
 8002380:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002384:	f1b2 011e 	subs.w	r1, r2, #30
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002394:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			if(yd<0)break;
 8002398:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800239c:	2b00      	cmp	r3, #0
 800239e:	db1e      	blt.n	80023de <calcdatetime+0x3ba>
			rz += 30;
 80023a0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80023a4:	f112 011e 	adds.w	r1, r2, #30
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	f143 0300 	adc.w	r3, r3, #0
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80023b4:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		}
		yf += 1;
 80023b8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80023bc:	3301      	adds	r3, #1
 80023be:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	while(yd>=28)
 80023c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80023c6:	2a1c      	cmp	r2, #28
 80023c8:	f173 0300 	sbcs.w	r3, r3, #0
 80023cc:	f6bf af25 	bge.w	800221a <calcdatetime+0x1f6>
 80023d0:	e006      	b.n	80023e0 <calcdatetime+0x3bc>
			if(yd<0)break;
 80023d2:	bf00      	nop
 80023d4:	e004      	b.n	80023e0 <calcdatetime+0x3bc>
				if(yd<0)break;
 80023d6:	bf00      	nop
 80023d8:	e002      	b.n	80023e0 <calcdatetime+0x3bc>
				if(yd<0)break;
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <calcdatetime+0x3bc>
			if(yd<0)break;
 80023de:	bf00      	nop

	}
	Nowdatetime->mo=yf;
 80023e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e2:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 80023e6:	709a      	strb	r2, [r3, #2]
	yr = total_d-d-rz;
 80023e8:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80023ec:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

	yr += 1;
 80023fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002402:	3301      	adds	r3, #1
 8002404:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

	Nowdatetime->dd=yr;
 8002408:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800240c:	b2da      	uxtb	r2, r3
 800240e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002410:	70da      	strb	r2, [r3, #3]

	//calculation for time
	seconds = seconds%SECS_PERDAY;
 8002412:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002416:	4a20      	ldr	r2, [pc, #128]	; (8002498 <calcdatetime+0x474>)
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	f7fe fba4 	bl	8000b68 <__aeabi_uldivmod>
 8002420:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	Nowdatetime->hh = seconds/3600;
 8002424:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002428:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	f7fe fb9a 	bl	8000b68 <__aeabi_uldivmod>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800243c:	711a      	strb	r2, [r3, #4]
	Nowdatetime->mm = (seconds%3600)/60;
 800243e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002442:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	f7fe fb8d 	bl	8000b68 <__aeabi_uldivmod>
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f04f 023c 	mov.w	r2, #60	; 0x3c
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f7fe fb85 	bl	8000b68 <__aeabi_uldivmod>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002466:	715a      	strb	r2, [r3, #5]
	Nowdatetime->ss = (seconds%3600)%60;
 8002468:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800246c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	f7fe fb78 	bl	8000b68 <__aeabi_uldivmod>
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f04f 023c 	mov.w	r2, #60	; 0x3c
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	f7fe fb70 	bl	8000b68 <__aeabi_uldivmod>
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248c:	719a      	strb	r2, [r3, #6]


}
 800248e:	bf00      	nop
 8002490:	37c8      	adds	r7, #200	; 0xc8
 8002492:	46bd      	mov	sp, r7
 8002494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002498:	00015180 	.word	0x00015180

0800249c <W5500_Select>:
#define RESET_PORT  GPIOB
*/

extern SPI_HandleTypeDef hspi1;

void W5500_Select(void) {
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_SELECT_GPIO_Port, SPI_SELECT_Pin, GPIO_PIN_RESET);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2110      	movs	r1, #16
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <W5500_Select+0x14>)
 80024a6:	f004 fb9d 	bl	8006be4 <HAL_GPIO_WritePin>
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40010800 	.word	0x40010800

080024b4 <W5500_Unselect>:

void W5500_Unselect(void) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_SELECT_GPIO_Port, SPI_SELECT_Pin, GPIO_PIN_SET);
 80024b8:	2201      	movs	r2, #1
 80024ba:	2110      	movs	r1, #16
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <W5500_Unselect+0x14>)
 80024be:	f004 fb91 	bl	8006be4 <HAL_GPIO_WritePin>
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40010800 	.word	0x40010800

080024cc <W5500_Restart>:

void W5500_Restart(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_RESET);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2108      	movs	r1, #8
 80024d4:	4807      	ldr	r0, [pc, #28]	; (80024f4 <W5500_Restart+0x28>)
 80024d6:	f004 fb85 	bl	8006be4 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // delay 1ms
 80024da:	2001      	movs	r0, #1
 80024dc:	f003 fdd0 	bl	8006080 <HAL_Delay>
    HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 80024e0:	2201      	movs	r2, #1
 80024e2:	2108      	movs	r1, #8
 80024e4:	4803      	ldr	r0, [pc, #12]	; (80024f4 <W5500_Restart+0x28>)
 80024e6:	f004 fb7d 	bl	8006be4 <HAL_GPIO_WritePin>
    HAL_Delay(100);  // delay 100ms
 80024ea:	2064      	movs	r0, #100	; 0x64
 80024ec:	f003 fdc8 	bl	8006080 <HAL_Delay>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40010800 	.word	0x40010800

080024f8 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8002504:	887a      	ldrh	r2, [r7, #2]
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4803      	ldr	r0, [pc, #12]	; (800251c <W5500_ReadBuff+0x24>)
 800250e:	f006 fa42 	bl	8008996 <HAL_SPI_Receive>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000370 	.word	0x20000370

08002520 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 800252c:	887a      	ldrh	r2, [r7, #2]
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4803      	ldr	r0, [pc, #12]	; (8002544 <W5500_WriteBuff+0x24>)
 8002536:	f006 f8eb 	bl	8008710 <HAL_SPI_Transmit>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000370 	.word	0x20000370

08002548 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 800254e:	1dfb      	adds	r3, r7, #7
 8002550:	2101      	movs	r1, #1
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ffd0 	bl	80024f8 <W5500_ReadBuff>
    return byte;
 8002558:	79fb      	ldrb	r3, [r7, #7]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 800256c:	1dfb      	adds	r3, r7, #7
 800256e:	2101      	movs	r1, #1
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ffd5 	bl	8002520 <W5500_WriteBuff>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	4604      	mov	r4, r0
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4623      	mov	r3, r4
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	4603      	mov	r3, r0
 8002594:	71bb      	strb	r3, [r7, #6]
 8002596:	460b      	mov	r3, r1
 8002598:	80bb      	strh	r3, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d902      	bls.n	80025aa <socket+0x2a>
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
 80025a8:	e0f0      	b.n	800278c <socket+0x20c>
	switch(protocol)
 80025aa:	79bb      	ldrb	r3, [r7, #6]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d005      	beq.n	80025bc <socket+0x3c>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	dd11      	ble.n	80025d8 <socket+0x58>
 80025b4:	3b02      	subs	r3, #2
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d80e      	bhi.n	80025d8 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80025ba:	e011      	b.n	80025e0 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	2204      	movs	r2, #4
 80025c2:	4619      	mov	r1, r3
 80025c4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80025c8:	f000 fd1a 	bl	8003000 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <socket+0x5e>
 80025d2:	f06f 0302 	mvn.w	r3, #2
 80025d6:	e0d9      	b.n	800278c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80025d8:	f06f 0304 	mvn.w	r3, #4
 80025dc:	e0d6      	b.n	800278c <socket+0x20c>
	    break;
 80025de:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <socket+0x70>
 80025ea:	f06f 0305 	mvn.w	r3, #5
 80025ee:	e0cd      	b.n	800278c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d028      	beq.n	8002648 <socket+0xc8>
	{
   	switch(protocol)
 80025f6:	79bb      	ldrb	r3, [r7, #6]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d002      	beq.n	8002602 <socket+0x82>
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d008      	beq.n	8002612 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002600:	e022      	b.n	8002648 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002608:	2b00      	cmp	r3, #0
 800260a:	d11a      	bne.n	8002642 <socket+0xc2>
 800260c:	f06f 0305 	mvn.w	r3, #5
 8002610:	e0bc      	b.n	800278c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800261c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db02      	blt.n	800262a <socket+0xaa>
 8002624:	f06f 0305 	mvn.w	r3, #5
 8002628:	e0b0      	b.n	800278c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db04      	blt.n	8002646 <socket+0xc6>
 800263c:	f06f 0305 	mvn.w	r3, #5
 8002640:	e0a4      	b.n	800278c <socket+0x20c>
   	      break;
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <socket+0xc8>
   	      break;
 8002646:	bf00      	nop
   	}
   }
	close(sn);
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f8ac 	bl	80027a8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	3301      	adds	r3, #1
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4618      	mov	r0, r3
 800265a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265e:	f023 030f 	bic.w	r3, r3, #15
 8002662:	b25a      	sxtb	r2, r3
 8002664:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002668:	4313      	orrs	r3, r2
 800266a:	b25b      	sxtb	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	4619      	mov	r1, r3
 8002670:	f000 fc78 	bl	8002f64 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002674:	88bb      	ldrh	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d110      	bne.n	800269c <socket+0x11c>
	{
	   port = sock_any_port++;
 800267a:	4b46      	ldr	r3, [pc, #280]	; (8002794 <socket+0x214>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	b291      	uxth	r1, r2
 8002682:	4a44      	ldr	r2, [pc, #272]	; (8002794 <socket+0x214>)
 8002684:	8011      	strh	r1, [r2, #0]
 8002686:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002688:	4b42      	ldr	r3, [pc, #264]	; (8002794 <socket+0x214>)
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002690:	4293      	cmp	r3, r2
 8002692:	d103      	bne.n	800269c <socket+0x11c>
 8002694:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <socket+0x214>)
 8002696:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800269a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	3301      	adds	r3, #1
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a8:	461a      	mov	r2, r3
 80026aa:	88bb      	ldrh	r3, [r7, #4]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f000 fc55 	bl	8002f64 <WIZCHIP_WRITE>
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	3301      	adds	r3, #1
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	461a      	mov	r2, r3
 80026c8:	88bb      	ldrh	r3, [r7, #4]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	4619      	mov	r1, r3
 80026ce:	4610      	mov	r0, r2
 80026d0:	f000 fc48 	bl	8002f64 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	3301      	adds	r3, #1
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80026e0:	2101      	movs	r1, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fc3e 	bl	8002f64 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80026e8:	bf00      	nop
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	3301      	adds	r3, #1
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fbe8 	bl	8002ecc <WIZCHIP_READ>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f3      	bne.n	80026ea <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2201      	movs	r2, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	b21b      	sxth	r3, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	b21a      	sxth	r2, r3
 8002710:	4b21      	ldr	r3, [pc, #132]	; (8002798 <socket+0x218>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	b21b      	sxth	r3, r3
 8002716:	4013      	ands	r3, r2
 8002718:	b21b      	sxth	r3, r3
 800271a:	b29a      	uxth	r2, r3
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <socket+0x218>)
 800271e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 0201 	and.w	r2, r3, #1
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	b21a      	sxth	r2, r3
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <socket+0x218>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	b21b      	sxth	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b21b      	sxth	r3, r3
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <socket+0x218>)
 800273c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	2201      	movs	r2, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	b21b      	sxth	r3, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	b21a      	sxth	r2, r3
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <socket+0x21c>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b21b      	sxth	r3, r3
 8002752:	4013      	ands	r3, r2
 8002754:	b21b      	sxth	r3, r3
 8002756:	b29a      	uxth	r2, r3
 8002758:	4b10      	ldr	r3, [pc, #64]	; (800279c <socket+0x21c>)
 800275a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <socket+0x220>)
 8002760:	2100      	movs	r1, #0
 8002762:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <socket+0x224>)
 800276a:	2100      	movs	r1, #0
 800276c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800276e:	bf00      	nop
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	3301      	adds	r3, #1
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fba5 	bl	8002ecc <WIZCHIP_READ>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f3      	beq.n	8002770 <socket+0x1f0>
   return (int8_t)sn;
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}
 8002794:	20000000 	.word	0x20000000
 8002798:	200002c8 	.word	0x200002c8
 800279c:	200002ca 	.word	0x200002ca
 80027a0:	200002cc 	.word	0x200002cc
 80027a4:	200002dc 	.word	0x200002dc

080027a8 <close>:

int8_t close(uint8_t sn)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d902      	bls.n	80027be <close+0x16>
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
 80027bc:	e055      	b.n	800286a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	3301      	adds	r3, #1
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80027ca:	2110      	movs	r1, #16
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fbc9 	bl	8002f64 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80027d2:	bf00      	nop
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	3301      	adds	r3, #1
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fb73 	bl	8002ecc <WIZCHIP_READ>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f3      	bne.n	80027d4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	3301      	adds	r3, #1
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027f8:	211f      	movs	r1, #31
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fbb2 	bl	8002f64 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	2201      	movs	r2, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	b21b      	sxth	r3, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	b21a      	sxth	r2, r3
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <close+0xcc>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b21b      	sxth	r3, r3
 8002814:	4013      	ands	r3, r2
 8002816:	b21b      	sxth	r3, r3
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <close+0xcc>)
 800281c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	2201      	movs	r2, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	b21b      	sxth	r3, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	b21a      	sxth	r2, r3
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <close+0xd0>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b21b      	sxth	r3, r3
 8002832:	4013      	ands	r3, r2
 8002834:	b21b      	sxth	r3, r3
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <close+0xd0>)
 800283a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	4a0f      	ldr	r2, [pc, #60]	; (800287c <close+0xd4>)
 8002840:	2100      	movs	r1, #0
 8002842:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <close+0xd8>)
 800284a:	2100      	movs	r1, #0
 800284c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800284e:	bf00      	nop
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	3301      	adds	r3, #1
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fb35 	bl	8002ecc <WIZCHIP_READ>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f3      	bne.n	8002850 <close+0xa8>
	return SOCK_OK;
 8002868:	2301      	movs	r3, #1
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200002c8 	.word	0x200002c8
 8002878:	200002ca 	.word	0x200002ca
 800287c:	200002cc 	.word	0x200002cc
 8002880:	200002dc 	.word	0x200002dc

08002884 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	4603      	mov	r3, r0
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	4613      	mov	r3, r2
 8002894:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d902      	bls.n	80028aa <sendto+0x26>
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
 80028a8:	e11b      	b.n	8002ae2 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	3301      	adds	r3, #1
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fb0a 	bl	8002ecc <WIZCHIP_READ>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b02      	subs	r3, #2
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d902      	bls.n	80028ca <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80028c4:	f06f 0304 	mvn.w	r3, #4
 80028c8:	e10b      	b.n	8002ae2 <sendto+0x25e>
         break;
 80028ca:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80028cc:	89bb      	ldrh	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <sendto+0x54>
 80028d2:	f06f 030d 	mvn.w	r3, #13
 80028d6:	e104      	b.n	8002ae2 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	3201      	adds	r2, #1
 80028e6:	7812      	ldrb	r2, [r2, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	3202      	adds	r2, #2
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	3203      	adds	r2, #3
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	4413      	add	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <sendto+0xa8>
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	3301      	adds	r3, #1
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fad8 	bl	8002ecc <WIZCHIP_READ>
 800291c:	4603      	mov	r3, r0
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d002      	beq.n	800292c <sendto+0xa8>
 8002926:	f06f 030b 	mvn.w	r3, #11
 800292a:	e0da      	b.n	8002ae2 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800292c:	8c3b      	ldrh	r3, [r7, #32]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10e      	bne.n	8002950 <sendto+0xcc>
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	3301      	adds	r3, #1
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fac6 	bl	8002ecc <WIZCHIP_READ>
 8002940:	4603      	mov	r3, r0
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d002      	beq.n	8002950 <sendto+0xcc>
 800294a:	f06f 030a 	mvn.w	r3, #10
 800294e:	e0c8      	b.n	8002ae2 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	3301      	adds	r3, #1
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fab5 	bl	8002ecc <WIZCHIP_READ>
 8002962:	4603      	mov	r3, r0
 8002964:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	2b42      	cmp	r3, #66	; 0x42
 800296a:	d008      	beq.n	800297e <sendto+0xfa>
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b22      	cmp	r3, #34	; 0x22
 8002970:	d005      	beq.n	800297e <sendto+0xfa>
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	2b32      	cmp	r3, #50	; 0x32
 8002976:	d002      	beq.n	800297e <sendto+0xfa>
 8002978:	f06f 0306 	mvn.w	r3, #6
 800297c:	e0b1      	b.n	8002ae2 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	3301      	adds	r3, #1
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800298a:	2204      	movs	r2, #4
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fb96 	bl	80030c0 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	3301      	adds	r3, #1
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a0:	461a      	mov	r2, r3
 80029a2:	8c3b      	ldrh	r3, [r7, #32]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f000 fad9 	bl	8002f64 <WIZCHIP_WRITE>
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3301      	adds	r3, #1
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80029be:	461a      	mov	r2, r3
 80029c0:	8c3b      	ldrh	r3, [r7, #32]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f000 facc 	bl	8002f64 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3301      	adds	r3, #1
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fa77 	bl	8002ecc <WIZCHIP_READ>
 80029de:	4603      	mov	r3, r0
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	029b      	lsls	r3, r3, #10
 80029e4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80029e6:	89ba      	ldrh	r2, [r7, #12]
 80029e8:	8abb      	ldrh	r3, [r7, #20]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d901      	bls.n	80029f2 <sendto+0x16e>
 80029ee:	8abb      	ldrh	r3, [r7, #20]
 80029f0:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fbc3 	bl	8003180 <getSn_TX_FSR>
 80029fa:	4603      	mov	r3, r0
 80029fc:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	3301      	adds	r3, #1
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fa5e 	bl	8002ecc <WIZCHIP_READ>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <sendto+0x198>
 8002a16:	f06f 0303 	mvn.w	r3, #3
 8002a1a:	e062      	b.n	8002ae2 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002a1c:	4b33      	ldr	r3, [pc, #204]	; (8002aec <sendto+0x268>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	fa42 f303 	asr.w	r3, r2, r3
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <sendto+0x1b8>
 8002a30:	89ba      	ldrh	r2, [r7, #12]
 8002a32:	8abb      	ldrh	r3, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d901      	bls.n	8002a3c <sendto+0x1b8>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e052      	b.n	8002ae2 <sendto+0x25e>
      if(len <= freesize) break;
 8002a3c:	89ba      	ldrh	r2, [r7, #12]
 8002a3e:	8abb      	ldrh	r3, [r7, #20]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d900      	bls.n	8002a46 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8002a44:	e7d5      	b.n	80029f2 <sendto+0x16e>
      if(len <= freesize) break;
 8002a46:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8002a48:	89ba      	ldrh	r2, [r7, #12]
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fc2c 	bl	80032ac <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	3301      	adds	r3, #1
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a60:	2120      	movs	r1, #32
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fa7e 	bl	8002f64 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002a68:	bf00      	nop
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	3301      	adds	r3, #1
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fa28 	bl	8002ecc <WIZCHIP_READ>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f3      	bne.n	8002a6a <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	3301      	adds	r3, #1
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fa1c 	bl	8002ecc <WIZCHIP_READ>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00c      	beq.n	8002ac0 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	3301      	adds	r3, #1
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ab2:	2110      	movs	r1, #16
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fa55 	bl	8002f64 <WIZCHIP_WRITE>
         break;
 8002aba:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002abc:	89bb      	ldrh	r3, [r7, #12]
 8002abe:	e010      	b.n	8002ae2 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0db      	beq.n	8002a82 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	3301      	adds	r3, #1
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ad6:	2108      	movs	r1, #8
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fa43 	bl	8002f64 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8002ade:	f06f 030c 	mvn.w	r3, #12
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200002c8 	.word	0x200002c8

08002af0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607b      	str	r3, [r7, #4]
 8002afa:	4603      	mov	r3, r0
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	4613      	mov	r3, r2
 8002b00:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d902      	bls.n	8002b12 <recvfrom+0x22>
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b10:	e1d4      	b.n	8002ebc <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3301      	adds	r3, #1
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f9d6 	bl	8002ecc <WIZCHIP_READ>
 8002b20:	4603      	mov	r3, r0
 8002b22:	777b      	strb	r3, [r7, #29]
 8002b24:	7f7b      	ldrb	r3, [r7, #29]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	3b02      	subs	r3, #2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d902      	bls.n	8002b36 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002b30:	f06f 0304 	mvn.w	r3, #4
 8002b34:	e1c2      	b.n	8002ebc <recvfrom+0x3cc>
         break;
 8002b36:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002b38:	89bb      	ldrh	r3, [r7, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <recvfrom+0x54>
 8002b3e:	f06f 030d 	mvn.w	r3, #13
 8002b42:	e1bb      	b.n	8002ebc <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	4a88      	ldr	r2, [pc, #544]	; (8002d68 <recvfrom+0x278>)
 8002b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d128      	bne.n	8002ba2 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fb5f 	bl	8003216 <getSn_RX_RSR>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	3301      	adds	r3, #1
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f9af 	bl	8002ecc <WIZCHIP_READ>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <recvfrom+0x8a>
 8002b74:	f06f 0303 	mvn.w	r3, #3
 8002b78:	e1a0      	b.n	8002ebc <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8002b7a:	4b7c      	ldr	r3, [pc, #496]	; (8002d6c <recvfrom+0x27c>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	fa42 f303 	asr.w	r3, r2, r3
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d004      	beq.n	8002b98 <recvfrom+0xa8>
 8002b8e:	8bfb      	ldrh	r3, [r7, #30]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <recvfrom+0xa8>
 8002b94:	2300      	movs	r3, #0
 8002b96:	e191      	b.n	8002ebc <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8002b98:	8bfb      	ldrh	r3, [r7, #30]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d100      	bne.n	8002ba0 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8002b9e:	e7d7      	b.n	8002b50 <recvfrom+0x60>
         if(pack_len != 0) break;
 8002ba0:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8002ba2:	7f7b      	ldrb	r3, [r7, #29]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d079      	beq.n	8002ca0 <recvfrom+0x1b0>
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	f300 8142 	bgt.w	8002e36 <recvfrom+0x346>
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <recvfrom+0xce>
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	f000 80dc 	beq.w	8002d74 <recvfrom+0x284>
 8002bbc:	e13b      	b.n	8002e36 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	4a69      	ldr	r2, [pc, #420]	; (8002d68 <recvfrom+0x278>)
 8002bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d152      	bne.n	8002c70 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8002bca:	f107 0114 	add.w	r1, r7, #20
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fbc6 	bl	8003364 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	3301      	adds	r3, #1
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002be4:	2140      	movs	r1, #64	; 0x40
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f9bc 	bl	8002f64 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002bec:	bf00      	nop
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f966 	bl	8002ecc <WIZCHIP_READ>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f3      	bne.n	8002bee <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8002c06:	7d3a      	ldrb	r2, [r7, #20]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	7d7a      	ldrb	r2, [r7, #21]
 8002c12:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3302      	adds	r3, #2
 8002c18:	7dba      	ldrb	r2, [r7, #22]
 8002c1a:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3303      	adds	r3, #3
 8002c20:	7dfa      	ldrb	r2, [r7, #23]
 8002c22:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8002c24:	7e3b      	ldrb	r3, [r7, #24]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	7e7b      	ldrb	r3, [r7, #25]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8002c40:	7eba      	ldrb	r2, [r7, #26]
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	b291      	uxth	r1, r2
 8002c46:	4a48      	ldr	r2, [pc, #288]	; (8002d68 <recvfrom+0x278>)
 8002c48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <recvfrom+0x278>)
 8002c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	b299      	uxth	r1, r3
 8002c58:	7efb      	ldrb	r3, [r7, #27]
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	440a      	add	r2, r1
 8002c60:	b291      	uxth	r1, r2
 8002c62:	4a41      	ldr	r2, [pc, #260]	; (8002d68 <recvfrom+0x278>)
 8002c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	4a41      	ldr	r2, [pc, #260]	; (8002d70 <recvfrom+0x280>)
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	4a3d      	ldr	r2, [pc, #244]	; (8002d68 <recvfrom+0x278>)
 8002c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c78:	89ba      	ldrh	r2, [r7, #12]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d202      	bcs.n	8002c84 <recvfrom+0x194>
 8002c7e:	89bb      	ldrh	r3, [r7, #12]
 8002c80:	83fb      	strh	r3, [r7, #30]
 8002c82:	e004      	b.n	8002c8e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	4a38      	ldr	r2, [pc, #224]	; (8002d68 <recvfrom+0x278>)
 8002c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c8c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8002c8e:	8bfb      	ldrh	r3, [r7, #30]
 8002c90:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002c92:	8bfa      	ldrh	r2, [r7, #30]
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fb63 	bl	8003364 <wiz_recv_data>
			break;
 8002c9e:	e0d6      	b.n	8002e4e <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	4a31      	ldr	r2, [pc, #196]	; (8002d68 <recvfrom+0x278>)
 8002ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d146      	bne.n	8002d3a <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8002cac:	f107 0114 	add.w	r1, r7, #20
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fb55 	bl	8003364 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002cc6:	2140      	movs	r1, #64	; 0x40
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f94b 	bl	8002f64 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002cce:	bf00      	nop
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f8f5 	bl	8002ecc <WIZCHIP_READ>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f3      	bne.n	8002cd0 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8002ce8:	7d3a      	ldrb	r2, [r7, #20]
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	b291      	uxth	r1, r2
 8002cee:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <recvfrom+0x278>)
 8002cf0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <recvfrom+0x278>)
 8002cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	7d7b      	ldrb	r3, [r7, #21]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	3a02      	subs	r2, #2
 8002d0c:	b291      	uxth	r1, r2
 8002d0e:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <recvfrom+0x278>)
 8002d10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <recvfrom+0x278>)
 8002d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d1c:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d906      	bls.n	8002d32 <recvfrom+0x242>
   			{
   			   close(sn);
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fd3e 	bl	80027a8 <close>
   			   return SOCKFATAL_PACKLEN;
 8002d2c:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8002d30:	e0c4      	b.n	8002ebc <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <recvfrom+0x280>)
 8002d36:	2180      	movs	r1, #128	; 0x80
 8002d38:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <recvfrom+0x278>)
 8002d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d42:	89ba      	ldrh	r2, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d202      	bcs.n	8002d4e <recvfrom+0x25e>
 8002d48:	89bb      	ldrh	r3, [r7, #12]
 8002d4a:	83fb      	strh	r3, [r7, #30]
 8002d4c:	e004      	b.n	8002d58 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <recvfrom+0x278>)
 8002d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d56:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8002d58:	8bfa      	ldrh	r2, [r7, #30]
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fb00 	bl	8003364 <wiz_recv_data>
		   break;
 8002d64:	e073      	b.n	8002e4e <recvfrom+0x35e>
 8002d66:	bf00      	nop
 8002d68:	200002cc 	.word	0x200002cc
 8002d6c:	200002c8 	.word	0x200002c8
 8002d70:	200002dc 	.word	0x200002dc
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	4a53      	ldr	r2, [pc, #332]	; (8002ec4 <recvfrom+0x3d4>)
 8002d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d144      	bne.n	8002e0a <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8002d80:	f107 0114 	add.w	r1, r7, #20
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2206      	movs	r2, #6
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 faeb 	bl	8003364 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	3301      	adds	r3, #1
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d9a:	2140      	movs	r1, #64	; 0x40
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 f8e1 	bl	8002f64 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002da2:	bf00      	nop
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	3301      	adds	r3, #1
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 f88b 	bl	8002ecc <WIZCHIP_READ>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f3      	bne.n	8002da4 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8002dbc:	7d3a      	ldrb	r2, [r7, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	7d7a      	ldrb	r2, [r7, #21]
 8002dc8:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3302      	adds	r3, #2
 8002dce:	7dba      	ldrb	r2, [r7, #22]
 8002dd0:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3303      	adds	r3, #3
 8002dd6:	7dfa      	ldrb	r2, [r7, #23]
 8002dd8:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8002dda:	7e3a      	ldrb	r2, [r7, #24]
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	b291      	uxth	r1, r2
 8002de0:	4a38      	ldr	r2, [pc, #224]	; (8002ec4 <recvfrom+0x3d4>)
 8002de2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	4a36      	ldr	r2, [pc, #216]	; (8002ec4 <recvfrom+0x3d4>)
 8002dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	b299      	uxth	r1, r3
 8002df2:	7e7b      	ldrb	r3, [r7, #25]
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	440a      	add	r2, r1
 8002dfa:	b291      	uxth	r1, r2
 8002dfc:	4a31      	ldr	r2, [pc, #196]	; (8002ec4 <recvfrom+0x3d4>)
 8002dfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	4a30      	ldr	r2, [pc, #192]	; (8002ec8 <recvfrom+0x3d8>)
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <recvfrom+0x3d4>)
 8002e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e12:	89ba      	ldrh	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d202      	bcs.n	8002e1e <recvfrom+0x32e>
 8002e18:	89bb      	ldrh	r3, [r7, #12]
 8002e1a:	83fb      	strh	r3, [r7, #30]
 8002e1c:	e004      	b.n	8002e28 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	4a28      	ldr	r2, [pc, #160]	; (8002ec4 <recvfrom+0x3d4>)
 8002e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e26:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002e28:	8bfa      	ldrh	r2, [r7, #30]
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fa98 	bl	8003364 <wiz_recv_data>
			break;
 8002e34:	e00b      	b.n	8002e4e <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8002e36:	8bfa      	ldrh	r2, [r7, #30]
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 faed 	bl	800341c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	491f      	ldr	r1, [pc, #124]	; (8002ec4 <recvfrom+0x3d4>)
 8002e46:	8bfa      	ldrh	r2, [r7, #30]
 8002e48:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8002e4c:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	3301      	adds	r3, #1
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e5a:	2140      	movs	r1, #64	; 0x40
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 f881 	bl	8002f64 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002e62:	bf00      	nop
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	3301      	adds	r3, #1
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f82b 	bl	8002ecc <WIZCHIP_READ>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f3      	bne.n	8002e64 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <recvfrom+0x3d4>)
 8002e80:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	8bfa      	ldrh	r2, [r7, #30]
 8002e88:	1a8a      	subs	r2, r1, r2
 8002e8a:	b291      	uxth	r1, r2
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <recvfrom+0x3d4>)
 8002e8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <recvfrom+0x3d4>)
 8002e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <recvfrom+0x3d8>)
 8002ea2:	5cd2      	ldrb	r2, [r2, r3]
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	b2d1      	uxtb	r1, r2
 8002eac:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <recvfrom+0x3d8>)
 8002eae:	54d1      	strb	r1, [r2, r3]
 8002eb0:	e003      	b.n	8002eba <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <recvfrom+0x3d8>)
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8002eba:	8bfb      	ldrh	r3, [r7, #30]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	200002cc 	.word	0x200002cc
 8002ec8:	200002dc 	.word	0x200002dc

08002ecc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <WIZCHIP_READ+0x94>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002eda:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <WIZCHIP_READ+0x94>)
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <WIZCHIP_READ+0x94>)
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <WIZCHIP_READ+0x24>
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <WIZCHIP_READ+0x94>)
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d114      	bne.n	8002f1a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <WIZCHIP_READ+0x94>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	0c12      	lsrs	r2, r2, #16
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	4610      	mov	r0, r2
 8002efc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002efe:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <WIZCHIP_READ+0x94>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	0a12      	lsrs	r2, r2, #8
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002f0c:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <WIZCHIP_READ+0x94>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	4610      	mov	r0, r2
 8002f16:	4798      	blx	r3
 8002f18:	e011      	b.n	8002f3e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <WIZCHIP_READ+0x94>)
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	f107 020c 	add.w	r2, r7, #12
 8002f38:	2103      	movs	r1, #3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <WIZCHIP_READ+0x94>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4798      	blx	r3
 8002f44:	4603      	mov	r3, r0
 8002f46:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <WIZCHIP_READ+0x94>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <WIZCHIP_READ+0x94>)
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	4798      	blx	r3
   return ret;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000004 	.word	0x20000004

08002f64 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002f70:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <WIZCHIP_WRITE+0x98>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002f76:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <WIZCHIP_WRITE+0x98>)
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f043 0304 	orr.w	r3, r3, #4
 8002f82:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <WIZCHIP_WRITE+0x98>)
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d119      	bne.n	8002fc0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <WIZCHIP_WRITE+0x98>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	0c12      	lsrs	r2, r2, #16
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	4610      	mov	r0, r2
 8002f98:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <WIZCHIP_WRITE+0x98>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	0a12      	lsrs	r2, r2, #8
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <WIZCHIP_WRITE+0x98>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <WIZCHIP_WRITE+0x98>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4798      	blx	r3
 8002fbe:	e013      	b.n	8002fe8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <WIZCHIP_WRITE+0x98>)
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f107 020c 	add.w	r2, r7, #12
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <WIZCHIP_WRITE+0x98>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002fee:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <WIZCHIP_WRITE+0x98>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	4798      	blx	r3
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000004 	.word	0x20000004

08003000 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800300e:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800301a:	4b28      	ldr	r3, [pc, #160]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <WIZCHIP_READ_BUF+0x2a>
 8003022:	4b26      	ldr	r3, [pc, #152]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	2b00      	cmp	r3, #0
 8003028:	d126      	bne.n	8003078 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	0c12      	lsrs	r2, r2, #16
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	4610      	mov	r0, r2
 8003036:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003038:	4b20      	ldr	r3, [pc, #128]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	0a12      	lsrs	r2, r2, #8
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	4610      	mov	r0, r2
 8003044:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	4610      	mov	r0, r2
 8003050:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003052:	2300      	movs	r3, #0
 8003054:	82fb      	strh	r3, [r7, #22]
 8003056:	e00a      	b.n	800306e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003058:	4b18      	ldr	r3, [pc, #96]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	8afa      	ldrh	r2, [r7, #22]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	188c      	adds	r4, r1, r2
 8003062:	4798      	blx	r3
 8003064:	4603      	mov	r3, r0
 8003066:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003068:	8afb      	ldrh	r3, [r7, #22]
 800306a:	3301      	adds	r3, #1
 800306c:	82fb      	strh	r3, [r7, #22]
 800306e:	8afa      	ldrh	r2, [r7, #22]
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	429a      	cmp	r2, r3
 8003074:	d3f0      	bcc.n	8003058 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003076:	e017      	b.n	80030a8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	0c1b      	lsrs	r3, r3, #16
 800307c:	b2db      	uxtb	r3, r3
 800307e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	b2db      	uxtb	r3, r3
 8003086:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	f107 0210 	add.w	r2, r7, #16
 8003096:	2103      	movs	r1, #3
 8003098:	4610      	mov	r0, r2
 800309a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800309c:	4b07      	ldr	r3, [pc, #28]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	88fa      	ldrh	r2, [r7, #6]
 80030a2:	4611      	mov	r1, r2
 80030a4:	68b8      	ldr	r0, [r7, #8]
 80030a6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80030ae:	4b03      	ldr	r3, [pc, #12]	; (80030bc <WIZCHIP_READ_BUF+0xbc>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	4798      	blx	r3
}
 80030b4:	bf00      	nop
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd90      	pop	{r4, r7, pc}
 80030bc:	20000004 	.word	0x20000004

080030c0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80030ce:	4b2b      	ldr	r3, [pc, #172]	; (800317c <WIZCHIP_WRITE_BUF+0xbc>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <WIZCHIP_WRITE_BUF+0xbc>)
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <WIZCHIP_WRITE_BUF+0xbc>)
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d126      	bne.n	8003138 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <WIZCHIP_WRITE_BUF+0xbc>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	0c12      	lsrs	r2, r2, #16
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	4610      	mov	r0, r2
 80030f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80030f8:	4b20      	ldr	r3, [pc, #128]	; (800317c <WIZCHIP_WRITE_BUF+0xbc>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	0a12      	lsrs	r2, r2, #8
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	4610      	mov	r0, r2
 8003104:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <WIZCHIP_WRITE_BUF+0xbc>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	4610      	mov	r0, r2
 8003110:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003112:	2300      	movs	r3, #0
 8003114:	82fb      	strh	r3, [r7, #22]
 8003116:	e00a      	b.n	800312e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <WIZCHIP_WRITE_BUF+0xbc>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	8afa      	ldrh	r2, [r7, #22]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	440a      	add	r2, r1
 8003122:	7812      	ldrb	r2, [r2, #0]
 8003124:	4610      	mov	r0, r2
 8003126:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003128:	8afb      	ldrh	r3, [r7, #22]
 800312a:	3301      	adds	r3, #1
 800312c:	82fb      	strh	r3, [r7, #22]
 800312e:	8afa      	ldrh	r2, [r7, #22]
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	429a      	cmp	r2, r3
 8003134:	d3f0      	bcc.n	8003118 <WIZCHIP_WRITE_BUF+0x58>
 8003136:	e017      	b.n	8003168 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	0c1b      	lsrs	r3, r3, #16
 800313c:	b2db      	uxtb	r3, r3
 800313e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	b2db      	uxtb	r3, r3
 8003146:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <WIZCHIP_WRITE_BUF+0xbc>)
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	f107 0210 	add.w	r2, r7, #16
 8003156:	2103      	movs	r1, #3
 8003158:	4610      	mov	r0, r2
 800315a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <WIZCHIP_WRITE_BUF+0xbc>)
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	88fa      	ldrh	r2, [r7, #6]
 8003162:	4611      	mov	r1, r2
 8003164:	68b8      	ldr	r0, [r7, #8]
 8003166:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <WIZCHIP_WRITE_BUF+0xbc>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800316e:	4b03      	ldr	r3, [pc, #12]	; (800317c <WIZCHIP_WRITE_BUF+0xbc>)
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	4798      	blx	r3
}
 8003174:	bf00      	nop
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000004 	.word	0x20000004

08003180 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800318a:	2300      	movs	r3, #0
 800318c:	81fb      	strh	r3, [r7, #14]
 800318e:	2300      	movs	r3, #0
 8003190:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	3301      	adds	r3, #1
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fe94 	bl	8002ecc <WIZCHIP_READ>
 80031a4:	4603      	mov	r3, r0
 80031a6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80031a8:	89bb      	ldrh	r3, [r7, #12]
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	b29c      	uxth	r4, r3
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	3301      	adds	r3, #1
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fe86 	bl	8002ecc <WIZCHIP_READ>
 80031c0:	4603      	mov	r3, r0
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	4423      	add	r3, r4
 80031c6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80031c8:	89bb      	ldrh	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01a      	beq.n	8003204 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	3301      	adds	r3, #1
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fe76 	bl	8002ecc <WIZCHIP_READ>
 80031e0:	4603      	mov	r3, r0
 80031e2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80031e4:	89fb      	ldrh	r3, [r7, #14]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	b29c      	uxth	r4, r3
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	3301      	adds	r3, #1
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fe68 	bl	8002ecc <WIZCHIP_READ>
 80031fc:	4603      	mov	r3, r0
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4423      	add	r3, r4
 8003202:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003204:	89fa      	ldrh	r2, [r7, #14]
 8003206:	89bb      	ldrh	r3, [r7, #12]
 8003208:	429a      	cmp	r2, r3
 800320a:	d1c2      	bne.n	8003192 <getSn_TX_FSR+0x12>
   return val;
 800320c:	89fb      	ldrh	r3, [r7, #14]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	bd90      	pop	{r4, r7, pc}

08003216 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003216:	b590      	push	{r4, r7, lr}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	4603      	mov	r3, r0
 800321e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003220:	2300      	movs	r3, #0
 8003222:	81fb      	strh	r3, [r7, #14]
 8003224:	2300      	movs	r3, #0
 8003226:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	3301      	adds	r3, #1
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fe49 	bl	8002ecc <WIZCHIP_READ>
 800323a:	4603      	mov	r3, r0
 800323c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800323e:	89bb      	ldrh	r3, [r7, #12]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	b29c      	uxth	r4, r3
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	3301      	adds	r3, #1
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fe3b 	bl	8002ecc <WIZCHIP_READ>
 8003256:	4603      	mov	r3, r0
 8003258:	b29b      	uxth	r3, r3
 800325a:	4423      	add	r3, r4
 800325c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800325e:	89bb      	ldrh	r3, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01a      	beq.n	800329a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	3301      	adds	r3, #1
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fe2b 	bl	8002ecc <WIZCHIP_READ>
 8003276:	4603      	mov	r3, r0
 8003278:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800327a:	89fb      	ldrh	r3, [r7, #14]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	b29c      	uxth	r4, r3
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	3301      	adds	r3, #1
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fe1d 	bl	8002ecc <WIZCHIP_READ>
 8003292:	4603      	mov	r3, r0
 8003294:	b29b      	uxth	r3, r3
 8003296:	4423      	add	r3, r4
 8003298:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800329a:	89fa      	ldrh	r2, [r7, #14]
 800329c:	89bb      	ldrh	r3, [r7, #12]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d1c2      	bne.n	8003228 <getSn_RX_RSR+0x12>
   return val;
 80032a2:	89fb      	ldrh	r3, [r7, #14]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd90      	pop	{r4, r7, pc}

080032ac <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	71fb      	strb	r3, [r7, #7]
 80032b8:	4613      	mov	r3, r2
 80032ba:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80032c4:	88bb      	ldrh	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d048      	beq.n	800335c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	3301      	adds	r3, #1
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fdf8 	bl	8002ecc <WIZCHIP_READ>
 80032dc:	4603      	mov	r3, r0
 80032de:	b29b      	uxth	r3, r3
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	b29c      	uxth	r4, r3
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	3301      	adds	r3, #1
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fdeb 	bl	8002ecc <WIZCHIP_READ>
 80032f6:	4603      	mov	r3, r0
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	4423      	add	r3, r4
 80032fc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80032fe:	89fb      	ldrh	r3, [r7, #14]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	79fa      	ldrb	r2, [r7, #7]
 8003304:	0092      	lsls	r2, r2, #2
 8003306:	3202      	adds	r2, #2
 8003308:	00d2      	lsls	r2, r2, #3
 800330a:	4413      	add	r3, r2
 800330c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800330e:	88bb      	ldrh	r3, [r7, #4]
 8003310:	461a      	mov	r2, r3
 8003312:	6839      	ldr	r1, [r7, #0]
 8003314:	68b8      	ldr	r0, [r7, #8]
 8003316:	f7ff fed3 	bl	80030c0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800331a:	89fa      	ldrh	r2, [r7, #14]
 800331c:	88bb      	ldrh	r3, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	3301      	adds	r3, #1
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800332e:	461a      	mov	r2, r3
 8003330:	89fb      	ldrh	r3, [r7, #14]
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	b29b      	uxth	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f7ff fe12 	bl	8002f64 <WIZCHIP_WRITE>
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	3301      	adds	r3, #1
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800334c:	461a      	mov	r2, r3
 800334e:	89fb      	ldrh	r3, [r7, #14]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	4619      	mov	r1, r3
 8003354:	4610      	mov	r0, r2
 8003356:	f7ff fe05 	bl	8002f64 <WIZCHIP_WRITE>
 800335a:	e000      	b.n	800335e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800335c:	bf00      	nop
}
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bd90      	pop	{r4, r7, pc}

08003364 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	71fb      	strb	r3, [r7, #7]
 8003370:	4613      	mov	r3, r2
 8003372:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800337c:	88bb      	ldrh	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d048      	beq.n	8003414 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	3301      	adds	r3, #1
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fd9c 	bl	8002ecc <WIZCHIP_READ>
 8003394:	4603      	mov	r3, r0
 8003396:	b29b      	uxth	r3, r3
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	b29c      	uxth	r4, r3
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	3301      	adds	r3, #1
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fd8f 	bl	8002ecc <WIZCHIP_READ>
 80033ae:	4603      	mov	r3, r0
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	4423      	add	r3, r4
 80033b4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80033b6:	89fb      	ldrh	r3, [r7, #14]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	79fa      	ldrb	r2, [r7, #7]
 80033bc:	0092      	lsls	r2, r2, #2
 80033be:	3203      	adds	r2, #3
 80033c0:	00d2      	lsls	r2, r2, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80033c6:	88bb      	ldrh	r3, [r7, #4]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6839      	ldr	r1, [r7, #0]
 80033cc:	68b8      	ldr	r0, [r7, #8]
 80033ce:	f7ff fe17 	bl	8003000 <WIZCHIP_READ_BUF>
   ptr += len;
 80033d2:	89fa      	ldrh	r2, [r7, #14]
 80033d4:	88bb      	ldrh	r3, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	3301      	adds	r3, #1
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80033e6:	461a      	mov	r2, r3
 80033e8:	89fb      	ldrh	r3, [r7, #14]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f7ff fdb6 	bl	8002f64 <WIZCHIP_WRITE>
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	3301      	adds	r3, #1
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003404:	461a      	mov	r2, r3
 8003406:	89fb      	ldrh	r3, [r7, #14]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7ff fda9 	bl	8002f64 <WIZCHIP_WRITE>
 8003412:	e000      	b.n	8003416 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8003414:	bf00      	nop
}
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	bd90      	pop	{r4, r7, pc}

0800341c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	460a      	mov	r2, r1
 8003426:	71fb      	strb	r3, [r7, #7]
 8003428:	4613      	mov	r3, r2
 800342a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	3301      	adds	r3, #1
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fd45 	bl	8002ecc <WIZCHIP_READ>
 8003442:	4603      	mov	r3, r0
 8003444:	b29b      	uxth	r3, r3
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	b29c      	uxth	r4, r3
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	3301      	adds	r3, #1
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fd38 	bl	8002ecc <WIZCHIP_READ>
 800345c:	4603      	mov	r3, r0
 800345e:	b29b      	uxth	r3, r3
 8003460:	4423      	add	r3, r4
 8003462:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8003464:	89fa      	ldrh	r2, [r7, #14]
 8003466:	88bb      	ldrh	r3, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	3301      	adds	r3, #1
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003478:	461a      	mov	r2, r3
 800347a:	89fb      	ldrh	r3, [r7, #14]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	b29b      	uxth	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f7ff fd6d 	bl	8002f64 <WIZCHIP_WRITE>
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	3301      	adds	r3, #1
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003496:	461a      	mov	r2, r3
 8003498:	89fb      	ldrh	r3, [r7, #14]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f7ff fd60 	bl	8002f64 <WIZCHIP_WRITE>
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd90      	pop	{r4, r7, pc}

080034ac <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
 8003514:	2300      	movs	r3, #0
 8003516:	4618      	mov	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr

0800351e <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	71fb      	strb	r3, [r7, #7]
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	807b      	strh	r3, [r7, #2]
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
	...

08003560 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <reg_wizchip_cs_cbfunc+0x16>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <reg_wizchip_cs_cbfunc+0x3c>)
 8003578:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <reg_wizchip_cs_cbfunc+0x40>)
 800357a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800357c:	4b07      	ldr	r3, [pc, #28]	; (800359c <reg_wizchip_cs_cbfunc+0x3c>)
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <reg_wizchip_cs_cbfunc+0x44>)
 8003580:	619a      	str	r2, [r3, #24]
 8003582:	e006      	b.n	8003592 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003584:	4a05      	ldr	r2, [pc, #20]	; (800359c <reg_wizchip_cs_cbfunc+0x3c>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <reg_wizchip_cs_cbfunc+0x3c>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6193      	str	r3, [r2, #24]
   }
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	20000004 	.word	0x20000004
 80035a0:	080034c5 	.word	0x080034c5
 80035a4:	080034d1 	.word	0x080034d1

080035a8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80035b2:	bf00      	nop
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <reg_wizchip_spi_cbfunc+0x4c>)
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f9      	beq.n	80035b4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <reg_wizchip_spi_cbfunc+0x24>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <reg_wizchip_spi_cbfunc+0x4c>)
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <reg_wizchip_spi_cbfunc+0x50>)
 80035d0:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <reg_wizchip_spi_cbfunc+0x4c>)
 80035d4:	4a09      	ldr	r2, [pc, #36]	; (80035fc <reg_wizchip_spi_cbfunc+0x54>)
 80035d6:	621a      	str	r2, [r3, #32]
 80035d8:	e006      	b.n	80035e8 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80035da:	4a06      	ldr	r2, [pc, #24]	; (80035f4 <reg_wizchip_spi_cbfunc+0x4c>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <reg_wizchip_spi_cbfunc+0x4c>)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6213      	str	r3, [r2, #32]
   }
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000004 	.word	0x20000004
 80035f8:	08003511 	.word	0x08003511
 80035fc:	0800351f 	.word	0x0800351f

08003600 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800360a:	bf00      	nop
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f9      	beq.n	800360c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <reg_wizchip_spiburst_cbfunc+0x24>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d106      	bne.n	8003632 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003626:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <reg_wizchip_spiburst_cbfunc+0x50>)
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800362c:	4a09      	ldr	r2, [pc, #36]	; (8003654 <reg_wizchip_spiburst_cbfunc+0x54>)
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
 8003630:	e006      	b.n	8003640 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003632:	4a06      	ldr	r2, [pc, #24]	; (800364c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003638:	4a04      	ldr	r2, [pc, #16]	; (800364c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000004 	.word	0x20000004
 8003650:	08003533 	.word	0x08003533
 8003654:	08003549 	.word	0x08003549

08003658 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	6039      	str	r1, [r7, #0]
 8003662:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	2b0f      	cmp	r3, #15
 8003674:	f200 80c7 	bhi.w	8003806 <ctlwizchip+0x1ae>
 8003678:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <ctlwizchip+0x28>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	080036c1 	.word	0x080036c1
 8003684:	080036c7 	.word	0x080036c7
 8003688:	080036f3 	.word	0x080036f3
 800368c:	080036e7 	.word	0x080036e7
 8003690:	08003701 	.word	0x08003701
 8003694:	0800370d 	.word	0x0800370d
 8003698:	0800371b 	.word	0x0800371b
 800369c:	08003741 	.word	0x08003741
 80036a0:	08003767 	.word	0x08003767
 80036a4:	080037ab 	.word	0x080037ab
 80036a8:	080037b1 	.word	0x080037b1
 80036ac:	080037b9 	.word	0x080037b9
 80036b0:	0800380d 	.word	0x0800380d
 80036b4:	080037c1 	.word	0x080037c1
 80036b8:	080037cf 	.word	0x080037cf
 80036bc:	080037eb 	.word	0x080037eb
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80036c0:	f000 f8ea 	bl	8003898 <wizchip_sw_reset>
         break;
 80036c4:	e0a3      	b.n	800380e <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3308      	adds	r3, #8
 80036d4:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f927 	bl	8003930 <wizchip_init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	e094      	b.n	8003810 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f9ac 	bl	8003a48 <wizchip_clrinterrupt>
         break;
 80036f0:	e08d      	b.n	800380e <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80036f2:	f000 f9dd 	bl	8003ab0 <wizchip_getinterrupt>
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	801a      	strh	r2, [r3, #0]
         break;
 80036fe:	e086      	b.n	800380e <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f9f8 	bl	8003afa <wizchip_setinterruptmask>
         break;         
 800370a:	e080      	b.n	800380e <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800370c:	f000 fa10 	bl	8003b30 <wizchip_getinterruptmask>
 8003710:	4603      	mov	r3, r0
 8003712:	461a      	mov	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	801a      	strh	r2, [r3, #0]
         break;
 8003718:	e079      	b.n	800380e <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	b29b      	uxth	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800372a:	f7ff fc1b 	bl	8002f64 <WIZCHIP_WRITE>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	4619      	mov	r1, r3
 8003736:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800373a:	f7ff fc13 	bl	8002f64 <WIZCHIP_WRITE>
         break;
 800373e:	e066      	b.n	800380e <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003740:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003744:	f7ff fbc2 	bl	8002ecc <WIZCHIP_READ>
 8003748:	4603      	mov	r3, r0
 800374a:	b29b      	uxth	r3, r3
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	b29c      	uxth	r4, r3
 8003750:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003754:	f7ff fbba 	bl	8002ecc <WIZCHIP_READ>
 8003758:	4603      	mov	r3, r0
 800375a:	b29b      	uxth	r3, r3
 800375c:	4423      	add	r3, r4
 800375e:	b29a      	uxth	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	801a      	strh	r2, [r3, #0]
         break;
 8003764:	e053      	b.n	800380e <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003766:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <ctlwizchip+0x1c0>)
 8003768:	789a      	ldrb	r2, [r3, #2]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	4a29      	ldr	r2, [pc, #164]	; (8003818 <ctlwizchip+0x1c0>)
 8003774:	78d2      	ldrb	r2, [r2, #3]
 8003776:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	3302      	adds	r3, #2
 800377c:	4a26      	ldr	r2, [pc, #152]	; (8003818 <ctlwizchip+0x1c0>)
 800377e:	7912      	ldrb	r2, [r2, #4]
 8003780:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	3303      	adds	r3, #3
 8003786:	4a24      	ldr	r2, [pc, #144]	; (8003818 <ctlwizchip+0x1c0>)
 8003788:	7952      	ldrb	r2, [r2, #5]
 800378a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	3304      	adds	r3, #4
 8003790:	4a21      	ldr	r2, [pc, #132]	; (8003818 <ctlwizchip+0x1c0>)
 8003792:	7992      	ldrb	r2, [r2, #6]
 8003794:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	3305      	adds	r3, #5
 800379a:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <ctlwizchip+0x1c0>)
 800379c:	79d2      	ldrb	r2, [r2, #7]
 800379e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	3306      	adds	r3, #6
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
         break;
 80037a8:	e031      	b.n	800380e <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80037aa:	f000 fa13 	bl	8003bd4 <wizphy_reset>
         break;
 80037ae:	e02e      	b.n	800380e <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80037b0:	6838      	ldr	r0, [r7, #0]
 80037b2:	f000 fa36 	bl	8003c22 <wizphy_setphyconf>
         break;
 80037b6:	e02a      	b.n	800380e <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80037b8:	6838      	ldr	r0, [r7, #0]
 80037ba:	f000 fa75 	bl	8003ca8 <wizphy_getphyconf>
         break;
 80037be:	e026      	b.n	800380e <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fad9 	bl	8003d7c <wizphy_setphypmode>
 80037ca:	4603      	mov	r3, r0
 80037cc:	e020      	b.n	8003810 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80037ce:	f000 f9e8 	bl	8003ba2 <wizphy_getphypmode>
 80037d2:	4603      	mov	r3, r0
 80037d4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2bff      	cmp	r3, #255	; 0xff
 80037da:	d102      	bne.n	80037e2 <ctlwizchip+0x18a>
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295
 80037e0:	e016      	b.n	8003810 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	7dfa      	ldrb	r2, [r7, #23]
 80037e6:	701a      	strb	r2, [r3, #0]
         break;
 80037e8:	e011      	b.n	800380e <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80037ea:	f000 f9c4 	bl	8003b76 <wizphy_getphylink>
 80037ee:	4603      	mov	r3, r0
 80037f0:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
 80037f4:	2bff      	cmp	r3, #255	; 0xff
 80037f6:	d102      	bne.n	80037fe <ctlwizchip+0x1a6>
 80037f8:	f04f 33ff 	mov.w	r3, #4294967295
 80037fc:	e008      	b.n	8003810 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	7dfa      	ldrb	r2, [r7, #23]
 8003802:	701a      	strb	r2, [r3, #0]
         break;
 8003804:	e003      	b.n	800380e <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8003806:	f04f 33ff 	mov.w	r3, #4294967295
 800380a:	e001      	b.n	8003810 <ctlwizchip+0x1b8>
         break;
 800380c:	bf00      	nop
   }
   return 0;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd90      	pop	{r4, r7, pc}
 8003818:	20000004 	.word	0x20000004

0800381c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	6039      	str	r1, [r7, #0]
 8003826:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	2b05      	cmp	r3, #5
 800382c:	d82c      	bhi.n	8003888 <ctlnetwork+0x6c>
 800382e:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <ctlnetwork+0x18>)
 8003830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003834:	0800384d 	.word	0x0800384d
 8003838:	08003855 	.word	0x08003855
 800383c:	0800385d 	.word	0x0800385d
 8003840:	0800386b 	.word	0x0800386b
 8003844:	08003879 	.word	0x08003879
 8003848:	08003881 	.word	0x08003881
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800384c:	6838      	ldr	r0, [r7, #0]
 800384e:	f000 fadf 	bl	8003e10 <wizchip_setnetinfo>
         break;
 8003852:	e01c      	b.n	800388e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003854:	6838      	ldr	r0, [r7, #0]
 8003856:	f000 fb1b 	bl	8003e90 <wizchip_getnetinfo>
         break;
 800385a:	e018      	b.n	800388e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fb55 	bl	8003f10 <wizchip_setnetmode>
 8003866:	4603      	mov	r3, r0
 8003868:	e012      	b.n	8003890 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800386a:	f000 fb73 	bl	8003f54 <wizchip_getnetmode>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	701a      	strb	r2, [r3, #0]
         break;
 8003876:	e00a      	b.n	800388e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003878:	6838      	ldr	r0, [r7, #0]
 800387a:	f000 fb73 	bl	8003f64 <wizchip_settimeout>
         break;
 800387e:	e006      	b.n	800388e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003880:	6838      	ldr	r0, [r7, #0]
 8003882:	f000 fb90 	bl	8003fa6 <wizchip_gettimeout>
         break;
 8003886:	e002      	b.n	800388e <ctlnetwork+0x72>
      default:
         return -1;
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
 800388c:	e000      	b.n	8003890 <ctlnetwork+0x74>
   }
   return 0;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	2206      	movs	r2, #6
 80038a2:	4619      	mov	r1, r3
 80038a4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80038a8:	f7ff fbaa 	bl	8003000 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	2204      	movs	r2, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80038b8:	f7ff fba2 	bl	8003000 <WIZCHIP_READ_BUF>
 80038bc:	f107 0310 	add.w	r3, r7, #16
 80038c0:	2204      	movs	r2, #4
 80038c2:	4619      	mov	r1, r3
 80038c4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80038c8:	f7ff fb9a 	bl	8003000 <WIZCHIP_READ_BUF>
 80038cc:	f107 030c 	add.w	r3, r7, #12
 80038d0:	2204      	movs	r2, #4
 80038d2:	4619      	mov	r1, r3
 80038d4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80038d8:	f7ff fb92 	bl	8003000 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	2000      	movs	r0, #0
 80038e0:	f7ff fb40 	bl	8002f64 <WIZCHIP_WRITE>
   getMR(); // for delay
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7ff faf1 	bl	8002ecc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	2206      	movs	r2, #6
 80038ee:	4619      	mov	r1, r3
 80038f0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80038f4:	f7ff fbe4 	bl	80030c0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	2204      	movs	r2, #4
 80038fe:	4619      	mov	r1, r3
 8003900:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003904:	f7ff fbdc 	bl	80030c0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003908:	f107 0310 	add.w	r3, r7, #16
 800390c:	2204      	movs	r2, #4
 800390e:	4619      	mov	r1, r3
 8003910:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003914:	f7ff fbd4 	bl	80030c0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003918:	f107 030c 	add.w	r3, r7, #12
 800391c:	2204      	movs	r2, #4
 800391e:	4619      	mov	r1, r3
 8003920:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003924:	f7ff fbcc 	bl	80030c0 <WIZCHIP_WRITE_BUF>
}
 8003928:	bf00      	nop
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800393e:	f7ff ffab 	bl	8003898 <wizchip_sw_reset>
   if(txsize)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d03b      	beq.n	80039c0 <wizchip_init+0x90>
   {
      tmp = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	e015      	b.n	800397e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	7bbb      	ldrb	r3, [r7, #14]
 800395e:	4413      	add	r3, r2
 8003960:	b2db      	uxtb	r3, r3
 8003962:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003968:	2b10      	cmp	r3, #16
 800396a:	dd02      	ble.n	8003972 <wizchip_init+0x42>
 800396c:	f04f 33ff 	mov.w	r3, #4294967295
 8003970:	e066      	b.n	8003a40 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	3301      	adds	r3, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003982:	2b07      	cmp	r3, #7
 8003984:	dde5      	ble.n	8003952 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003986:	2300      	movs	r3, #0
 8003988:	73fb      	strb	r3, [r7, #15]
 800398a:	e015      	b.n	80039b8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800398c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	3301      	adds	r3, #1
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800399a:	4618      	mov	r0, r3
 800399c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	4619      	mov	r1, r3
 80039a8:	f7ff fadc 	bl	8002f64 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80039ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039bc:	2b07      	cmp	r3, #7
 80039be:	dde5      	ble.n	800398c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d03b      	beq.n	8003a3e <wizchip_init+0x10e>
   {
      tmp = 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
 80039ce:	e015      	b.n	80039fc <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80039d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	781a      	ldrb	r2, [r3, #0]
 80039da:	7bbb      	ldrb	r3, [r7, #14]
 80039dc:	4413      	add	r3, r2
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80039e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	dd02      	ble.n	80039f0 <wizchip_init+0xc0>
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
 80039ee:	e027      	b.n	8003a40 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80039f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	3301      	adds	r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a00:	2b07      	cmp	r3, #7
 8003a02:	dde5      	ble.n	80039d0 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e015      	b.n	8003a36 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	3301      	adds	r3, #1
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	4413      	add	r3, r2
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	4619      	mov	r1, r3
 8003a26:	f7ff fa9d 	bl	8002f64 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3a:	2b07      	cmp	r3, #7
 8003a3c:	dde5      	ble.n	8003a0a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	0a1b      	lsrs	r3, r3, #8
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	f023 030f 	bic.w	r3, r3, #15
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	4619      	mov	r1, r3
 8003a68:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003a6c:	f7ff fa7a 	bl	8002f64 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003a70:	2300      	movs	r3, #0
 8003a72:	73fb      	strb	r3, [r7, #15]
 8003a74:	e014      	b.n	8003aa0 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003a76:	7bba      	ldrb	r2, [r7, #14]
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	fa42 f303 	asr.w	r3, r2, r3
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <wizchip_clrinterrupt+0x52>
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003a92:	211f      	movs	r1, #31
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fa65 	bl	8002f64 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b07      	cmp	r3, #7
 8003aa4:	d9e7      	bls.n	8003a76 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003ac2:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003ac6:	f7ff fa01 	bl	8002ecc <WIZCHIP_READ>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f023 030f 	bic.w	r3, r3, #15
 8003ad0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003ad2:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003ad6:	f7ff f9f9 	bl	8002ecc <WIZCHIP_READ>
 8003ada:	4603      	mov	r3, r0
 8003adc:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003ade:	79bb      	ldrb	r3, [r7, #6]
 8003ae0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003ae2:	88bb      	ldrh	r3, [r7, #4]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003af0:	88bb      	ldrh	r3, [r7, #4]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	4603      	mov	r3, r0
 8003b02:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003b04:	88fb      	ldrh	r3, [r7, #6]
 8003b06:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	4619      	mov	r1, r3
 8003b14:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003b18:	f7ff fa24 	bl	8002f64 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003b1c:	7bbb      	ldrb	r3, [r7, #14]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003b24:	f7ff fa1e 	bl	8002f64 <WIZCHIP_WRITE>
#endif   
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003b42:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003b46:	f7ff f9c1 	bl	8002ecc <WIZCHIP_READ>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003b4e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003b52:	f7ff f9bb 	bl	8002ecc <WIZCHIP_READ>
 8003b56:	4603      	mov	r3, r0
 8003b58:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003b5a:	79bb      	ldrb	r3, [r7, #6]
 8003b5c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003b5e:	88bb      	ldrh	r3, [r7, #4]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003b6c:	88bb      	ldrh	r3, [r7, #4]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003b80:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b84:	f7ff f9a2 	bl	8002ecc <WIZCHIP_READ>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8003b92:	2301      	movs	r3, #1
 8003b94:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003bac:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003bb0:	f7ff f98c 	bl	8002ecc <WIZCHIP_READ>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bba:	2b30      	cmp	r3, #48	; 0x30
 8003bbc:	d102      	bne.n	8003bc4 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	71fb      	strb	r3, [r7, #7]
 8003bc2:	e001      	b.n	8003bc8 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003bda:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003bde:	f7ff f975 	bl	8002ecc <WIZCHIP_READ>
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bec:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003bf6:	f7ff f9b5 	bl	8002f64 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003bfa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003bfe:	f7ff f965 	bl	8002ecc <WIZCHIP_READ>
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c0c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	4619      	mov	r1, r3
 8003c12:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003c16:	f7ff f9a5 	bl	8002f64 <WIZCHIP_WRITE>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d104      	bne.n	8003c40 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	e003      	b.n	8003c48 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c46:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	785b      	ldrb	r3, [r3, #1]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d104      	bne.n	8003c5a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003c56:	73fb      	strb	r3, [r7, #15]
 8003c58:	e019      	b.n	8003c8e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	78db      	ldrb	r3, [r3, #3]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d10d      	bne.n	8003c7e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	789b      	ldrb	r3, [r3, #2]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d104      	bne.n	8003c74 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	f043 0318 	orr.w	r3, r3, #24
 8003c70:	73fb      	strb	r3, [r7, #15]
 8003c72:	e00c      	b.n	8003c8e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	f043 0308 	orr.w	r3, r3, #8
 8003c7a:	73fb      	strb	r3, [r7, #15]
 8003c7c:	e007      	b.n	8003c8e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	789b      	ldrb	r3, [r3, #2]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d103      	bne.n	8003c8e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	f043 0310 	orr.w	r3, r3, #16
 8003c8c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	4619      	mov	r1, r3
 8003c92:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003c96:	f7ff f965 	bl	8002f64 <WIZCHIP_WRITE>
   wizphy_reset();
 8003c9a:	f7ff ff9b 	bl	8003bd4 <wizphy_reset>
}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003cb4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003cb8:	f7ff f908 	bl	8002ecc <WIZCHIP_READ>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	119b      	asrs	r3, r3, #6
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d001      	beq.n	8003cde <wizphy_getphyconf+0x36>
 8003cda:	2b38      	cmp	r3, #56	; 0x38
 8003cdc:	d103      	bne.n	8003ce6 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	705a      	strb	r2, [r3, #1]
         break;
 8003ce4:	e003      	b.n	8003cee <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	705a      	strb	r2, [r3, #1]
         break;
 8003cec:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cf4:	3b10      	subs	r3, #16
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	bf8c      	ite	hi
 8003cfa:	2201      	movhi	r2, #1
 8003cfc:	2200      	movls	r2, #0
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	2a00      	cmp	r2, #0
 8003d02:	d10f      	bne.n	8003d24 <wizphy_getphyconf+0x7c>
 8003d04:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <wizphy_getphyconf+0xcc>)
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	709a      	strb	r2, [r3, #2]
         break;
 8003d22:	e003      	b.n	8003d2c <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	709a      	strb	r2, [r3, #2]
         break;
 8003d2a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d32:	3b08      	subs	r3, #8
 8003d34:	2b18      	cmp	r3, #24
 8003d36:	bf8c      	ite	hi
 8003d38:	2201      	movhi	r2, #1
 8003d3a:	2200      	movls	r2, #0
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	2a00      	cmp	r2, #0
 8003d40:	d10f      	bne.n	8003d62 <wizphy_getphyconf+0xba>
 8003d42:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <wizphy_getphyconf+0xd0>)
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	70da      	strb	r2, [r3, #3]
         break;
 8003d60:	e003      	b.n	8003d6a <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	70da      	strb	r2, [r3, #3]
         break;
 8003d68:	bf00      	nop
   }
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	00010101 	.word	0x00010101
 8003d78:	01010001 	.word	0x01010001

08003d7c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003d8a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003d8e:	f7ff f89d 	bl	8002ecc <WIZCHIP_READ>
 8003d92:	4603      	mov	r3, r0
 8003d94:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <wizphy_setphypmode+0x2a>
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295
 8003da4:	e030      	b.n	8003e08 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003dac:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d104      	bne.n	8003dbe <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e003      	b.n	8003dc6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003dc4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003dce:	f7ff f8c9 	bl	8002f64 <WIZCHIP_WRITE>
   wizphy_reset();
 8003dd2:	f7ff feff 	bl	8003bd4 <wizphy_reset>
   tmp = getPHYCFGR();
 8003dd6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003dda:	f7ff f877 	bl	8002ecc <WIZCHIP_READ>
 8003dde:	4603      	mov	r3, r0
 8003de0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d106      	bne.n	8003df6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <wizphy_setphypmode+0x88>
 8003df2:	2300      	movs	r3, #0
 8003df4:	e008      	b.n	8003e08 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <wizphy_setphypmode+0x88>
 8003e00:	2300      	movs	r3, #0
 8003e02:	e001      	b.n	8003e08 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2206      	movs	r2, #6
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003e22:	f7ff f94d 	bl	80030c0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	330e      	adds	r3, #14
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003e32:	f7ff f945 	bl	80030c0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	330a      	adds	r3, #10
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003e42:	f7ff f93d 	bl	80030c0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3306      	adds	r3, #6
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003e52:	f7ff f935 	bl	80030c0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	7c9a      	ldrb	r2, [r3, #18]
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <wizchip_setnetinfo+0x78>)
 8003e5c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7cda      	ldrb	r2, [r3, #19]
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <wizchip_setnetinfo+0x78>)
 8003e64:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	7d1a      	ldrb	r2, [r3, #20]
 8003e6a:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <wizchip_setnetinfo+0x78>)
 8003e6c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7d5a      	ldrb	r2, [r3, #21]
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <wizchip_setnetinfo+0x78>)
 8003e74:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7d9a      	ldrb	r2, [r3, #22]
 8003e7a:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <wizchip_setnetinfo+0x7c>)
 8003e7c:	701a      	strb	r2, [r3, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200002e4 	.word	0x200002e4
 8003e8c:	200002e8 	.word	0x200002e8

08003e90 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2206      	movs	r2, #6
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003ea2:	f7ff f8ad 	bl	8003000 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	330e      	adds	r3, #14
 8003eaa:	2204      	movs	r2, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003eb2:	f7ff f8a5 	bl	8003000 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	330a      	adds	r3, #10
 8003eba:	2204      	movs	r2, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003ec2:	f7ff f89d 	bl	8003000 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3306      	adds	r3, #6
 8003eca:	2204      	movs	r2, #4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003ed2:	f7ff f895 	bl	8003000 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <wizchip_getnetinfo+0x78>)
 8003ed8:	781a      	ldrb	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <wizchip_getnetinfo+0x78>)
 8003ee0:	785a      	ldrb	r2, [r3, #1]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <wizchip_getnetinfo+0x78>)
 8003ee8:	789a      	ldrb	r2, [r3, #2]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <wizchip_getnetinfo+0x78>)
 8003ef0:	78da      	ldrb	r2, [r3, #3]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <wizchip_getnetinfo+0x7c>)
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	759a      	strb	r2, [r3, #22]
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200002e4 	.word	0x200002e4
 8003f0c:	200002e8 	.word	0x200002e8

08003f10 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <wizchip_setnetmode+0x1e>
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	e00e      	b.n	8003f4c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f7fe ffcc 	bl	8002ecc <WIZCHIP_READ>
 8003f34:	4603      	mov	r3, r0
 8003f36:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	4619      	mov	r1, r3
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7ff f80d 	bl	8002f64 <WIZCHIP_WRITE>
   return 0;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f7fe ffb7 	bl	8002ecc <WIZCHIP_READ>
 8003f5e:	4603      	mov	r3, r0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	4619      	mov	r1, r3
 8003f72:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003f76:	f7fe fff5 	bl	8002f64 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	885b      	ldrh	r3, [r3, #2]
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	4619      	mov	r1, r3
 8003f86:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003f8a:	f7fe ffeb 	bl	8002f64 <WIZCHIP_WRITE>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	885b      	ldrh	r3, [r3, #2]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	4619      	mov	r1, r3
 8003f96:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003f9a:	f7fe ffe3 	bl	8002f64 <WIZCHIP_WRITE>
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003fa6:	b590      	push	{r4, r7, lr}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003fae:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003fb2:	f7fe ff8b 	bl	8002ecc <WIZCHIP_READ>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003fbe:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003fc2:	f7fe ff83 	bl	8002ecc <WIZCHIP_READ>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	b29c      	uxth	r4, r3
 8003fce:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003fd2:	f7fe ff7b 	bl	8002ecc <WIZCHIP_READ>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	4423      	add	r3, r4
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	805a      	strh	r2, [r3, #2]
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd90      	pop	{r4, r7, pc}

08003fea <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <cJSON_strdup+0x1c>
    {
        return NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	e015      	b.n	8004032 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fc f8a2 	bl	8000150 <strlen>
 800400c:	4603      	mov	r3, r0
 800400e:	3301      	adds	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	4798      	blx	r3
 800401a:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <cJSON_strdup+0x3c>
    {
        return NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	e005      	b.n	8004032 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	68b8      	ldr	r0, [r7, #8]
 800402c:	f007 fdd6 	bl	800bbdc <memcpy>

    return copy;
 8004030:	68bb      	ldr	r3, [r7, #8]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2028      	movs	r0, #40	; 0x28
 8004048:	4798      	blx	r3
 800404a:	60f8      	str	r0, [r7, #12]
    if (node)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8004052:	2228      	movs	r2, #40	; 0x28
 8004054:	2100      	movs	r1, #0
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f007 fce8 	bl	800ba2c <memset>
    }

    return node;
 800405c:	68fb      	ldr	r3, [r7, #12]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8004074:	e037      	b.n	80040e6 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d108      	bne.n	800409a <cJSON_Delete+0x32>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d004      	beq.n	800409a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ffe7 	bl	8004068 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <cJSON_Delete+0x52>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <cJSON_Delete+0x90>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6912      	ldr	r2, [r2, #16]
 80040b6:	4610      	mov	r0, r2
 80040b8:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <cJSON_Delete+0x72>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <cJSON_Delete+0x90>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6a12      	ldr	r2, [r2, #32]
 80040d6:	4610      	mov	r0, r2
 80040d8:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80040da:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <cJSON_Delete+0x90>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
        item = next;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1c4      	bne.n	8004076 <cJSON_Delete+0xe>
    }
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000030 	.word	0x20000030

080040fc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8004100:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8004102:	4618      	mov	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <ensure+0x20>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <ensure+0x24>
    {
        return NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	e083      	b.n	8004236 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <ensure+0x3c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	d301      	bcc.n	8004146 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	e077      	b.n	8004236 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	da01      	bge.n	8004150 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	e072      	b.n	8004236 <ensure+0x12c>
    }

    needed += p->offset + 1;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	4413      	add	r3, r2
 8004158:	3301      	adds	r3, #1
 800415a:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d805      	bhi.n	8004172 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4413      	add	r3, r2
 8004170:	e061      	b.n	8004236 <ensure+0x12c>
    }

    if (p->noalloc) {
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <ensure+0x74>
        return NULL;
 800417a:	2300      	movs	r3, #0
 800417c:	e05b      	b.n	8004236 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d308      	bcc.n	8004198 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	db03      	blt.n	8004194 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800418c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	e004      	b.n	800419e <ensure+0x94>
        }
        else
        {
            return NULL;
 8004194:	2300      	movs	r3, #0
 8004196:	e04e      	b.n	8004236 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d018      	beq.n	80041d8 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	4610      	mov	r0, r2
 80041b2:	4798      	blx	r3
 80041b4:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d132      	bne.n	8004222 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	4610      	mov	r0, r2
 80041c6:	4798      	blx	r3
            p->length = 0;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

            return NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e02e      	b.n	8004236 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	68b8      	ldr	r0, [r7, #8]
 80041de:	4798      	blx	r3
 80041e0:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10d      	bne.n	8004204 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	4610      	mov	r0, r2
 80041f2:	4798      	blx	r3
            p->length = 0;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

            return NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	e018      	b.n	8004236 <ensure+0x12c>
        }
        
        memcpy(newbuffer, p->buffer, p->offset + 1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6819      	ldr	r1, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	3301      	adds	r3, #1
 800420e:	461a      	mov	r2, r3
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f007 fce3 	bl	800bbdc <memcpy>
        p->hooks.deallocate(p->buffer);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	4610      	mov	r0, r2
 8004220:	4798      	blx	r3
    }
    p->length = newsize;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4413      	add	r3, r2
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800423e:	b590      	push	{r4, r7, lr}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d013      	beq.n	8004278 <update_offset+0x3a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00f      	beq.n	8004278 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4413      	add	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689c      	ldr	r4, [r3, #8]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7fb ff71 	bl	8000150 <strlen>
 800426e:	4603      	mov	r3, r0
 8004270:	18e2      	adds	r2, r4, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	609a      	str	r2, [r3, #8]
 8004276:	e000      	b.n	800427a <update_offset+0x3c>
        return;
 8004278:	bf00      	nop
}
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	bd90      	pop	{r4, r7, pc}

08004280 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8004280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004284:	b08a      	sub	sp, #40	; 0x28
 8004286:	af00      	add	r7, sp, #0
 8004288:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800428c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042b0:	f7fc fba2 	bl	80009f8 <__aeabi_dcmpgt>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <compare_double+0x44>
 80042ba:	69bc      	ldr	r4, [r7, #24]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80042c2:	e003      	b.n	80042cc <compare_double+0x4c>
 80042c4:	693c      	ldr	r4, [r7, #16]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80042cc:	e9c7 4508 	strd	r4, r5, [r7, #32]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80042d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042d8:	f7fb ff46 	bl	8000168 <__aeabi_dsub>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4690      	mov	r8, r2
 80042e2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <compare_double+0x9c>)
 80042ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80042f0:	f7fc f8f2 	bl	80004d8 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	2101      	movs	r1, #1
 80042fa:	460c      	mov	r4, r1
 80042fc:	4640      	mov	r0, r8
 80042fe:	4649      	mov	r1, r9
 8004300:	f7fc fb66 	bl	80009d0 <__aeabi_dcmple>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <compare_double+0x8e>
 800430a:	2300      	movs	r3, #0
 800430c:	461c      	mov	r4, r3
 800430e:	b2e3      	uxtb	r3, r4
}
 8004310:	4618      	mov	r0, r3
 8004312:	3728      	adds	r7, #40	; 0x28
 8004314:	46bd      	mov	sp, r7
 8004316:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800431a:	bf00      	nop
 800431c:	3cb00000 	.word	0x3cb00000

08004320 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8004320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004322:	b093      	sub	sp, #76	; 0x4c
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004334:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	f107 0318 	add.w	r3, r7, #24
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	611a      	str	r2, [r3, #16]
 8004354:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8004356:	f7ff fed1 	bl	80040fc <get_decimal_point>
 800435a:	4603      	mov	r3, r0
 800435c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <print_number+0x56>
    {
        return false;
 8004372:	2300      	movs	r3, #0
 8004374:	e098      	b.n	80044a8 <print_number+0x188>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8004376:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800437a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800437e:	f7fc fb45 	bl	8000a0c <__aeabi_dcmpun>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d121      	bne.n	80043cc <print_number+0xac>
 8004388:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800438a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004390:	2301      	movs	r3, #1
 8004392:	461e      	mov	r6, r3
 8004394:	f04f 32ff 	mov.w	r2, #4294967295
 8004398:	4b45      	ldr	r3, [pc, #276]	; (80044b0 <print_number+0x190>)
 800439a:	4620      	mov	r0, r4
 800439c:	4629      	mov	r1, r5
 800439e:	f7fc fb35 	bl	8000a0c <__aeabi_dcmpun>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <print_number+0xa0>
 80043a8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ac:	4b40      	ldr	r3, [pc, #256]	; (80044b0 <print_number+0x190>)
 80043ae:	4620      	mov	r0, r4
 80043b0:	4629      	mov	r1, r5
 80043b2:	f7fc fb0d 	bl	80009d0 <__aeabi_dcmple>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <print_number+0xa0>
 80043bc:	2300      	movs	r3, #0
 80043be:	461e      	mov	r6, r3
 80043c0:	b2f3      	uxtb	r3, r6
 80043c2:	f083 0301 	eor.w	r3, r3, #1
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d007      	beq.n	80043dc <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 80043cc:	f107 0314 	add.w	r3, r7, #20
 80043d0:	4938      	ldr	r1, [pc, #224]	; (80044b4 <print_number+0x194>)
 80043d2:	4618      	mov	r0, r3
 80043d4:	f007 fa06 	bl	800b7e4 <siprintf>
 80043d8:	6478      	str	r0, [r7, #68]	; 0x44
 80043da:	e023      	b.n	8004424 <print_number+0x104>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80043dc:	f107 0014 	add.w	r0, r7, #20
 80043e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043e4:	4934      	ldr	r1, [pc, #208]	; (80044b8 <print_number+0x198>)
 80043e6:	f007 f9fd 	bl	800b7e4 <siprintf>
 80043ea:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80043ec:	f107 0208 	add.w	r2, r7, #8
 80043f0:	f107 0314 	add.w	r3, r7, #20
 80043f4:	4931      	ldr	r1, [pc, #196]	; (80044bc <print_number+0x19c>)
 80043f6:	4618      	mov	r0, r3
 80043f8:	f007 fa14 	bl	800b824 <siscanf>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d108      	bne.n	8004414 <print_number+0xf4>
 8004402:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004406:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800440a:	f7ff ff39 	bl	8004280 <compare_double>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d107      	bne.n	8004424 <print_number+0x104>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8004414:	f107 0014 	add.w	r0, r7, #20
 8004418:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800441c:	4928      	ldr	r1, [pc, #160]	; (80044c0 <print_number+0x1a0>)
 800441e:	f007 f9e1 	bl	800b7e4 <siprintf>
 8004422:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8004424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004426:	2b00      	cmp	r3, #0
 8004428:	db02      	blt.n	8004430 <print_number+0x110>
 800442a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442c:	2b19      	cmp	r3, #25
 800442e:	dd01      	ble.n	8004434 <print_number+0x114>
    {
        return false;
 8004430:	2300      	movs	r3, #0
 8004432:	e039      	b.n	80044a8 <print_number+0x188>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8004434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004436:	3301      	adds	r3, #1
 8004438:	4619      	mov	r1, r3
 800443a:	6838      	ldr	r0, [r7, #0]
 800443c:	f7ff fe65 	bl	800410a <ensure>
 8004440:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8004442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <print_number+0x12c>
    {
        return false;
 8004448:	2300      	movs	r3, #0
 800444a:	e02d      	b.n	80044a8 <print_number+0x188>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800444c:	2300      	movs	r3, #0
 800444e:	643b      	str	r3, [r7, #64]	; 0x40
 8004450:	e01a      	b.n	8004488 <print_number+0x168>
    {
        if (number_buffer[i] == decimal_point)
 8004452:	f107 0214 	add.w	r2, r7, #20
 8004456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004458:	4413      	add	r3, r2
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004460:	429a      	cmp	r2, r3
 8004462:	d105      	bne.n	8004470 <print_number+0x150>
        {
            output_pointer[i] = '.';
 8004464:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004468:	4413      	add	r3, r2
 800446a:	222e      	movs	r2, #46	; 0x2e
 800446c:	701a      	strb	r2, [r3, #0]
            continue;
 800446e:	e008      	b.n	8004482 <print_number+0x162>
        }

        output_pointer[i] = number_buffer[i];
 8004470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004474:	4413      	add	r3, r2
 8004476:	f107 0114 	add.w	r1, r7, #20
 800447a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800447c:	440a      	add	r2, r1
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8004482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004484:	3301      	adds	r3, #1
 8004486:	643b      	str	r3, [r7, #64]	; 0x40
 8004488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800448c:	429a      	cmp	r2, r3
 800448e:	d3e0      	bcc.n	8004452 <print_number+0x132>
    }
    output_pointer[i] = '\0';
 8004490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004494:	4413      	add	r3, r2
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a0:	441a      	add	r2, r3
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	609a      	str	r2, [r3, #8]

    return true;
 80044a6:	2301      	movs	r3, #1
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	374c      	adds	r7, #76	; 0x4c
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b0:	7fefffff 	.word	0x7fefffff
 80044b4:	0800ee9c 	.word	0x0800ee9c
 80044b8:	0800eea4 	.word	0x0800eea4
 80044bc:	0800eeac 	.word	0x0800eeac
 80044c0:	0800eeb0 	.word	0x0800eeb0

080044c4 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <print_string_ptr+0x28>
    {
        return false;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e110      	b.n	800470e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d111      	bne.n	8004516 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80044f2:	2103      	movs	r1, #3
 80044f4:	6838      	ldr	r0, [r7, #0]
 80044f6:	f7ff fe08 	bl	800410a <ensure>
 80044fa:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <print_string_ptr+0x42>
        {
            return false;
 8004502:	2300      	movs	r3, #0
 8004504:	e103      	b.n	800470e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4a83      	ldr	r2, [pc, #524]	; (8004718 <print_string_ptr+0x254>)
 800450a:	8811      	ldrh	r1, [r2, #0]
 800450c:	7892      	ldrb	r2, [r2, #2]
 800450e:	8019      	strh	r1, [r3, #0]
 8004510:	709a      	strb	r2, [r3, #2]

        return true;
 8004512:	2301      	movs	r3, #1
 8004514:	e0fb      	b.n	800470e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	e024      	b.n	8004566 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b22      	cmp	r3, #34	; 0x22
 8004522:	dc0f      	bgt.n	8004544 <print_string_ptr+0x80>
 8004524:	2b08      	cmp	r3, #8
 8004526:	db13      	blt.n	8004550 <print_string_ptr+0x8c>
 8004528:	3b08      	subs	r3, #8
 800452a:	4a7c      	ldr	r2, [pc, #496]	; (800471c <print_string_ptr+0x258>)
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <print_string_ptr+0x84>
 8004542:	e005      	b.n	8004550 <print_string_ptr+0x8c>
 8004544:	2b5c      	cmp	r3, #92	; 0x5c
 8004546:	d103      	bne.n	8004550 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3301      	adds	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
                break;
 800454e:	e007      	b.n	8004560 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b1f      	cmp	r3, #31
 8004556:	d802      	bhi.n	800455e <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	3305      	adds	r3, #5
 800455c:	617b      	str	r3, [r7, #20]
                }
                break;
 800455e:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	3301      	adds	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1d6      	bne.n	800451c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	461a      	mov	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	4413      	add	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3303      	adds	r3, #3
 8004580:	4619      	mov	r1, r3
 8004582:	6838      	ldr	r0, [r7, #0]
 8004584:	f7ff fdc1 	bl	800410a <ensure>
 8004588:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <print_string_ptr+0xd0>
    {
        return false;
 8004590:	2300      	movs	r3, #0
 8004592:	e0bc      	b.n	800470e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d117      	bne.n	80045ca <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2222      	movs	r2, #34	; 0x22
 800459e:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	3301      	adds	r3, #1
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f007 fb17 	bl	800bbdc <memcpy>
        output[output_length + 1] = '\"';
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3301      	adds	r3, #1
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4413      	add	r3, r2
 80045b6:	2222      	movs	r2, #34	; 0x22
 80045b8:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3302      	adds	r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4413      	add	r3, r2
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]

        return true;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0a1      	b.n	800470e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2222      	movs	r2, #34	; 0x22
 80045ce:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	3301      	adds	r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	e086      	b.n	80046ea <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b1f      	cmp	r3, #31
 80045e2:	d90c      	bls.n	80045fe <print_string_ptr+0x13a>
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b22      	cmp	r3, #34	; 0x22
 80045ea:	d008      	beq.n	80045fe <print_string_ptr+0x13a>
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b5c      	cmp	r3, #92	; 0x5c
 80045f2:	d004      	beq.n	80045fe <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	701a      	strb	r2, [r3, #0]
 80045fc:	e06f      	b.n	80046de <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	61ba      	str	r2, [r7, #24]
 8004604:	225c      	movs	r2, #92	; 0x5c
 8004606:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b22      	cmp	r3, #34	; 0x22
 800460e:	dc3d      	bgt.n	800468c <print_string_ptr+0x1c8>
 8004610:	2b08      	cmp	r3, #8
 8004612:	db59      	blt.n	80046c8 <print_string_ptr+0x204>
 8004614:	3b08      	subs	r3, #8
 8004616:	2b1a      	cmp	r3, #26
 8004618:	d856      	bhi.n	80046c8 <print_string_ptr+0x204>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <print_string_ptr+0x15c>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	080046a1 	.word	0x080046a1
 8004624:	080046c1 	.word	0x080046c1
 8004628:	080046b1 	.word	0x080046b1
 800462c:	080046c9 	.word	0x080046c9
 8004630:	080046a9 	.word	0x080046a9
 8004634:	080046b9 	.word	0x080046b9
 8004638:	080046c9 	.word	0x080046c9
 800463c:	080046c9 	.word	0x080046c9
 8004640:	080046c9 	.word	0x080046c9
 8004644:	080046c9 	.word	0x080046c9
 8004648:	080046c9 	.word	0x080046c9
 800464c:	080046c9 	.word	0x080046c9
 8004650:	080046c9 	.word	0x080046c9
 8004654:	080046c9 	.word	0x080046c9
 8004658:	080046c9 	.word	0x080046c9
 800465c:	080046c9 	.word	0x080046c9
 8004660:	080046c9 	.word	0x080046c9
 8004664:	080046c9 	.word	0x080046c9
 8004668:	080046c9 	.word	0x080046c9
 800466c:	080046c9 	.word	0x080046c9
 8004670:	080046c9 	.word	0x080046c9
 8004674:	080046c9 	.word	0x080046c9
 8004678:	080046c9 	.word	0x080046c9
 800467c:	080046c9 	.word	0x080046c9
 8004680:	080046c9 	.word	0x080046c9
 8004684:	080046c9 	.word	0x080046c9
 8004688:	08004699 	.word	0x08004699
 800468c:	2b5c      	cmp	r3, #92	; 0x5c
 800468e:	d11b      	bne.n	80046c8 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	225c      	movs	r2, #92	; 0x5c
 8004694:	701a      	strb	r2, [r3, #0]
                    break;
 8004696:	e022      	b.n	80046de <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2222      	movs	r2, #34	; 0x22
 800469c:	701a      	strb	r2, [r3, #0]
                    break;
 800469e:	e01e      	b.n	80046de <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2262      	movs	r2, #98	; 0x62
 80046a4:	701a      	strb	r2, [r3, #0]
                    break;
 80046a6:	e01a      	b.n	80046de <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2266      	movs	r2, #102	; 0x66
 80046ac:	701a      	strb	r2, [r3, #0]
                    break;
 80046ae:	e016      	b.n	80046de <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	226e      	movs	r2, #110	; 0x6e
 80046b4:	701a      	strb	r2, [r3, #0]
                    break;
 80046b6:	e012      	b.n	80046de <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2272      	movs	r2, #114	; 0x72
 80046bc:	701a      	strb	r2, [r3, #0]
                    break;
 80046be:	e00e      	b.n	80046de <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2274      	movs	r2, #116	; 0x74
 80046c4:	701a      	strb	r2, [r3, #0]
                    break;
 80046c6:	e00a      	b.n	80046de <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	4914      	ldr	r1, [pc, #80]	; (8004720 <print_string_ptr+0x25c>)
 80046d0:	69b8      	ldr	r0, [r7, #24]
 80046d2:	f007 f887 	bl	800b7e4 <siprintf>
                    output_pointer += 4;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	3304      	adds	r3, #4
 80046da:	61bb      	str	r3, [r7, #24]
                    break;
 80046dc:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3301      	adds	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	3301      	adds	r3, #1
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f47f af74 	bne.w	80045dc <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3301      	adds	r3, #1
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	2222      	movs	r2, #34	; 0x22
 80046fe:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3302      	adds	r3, #2
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4413      	add	r3, r2
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]

    return true;
 800470c:	2301      	movs	r3, #1
}
 800470e:	4618      	mov	r0, r3
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	0800eeb8 	.word	0x0800eeb8
 800471c:	04000037 	.word	0x04000037
 8004720:	0800eebc 	.word	0x0800eebc

08004724 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fec5 	bl	80044c4 <print_string_ptr>
 800473a:	4603      	mov	r3, r0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08e      	sub	sp, #56	; 0x38
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8004750:	2300      	movs	r3, #0
 8004752:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8004754:	f107 0310 	add.w	r3, r7, #16
 8004758:	2224      	movs	r2, #36	; 0x24
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f007 f965 	bl	800ba2c <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a38      	ldr	r2, [pc, #224]	; (8004848 <print+0x104>)
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	4610      	mov	r0, r2
 800476c:	4798      	blx	r3
 800476e:	4603      	mov	r3, r0
 8004770:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8004772:	4b35      	ldr	r3, [pc, #212]	; (8004848 <print+0x104>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004782:	ca07      	ldmia	r2, {r0, r1, r2}
 8004784:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d040      	beq.n	8004810 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800478e:	f107 0310 	add.w	r3, r7, #16
 8004792:	4619      	mov	r1, r3
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f869 	bl	800486c <print_value>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d039      	beq.n	8004814 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 80047a0:	f107 0310 	add.w	r3, r7, #16
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fd4a 	bl	800423e <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00d      	beq.n	80047ce <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	6938      	ldr	r0, [r7, #16]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	3201      	adds	r2, #1
 80047bc:	4611      	mov	r1, r2
 80047be:	4798      	blx	r3
 80047c0:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 80047c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d027      	beq.n	8004818 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	e01e      	b.n	800480c <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	3201      	adds	r2, #1
 80047d6:	4610      	mov	r0, r2
 80047d8:	4798      	blx	r3
 80047da:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01c      	beq.n	800481c <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80047e2:	6939      	ldr	r1, [r7, #16]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	4293      	cmp	r3, r2
 80047ec:	bf28      	it	cs
 80047ee:	4613      	movcs	r3, r2
 80047f0:	461a      	mov	r2, r3
 80047f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047f4:	f007 f9f2 	bl	800bbdc <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047fc:	4413      	add	r3, r2
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4610      	mov	r0, r2
 800480a:	4798      	blx	r3
    }

    return printed;
 800480c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480e:	e016      	b.n	800483e <print+0xfa>
        goto fail;
 8004810:	bf00      	nop
 8004812:	e004      	b.n	800481e <print+0xda>
        goto fail;
 8004814:	bf00      	nop
 8004816:	e002      	b.n	800481e <print+0xda>
            goto fail;
 8004818:	bf00      	nop
 800481a:	e000      	b.n	800481e <print+0xda>
            goto fail;
 800481c:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4610      	mov	r0, r2
 800482c:	4798      	blx	r3
    }

    if (printed != NULL)
 800482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <print+0xf8>
    {
        hooks->deallocate(printed);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800483a:	4798      	blx	r3
    }

    return NULL;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3738      	adds	r7, #56	; 0x38
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	0800f174 	.word	0x0800f174

0800484c <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8004854:	4a04      	ldr	r2, [pc, #16]	; (8004868 <cJSON_Print+0x1c>)
 8004856:	2101      	movs	r1, #1
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ff73 	bl	8004744 <print>
 800485e:	4603      	mov	r3, r0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000030 	.word	0x20000030

0800486c <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <print_value+0x1a>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <print_value+0x1e>
    {
        return false;
 8004886:	2300      	movs	r3, #0
 8004888:	e0c9      	b.n	8004a1e <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b80      	cmp	r3, #128	; 0x80
 8004892:	f000 808e 	beq.w	80049b2 <print_value+0x146>
 8004896:	2b80      	cmp	r3, #128	; 0x80
 8004898:	f300 80c0 	bgt.w	8004a1c <print_value+0x1b0>
 800489c:	2b20      	cmp	r3, #32
 800489e:	dc49      	bgt.n	8004934 <print_value+0xc8>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f340 80bb 	ble.w	8004a1c <print_value+0x1b0>
 80048a6:	3b01      	subs	r3, #1
 80048a8:	2b1f      	cmp	r3, #31
 80048aa:	f200 80b7 	bhi.w	8004a1c <print_value+0x1b0>
 80048ae:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <print_value+0x48>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	0800495f 	.word	0x0800495f
 80048b8:	08004983 	.word	0x08004983
 80048bc:	08004a1d 	.word	0x08004a1d
 80048c0:	0800493b 	.word	0x0800493b
 80048c4:	08004a1d 	.word	0x08004a1d
 80048c8:	08004a1d 	.word	0x08004a1d
 80048cc:	08004a1d 	.word	0x08004a1d
 80048d0:	080049a7 	.word	0x080049a7
 80048d4:	08004a1d 	.word	0x08004a1d
 80048d8:	08004a1d 	.word	0x08004a1d
 80048dc:	08004a1d 	.word	0x08004a1d
 80048e0:	08004a1d 	.word	0x08004a1d
 80048e4:	08004a1d 	.word	0x08004a1d
 80048e8:	08004a1d 	.word	0x08004a1d
 80048ec:	08004a1d 	.word	0x08004a1d
 80048f0:	080049f9 	.word	0x080049f9
 80048f4:	08004a1d 	.word	0x08004a1d
 80048f8:	08004a1d 	.word	0x08004a1d
 80048fc:	08004a1d 	.word	0x08004a1d
 8004900:	08004a1d 	.word	0x08004a1d
 8004904:	08004a1d 	.word	0x08004a1d
 8004908:	08004a1d 	.word	0x08004a1d
 800490c:	08004a1d 	.word	0x08004a1d
 8004910:	08004a1d 	.word	0x08004a1d
 8004914:	08004a1d 	.word	0x08004a1d
 8004918:	08004a1d 	.word	0x08004a1d
 800491c:	08004a1d 	.word	0x08004a1d
 8004920:	08004a1d 	.word	0x08004a1d
 8004924:	08004a1d 	.word	0x08004a1d
 8004928:	08004a1d 	.word	0x08004a1d
 800492c:	08004a1d 	.word	0x08004a1d
 8004930:	08004a05 	.word	0x08004a05
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d06b      	beq.n	8004a10 <print_value+0x1a4>
 8004938:	e070      	b.n	8004a1c <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800493a:	2105      	movs	r1, #5
 800493c:	6838      	ldr	r0, [r7, #0]
 800493e:	f7ff fbe4 	bl	800410a <ensure>
 8004942:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <print_value+0xe2>
            {
                return false;
 800494a:	2300      	movs	r3, #0
 800494c:	e067      	b.n	8004a1e <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a35      	ldr	r2, [pc, #212]	; (8004a28 <print_value+0x1bc>)
 8004952:	6810      	ldr	r0, [r2, #0]
 8004954:	6018      	str	r0, [r3, #0]
 8004956:	7912      	ldrb	r2, [r2, #4]
 8004958:	711a      	strb	r2, [r3, #4]
            return true;
 800495a:	2301      	movs	r3, #1
 800495c:	e05f      	b.n	8004a1e <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800495e:	2106      	movs	r1, #6
 8004960:	6838      	ldr	r0, [r7, #0]
 8004962:	f7ff fbd2 	bl	800410a <ensure>
 8004966:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <print_value+0x106>
            {
                return false;
 800496e:	2300      	movs	r3, #0
 8004970:	e055      	b.n	8004a1e <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4a2d      	ldr	r2, [pc, #180]	; (8004a2c <print_value+0x1c0>)
 8004976:	6810      	ldr	r0, [r2, #0]
 8004978:	6018      	str	r0, [r3, #0]
 800497a:	8892      	ldrh	r2, [r2, #4]
 800497c:	809a      	strh	r2, [r3, #4]
            return true;
 800497e:	2301      	movs	r3, #1
 8004980:	e04d      	b.n	8004a1e <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8004982:	2105      	movs	r1, #5
 8004984:	6838      	ldr	r0, [r7, #0]
 8004986:	f7ff fbc0 	bl	800410a <ensure>
 800498a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <print_value+0x12a>
            {
                return false;
 8004992:	2300      	movs	r3, #0
 8004994:	e043      	b.n	8004a1e <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <print_value+0x1c4>)
 800499a:	6810      	ldr	r0, [r2, #0]
 800499c:	6018      	str	r0, [r3, #0]
 800499e:	7912      	ldrb	r2, [r2, #4]
 80049a0:	711a      	strb	r2, [r3, #4]
            return true;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e03b      	b.n	8004a1e <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 80049a6:	6839      	ldr	r1, [r7, #0]
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff fcb9 	bl	8004320 <print_number>
 80049ae:	4603      	mov	r3, r0
 80049b0:	e035      	b.n	8004a1e <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <print_value+0x156>
            {
                return false;
 80049be:	2300      	movs	r3, #0
 80049c0:	e02d      	b.n	8004a1e <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fb fbc2 	bl	8000150 <strlen>
 80049cc:	4603      	mov	r3, r0
 80049ce:	3301      	adds	r3, #1
 80049d0:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	6838      	ldr	r0, [r7, #0]
 80049d6:	f7ff fb98 	bl	800410a <ensure>
 80049da:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <print_value+0x17a>
            {
                return false;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e01b      	b.n	8004a1e <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4619      	mov	r1, r3
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f007 f8f4 	bl	800bbdc <memcpy>
            return true;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e012      	b.n	8004a1e <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fe92 	bl	8004724 <print_string>
 8004a00:	4603      	mov	r3, r0
 8004a02:	e00c      	b.n	8004a1e <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f814 	bl	8004a34 <print_array>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	e006      	b.n	8004a1e <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f894 	bl	8004b40 <print_object>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	e000      	b.n	8004a1e <print_value+0x1b2>

        default:
            return false;
 8004a1c:	2300      	movs	r3, #0
    }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	0800ee9c 	.word	0x0800ee9c
 8004a2c:	0800eec8 	.word	0x0800eec8
 8004a30:	0800eed0 	.word	0x0800eed0

08004a34 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <print_array+0x22>
    {
        return false;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e070      	b.n	8004b38 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8004a56:	2101      	movs	r1, #1
 8004a58:	6838      	ldr	r0, [r7, #0]
 8004a5a:	f7ff fb56 	bl	800410a <ensure>
 8004a5e:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <print_array+0x36>
    {
        return false;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e066      	b.n	8004b38 <print_array+0x104>
    }

    *output_pointer = '[';
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	225b      	movs	r2, #91	; 0x5b
 8004a6e:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8004a84:	e03d      	b.n	8004b02 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8004a86:	6839      	ldr	r1, [r7, #0]
 8004a88:	6938      	ldr	r0, [r7, #16]
 8004a8a:	f7ff feef 	bl	800486c <print_value>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <print_array+0x64>
        {
            return false;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e04f      	b.n	8004b38 <print_array+0x104>
        }
        update_offset(output_buffer);
 8004a98:	6838      	ldr	r0, [r7, #0]
 8004a9a:	f7ff fbd0 	bl	800423e <update_offset>
        if (current_element->next)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d02a      	beq.n	8004afc <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <print_array+0x7e>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e000      	b.n	8004ab4 <print_array+0x80>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	4619      	mov	r1, r3
 8004abc:	6838      	ldr	r0, [r7, #0]
 8004abe:	f7ff fb24 	bl	800410a <ensure>
 8004ac2:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <print_array+0x9a>
            {
                return false;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e034      	b.n	8004b38 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	617a      	str	r2, [r7, #20]
 8004ad4:	222c      	movs	r2, #44	; 0x2c
 8004ad6:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	617a      	str	r2, [r7, #20]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	441a      	add	r2, r3
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1be      	bne.n	8004a86 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8004b08:	2102      	movs	r1, #2
 8004b0a:	6838      	ldr	r0, [r7, #0]
 8004b0c:	f7ff fafd 	bl	800410a <ensure>
 8004b10:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <print_array+0xe8>
    {
        return false;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e00d      	b.n	8004b38 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	617a      	str	r2, [r7, #20]
 8004b22:	225d      	movs	r2, #93	; 0x5d
 8004b24:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	1e5a      	subs	r2, r3, #1
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	60da      	str	r2, [r3, #12]

    return true;
 8004b36:	2301      	movs	r3, #1
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <print_object+0x22>
    {
        return false;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e108      	b.n	8004d74 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <print_object+0x2e>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e000      	b.n	8004b70 <print_object+0x30>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3301      	adds	r3, #1
 8004b76:	4619      	mov	r1, r3
 8004b78:	6838      	ldr	r0, [r7, #0]
 8004b7a:	f7ff fac6 	bl	800410a <ensure>
 8004b7e:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <print_object+0x4a>
    {
        return false;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e0f4      	b.n	8004d74 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	61fa      	str	r2, [r7, #28]
 8004b90:	227b      	movs	r2, #123	; 0x7b
 8004b92:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	61fa      	str	r2, [r7, #28]
 8004bac:	220a      	movs	r2, #10
 8004bae:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	441a      	add	r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	609a      	str	r2, [r3, #8]

    while (current_item)
 8004bbc:	e0a0      	b.n	8004d00 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d022      	beq.n	8004c0c <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6838      	ldr	r0, [r7, #0]
 8004bce:	f7ff fa9c 	bl	800410a <ensure>
 8004bd2:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <print_object+0x9e>
            {
                return false;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e0ca      	b.n	8004d74 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e007      	b.n	8004bf4 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	61fa      	str	r2, [r7, #28]
 8004bea:	2209      	movs	r2, #9
 8004bec:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d3f2      	bcc.n	8004be4 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	441a      	add	r2, r3
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	6839      	ldr	r1, [r7, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fc56 	bl	80044c4 <print_string_ptr>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <print_object+0xe2>
        {
            return false;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e0a8      	b.n	8004d74 <print_object+0x234>
        }
        update_offset(output_buffer);
 8004c22:	6838      	ldr	r0, [r7, #0]
 8004c24:	f7ff fb0b 	bl	800423e <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <print_object+0xf4>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e000      	b.n	8004c36 <print_object+0xf6>
 8004c34:	2301      	movs	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8004c38:	68f9      	ldr	r1, [r7, #12]
 8004c3a:	6838      	ldr	r0, [r7, #0]
 8004c3c:	f7ff fa65 	bl	800410a <ensure>
 8004c40:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <print_object+0x10c>
        {
            return false;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e093      	b.n	8004d74 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	61fa      	str	r2, [r7, #28]
 8004c52:	223a      	movs	r2, #58	; 0x3a
 8004c54:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	61fa      	str	r2, [r7, #28]
 8004c64:	2209      	movs	r2, #9
 8004c66:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	441a      	add	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	69b8      	ldr	r0, [r7, #24]
 8004c78:	f7ff fdf8 	bl	800486c <print_value>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <print_object+0x146>
        {
            return false;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e076      	b.n	8004d74 <print_object+0x234>
        }
        update_offset(output_buffer);
 8004c86:	6838      	ldr	r0, [r7, #0]
 8004c88:	f7ff fad9 	bl	800423e <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <print_object+0x158>
 8004c94:	2201      	movs	r2, #1
 8004c96:	e000      	b.n	8004c9a <print_object+0x15a>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <print_object+0x166>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <print_object+0x168>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	4413      	add	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6838      	ldr	r0, [r7, #0]
 8004cb4:	f7ff fa29 	bl	800410a <ensure>
 8004cb8:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <print_object+0x184>
        {
            return false;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e057      	b.n	8004d74 <print_object+0x234>
        }
        if (current_item->next)
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	61fa      	str	r2, [r7, #28]
 8004cd2:	222c      	movs	r2, #44	; 0x2c
 8004cd4:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	61fa      	str	r2, [r7, #28]
 8004ce4:	220a      	movs	r2, #10
 8004ce6:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	441a      	add	r2, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f47f af5b 	bne.w	8004bbe <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <print_object+0x1d8>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	3301      	adds	r3, #1
 8004d16:	e000      	b.n	8004d1a <print_object+0x1da>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6838      	ldr	r0, [r7, #0]
 8004d1e:	f7ff f9f4 	bl	800410a <ensure>
 8004d22:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <print_object+0x1ee>
    {
        return false;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e022      	b.n	8004d74 <print_object+0x234>
    }
    if (output_buffer->format)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d010      	beq.n	8004d58 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8004d36:	2300      	movs	r3, #0
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	e007      	b.n	8004d4c <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	61fa      	str	r2, [r7, #28]
 8004d42:	2209      	movs	r2, #9
 8004d44:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d3f1      	bcc.n	8004d3c <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	61fa      	str	r2, [r7, #28]
 8004d5e:	227d      	movs	r2, #125	; 0x7d
 8004d60:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	1e5a      	subs	r2, r3, #1
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	60da      	str	r2, [r3, #12]

    return true;
 8004d72:	2301      	movs	r3, #1
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	605a      	str	r2, [r3, #4]
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d006      	beq.n	8004dbe <add_item_to_array+0x22>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <add_item_to_array+0x22>
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d101      	bne.n	8004dc2 <add_item_to_array+0x26>
    {
        return false;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e01e      	b.n	8004e00 <add_item_to_array+0x64>
    }

    child = array->child;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e00d      	b.n	8004dfe <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff ffc3 	bl	8004d7c <suffix_object>
            array->child->prev = item;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8004dfe:	2301      	movs	r3, #1
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8004e10:	687b      	ldr	r3, [r7, #4]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr

08004e1c <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d009      	beq.n	8004e4c <add_item_to_object+0x30>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d006      	beq.n	8004e4c <add_item_to_object+0x30>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <add_item_to_object+0x30>
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d101      	bne.n	8004e50 <add_item_to_object+0x34>
    {
        return false;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e036      	b.n	8004ebe <add_item_to_object+0xa2>
    }

    if (constant_key)
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8004e56:	68b8      	ldr	r0, [r7, #8]
 8004e58:	f7ff ffd6 	bl	8004e08 <cast_away_const>
 8004e5c:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	e00e      	b.n	8004e88 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	68b8      	ldr	r0, [r7, #8]
 8004e6e:	f7ff f8bc 	bl	8003fea <cJSON_strdup>
 8004e72:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <add_item_to_object+0x62>
        {
            return false;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e01f      	b.n	8004ebe <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e86:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <add_item_to_object+0x8c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6a12      	ldr	r2, [r2, #32]
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4798      	blx	r3
    }

    item->string = new_key;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f7ff ff70 	bl	8004d9c <add_item_to_array>
 8004ebc:	4603      	mov	r3, r0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	e9c7 2300 	strd	r2, r3, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8004ed6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eda:	f000 f83d 	bl	8004f58 <cJSON_CreateNumber>
 8004ede:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <cJSON_AddNumberToObject+0x44>)
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff ff96 	bl	8004e1c <add_item_to_object>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	e003      	b.n	8004f02 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8004efa:	6978      	ldr	r0, [r7, #20]
 8004efc:	f7ff f8b4 	bl	8004068 <cJSON_Delete>
    return NULL;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000030 	.word	0x20000030

08004f10 <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f863 	bl	8004fe8 <cJSON_CreateString>
 8004f22:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8004f24:	2300      	movs	r3, #0
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <cJSON_AddStringToObject+0x40>)
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f7ff ff74 	bl	8004e1c <add_item_to_object>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	e003      	b.n	8004f46 <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 8004f3e:	6978      	ldr	r0, [r7, #20]
 8004f40:	f7ff f892 	bl	8004068 <cJSON_Delete>
    return NULL;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000030 	.word	0x20000030
 8004f54:	00000000 	.word	0x00000000

08004f58 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	e9c7 0100 	strd	r0, r1, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8004f62:	481f      	ldr	r0, [pc, #124]	; (8004fe0 <cJSON_CreateNumber+0x88>)
 8004f64:	f7ff f869 	bl	800403a <cJSON_New_Item>
 8004f68:	60f8      	str	r0, [r7, #12]
    if(item)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d02c      	beq.n	8004fca <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2208      	movs	r2, #8
 8004f74:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f7c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8004f80:	a315      	add	r3, pc, #84	; (adr r3, 8004fd8 <cJSON_CreateNumber+0x80>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f8a:	f7fb fd2b 	bl	80009e4 <__aeabi_dcmpge>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d004      	beq.n	8004f9e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004f9a:	615a      	str	r2, [r3, #20]
 8004f9c:	e015      	b.n	8004fca <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <cJSON_CreateNumber+0x8c>)
 8004fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fa8:	f7fb fd12 	bl	80009d0 <__aeabi_dcmple>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fb8:	615a      	str	r2, [r3, #20]
 8004fba:	e006      	b.n	8004fca <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8004fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fc0:	f7fb fd3a 	bl	8000a38 <__aeabi_d2iz>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	f3af 8000 	nop.w
 8004fd8:	ffc00000 	.word	0xffc00000
 8004fdc:	41dfffff 	.word	0x41dfffff
 8004fe0:	20000030 	.word	0x20000030
 8004fe4:	c1e00000 	.word	0xc1e00000

08004fe8 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8004ff0:	480f      	ldr	r0, [pc, #60]	; (8005030 <cJSON_CreateString+0x48>)
 8004ff2:	f7ff f822 	bl	800403a <cJSON_New_Item>
 8004ff6:	60f8      	str	r0, [r7, #12]
    if(item)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d012      	beq.n	8005024 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2210      	movs	r2, #16
 8005002:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8005004:	490a      	ldr	r1, [pc, #40]	; (8005030 <cJSON_CreateString+0x48>)
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fe ffef 	bl	8003fea <cJSON_strdup>
 800500c:	4602      	mov	r2, r0
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d104      	bne.n	8005024 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff f824 	bl	8004068 <cJSON_Delete>
            return NULL;
 8005020:	2300      	movs	r3, #0
 8005022:	e000      	b.n	8005026 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8005024:	68fb      	ldr	r3, [r7, #12]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000030 	.word	0x20000030

08005034 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800503a:	4807      	ldr	r0, [pc, #28]	; (8005058 <cJSON_CreateObject+0x24>)
 800503c:	f7fe fffd 	bl	800403a <cJSON_New_Item>
 8005040:	6078      	str	r0, [r7, #4]
    if (item)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2240      	movs	r2, #64	; 0x40
 800504c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800504e:	687b      	ldr	r3, [r7, #4]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000030 	.word	0x20000030

0800505c <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0xFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f023 020f 	bic.w	r2, r3, #15
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	041b      	lsls	r3, r3, #16
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	b292      	uxth	r2, r2
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60da      	str	r2, [r3, #12]
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <LL_RTC_EnableWriteProtection>:
  * @rmtoll CRL          CNF           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_CNF);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f023 0210 	bic.w	r2, r3, #16
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	605a      	str	r2, [r3, #4]
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr

080050b2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll CRL          RTC_CRL_CNF           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CRL, RTC_CRL_CNF);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f043 0210 	orr.w	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	605a      	str	r2, [r3, #4]
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <LL_RTC_TIME_Set>:
  * @param  RTCx RTC Instance
  * @param  TimeCounter Value between Min_Data=0x00 and Max_Data=0xFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Set(RTC_TypeDef *RTCx, uint32_t TimeCounter)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  /* Set RTC COUNTER MSB word */
  WRITE_REG(RTCx->CNTH, (TimeCounter >> 16U));
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	0c1a      	lsrs	r2, r3, #16
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	619a      	str	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  WRITE_REG(RTCx->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	61da      	str	r2, [r3, #28]
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <LL_RTC_TIME_Get>:
  *         CNTL         CNT            LL_RTC_TIME_Get\n
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data = 0 and Max_Data = 0xFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_Get(RTC_TypeDef *RTCx)
{
 80050f4:	b4b0      	push	{r4, r5, r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  register uint16_t high = 0, low = 0;

  high = READ_REG(RTCx->CNTH & RTC_CNTH_RTC_CNT);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	b29d      	uxth	r5, r3
  low  = READ_REG(RTCx->CNTL & RTC_CNTL_RTC_CNT);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	b29c      	uxth	r4, r3
  return ((uint32_t)(((uint32_t) high << 16U) | low));
 8005108:	462b      	mov	r3, r5
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	4622      	mov	r2, r4
 800510e:	4313      	orrs	r3, r2
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	bcb0      	pop	{r4, r5, r7}
 8005118:	4770      	bx	lr
	...

0800511c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8005124:	4b08      	ldr	r3, [pc, #32]	; (8005148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	4907      	ldr	r1, [pc, #28]	; (8005148 <LL_APB1_GRP1_EnableClock+0x2c>)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4313      	orrs	r3, r2
 800512e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4013      	ands	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800513a:	68fb      	ldr	r3, [r7, #12]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000

0800514c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <LL_RCC_EnableRTC+0x18>)
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	4a03      	ldr	r2, [pc, #12]	; (8005164 <LL_RCC_EnableRTC+0x18>)
 8005156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515a:	6213      	str	r3, [r2, #32]
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr
 8005164:	40021000 	.word	0x40021000

08005168 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800516c:	4b04      	ldr	r3, [pc, #16]	; (8005180 <LL_PWR_EnableBkUpAccess+0x18>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a03      	ldr	r2, [pc, #12]	; (8005180 <LL_PWR_EnableBkUpAccess+0x18>)
 8005172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005176:	6013      	str	r3, [r2, #0]
}
 8005178:	bf00      	nop
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	40007000 	.word	0x40007000

08005184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
 800518c:	afc2      	add	r7, sp, #776	; 0x308
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800518e:	f000 ff15 	bl	8005fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005192:	f000 f98d 	bl	80054b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005196:	f000 fae9 	bl	800576c <MX_GPIO_Init>
  MX_ADC1_Init();
 800519a:	f000 f9e5 	bl	8005568 <MX_ADC1_Init>
  MX_I2C2_Init();
 800519e:	f000 fa21 	bl	80055e4 <MX_I2C2_Init>
  MX_SPI1_Init();
 80051a2:	f000 fa83 	bl	80056ac <MX_SPI1_Init>
  MX_RTC_Init();
 80051a6:	f000 fa4b 	bl	8005640 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80051aa:	f000 fab5 	bl	8005718 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80051ae:	2200      	movs	r2, #0
 80051b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051b4:	489b      	ldr	r0, [pc, #620]	; (8005424 <main+0x2a0>)
 80051b6:	f001 fd15 	bl	8006be4 <HAL_GPIO_WritePin>
    uint8_t tmp;
    uint8_t memsize[16] = {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2};
 80051ba:	4b9b      	ldr	r3, [pc, #620]	; (8005428 <main+0x2a4>)
 80051bc:	1d3c      	adds	r4, r7, #4
 80051be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  //  -- WIZCHIP SPI INIT
    printf("WIZCHIP SPI Init ...\n\r");
 80051c4:	4899      	ldr	r0, [pc, #612]	; (800542c <main+0x2a8>)
 80051c6:	f006 fa9f 	bl	800b708 <iprintf>
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80051ca:	4999      	ldr	r1, [pc, #612]	; (8005430 <main+0x2ac>)
 80051cc:	4899      	ldr	r0, [pc, #612]	; (8005434 <main+0x2b0>)
 80051ce:	f7fe f9c7 	bl	8003560 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80051d2:	4999      	ldr	r1, [pc, #612]	; (8005438 <main+0x2b4>)
 80051d4:	4899      	ldr	r0, [pc, #612]	; (800543c <main+0x2b8>)
 80051d6:	f7fe f9e7 	bl	80035a8 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80051da:	4999      	ldr	r1, [pc, #612]	; (8005440 <main+0x2bc>)
 80051dc:	4899      	ldr	r0, [pc, #612]	; (8005444 <main+0x2c0>)
 80051de:	f7fe fa0f 	bl	8003600 <reg_wizchip_spiburst_cbfunc>
    W5500_Restart();  // hardware restart through RESET pin
 80051e2:	f7fd f973 	bl	80024cc <W5500_Restart>

  //  -- WIZCHIP SOCKET Buffer initialize
    printf("WIZCHIP SOCKET Buffer Init ...\n\r");
 80051e6:	4898      	ldr	r0, [pc, #608]	; (8005448 <main+0x2c4>)
 80051e8:	f006 fa8e 	bl	800b708 <iprintf>
    if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 80051ec:	1d3b      	adds	r3, r7, #4
 80051ee:	4619      	mov	r1, r3
 80051f0:	2001      	movs	r0, #1
 80051f2:	f7fe fa31 	bl	8003658 <ctlwizchip>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d103      	bne.n	8005206 <main+0x82>
      {
      	printf("WIZCHIP buffer Initialized fail.\r\n");
 80051fe:	4893      	ldr	r0, [pc, #588]	; (800544c <main+0x2c8>)
 8005200:	f006 fae8 	bl	800b7d4 <puts>
         while(1);
 8005204:	e7fe      	b.n	8005204 <main+0x80>
      }
  //  -- PHY link status check
    printf("PHY Checking ...\n\r");
 8005206:	4892      	ldr	r0, [pc, #584]	; (8005450 <main+0x2cc>)
 8005208:	f006 fa7e 	bl	800b708 <iprintf>
    do{
         if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 800520c:	f107 0317 	add.w	r3, r7, #23
 8005210:	4619      	mov	r1, r3
 8005212:	200f      	movs	r0, #15
 8005214:	f7fe fa20 	bl	8003658 <ctlwizchip>
 8005218:	4603      	mov	r3, r0
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d102      	bne.n	8005226 <main+0xa2>
      	   printf("Unknown PHY Link stauts.\r\n");
 8005220:	488c      	ldr	r0, [pc, #560]	; (8005454 <main+0x2d0>)
 8005222:	f006 fad7 	bl	800b7d4 <puts>
    }while(tmp == PHY_LINK_OFF);
 8005226:	7dfb      	ldrb	r3, [r7, #23]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0ef      	beq.n	800520c <main+0x88>

  //  -- network initializing
    printf("Net initilize ...\n\r");
 800522c:	488a      	ldr	r0, [pc, #552]	; (8005458 <main+0x2d4>)
 800522e:	f006 fa6b 	bl	800b708 <iprintf>
    network_init();
 8005232:	f000 fbdd 	bl	80059f0 <network_init>

    printf("RTC NTP ...\n\r");
 8005236:	4889      	ldr	r0, [pc, #548]	; (800545c <main+0x2d8>)
 8005238:	f006 fa66 	bl	800b708 <iprintf>
    RTC_NTP_sync();
 800523c:	f000 fb70 	bl	8005920 <RTC_NTP_sync>

    AHT20_Init(&hi2c2);
 8005240:	4887      	ldr	r0, [pc, #540]	; (8005460 <main+0x2dc>)
 8005242:	f7fb fe49 	bl	8000ed8 <AHT20_Init>
    HAL_ADC_Start(&hadc1);
 8005246:	4887      	ldr	r0, [pc, #540]	; (8005464 <main+0x2e0>)
 8005248:	f001 f816 	bl	8006278 <HAL_ADC_Start>

    strncpy(InfoDATA.UinqID, "X132HT89CLQPS32S", sizeof(InfoDATA.UinqID));
 800524c:	4b86      	ldr	r3, [pc, #536]	; (8005468 <main+0x2e4>)
 800524e:	4a87      	ldr	r2, [pc, #540]	; (800546c <main+0x2e8>)
 8005250:	f103 0418 	add.w	r4, r3, #24
 8005254:	4615      	mov	r5, r2
 8005256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800525a:	682b      	ldr	r3, [r5, #0]
 800525c:	7023      	strb	r3, [r4, #0]
    strncpy(InfoDATA.Version, "CLT.1.3", sizeof(InfoDATA.Version));
 800525e:	2211      	movs	r2, #17
 8005260:	4983      	ldr	r1, [pc, #524]	; (8005470 <main+0x2ec>)
 8005262:	4884      	ldr	r0, [pc, #528]	; (8005474 <main+0x2f0>)
 8005264:	f006 fc0b 	bl	800ba7e <strncpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AHT20_Measure();
 8005268:	f7fb fe44 	bl	8000ef4 <AHT20_Measure>
	  InfoDATA.TEMP=(double)((int)(AHT20_Temp()*100)/100.0);
 800526c:	f7fb feac 	bl	8000fc8 <AHT20_Temp>
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	4b80      	ldr	r3, [pc, #512]	; (8005478 <main+0x2f4>)
 8005276:	f7fb f92f 	bl	80004d8 <__aeabi_dmul>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4610      	mov	r0, r2
 8005280:	4619      	mov	r1, r3
 8005282:	f7fb fbd9 	bl	8000a38 <__aeabi_d2iz>
 8005286:	4603      	mov	r3, r0
 8005288:	4618      	mov	r0, r3
 800528a:	f7fb f8bb 	bl	8000404 <__aeabi_i2d>
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	4b79      	ldr	r3, [pc, #484]	; (8005478 <main+0x2f4>)
 8005294:	f7fb fa4a 	bl	800072c <__aeabi_ddiv>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4972      	ldr	r1, [pc, #456]	; (8005468 <main+0x2e4>)
 800529e:	e9c1 2300 	strd	r2, r3, [r1]
	  InfoDATA.HUMID=(double)((int)(AHT20_Humid()*100)/100.0);
 80052a2:	f7fb fecd 	bl	8001040 <AHT20_Humid>
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	4b73      	ldr	r3, [pc, #460]	; (8005478 <main+0x2f4>)
 80052ac:	f7fb f914 	bl	80004d8 <__aeabi_dmul>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	f7fb fbbe 	bl	8000a38 <__aeabi_d2iz>
 80052bc:	4603      	mov	r3, r0
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fb f8a0 	bl	8000404 <__aeabi_i2d>
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	4b6b      	ldr	r3, [pc, #428]	; (8005478 <main+0x2f4>)
 80052ca:	f7fb fa2f 	bl	800072c <__aeabi_ddiv>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4965      	ldr	r1, [pc, #404]	; (8005468 <main+0x2e4>)
 80052d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  InfoDATA.LPG=HAL_ADC_GetValue(&hadc1);
 80052d8:	4862      	ldr	r0, [pc, #392]	; (8005464 <main+0x2e0>)
 80052da:	f001 f87b 	bl	80063d4 <HAL_ADC_GetValue>
 80052de:	4603      	mov	r3, r0
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	4b61      	ldr	r3, [pc, #388]	; (8005468 <main+0x2e4>)
 80052e4:	821a      	strh	r2, [r3, #16]
	  InfoDATA.SMK=HAL_ADC_GetValue(&hadc1)+200;
 80052e6:	485f      	ldr	r0, [pc, #380]	; (8005464 <main+0x2e0>)
 80052e8:	f001 f874 	bl	80063d4 <HAL_ADC_GetValue>
 80052ec:	4603      	mov	r3, r0
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	33c8      	adds	r3, #200	; 0xc8
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	4b5c      	ldr	r3, [pc, #368]	; (8005468 <main+0x2e4>)
 80052f6:	825a      	strh	r2, [r3, #18]
	  UPDATE_JSON();
 80052f8:	f000 fabc 	bl	8005874 <UPDATE_JSON>
	  calcdatetime(LL_RTC_TIME_Get(RTC)+ Twn_offset, &DATE);
 80052fc:	485f      	ldr	r0, [pc, #380]	; (800547c <main+0x2f8>)
 80052fe:	f7ff fef9 	bl	80050f4 <LL_RTC_TIME_Get>
 8005302:	4603      	mov	r3, r0
 8005304:	2200      	movs	r2, #0
 8005306:	4698      	mov	r8, r3
 8005308:	4691      	mov	r9, r2
 800530a:	4b5d      	ldr	r3, [pc, #372]	; (8005480 <main+0x2fc>)
 800530c:	eb18 0a03 	adds.w	sl, r8, r3
 8005310:	f149 0b00 	adc.w	fp, r9, #0
 8005314:	4650      	mov	r0, sl
 8005316:	4659      	mov	r1, fp
 8005318:	4a5a      	ldr	r2, [pc, #360]	; (8005484 <main+0x300>)
 800531a:	f7fc fe83 	bl	8002024 <calcdatetime>
      printf("\r\nDate: %d, %d/%02d/%02d %02d:%02d:%02d\r\n",DATE.wd,DATE.yy,DATE.mo,DATE.dd,DATE.hh,DATE.mm,DATE.ss);
 800531e:	4b59      	ldr	r3, [pc, #356]	; (8005484 <main+0x300>)
 8005320:	79db      	ldrb	r3, [r3, #7]
 8005322:	461c      	mov	r4, r3
 8005324:	4b57      	ldr	r3, [pc, #348]	; (8005484 <main+0x300>)
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	461d      	mov	r5, r3
 800532a:	4b56      	ldr	r3, [pc, #344]	; (8005484 <main+0x300>)
 800532c:	789b      	ldrb	r3, [r3, #2]
 800532e:	461e      	mov	r6, r3
 8005330:	4b54      	ldr	r3, [pc, #336]	; (8005484 <main+0x300>)
 8005332:	78db      	ldrb	r3, [r3, #3]
 8005334:	461a      	mov	r2, r3
 8005336:	4b53      	ldr	r3, [pc, #332]	; (8005484 <main+0x300>)
 8005338:	791b      	ldrb	r3, [r3, #4]
 800533a:	4619      	mov	r1, r3
 800533c:	4b51      	ldr	r3, [pc, #324]	; (8005484 <main+0x300>)
 800533e:	795b      	ldrb	r3, [r3, #5]
 8005340:	4618      	mov	r0, r3
 8005342:	4b50      	ldr	r3, [pc, #320]	; (8005484 <main+0x300>)
 8005344:	799b      	ldrb	r3, [r3, #6]
 8005346:	9303      	str	r3, [sp, #12]
 8005348:	9002      	str	r0, [sp, #8]
 800534a:	9101      	str	r1, [sp, #4]
 800534c:	9200      	str	r2, [sp, #0]
 800534e:	4633      	mov	r3, r6
 8005350:	462a      	mov	r2, r5
 8005352:	4621      	mov	r1, r4
 8005354:	484c      	ldr	r0, [pc, #304]	; (8005488 <main+0x304>)
 8005356:	f006 f9d7 	bl	800b708 <iprintf>

	  //HTTP Request making
	  HTTPREQ.METHOD=METHOD_POST;
 800535a:	4b4c      	ldr	r3, [pc, #304]	; (800548c <main+0x308>)
 800535c:	2203      	movs	r2, #3
 800535e:	701a      	strb	r2, [r3, #0]
	  strcpy((char*)HTTPREQ.URI,"server");
 8005360:	4b4b      	ldr	r3, [pc, #300]	; (8005490 <main+0x30c>)
 8005362:	4a4c      	ldr	r2, [pc, #304]	; (8005494 <main+0x310>)
 8005364:	6810      	ldr	r0, [r2, #0]
 8005366:	6018      	str	r0, [r3, #0]
 8005368:	8891      	ldrh	r1, [r2, #4]
 800536a:	7992      	ldrb	r2, [r2, #6]
 800536c:	8099      	strh	r1, [r3, #4]
 800536e:	719a      	strb	r2, [r3, #6]
	  HTTPREQ.API[0]=0;
 8005370:	4b46      	ldr	r3, [pc, #280]	; (800548c <main+0x308>)
 8005372:	2200      	movs	r2, #0
 8005374:	725a      	strb	r2, [r3, #9]
	  HTTPREQ.DATE[0]=DATE.wd+1;  HTTPREQ.DATE[1]=(uint8_t)(DATE.yy%100);    HTTPREQ.DATE[2]=DATE.mo;    HTTPREQ.DATE[3]=DATE.dd;
 8005376:	4b43      	ldr	r3, [pc, #268]	; (8005484 <main+0x300>)
 8005378:	79db      	ldrb	r3, [r3, #7]
 800537a:	3301      	adds	r3, #1
 800537c:	b2da      	uxtb	r2, r3
 800537e:	4b43      	ldr	r3, [pc, #268]	; (800548c <main+0x308>)
 8005380:	709a      	strb	r2, [r3, #2]
 8005382:	4b40      	ldr	r3, [pc, #256]	; (8005484 <main+0x300>)
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	4a44      	ldr	r2, [pc, #272]	; (8005498 <main+0x314>)
 8005388:	fba2 1203 	umull	r1, r2, r2, r3
 800538c:	0952      	lsrs	r2, r2, #5
 800538e:	2164      	movs	r1, #100	; 0x64
 8005390:	fb01 f202 	mul.w	r2, r1, r2
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	b29b      	uxth	r3, r3
 8005398:	b2da      	uxtb	r2, r3
 800539a:	4b3c      	ldr	r3, [pc, #240]	; (800548c <main+0x308>)
 800539c:	70da      	strb	r2, [r3, #3]
 800539e:	4b39      	ldr	r3, [pc, #228]	; (8005484 <main+0x300>)
 80053a0:	789a      	ldrb	r2, [r3, #2]
 80053a2:	4b3a      	ldr	r3, [pc, #232]	; (800548c <main+0x308>)
 80053a4:	711a      	strb	r2, [r3, #4]
 80053a6:	4b37      	ldr	r3, [pc, #220]	; (8005484 <main+0x300>)
 80053a8:	78da      	ldrb	r2, [r3, #3]
 80053aa:	4b38      	ldr	r3, [pc, #224]	; (800548c <main+0x308>)
 80053ac:	715a      	strb	r2, [r3, #5]
	  HTTPREQ.DATE[4]=DATE.hh;	  HTTPREQ.DATE[5]=DATE.mm;        HTTPREQ.DATE[6]=DATE.ss;
 80053ae:	4b35      	ldr	r3, [pc, #212]	; (8005484 <main+0x300>)
 80053b0:	791a      	ldrb	r2, [r3, #4]
 80053b2:	4b36      	ldr	r3, [pc, #216]	; (800548c <main+0x308>)
 80053b4:	719a      	strb	r2, [r3, #6]
 80053b6:	4b33      	ldr	r3, [pc, #204]	; (8005484 <main+0x300>)
 80053b8:	795a      	ldrb	r2, [r3, #5]
 80053ba:	4b34      	ldr	r3, [pc, #208]	; (800548c <main+0x308>)
 80053bc:	71da      	strb	r2, [r3, #7]
 80053be:	4b31      	ldr	r3, [pc, #196]	; (8005484 <main+0x300>)
 80053c0:	799a      	ldrb	r2, [r3, #6]
 80053c2:	4b32      	ldr	r3, [pc, #200]	; (800548c <main+0x308>)
 80053c4:	721a      	strb	r2, [r3, #8]
	  strcpy((char*)HTTPREQ.HOST,"185.230.163.241");
 80053c6:	4a35      	ldr	r2, [pc, #212]	; (800549c <main+0x318>)
 80053c8:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <main+0x31c>)
 80053ca:	4614      	mov	r4, r2
 80053cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HTTPREQ.PORT=8000;
 80053d2:	4b2e      	ldr	r3, [pc, #184]	; (800548c <main+0x308>)
 80053d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80053d8:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	  HTTPREQ.TYPE=PTYPE_JSON;
 80053dc:	4b2b      	ldr	r3, [pc, #172]	; (800548c <main+0x308>)
 80053de:	2204      	movs	r2, #4
 80053e0:	705a      	strb	r2, [r3, #1]
	  HTTP_ERROR_HANDLER(HTTP_REQ_make(HTTPREQ,(uint8_t *) JSONBUF, HTTPBUF));
 80053e2:	4b30      	ldr	r3, [pc, #192]	; (80054a4 <main+0x320>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4c29      	ldr	r4, [pc, #164]	; (800548c <main+0x308>)
 80053e8:	4a2f      	ldr	r2, [pc, #188]	; (80054a8 <main+0x324>)
 80053ea:	92c0      	str	r2, [sp, #768]	; 0x300
 80053ec:	93bf      	str	r3, [sp, #764]	; 0x2fc
 80053ee:	4668      	mov	r0, sp
 80053f0:	f104 0310 	add.w	r3, r4, #16
 80053f4:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80053f8:	4619      	mov	r1, r3
 80053fa:	f006 fbef 	bl	800bbdc <memcpy>
 80053fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005402:	f7fb fe4d 	bl	80010a0 <HTTP_REQ_make>
 8005406:	4603      	mov	r3, r0
 8005408:	4618      	mov	r0, r3
 800540a:	f7fc f965 	bl	80016d8 <HTTP_ERROR_HANDLER>
	  printf("This is Output:\r\n");
 800540e:	4827      	ldr	r0, [pc, #156]	; (80054ac <main+0x328>)
 8005410:	f006 f9e0 	bl	800b7d4 <puts>
	  printf((char*)HTTPBUF);
 8005414:	4824      	ldr	r0, [pc, #144]	; (80054a8 <main+0x324>)
 8005416:	f006 f977 	bl	800b708 <iprintf>

	  HAL_Delay(1000);
 800541a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800541e:	f000 fe2f 	bl	8006080 <HAL_Delay>
	  AHT20_Measure();
 8005422:	e721      	b.n	8005268 <main+0xe4>
 8005424:	40011000 	.word	0x40011000
 8005428:	0800f000 	.word	0x0800f000
 800542c:	0800eed8 	.word	0x0800eed8
 8005430:	080024b5 	.word	0x080024b5
 8005434:	0800249d 	.word	0x0800249d
 8005438:	08002563 	.word	0x08002563
 800543c:	08002549 	.word	0x08002549
 8005440:	08002521 	.word	0x08002521
 8005444:	080024f9 	.word	0x080024f9
 8005448:	0800eef0 	.word	0x0800eef0
 800544c:	0800ef14 	.word	0x0800ef14
 8005450:	0800ef38 	.word	0x0800ef38
 8005454:	0800ef4c 	.word	0x0800ef4c
 8005458:	0800ef68 	.word	0x0800ef68
 800545c:	0800ef7c 	.word	0x0800ef7c
 8005460:	2000031c 	.word	0x2000031c
 8005464:	200002ec 	.word	0x200002ec
 8005468:	20000418 	.word	0x20000418
 800546c:	0800ef8c 	.word	0x0800ef8c
 8005470:	0800efa0 	.word	0x0800efa0
 8005474:	20000441 	.word	0x20000441
 8005478:	40590000 	.word	0x40590000
 800547c:	40002800 	.word	0x40002800
 8005480:	bc1a6500 	.word	0xbc1a6500
 8005484:	20000410 	.word	0x20000410
 8005488:	0800efa8 	.word	0x0800efa8
 800548c:	20000660 	.word	0x20000660
 8005490:	20000769 	.word	0x20000769
 8005494:	0800efd4 	.word	0x0800efd4
 8005498:	51eb851f 	.word	0x51eb851f
 800549c:	2000086c 	.word	0x2000086c
 80054a0:	0800efdc 	.word	0x0800efdc
 80054a4:	20000458 	.word	0x20000458
 80054a8:	2000045c 	.word	0x2000045c
 80054ac:	0800efec 	.word	0x0800efec

080054b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b094      	sub	sp, #80	; 0x50
 80054b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054ba:	2228      	movs	r2, #40	; 0x28
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f006 fab4 	bl	800ba2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	609a      	str	r2, [r3, #8]
 80054d0:	60da      	str	r2, [r3, #12]
 80054d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054d4:	1d3b      	adds	r3, r7, #4
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	605a      	str	r2, [r3, #4]
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80054e0:	2306      	movs	r3, #6
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80054e4:	2301      	movs	r3, #1
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80054e8:	2301      	movs	r3, #1
 80054ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80054ec:	2310      	movs	r3, #16
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054f0:	2302      	movs	r3, #2
 80054f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80054f4:	2300      	movs	r3, #0
 80054f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80054f8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80054fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005502:	4618      	mov	r0, r3
 8005504:	f002 fbba 	bl	8007c7c <HAL_RCC_OscConfig>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800550e:	f000 faf7 	bl	8005b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005512:	230f      	movs	r3, #15
 8005514:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005516:	2302      	movs	r3, #2
 8005518:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800551e:	2300      	movs	r3, #0
 8005520:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005522:	2300      	movs	r3, #0
 8005524:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005526:	f107 0314 	add.w	r3, r7, #20
 800552a:	2101      	movs	r1, #1
 800552c:	4618      	mov	r0, r3
 800552e:	f002 fe27 	bl	8008180 <HAL_RCC_ClockConfig>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8005538:	f000 fae2 	bl	8005b00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800553c:	2303      	movs	r3, #3
 800553e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005544:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8005546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800554a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	4618      	mov	r0, r3
 8005550:	f002 ffa4 	bl	800849c <HAL_RCCEx_PeriphCLKConfig>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800555a:	f000 fad1 	bl	8005b00 <Error_Handler>
  }
}
 800555e:	bf00      	nop
 8005560:	3750      	adds	r7, #80	; 0x50
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800556e:	1d3b      	adds	r3, r7, #4
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005578:	4b18      	ldr	r3, [pc, #96]	; (80055dc <MX_ADC1_Init+0x74>)
 800557a:	4a19      	ldr	r2, [pc, #100]	; (80055e0 <MX_ADC1_Init+0x78>)
 800557c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800557e:	4b17      	ldr	r3, [pc, #92]	; (80055dc <MX_ADC1_Init+0x74>)
 8005580:	2200      	movs	r2, #0
 8005582:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005584:	4b15      	ldr	r3, [pc, #84]	; (80055dc <MX_ADC1_Init+0x74>)
 8005586:	2201      	movs	r2, #1
 8005588:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800558a:	4b14      	ldr	r3, [pc, #80]	; (80055dc <MX_ADC1_Init+0x74>)
 800558c:	2200      	movs	r2, #0
 800558e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005590:	4b12      	ldr	r3, [pc, #72]	; (80055dc <MX_ADC1_Init+0x74>)
 8005592:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005596:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005598:	4b10      	ldr	r3, [pc, #64]	; (80055dc <MX_ADC1_Init+0x74>)
 800559a:	2200      	movs	r2, #0
 800559c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800559e:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <MX_ADC1_Init+0x74>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80055a4:	480d      	ldr	r0, [pc, #52]	; (80055dc <MX_ADC1_Init+0x74>)
 80055a6:	f000 fd8f 	bl	80060c8 <HAL_ADC_Init>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80055b0:	f000 faa6 	bl	8005b00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80055b4:	2309      	movs	r3, #9
 80055b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80055b8:	2301      	movs	r3, #1
 80055ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055c0:	1d3b      	adds	r3, r7, #4
 80055c2:	4619      	mov	r1, r3
 80055c4:	4805      	ldr	r0, [pc, #20]	; (80055dc <MX_ADC1_Init+0x74>)
 80055c6:	f000 ff11 	bl	80063ec <HAL_ADC_ConfigChannel>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80055d0:	f000 fa96 	bl	8005b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80055d4:	bf00      	nop
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	200002ec 	.word	0x200002ec
 80055e0:	40012400 	.word	0x40012400

080055e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80055e8:	4b12      	ldr	r3, [pc, #72]	; (8005634 <MX_I2C2_Init+0x50>)
 80055ea:	4a13      	ldr	r2, [pc, #76]	; (8005638 <MX_I2C2_Init+0x54>)
 80055ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80055ee:	4b11      	ldr	r3, [pc, #68]	; (8005634 <MX_I2C2_Init+0x50>)
 80055f0:	4a12      	ldr	r2, [pc, #72]	; (800563c <MX_I2C2_Init+0x58>)
 80055f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055f4:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <MX_I2C2_Init+0x50>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80055fa:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <MX_I2C2_Init+0x50>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <MX_I2C2_Init+0x50>)
 8005602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005606:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <MX_I2C2_Init+0x50>)
 800560a:	2200      	movs	r2, #0
 800560c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <MX_I2C2_Init+0x50>)
 8005610:	2200      	movs	r2, #0
 8005612:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005614:	4b07      	ldr	r3, [pc, #28]	; (8005634 <MX_I2C2_Init+0x50>)
 8005616:	2200      	movs	r2, #0
 8005618:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800561a:	4b06      	ldr	r3, [pc, #24]	; (8005634 <MX_I2C2_Init+0x50>)
 800561c:	2200      	movs	r2, #0
 800561e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005620:	4804      	ldr	r0, [pc, #16]	; (8005634 <MX_I2C2_Init+0x50>)
 8005622:	f001 faf7 	bl	8006c14 <HAL_I2C_Init>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800562c:	f000 fa68 	bl	8005b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005630:	bf00      	nop
 8005632:	bd80      	pop	{r7, pc}
 8005634:	2000031c 	.word	0x2000031c
 8005638:	40005800 	.word	0x40005800
 800563c:	00061a80 	.word	0x00061a80

08005640 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8005646:	f107 0308 	add.w	r3, r7, #8
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	605a      	str	r2, [r3, #4]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8005650:	1d3b      	adds	r3, r7, #4
 8005652:	2100      	movs	r1, #0
 8005654:	460a      	mov	r2, r1
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	460a      	mov	r2, r1
 800565a:	709a      	strb	r2, [r3, #2]

    LL_PWR_EnableBkUpAccess();
 800565c:	f7ff fd84 	bl	8005168 <LL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_BKP);
 8005660:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005664:	f7ff fd5a 	bl	800511c <LL_APB1_GRP1_EnableClock>
  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8005668:	f7ff fd70 	bl	800514c <LL_RCC_EnableRTC>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.AsynchPrescaler = 0x8000;
 800566c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005670:	60bb      	str	r3, [r7, #8]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8005672:	f107 0308 	add.w	r3, r7, #8
 8005676:	4619      	mov	r1, r3
 8005678:	480b      	ldr	r0, [pc, #44]	; (80056a8 <MX_RTC_Init+0x68>)
 800567a:	f003 ffff 	bl	800967c <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 0x8000);
 800567e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005682:	4809      	ldr	r0, [pc, #36]	; (80056a8 <MX_RTC_Init+0x68>)
 8005684:	f7ff fcea 	bl	800505c <LL_RTC_SetAsynchPrescaler>

  /** Initialize RTC and set the Time and Date
  */
  RTC_TimeStruct.Hours = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	713b      	strb	r3, [r7, #4]
  RTC_TimeStruct.Minutes = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	717b      	strb	r3, [r7, #5]
  RTC_TimeStruct.Seconds = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	71bb      	strb	r3, [r7, #6]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 8005694:	1d3b      	adds	r3, r7, #4
 8005696:	461a      	mov	r2, r3
 8005698:	2101      	movs	r1, #1
 800569a:	4803      	ldr	r0, [pc, #12]	; (80056a8 <MX_RTC_Init+0x68>)
 800569c:	f004 f82a 	bl	80096f4 <LL_RTC_TIME_Init>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40002800 	.word	0x40002800

080056ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80056b0:	4b17      	ldr	r3, [pc, #92]	; (8005710 <MX_SPI1_Init+0x64>)
 80056b2:	4a18      	ldr	r2, [pc, #96]	; (8005714 <MX_SPI1_Init+0x68>)
 80056b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80056b6:	4b16      	ldr	r3, [pc, #88]	; (8005710 <MX_SPI1_Init+0x64>)
 80056b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80056bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80056be:	4b14      	ldr	r3, [pc, #80]	; (8005710 <MX_SPI1_Init+0x64>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80056c4:	4b12      	ldr	r3, [pc, #72]	; (8005710 <MX_SPI1_Init+0x64>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80056ca:	4b11      	ldr	r3, [pc, #68]	; (8005710 <MX_SPI1_Init+0x64>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <MX_SPI1_Init+0x64>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80056d6:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <MX_SPI1_Init+0x64>)
 80056d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <MX_SPI1_Init+0x64>)
 80056e0:	2208      	movs	r2, #8
 80056e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <MX_SPI1_Init+0x64>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <MX_SPI1_Init+0x64>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056f0:	4b07      	ldr	r3, [pc, #28]	; (8005710 <MX_SPI1_Init+0x64>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <MX_SPI1_Init+0x64>)
 80056f8:	220a      	movs	r2, #10
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80056fc:	4804      	ldr	r0, [pc, #16]	; (8005710 <MX_SPI1_Init+0x64>)
 80056fe:	f002 ff83 	bl	8008608 <HAL_SPI_Init>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005708:	f000 f9fa 	bl	8005b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800570c:	bf00      	nop
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20000370 	.word	0x20000370
 8005714:	40013000 	.word	0x40013000

08005718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800571c:	4b11      	ldr	r3, [pc, #68]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 800571e:	4a12      	ldr	r2, [pc, #72]	; (8005768 <MX_USART1_UART_Init+0x50>)
 8005720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 8005724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800572a:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 800572c:	2200      	movs	r2, #0
 800572e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 8005732:	2200      	movs	r2, #0
 8005734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 8005738:	2200      	movs	r2, #0
 800573a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800573c:	4b09      	ldr	r3, [pc, #36]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 800573e:	220c      	movs	r2, #12
 8005740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005742:	4b08      	ldr	r3, [pc, #32]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 8005744:	2200      	movs	r2, #0
 8005746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 800574a:	2200      	movs	r2, #0
 800574c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800574e:	4805      	ldr	r0, [pc, #20]	; (8005764 <MX_USART1_UART_Init+0x4c>)
 8005750:	f003 fce2 	bl	8009118 <HAL_UART_Init>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800575a:	f000 f9d1 	bl	8005b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200003c8 	.word	0x200003c8
 8005768:	40013800 	.word	0x40013800

0800576c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005772:	f107 0310 	add.w	r3, r7, #16
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	609a      	str	r2, [r3, #8]
 800577e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005780:	4b38      	ldr	r3, [pc, #224]	; (8005864 <MX_GPIO_Init+0xf8>)
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	4a37      	ldr	r2, [pc, #220]	; (8005864 <MX_GPIO_Init+0xf8>)
 8005786:	f043 0310 	orr.w	r3, r3, #16
 800578a:	6193      	str	r3, [r2, #24]
 800578c:	4b35      	ldr	r3, [pc, #212]	; (8005864 <MX_GPIO_Init+0xf8>)
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005798:	4b32      	ldr	r3, [pc, #200]	; (8005864 <MX_GPIO_Init+0xf8>)
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	4a31      	ldr	r2, [pc, #196]	; (8005864 <MX_GPIO_Init+0xf8>)
 800579e:	f043 0320 	orr.w	r3, r3, #32
 80057a2:	6193      	str	r3, [r2, #24]
 80057a4:	4b2f      	ldr	r3, [pc, #188]	; (8005864 <MX_GPIO_Init+0xf8>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b0:	4b2c      	ldr	r3, [pc, #176]	; (8005864 <MX_GPIO_Init+0xf8>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	4a2b      	ldr	r2, [pc, #172]	; (8005864 <MX_GPIO_Init+0xf8>)
 80057b6:	f043 0304 	orr.w	r3, r3, #4
 80057ba:	6193      	str	r3, [r2, #24]
 80057bc:	4b29      	ldr	r3, [pc, #164]	; (8005864 <MX_GPIO_Init+0xf8>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	607b      	str	r3, [r7, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80057c8:	4b26      	ldr	r3, [pc, #152]	; (8005864 <MX_GPIO_Init+0xf8>)
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	4a25      	ldr	r2, [pc, #148]	; (8005864 <MX_GPIO_Init+0xf8>)
 80057ce:	f043 0308 	orr.w	r3, r3, #8
 80057d2:	6193      	str	r3, [r2, #24]
 80057d4:	4b23      	ldr	r3, [pc, #140]	; (8005864 <MX_GPIO_Init+0xf8>)
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80057e0:	2200      	movs	r2, #0
 80057e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057e6:	4820      	ldr	r0, [pc, #128]	; (8005868 <MX_GPIO_Init+0xfc>)
 80057e8:	f001 f9fc 	bl	8006be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_SELECT_Pin|SPI_RST_Pin|SPI_SELECT_Pin, GPIO_PIN_RESET);
 80057ec:	2200      	movs	r2, #0
 80057ee:	211c      	movs	r1, #28
 80057f0:	481e      	ldr	r0, [pc, #120]	; (800586c <MX_GPIO_Init+0x100>)
 80057f2:	f001 f9f7 	bl	8006be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin|RELAY_4_Pin, GPIO_PIN_RESET);
 80057f6:	2200      	movs	r2, #0
 80057f8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80057fc:	481c      	ldr	r0, [pc, #112]	; (8005870 <MX_GPIO_Init+0x104>)
 80057fe:	f001 f9f1 	bl	8006be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005808:	2301      	movs	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580c:	2300      	movs	r3, #0
 800580e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005810:	2301      	movs	r3, #1
 8005812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005814:	f107 0310 	add.w	r3, r7, #16
 8005818:	4619      	mov	r1, r3
 800581a:	4813      	ldr	r0, [pc, #76]	; (8005868 <MX_GPIO_Init+0xfc>)
 800581c:	f001 f85e 	bl	80068dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_SELECT_Pin SPI_RST_Pin SPI_SELECT_Pin */
  GPIO_InitStruct.Pin = RFID_SELECT_Pin|SPI_RST_Pin|SPI_SELECT_Pin;
 8005820:	231c      	movs	r3, #28
 8005822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005824:	2301      	movs	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005828:	2300      	movs	r3, #0
 800582a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800582c:	2303      	movs	r3, #3
 800582e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005830:	f107 0310 	add.w	r3, r7, #16
 8005834:	4619      	mov	r1, r3
 8005836:	480d      	ldr	r0, [pc, #52]	; (800586c <MX_GPIO_Init+0x100>)
 8005838:	f001 f850 	bl	80068dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_1_Pin RELAY_2_Pin RELAY_3_Pin RELAY_4_Pin */
  GPIO_InitStruct.Pin = RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin|RELAY_4_Pin;
 800583c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005842:	2301      	movs	r3, #1
 8005844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005846:	2300      	movs	r3, #0
 8005848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800584a:	2303      	movs	r3, #3
 800584c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800584e:	f107 0310 	add.w	r3, r7, #16
 8005852:	4619      	mov	r1, r3
 8005854:	4806      	ldr	r0, [pc, #24]	; (8005870 <MX_GPIO_Init+0x104>)
 8005856:	f001 f841 	bl	80068dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800585a:	bf00      	nop
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40021000 	.word	0x40021000
 8005868:	40011000 	.word	0x40011000
 800586c:	40010800 	.word	0x40010800
 8005870:	40010c00 	.word	0x40010c00

08005874 <UPDATE_JSON>:

/* USER CODE BEGIN 4 */
void UPDATE_JSON(void){
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
		cJSON *root = cJSON_CreateObject();
 800587a:	f7ff fbdb 	bl	8005034 <cJSON_CreateObject>
 800587e:	6078      	str	r0, [r7, #4]
	    cJSON_AddNumberToObject(root, "temp", InfoDATA.TEMP);
 8005880:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <UPDATE_JSON+0x84>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	491d      	ldr	r1, [pc, #116]	; (80058fc <UPDATE_JSON+0x88>)
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fb1d 	bl	8004ec8 <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(root, "humid", InfoDATA.HUMID);
 800588e:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <UPDATE_JSON+0x84>)
 8005890:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005894:	491a      	ldr	r1, [pc, #104]	; (8005900 <UPDATE_JSON+0x8c>)
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fb16 	bl	8004ec8 <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(root, "lpg", InfoDATA.LPG);
 800589c:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <UPDATE_JSON+0x84>)
 800589e:	8a1b      	ldrh	r3, [r3, #16]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fa fd9f 	bl	80003e4 <__aeabi_ui2d>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4916      	ldr	r1, [pc, #88]	; (8005904 <UPDATE_JSON+0x90>)
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff fb0b 	bl	8004ec8 <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(root, "smk", InfoDATA.SMK);
 80058b2:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <UPDATE_JSON+0x84>)
 80058b4:	8a5b      	ldrh	r3, [r3, #18]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fa fd94 	bl	80003e4 <__aeabi_ui2d>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4911      	ldr	r1, [pc, #68]	; (8005908 <UPDATE_JSON+0x94>)
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff fb00 	bl	8004ec8 <cJSON_AddNumberToObject>
	    cJSON_AddStringToObject(root, "uid", InfoDATA.UinqID);
 80058c8:	4a10      	ldr	r2, [pc, #64]	; (800590c <UPDATE_JSON+0x98>)
 80058ca:	4911      	ldr	r1, [pc, #68]	; (8005910 <UPDATE_JSON+0x9c>)
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fb1f 	bl	8004f10 <cJSON_AddStringToObject>
	    cJSON_AddStringToObject(root, "ver", InfoDATA.Version);
 80058d2:	4a10      	ldr	r2, [pc, #64]	; (8005914 <UPDATE_JSON+0xa0>)
 80058d4:	4910      	ldr	r1, [pc, #64]	; (8005918 <UPDATE_JSON+0xa4>)
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff fb1a 	bl	8004f10 <cJSON_AddStringToObject>
	    JSONBUF = cJSON_Print(root);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7fe ffb5 	bl	800484c <cJSON_Print>
 80058e2:	4603      	mov	r3, r0
 80058e4:	4a0d      	ldr	r2, [pc, #52]	; (800591c <UPDATE_JSON+0xa8>)
 80058e6:	6013      	str	r3, [r2, #0]
	    // Clean up cJSON objects
	    cJSON_Delete(root);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7fe fbbd 	bl	8004068 <cJSON_Delete>
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000418 	.word	0x20000418
 80058fc:	0800f010 	.word	0x0800f010
 8005900:	0800f018 	.word	0x0800f018
 8005904:	0800f020 	.word	0x0800f020
 8005908:	0800f024 	.word	0x0800f024
 800590c:	20000430 	.word	0x20000430
 8005910:	0800f028 	.word	0x0800f028
 8005914:	20000441 	.word	0x20000441
 8005918:	0800f02c 	.word	0x0800f02c
 800591c:	20000458 	.word	0x20000458

08005920 <RTC_NTP_sync>:


/********************************** NTP and RTC ******************************************/
void RTC_NTP_sync(void){
 8005920:	b580      	push	{r7, lr}
 8005922:	b092      	sub	sp, #72	; 0x48
 8005924:	af00      	add	r7, sp, #0
	  LL_RTC_EnterInitMode(RTC);
 8005926:	4823      	ldr	r0, [pc, #140]	; (80059b4 <RTC_NTP_sync+0x94>)
 8005928:	f003 ff5a 	bl	80097e0 <LL_RTC_EnterInitMode>
	  LL_RTC_DisableWriteProtection(RTC);
 800592c:	4821      	ldr	r0, [pc, #132]	; (80059b4 <RTC_NTP_sync+0x94>)
 800592e:	f7ff fbc0 	bl	80050b2 <LL_RTC_DisableWriteProtection>
	  uint8_t Timebuf[48]={0};
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	f107 0314 	add.w	r3, r7, #20
 800593a:	222c      	movs	r2, #44	; 0x2c
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f006 f874 	bl	800ba2c <memset>
	  uint8_t ntpserverip[4] ={SNTP_IP};
 8005944:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <RTC_NTP_sync+0x98>)
 8005946:	60fb      	str	r3, [r7, #12]
	  datetime TIME_DST;
	  printf("SNTP initializing\r\n");
 8005948:	481c      	ldr	r0, [pc, #112]	; (80059bc <RTC_NTP_sync+0x9c>)
 800594a:	f005 ff43 	bl	800b7d4 <puts>
	  SNTP_init(0, ntpserverip, 21, Timebuf);
 800594e:	f107 0310 	add.w	r3, r7, #16
 8005952:	f107 010c 	add.w	r1, r7, #12
 8005956:	2215      	movs	r2, #21
 8005958:	2000      	movs	r0, #0
 800595a:	f7fc fa23 	bl	8001da4 <SNTP_init>
	  printf("SNTP Running\r\n");
 800595e:	4818      	ldr	r0, [pc, #96]	; (80059c0 <RTC_NTP_sync+0xa0>)
 8005960:	f005 ff38 	bl	800b7d4 <puts>
	  tstamp S=0;
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  do{
		 HAL_Delay(100);
 8005970:	2064      	movs	r0, #100	; 0x64
 8005972:	f000 fb85 	bl	8006080 <HAL_Delay>
		 S = SNTP_run(&TIME_DST);
 8005976:	1d3b      	adds	r3, r7, #4
 8005978:	4618      	mov	r0, r3
 800597a:	f7fc fa8d 	bl	8001e98 <SNTP_run>
 800597e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
	  }while(S==0);
 8005982:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005986:	4313      	orrs	r3, r2
 8005988:	d0f2      	beq.n	8005970 <RTC_NTP_sync+0x50>
	  LL_RTC_TIME_Set(RTC,(uint32_t)(S - Twn_offset));
 800598a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800598c:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <RTC_NTP_sync+0xa4>)
 800598e:	4413      	add	r3, r2
 8005990:	4619      	mov	r1, r3
 8005992:	4808      	ldr	r0, [pc, #32]	; (80059b4 <RTC_NTP_sync+0x94>)
 8005994:	f7ff fb9c 	bl	80050d0 <LL_RTC_TIME_Set>
	  printf("SNTP success, configing RTC\r\n");
 8005998:	480b      	ldr	r0, [pc, #44]	; (80059c8 <RTC_NTP_sync+0xa8>)
 800599a:	f005 ff1b 	bl	800b7d4 <puts>
	  LL_RTC_ExitInitMode(RTC);
 800599e:	4805      	ldr	r0, [pc, #20]	; (80059b4 <RTC_NTP_sync+0x94>)
 80059a0:	f003 ff4d 	bl	800983e <LL_RTC_ExitInitMode>
	  LL_RTC_EnableWriteProtection(RTC);
 80059a4:	4803      	ldr	r0, [pc, #12]	; (80059b4 <RTC_NTP_sync+0x94>)
 80059a6:	f7ff fb75 	bl	8005094 <LL_RTC_EnableWriteProtection>
}
 80059aa:	bf00      	nop
 80059ac:	3748      	adds	r7, #72	; 0x48
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40002800 	.word	0x40002800
 80059b8:	feaad61f 	.word	0xfeaad61f
 80059bc:	0800f030 	.word	0x0800f030
 80059c0:	0800f044 	.word	0x0800f044
 80059c4:	43e59b00 	.word	0x43e59b00
 80059c8:	0800f054 	.word	0x0800f054

080059cc <__io_putchar>:
/********************************** END - NTP and RTC ******************************************/

/********************************** UART REDIRECT ******************************************/
PUTCHAR_PROTOTYPE
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80059d4:	1d39      	adds	r1, r7, #4
 80059d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059da:	2201      	movs	r2, #1
 80059dc:	4803      	ldr	r0, [pc, #12]	; (80059ec <__io_putchar+0x20>)
 80059de:	f003 fbeb 	bl	80091b8 <HAL_UART_Transmit>
  return ch;
 80059e2:	687b      	ldr	r3, [r7, #4]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	200003c8 	.word	0x200003c8

080059f0 <network_init>:
/********************************** END - UART REDIRECT ******************************************/

/********************************** Network Init ******************************************/
void network_init(void)
{
 80059f0:	b5b0      	push	{r4, r5, r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af04      	add	r7, sp, #16
   uint8_t tmpstr[6];
	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO1);
 80059f6:	4939      	ldr	r1, [pc, #228]	; (8005adc <network_init+0xec>)
 80059f8:	2000      	movs	r0, #0
 80059fa:	f7fd ff0f 	bl	800381c <ctlnetwork>
	ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO2);
 80059fe:	4938      	ldr	r1, [pc, #224]	; (8005ae0 <network_init+0xf0>)
 8005a00:	2001      	movs	r0, #1
 8005a02:	f7fd ff0b 	bl	800381c <ctlnetwork>
	// Display Network Information
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8005a06:	463b      	mov	r3, r7
 8005a08:	4619      	mov	r1, r3
 8005a0a:	2008      	movs	r0, #8
 8005a0c:	f7fd fe24 	bl	8003658 <ctlwizchip>
	printf("\r\n=== %s NET CONF ===\r\n",(char*)tmpstr);
 8005a10:	463b      	mov	r3, r7
 8005a12:	4619      	mov	r1, r3
 8005a14:	4833      	ldr	r0, [pc, #204]	; (8005ae4 <network_init+0xf4>)
 8005a16:	f005 fe77 	bl	800b708 <iprintf>
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO2.mac[0],gWIZNETINFO2.mac[1],gWIZNETINFO2.mac[2],
 8005a1a:	4b31      	ldr	r3, [pc, #196]	; (8005ae0 <network_init+0xf0>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	4b2f      	ldr	r3, [pc, #188]	; (8005ae0 <network_init+0xf0>)
 8005a22:	785b      	ldrb	r3, [r3, #1]
 8005a24:	461c      	mov	r4, r3
 8005a26:	4b2e      	ldr	r3, [pc, #184]	; (8005ae0 <network_init+0xf0>)
 8005a28:	789b      	ldrb	r3, [r3, #2]
 8005a2a:	461d      	mov	r5, r3
		  gWIZNETINFO2.mac[3],gWIZNETINFO2.mac[4],gWIZNETINFO2.mac[5]);
 8005a2c:	4b2c      	ldr	r3, [pc, #176]	; (8005ae0 <network_init+0xf0>)
 8005a2e:	78db      	ldrb	r3, [r3, #3]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO2.mac[0],gWIZNETINFO2.mac[1],gWIZNETINFO2.mac[2],
 8005a30:	461a      	mov	r2, r3
		  gWIZNETINFO2.mac[3],gWIZNETINFO2.mac[4],gWIZNETINFO2.mac[5]);
 8005a32:	4b2b      	ldr	r3, [pc, #172]	; (8005ae0 <network_init+0xf0>)
 8005a34:	791b      	ldrb	r3, [r3, #4]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO2.mac[0],gWIZNETINFO2.mac[1],gWIZNETINFO2.mac[2],
 8005a36:	4619      	mov	r1, r3
		  gWIZNETINFO2.mac[3],gWIZNETINFO2.mac[4],gWIZNETINFO2.mac[5]);
 8005a38:	4b29      	ldr	r3, [pc, #164]	; (8005ae0 <network_init+0xf0>)
 8005a3a:	795b      	ldrb	r3, [r3, #5]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO2.mac[0],gWIZNETINFO2.mac[1],gWIZNETINFO2.mac[2],
 8005a3c:	9302      	str	r3, [sp, #8]
 8005a3e:	9101      	str	r1, [sp, #4]
 8005a40:	9200      	str	r2, [sp, #0]
 8005a42:	462b      	mov	r3, r5
 8005a44:	4622      	mov	r2, r4
 8005a46:	4601      	mov	r1, r0
 8005a48:	4827      	ldr	r0, [pc, #156]	; (8005ae8 <network_init+0xf8>)
 8005a4a:	f005 fe5d 	bl	800b708 <iprintf>
	printf("SIP: %d.%d.%d.%d\r\n", gWIZNETINFO2.ip[0],gWIZNETINFO2.ip[1],gWIZNETINFO2.ip[2],gWIZNETINFO2.ip[3]);
 8005a4e:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <network_init+0xf0>)
 8005a50:	799b      	ldrb	r3, [r3, #6]
 8005a52:	4619      	mov	r1, r3
 8005a54:	4b22      	ldr	r3, [pc, #136]	; (8005ae0 <network_init+0xf0>)
 8005a56:	79db      	ldrb	r3, [r3, #7]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <network_init+0xf0>)
 8005a5c:	7a1b      	ldrb	r3, [r3, #8]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	4b1f      	ldr	r3, [pc, #124]	; (8005ae0 <network_init+0xf0>)
 8005a62:	7a5b      	ldrb	r3, [r3, #9]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	4603      	mov	r3, r0
 8005a68:	4820      	ldr	r0, [pc, #128]	; (8005aec <network_init+0xfc>)
 8005a6a:	f005 fe4d 	bl	800b708 <iprintf>
	printf("GAR: %d.%d.%d.%d\r\n", gWIZNETINFO2.gw[0],gWIZNETINFO2.gw[1],gWIZNETINFO2.gw[2],gWIZNETINFO2.gw[3]);
 8005a6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <network_init+0xf0>)
 8005a70:	7b9b      	ldrb	r3, [r3, #14]
 8005a72:	4619      	mov	r1, r3
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <network_init+0xf0>)
 8005a76:	7bdb      	ldrb	r3, [r3, #15]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4b19      	ldr	r3, [pc, #100]	; (8005ae0 <network_init+0xf0>)
 8005a7c:	7c1b      	ldrb	r3, [r3, #16]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <network_init+0xf0>)
 8005a82:	7c5b      	ldrb	r3, [r3, #17]
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	4603      	mov	r3, r0
 8005a88:	4819      	ldr	r0, [pc, #100]	; (8005af0 <network_init+0x100>)
 8005a8a:	f005 fe3d 	bl	800b708 <iprintf>
	printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO2.sn[0],gWIZNETINFO2.sn[1],gWIZNETINFO2.sn[2],gWIZNETINFO2.sn[3]);
 8005a8e:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <network_init+0xf0>)
 8005a90:	7a9b      	ldrb	r3, [r3, #10]
 8005a92:	4619      	mov	r1, r3
 8005a94:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <network_init+0xf0>)
 8005a96:	7adb      	ldrb	r3, [r3, #11]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4b11      	ldr	r3, [pc, #68]	; (8005ae0 <network_init+0xf0>)
 8005a9c:	7b1b      	ldrb	r3, [r3, #12]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <network_init+0xf0>)
 8005aa2:	7b5b      	ldrb	r3, [r3, #13]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	4812      	ldr	r0, [pc, #72]	; (8005af4 <network_init+0x104>)
 8005aaa:	f005 fe2d 	bl	800b708 <iprintf>
	printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO2.dns[0],gWIZNETINFO2.dns[1],gWIZNETINFO2.dns[2],gWIZNETINFO2.dns[3]);
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <network_init+0xf0>)
 8005ab0:	7c9b      	ldrb	r3, [r3, #18]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <network_init+0xf0>)
 8005ab6:	7cdb      	ldrb	r3, [r3, #19]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <network_init+0xf0>)
 8005abc:	7d1b      	ldrb	r3, [r3, #20]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <network_init+0xf0>)
 8005ac2:	7d5b      	ldrb	r3, [r3, #21]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	480b      	ldr	r0, [pc, #44]	; (8005af8 <network_init+0x108>)
 8005aca:	f005 fe1d 	bl	800b708 <iprintf>
	printf("======================\r\n");
 8005ace:	480b      	ldr	r0, [pc, #44]	; (8005afc <network_init+0x10c>)
 8005ad0:	f005 fe80 	bl	800b7d4 <puts>
}
 8005ad4:	bf00      	nop
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bdb0      	pop	{r4, r5, r7, pc}
 8005adc:	2000003c 	.word	0x2000003c
 8005ae0:	2000096c 	.word	0x2000096c
 8005ae4:	0800f074 	.word	0x0800f074
 8005ae8:	0800f08c 	.word	0x0800f08c
 8005aec:	0800f0b4 	.word	0x0800f0b4
 8005af0:	0800f0c8 	.word	0x0800f0c8
 8005af4:	0800f0dc 	.word	0x0800f0dc
 8005af8:	0800f0f0 	.word	0x0800f0f0
 8005afc:	0800f104 	.word	0x0800f104

08005b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b04:	b672      	cpsid	i
}
 8005b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b08:	e7fe      	b.n	8005b08 <Error_Handler+0x8>
	...

08005b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <HAL_MspInit+0x5c>)
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <HAL_MspInit+0x5c>)
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	6193      	str	r3, [r2, #24]
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <HAL_MspInit+0x5c>)
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	60bb      	str	r3, [r7, #8]
 8005b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <HAL_MspInit+0x5c>)
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	4a0e      	ldr	r2, [pc, #56]	; (8005b68 <HAL_MspInit+0x5c>)
 8005b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b34:	61d3      	str	r3, [r2, #28]
 8005b36:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <HAL_MspInit+0x5c>)
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005b42:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <HAL_MspInit+0x60>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	4a04      	ldr	r2, [pc, #16]	; (8005b6c <HAL_MspInit+0x60>)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b5e:	bf00      	nop
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	40010000 	.word	0x40010000

08005b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b78:	f107 0310 	add.w	r3, r7, #16
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	605a      	str	r2, [r3, #4]
 8005b82:	609a      	str	r2, [r3, #8]
 8005b84:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <HAL_ADC_MspInit+0x6c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d121      	bne.n	8005bd4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b90:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <HAL_ADC_MspInit+0x70>)
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	4a12      	ldr	r2, [pc, #72]	; (8005be0 <HAL_ADC_MspInit+0x70>)
 8005b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b9a:	6193      	str	r3, [r2, #24]
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <HAL_ADC_MspInit+0x70>)
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <HAL_ADC_MspInit+0x70>)
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	4a0c      	ldr	r2, [pc, #48]	; (8005be0 <HAL_ADC_MspInit+0x70>)
 8005bae:	f043 0308 	orr.w	r3, r3, #8
 8005bb2:	6193      	str	r3, [r2, #24]
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <HAL_ADC_MspInit+0x70>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bc8:	f107 0310 	add.w	r3, r7, #16
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4805      	ldr	r0, [pc, #20]	; (8005be4 <HAL_ADC_MspInit+0x74>)
 8005bd0:	f000 fe84 	bl	80068dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005bd4:	bf00      	nop
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40012400 	.word	0x40012400
 8005be0:	40021000 	.word	0x40021000
 8005be4:	40010c00 	.word	0x40010c00

08005be8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf0:	f107 0310 	add.w	r3, r7, #16
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	609a      	str	r2, [r3, #8]
 8005bfc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <HAL_I2C_MspInit+0x74>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d124      	bne.n	8005c52 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c08:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <HAL_I2C_MspInit+0x78>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	4a14      	ldr	r2, [pc, #80]	; (8005c60 <HAL_I2C_MspInit+0x78>)
 8005c0e:	f043 0308 	orr.w	r3, r3, #8
 8005c12:	6193      	str	r3, [r2, #24]
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <HAL_I2C_MspInit+0x78>)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005c20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005c24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c26:	2312      	movs	r3, #18
 8005c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c2e:	f107 0310 	add.w	r3, r7, #16
 8005c32:	4619      	mov	r1, r3
 8005c34:	480b      	ldr	r0, [pc, #44]	; (8005c64 <HAL_I2C_MspInit+0x7c>)
 8005c36:	f000 fe51 	bl	80068dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005c3a:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <HAL_I2C_MspInit+0x78>)
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	4a08      	ldr	r2, [pc, #32]	; (8005c60 <HAL_I2C_MspInit+0x78>)
 8005c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c44:	61d3      	str	r3, [r2, #28]
 8005c46:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <HAL_I2C_MspInit+0x78>)
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005c52:	bf00      	nop
 8005c54:	3720      	adds	r7, #32
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	40005800 	.word	0x40005800
 8005c60:	40021000 	.word	0x40021000
 8005c64:	40010c00 	.word	0x40010c00

08005c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c70:	f107 0310 	add.w	r3, r7, #16
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <HAL_SPI_MspInit+0x88>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d12f      	bne.n	8005ce8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <HAL_SPI_MspInit+0x8c>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	4a19      	ldr	r2, [pc, #100]	; (8005cf4 <HAL_SPI_MspInit+0x8c>)
 8005c8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c92:	6193      	str	r3, [r2, #24]
 8005c94:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <HAL_SPI_MspInit+0x8c>)
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ca0:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <HAL_SPI_MspInit+0x8c>)
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <HAL_SPI_MspInit+0x8c>)
 8005ca6:	f043 0304 	orr.w	r3, r3, #4
 8005caa:	6193      	str	r3, [r2, #24]
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <HAL_SPI_MspInit+0x8c>)
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005cb8:	23a0      	movs	r3, #160	; 0xa0
 8005cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cc4:	f107 0310 	add.w	r3, r7, #16
 8005cc8:	4619      	mov	r1, r3
 8005cca:	480b      	ldr	r0, [pc, #44]	; (8005cf8 <HAL_SPI_MspInit+0x90>)
 8005ccc:	f000 fe06 	bl	80068dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005cd0:	2340      	movs	r3, #64	; 0x40
 8005cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cdc:	f107 0310 	add.w	r3, r7, #16
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4805      	ldr	r0, [pc, #20]	; (8005cf8 <HAL_SPI_MspInit+0x90>)
 8005ce4:	f000 fdfa 	bl	80068dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005ce8:	bf00      	nop
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40013000 	.word	0x40013000
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40010800 	.word	0x40010800

08005cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d04:	f107 0310 	add.w	r3, r7, #16
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	605a      	str	r2, [r3, #4]
 8005d0e:	609a      	str	r2, [r3, #8]
 8005d10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <HAL_UART_MspInit+0x8c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d131      	bne.n	8005d80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <HAL_UART_MspInit+0x90>)
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	4a1a      	ldr	r2, [pc, #104]	; (8005d8c <HAL_UART_MspInit+0x90>)
 8005d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d26:	6193      	str	r3, [r2, #24]
 8005d28:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <HAL_UART_MspInit+0x90>)
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d34:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <HAL_UART_MspInit+0x90>)
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	4a14      	ldr	r2, [pc, #80]	; (8005d8c <HAL_UART_MspInit+0x90>)
 8005d3a:	f043 0304 	orr.w	r3, r3, #4
 8005d3e:	6193      	str	r3, [r2, #24]
 8005d40:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <HAL_UART_MspInit+0x90>)
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d52:	2302      	movs	r3, #2
 8005d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d56:	2303      	movs	r3, #3
 8005d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d5a:	f107 0310 	add.w	r3, r7, #16
 8005d5e:	4619      	mov	r1, r3
 8005d60:	480b      	ldr	r0, [pc, #44]	; (8005d90 <HAL_UART_MspInit+0x94>)
 8005d62:	f000 fdbb 	bl	80068dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d74:	f107 0310 	add.w	r3, r7, #16
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4805      	ldr	r0, [pc, #20]	; (8005d90 <HAL_UART_MspInit+0x94>)
 8005d7c:	f000 fdae 	bl	80068dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005d80:	bf00      	nop
 8005d82:	3720      	adds	r7, #32
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40013800 	.word	0x40013800
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	40010800 	.word	0x40010800

08005d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d98:	e7fe      	b.n	8005d98 <NMI_Handler+0x4>

08005d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d9e:	e7fe      	b.n	8005d9e <HardFault_Handler+0x4>

08005da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005da4:	e7fe      	b.n	8005da4 <MemManage_Handler+0x4>

08005da6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005da6:	b480      	push	{r7}
 8005da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005daa:	e7fe      	b.n	8005daa <BusFault_Handler+0x4>

08005dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005db0:	e7fe      	b.n	8005db0 <UsageFault_Handler+0x4>

08005db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005db2:	b480      	push	{r7}
 8005db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005db6:	bf00      	nop
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr

08005dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005dc2:	bf00      	nop
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005dce:	bf00      	nop
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bc80      	pop	{r7}
 8005dd4:	4770      	bx	lr

08005dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005dda:	f000 f935 	bl	8006048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005dde:	bf00      	nop
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005de2:	b480      	push	{r7}
 8005de4:	af00      	add	r7, sp, #0
  return 1;
 8005de6:	2301      	movs	r3, #1
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <_kill>:

int _kill(int pid, int sig)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005dfa:	f005 fead 	bl	800bb58 <__errno>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2216      	movs	r2, #22
 8005e02:	601a      	str	r2, [r3, #0]
  return -1;
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <_exit>:

void _exit (int status)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e18:	f04f 31ff 	mov.w	r1, #4294967295
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff ffe7 	bl	8005df0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e22:	e7fe      	b.n	8005e22 <_exit+0x12>

08005e24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	e00a      	b.n	8005e4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005e36:	f3af 8000 	nop.w
 8005e3a:	4601      	mov	r1, r0
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	60ba      	str	r2, [r7, #8]
 8005e42:	b2ca      	uxtb	r2, r1
 8005e44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	dbf0      	blt.n	8005e36 <_read+0x12>
  }

  return len;
 8005e54:	687b      	ldr	r3, [r7, #4]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	e009      	b.n	8005e84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	60ba      	str	r2, [r7, #8]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff fda7 	bl	80059cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	3301      	adds	r3, #1
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	dbf1      	blt.n	8005e70 <_write+0x12>
  }
  return len;
 8005e8c:	687b      	ldr	r3, [r7, #4]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <_close>:

int _close(int file)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ebc:	605a      	str	r2, [r3, #4]
  return 0;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr

08005eca <_isatty>:

int _isatty(int file)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005ed2:	2301      	movs	r3, #1
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr

08005ede <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr
	...

08005ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f00:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <_sbrk+0x5c>)
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <_sbrk+0x60>)
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f0c:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <_sbrk+0x64>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f14:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <_sbrk+0x64>)
 8005f16:	4a12      	ldr	r2, [pc, #72]	; (8005f60 <_sbrk+0x68>)
 8005f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f1a:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <_sbrk+0x64>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d207      	bcs.n	8005f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f28:	f005 fe16 	bl	800bb58 <__errno>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	220c      	movs	r2, #12
 8005f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	e009      	b.n	8005f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f38:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <_sbrk+0x64>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f3e:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <_sbrk+0x64>)
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4413      	add	r3, r2
 8005f46:	4a05      	ldr	r2, [pc, #20]	; (8005f5c <_sbrk+0x64>)
 8005f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20005000 	.word	0x20005000
 8005f58:	00000400 	.word	0x00000400
 8005f5c:	20000984 	.word	0x20000984
 8005f60:	20000ad8 	.word	0x20000ad8

08005f64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f68:	bf00      	nop
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr

08005f70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f70:	f7ff fff8 	bl	8005f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f74:	480b      	ldr	r0, [pc, #44]	; (8005fa4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005f76:	490c      	ldr	r1, [pc, #48]	; (8005fa8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005f78:	4a0c      	ldr	r2, [pc, #48]	; (8005fac <LoopFillZerobss+0x16>)
  movs r3, #0
 8005f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f7c:	e002      	b.n	8005f84 <LoopCopyDataInit>

08005f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f82:	3304      	adds	r3, #4

08005f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f88:	d3f9      	bcc.n	8005f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005f8c:	4c09      	ldr	r4, [pc, #36]	; (8005fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f90:	e001      	b.n	8005f96 <LoopFillZerobss>

08005f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f94:	3204      	adds	r2, #4

08005f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f98:	d3fb      	bcc.n	8005f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f9a:	f005 fde3 	bl	800bb64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f9e:	f7ff f8f1 	bl	8005184 <main>
  bx lr
 8005fa2:	4770      	bx	lr
  ldr r0, =_sdata
 8005fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fa8:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8005fac:	0800f61c 	.word	0x0800f61c
  ldr r2, =_sbss
 8005fb0:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8005fb4:	20000ad8 	.word	0x20000ad8

08005fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fb8:	e7fe      	b.n	8005fb8 <ADC1_2_IRQHandler>
	...

08005fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fc0:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <HAL_Init+0x28>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a07      	ldr	r2, [pc, #28]	; (8005fe4 <HAL_Init+0x28>)
 8005fc6:	f043 0310 	orr.w	r3, r3, #16
 8005fca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fcc:	2003      	movs	r0, #3
 8005fce:	f000 fc51 	bl	8006874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fd2:	200f      	movs	r0, #15
 8005fd4:	f000 f808 	bl	8005fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fd8:	f7ff fd98 	bl	8005b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40022000 	.word	0x40022000

08005fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ff0:	4b12      	ldr	r3, [pc, #72]	; (800603c <HAL_InitTick+0x54>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	4b12      	ldr	r3, [pc, #72]	; (8006040 <HAL_InitTick+0x58>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006002:	fbb2 f3f3 	udiv	r3, r2, r3
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fc5b 	bl	80068c2 <HAL_SYSTICK_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e00e      	b.n	8006034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b0f      	cmp	r3, #15
 800601a:	d80a      	bhi.n	8006032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800601c:	2200      	movs	r2, #0
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	f000 fc31 	bl	800688a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006028:	4a06      	ldr	r2, [pc, #24]	; (8006044 <HAL_InitTick+0x5c>)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	e000      	b.n	8006034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20000054 	.word	0x20000054
 8006040:	2000005c 	.word	0x2000005c
 8006044:	20000058 	.word	0x20000058

08006048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_IncTick+0x1c>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	4b05      	ldr	r3, [pc, #20]	; (8006068 <HAL_IncTick+0x20>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4413      	add	r3, r2
 8006058:	4a03      	ldr	r2, [pc, #12]	; (8006068 <HAL_IncTick+0x20>)
 800605a:	6013      	str	r3, [r2, #0]
}
 800605c:	bf00      	nop
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr
 8006064:	2000005c 	.word	0x2000005c
 8006068:	20000988 	.word	0x20000988

0800606c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return uwTick;
 8006070:	4b02      	ldr	r3, [pc, #8]	; (800607c <HAL_GetTick+0x10>)
 8006072:	681b      	ldr	r3, [r3, #0]
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr
 800607c:	20000988 	.word	0x20000988

08006080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006088:	f7ff fff0 	bl	800606c <HAL_GetTick>
 800608c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d005      	beq.n	80060a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <HAL_Delay+0x44>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80060a6:	bf00      	nop
 80060a8:	f7ff ffe0 	bl	800606c <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d8f7      	bhi.n	80060a8 <HAL_Delay+0x28>
  {
  }
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	2000005c 	.word	0x2000005c

080060c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e0be      	b.n	8006268 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d109      	bne.n	800610c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff fd32 	bl	8005b70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fabf 	bl	8006690 <ADC_ConversionStop_Disable>
 8006112:	4603      	mov	r3, r0
 8006114:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	f003 0310 	and.w	r3, r3, #16
 800611e:	2b00      	cmp	r3, #0
 8006120:	f040 8099 	bne.w	8006256 <HAL_ADC_Init+0x18e>
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 8095 	bne.w	8006256 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006134:	f023 0302 	bic.w	r3, r3, #2
 8006138:	f043 0202 	orr.w	r2, r3, #2
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006148:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	7b1b      	ldrb	r3, [r3, #12]
 800614e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006150:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	4313      	orrs	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006160:	d003      	beq.n	800616a <HAL_ADC_Init+0xa2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d102      	bne.n	8006170 <HAL_ADC_Init+0xa8>
 800616a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800616e:	e000      	b.n	8006172 <HAL_ADC_Init+0xaa>
 8006170:	2300      	movs	r3, #0
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7d1b      	ldrb	r3, [r3, #20]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d119      	bne.n	80061b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	7b1b      	ldrb	r3, [r3, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	3b01      	subs	r3, #1
 800618e:	035a      	lsls	r2, r3, #13
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	e00b      	b.n	80061b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	f043 0220 	orr.w	r2, r3, #32
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	f043 0201 	orr.w	r2, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	4b28      	ldr	r3, [pc, #160]	; (8006270 <HAL_ADC_Init+0x1a8>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	430b      	orrs	r3, r1
 80061da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e4:	d003      	beq.n	80061ee <HAL_ADC_Init+0x126>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d104      	bne.n	80061f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	051b      	lsls	r3, r3, #20
 80061f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	430a      	orrs	r2, r1
 800620a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689a      	ldr	r2, [r3, #8]
 8006212:	4b18      	ldr	r3, [pc, #96]	; (8006274 <HAL_ADC_Init+0x1ac>)
 8006214:	4013      	ands	r3, r2
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	429a      	cmp	r2, r3
 800621a:	d10b      	bne.n	8006234 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	f023 0303 	bic.w	r3, r3, #3
 800622a:	f043 0201 	orr.w	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006232:	e018      	b.n	8006266 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	f023 0312 	bic.w	r3, r3, #18
 800623c:	f043 0210 	orr.w	r2, r3, #16
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	f043 0201 	orr.w	r2, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006254:	e007      	b.n	8006266 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	f043 0210 	orr.w	r2, r3, #16
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006266:	7dfb      	ldrb	r3, [r7, #23]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	ffe1f7fd 	.word	0xffe1f7fd
 8006274:	ff1f0efe 	.word	0xff1f0efe

08006278 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_ADC_Start+0x1a>
 800628e:	2302      	movs	r3, #2
 8006290:	e098      	b.n	80063c4 <HAL_ADC_Start+0x14c>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f99e 	bl	80065dc <ADC_Enable>
 80062a0:	4603      	mov	r3, r0
 80062a2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f040 8087 	bne.w	80063ba <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a41      	ldr	r2, [pc, #260]	; (80063cc <HAL_ADC_Start+0x154>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d105      	bne.n	80062d6 <HAL_ADC_Start+0x5e>
 80062ca:	4b41      	ldr	r3, [pc, #260]	; (80063d0 <HAL_ADC_Start+0x158>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d115      	bne.n	8006302 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d026      	beq.n	800633e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80062f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006300:	e01d      	b.n	800633e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a2f      	ldr	r2, [pc, #188]	; (80063d0 <HAL_ADC_Start+0x158>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d004      	beq.n	8006322 <HAL_ADC_Start+0xaa>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a2b      	ldr	r2, [pc, #172]	; (80063cc <HAL_ADC_Start+0x154>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d10d      	bne.n	800633e <HAL_ADC_Start+0xc6>
 8006322:	4b2b      	ldr	r3, [pc, #172]	; (80063d0 <HAL_ADC_Start+0x158>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006336:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d006      	beq.n	8006358 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	f023 0206 	bic.w	r2, r3, #6
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	62da      	str	r2, [r3, #44]	; 0x2c
 8006356:	e002      	b.n	800635e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f06f 0202 	mvn.w	r2, #2
 800636e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800637a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800637e:	d113      	bne.n	80063a8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006384:	4a11      	ldr	r2, [pc, #68]	; (80063cc <HAL_ADC_Start+0x154>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d105      	bne.n	8006396 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800638a:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <HAL_ADC_Start+0x158>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006392:	2b00      	cmp	r3, #0
 8006394:	d108      	bne.n	80063a8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80063a4:	609a      	str	r2, [r3, #8]
 80063a6:	e00c      	b.n	80063c2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80063b6:	609a      	str	r2, [r3, #8]
 80063b8:	e003      	b.n	80063c2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40012800 	.word	0x40012800
 80063d0:	40012400 	.word	0x40012400

080063d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr

080063ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_ADC_ConfigChannel+0x20>
 8006408:	2302      	movs	r3, #2
 800640a:	e0dc      	b.n	80065c6 <HAL_ADC_ConfigChannel+0x1da>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b06      	cmp	r3, #6
 800641a:	d81c      	bhi.n	8006456 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	3b05      	subs	r3, #5
 800642e:	221f      	movs	r2, #31
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	43db      	mvns	r3, r3
 8006436:	4019      	ands	r1, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	3b05      	subs	r3, #5
 8006448:	fa00 f203 	lsl.w	r2, r0, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	635a      	str	r2, [r3, #52]	; 0x34
 8006454:	e03c      	b.n	80064d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2b0c      	cmp	r3, #12
 800645c:	d81c      	bhi.n	8006498 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	3b23      	subs	r3, #35	; 0x23
 8006470:	221f      	movs	r2, #31
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	43db      	mvns	r3, r3
 8006478:	4019      	ands	r1, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	3b23      	subs	r3, #35	; 0x23
 800648a:	fa00 f203 	lsl.w	r2, r0, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
 8006496:	e01b      	b.n	80064d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	3b41      	subs	r3, #65	; 0x41
 80064aa:	221f      	movs	r2, #31
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	43db      	mvns	r3, r3
 80064b2:	4019      	ands	r1, r3
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	3b41      	subs	r3, #65	; 0x41
 80064c4:	fa00 f203 	lsl.w	r2, r0, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b09      	cmp	r3, #9
 80064d6:	d91c      	bls.n	8006512 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68d9      	ldr	r1, [r3, #12]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4613      	mov	r3, r2
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	4413      	add	r3, r2
 80064e8:	3b1e      	subs	r3, #30
 80064ea:	2207      	movs	r2, #7
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	43db      	mvns	r3, r3
 80064f2:	4019      	ands	r1, r3
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	6898      	ldr	r0, [r3, #8]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	4413      	add	r3, r2
 8006502:	3b1e      	subs	r3, #30
 8006504:	fa00 f203 	lsl.w	r2, r0, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	60da      	str	r2, [r3, #12]
 8006510:	e019      	b.n	8006546 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6919      	ldr	r1, [r3, #16]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	4413      	add	r3, r2
 8006522:	2207      	movs	r2, #7
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	43db      	mvns	r3, r3
 800652a:	4019      	ands	r1, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	6898      	ldr	r0, [r3, #8]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	4413      	add	r3, r2
 800653a:	fa00 f203 	lsl.w	r2, r0, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b10      	cmp	r3, #16
 800654c:	d003      	beq.n	8006556 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006552:	2b11      	cmp	r3, #17
 8006554:	d132      	bne.n	80065bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d125      	bne.n	80065ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d126      	bne.n	80065bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800657c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b10      	cmp	r3, #16
 8006584:	d11a      	bne.n	80065bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006586:	4b13      	ldr	r3, [pc, #76]	; (80065d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a13      	ldr	r2, [pc, #76]	; (80065d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800658c:	fba2 2303 	umull	r2, r3, r2, r3
 8006590:	0c9a      	lsrs	r2, r3, #18
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800659c:	e002      	b.n	80065a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f9      	bne.n	800659e <HAL_ADC_ConfigChannel+0x1b2>
 80065aa:	e007      	b.n	80065bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	f043 0220 	orr.w	r2, r3, #32
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	40012400 	.word	0x40012400
 80065d4:	20000054 	.word	0x20000054
 80065d8:	431bde83 	.word	0x431bde83

080065dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d040      	beq.n	800667c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800660a:	4b1f      	ldr	r3, [pc, #124]	; (8006688 <ADC_Enable+0xac>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1f      	ldr	r2, [pc, #124]	; (800668c <ADC_Enable+0xb0>)
 8006610:	fba2 2303 	umull	r2, r3, r2, r3
 8006614:	0c9b      	lsrs	r3, r3, #18
 8006616:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006618:	e002      	b.n	8006620 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	3b01      	subs	r3, #1
 800661e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f9      	bne.n	800661a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006626:	f7ff fd21 	bl	800606c <HAL_GetTick>
 800662a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800662c:	e01f      	b.n	800666e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800662e:	f7ff fd1d 	bl	800606c <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d918      	bls.n	800666e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b01      	cmp	r3, #1
 8006648:	d011      	beq.n	800666e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	f043 0210 	orr.w	r2, r3, #16
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	f043 0201 	orr.w	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e007      	b.n	800667e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b01      	cmp	r3, #1
 800667a:	d1d8      	bne.n	800662e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000054 	.word	0x20000054
 800668c:	431bde83 	.word	0x431bde83

08006690 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d12e      	bne.n	8006708 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0201 	bic.w	r2, r2, #1
 80066b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80066ba:	f7ff fcd7 	bl	800606c <HAL_GetTick>
 80066be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80066c0:	e01b      	b.n	80066fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80066c2:	f7ff fcd3 	bl	800606c <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d914      	bls.n	80066fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d10d      	bne.n	80066fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	f043 0210 	orr.w	r2, r3, #16
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	f043 0201 	orr.w	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e007      	b.n	800670a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d0dc      	beq.n	80066c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <__NVIC_SetPriorityGrouping+0x44>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006730:	4013      	ands	r3, r2
 8006732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800673c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006746:	4a04      	ldr	r2, [pc, #16]	; (8006758 <__NVIC_SetPriorityGrouping+0x44>)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	60d3      	str	r3, [r2, #12]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	bc80      	pop	{r7}
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	e000ed00 	.word	0xe000ed00

0800675c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006760:	4b04      	ldr	r3, [pc, #16]	; (8006774 <__NVIC_GetPriorityGrouping+0x18>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	0a1b      	lsrs	r3, r3, #8
 8006766:	f003 0307 	and.w	r3, r3, #7
}
 800676a:	4618      	mov	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	bc80      	pop	{r7}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	e000ed00 	.word	0xe000ed00

08006778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	6039      	str	r1, [r7, #0]
 8006782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006788:	2b00      	cmp	r3, #0
 800678a:	db0a      	blt.n	80067a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	490c      	ldr	r1, [pc, #48]	; (80067c4 <__NVIC_SetPriority+0x4c>)
 8006792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006796:	0112      	lsls	r2, r2, #4
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	440b      	add	r3, r1
 800679c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067a0:	e00a      	b.n	80067b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	4908      	ldr	r1, [pc, #32]	; (80067c8 <__NVIC_SetPriority+0x50>)
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	3b04      	subs	r3, #4
 80067b0:	0112      	lsls	r2, r2, #4
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	440b      	add	r3, r1
 80067b6:	761a      	strb	r2, [r3, #24]
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	e000e100 	.word	0xe000e100
 80067c8:	e000ed00 	.word	0xe000ed00

080067cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b089      	sub	sp, #36	; 0x24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f1c3 0307 	rsb	r3, r3, #7
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	bf28      	it	cs
 80067ea:	2304      	movcs	r3, #4
 80067ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	3304      	adds	r3, #4
 80067f2:	2b06      	cmp	r3, #6
 80067f4:	d902      	bls.n	80067fc <NVIC_EncodePriority+0x30>
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	3b03      	subs	r3, #3
 80067fa:	e000      	b.n	80067fe <NVIC_EncodePriority+0x32>
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006800:	f04f 32ff 	mov.w	r2, #4294967295
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	fa02 f303 	lsl.w	r3, r2, r3
 800680a:	43da      	mvns	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	401a      	ands	r2, r3
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006814:	f04f 31ff 	mov.w	r1, #4294967295
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	fa01 f303 	lsl.w	r3, r1, r3
 800681e:	43d9      	mvns	r1, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006824:	4313      	orrs	r3, r2
         );
}
 8006826:	4618      	mov	r0, r3
 8006828:	3724      	adds	r7, #36	; 0x24
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3b01      	subs	r3, #1
 800683c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006840:	d301      	bcc.n	8006846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006842:	2301      	movs	r3, #1
 8006844:	e00f      	b.n	8006866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006846:	4a0a      	ldr	r2, [pc, #40]	; (8006870 <SysTick_Config+0x40>)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3b01      	subs	r3, #1
 800684c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800684e:	210f      	movs	r1, #15
 8006850:	f04f 30ff 	mov.w	r0, #4294967295
 8006854:	f7ff ff90 	bl	8006778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006858:	4b05      	ldr	r3, [pc, #20]	; (8006870 <SysTick_Config+0x40>)
 800685a:	2200      	movs	r2, #0
 800685c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800685e:	4b04      	ldr	r3, [pc, #16]	; (8006870 <SysTick_Config+0x40>)
 8006860:	2207      	movs	r2, #7
 8006862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	e000e010 	.word	0xe000e010

08006874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff ff49 	bl	8006714 <__NVIC_SetPriorityGrouping>
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800688a:	b580      	push	{r7, lr}
 800688c:	b086      	sub	sp, #24
 800688e:	af00      	add	r7, sp, #0
 8006890:	4603      	mov	r3, r0
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	607a      	str	r2, [r7, #4]
 8006896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006898:	2300      	movs	r3, #0
 800689a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800689c:	f7ff ff5e 	bl	800675c <__NVIC_GetPriorityGrouping>
 80068a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	68b9      	ldr	r1, [r7, #8]
 80068a6:	6978      	ldr	r0, [r7, #20]
 80068a8:	f7ff ff90 	bl	80067cc <NVIC_EncodePriority>
 80068ac:	4602      	mov	r2, r0
 80068ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068b2:	4611      	mov	r1, r2
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff ff5f 	bl	8006778 <__NVIC_SetPriority>
}
 80068ba:	bf00      	nop
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ffb0 	bl	8006830 <SysTick_Config>
 80068d0:	4603      	mov	r3, r0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068dc:	b480      	push	{r7}
 80068de:	b08b      	sub	sp, #44	; 0x2c
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80068e6:	2300      	movs	r3, #0
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80068ea:	2300      	movs	r3, #0
 80068ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068ee:	e169      	b.n	8006bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80068f0:	2201      	movs	r2, #1
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	4013      	ands	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	429a      	cmp	r2, r3
 800690a:	f040 8158 	bne.w	8006bbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	4a9a      	ldr	r2, [pc, #616]	; (8006b7c <HAL_GPIO_Init+0x2a0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d05e      	beq.n	80069d6 <HAL_GPIO_Init+0xfa>
 8006918:	4a98      	ldr	r2, [pc, #608]	; (8006b7c <HAL_GPIO_Init+0x2a0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d875      	bhi.n	8006a0a <HAL_GPIO_Init+0x12e>
 800691e:	4a98      	ldr	r2, [pc, #608]	; (8006b80 <HAL_GPIO_Init+0x2a4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d058      	beq.n	80069d6 <HAL_GPIO_Init+0xfa>
 8006924:	4a96      	ldr	r2, [pc, #600]	; (8006b80 <HAL_GPIO_Init+0x2a4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d86f      	bhi.n	8006a0a <HAL_GPIO_Init+0x12e>
 800692a:	4a96      	ldr	r2, [pc, #600]	; (8006b84 <HAL_GPIO_Init+0x2a8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d052      	beq.n	80069d6 <HAL_GPIO_Init+0xfa>
 8006930:	4a94      	ldr	r2, [pc, #592]	; (8006b84 <HAL_GPIO_Init+0x2a8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d869      	bhi.n	8006a0a <HAL_GPIO_Init+0x12e>
 8006936:	4a94      	ldr	r2, [pc, #592]	; (8006b88 <HAL_GPIO_Init+0x2ac>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d04c      	beq.n	80069d6 <HAL_GPIO_Init+0xfa>
 800693c:	4a92      	ldr	r2, [pc, #584]	; (8006b88 <HAL_GPIO_Init+0x2ac>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d863      	bhi.n	8006a0a <HAL_GPIO_Init+0x12e>
 8006942:	4a92      	ldr	r2, [pc, #584]	; (8006b8c <HAL_GPIO_Init+0x2b0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d046      	beq.n	80069d6 <HAL_GPIO_Init+0xfa>
 8006948:	4a90      	ldr	r2, [pc, #576]	; (8006b8c <HAL_GPIO_Init+0x2b0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d85d      	bhi.n	8006a0a <HAL_GPIO_Init+0x12e>
 800694e:	2b12      	cmp	r3, #18
 8006950:	d82a      	bhi.n	80069a8 <HAL_GPIO_Init+0xcc>
 8006952:	2b12      	cmp	r3, #18
 8006954:	d859      	bhi.n	8006a0a <HAL_GPIO_Init+0x12e>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <HAL_GPIO_Init+0x80>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	080069d7 	.word	0x080069d7
 8006960:	080069b1 	.word	0x080069b1
 8006964:	080069c3 	.word	0x080069c3
 8006968:	08006a05 	.word	0x08006a05
 800696c:	08006a0b 	.word	0x08006a0b
 8006970:	08006a0b 	.word	0x08006a0b
 8006974:	08006a0b 	.word	0x08006a0b
 8006978:	08006a0b 	.word	0x08006a0b
 800697c:	08006a0b 	.word	0x08006a0b
 8006980:	08006a0b 	.word	0x08006a0b
 8006984:	08006a0b 	.word	0x08006a0b
 8006988:	08006a0b 	.word	0x08006a0b
 800698c:	08006a0b 	.word	0x08006a0b
 8006990:	08006a0b 	.word	0x08006a0b
 8006994:	08006a0b 	.word	0x08006a0b
 8006998:	08006a0b 	.word	0x08006a0b
 800699c:	08006a0b 	.word	0x08006a0b
 80069a0:	080069b9 	.word	0x080069b9
 80069a4:	080069cd 	.word	0x080069cd
 80069a8:	4a79      	ldr	r2, [pc, #484]	; (8006b90 <HAL_GPIO_Init+0x2b4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d013      	beq.n	80069d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80069ae:	e02c      	b.n	8006a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	623b      	str	r3, [r7, #32]
          break;
 80069b6:	e029      	b.n	8006a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	3304      	adds	r3, #4
 80069be:	623b      	str	r3, [r7, #32]
          break;
 80069c0:	e024      	b.n	8006a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	3308      	adds	r3, #8
 80069c8:	623b      	str	r3, [r7, #32]
          break;
 80069ca:	e01f      	b.n	8006a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	330c      	adds	r3, #12
 80069d2:	623b      	str	r3, [r7, #32]
          break;
 80069d4:	e01a      	b.n	8006a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d102      	bne.n	80069e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80069de:	2304      	movs	r3, #4
 80069e0:	623b      	str	r3, [r7, #32]
          break;
 80069e2:	e013      	b.n	8006a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d105      	bne.n	80069f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80069ec:	2308      	movs	r3, #8
 80069ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	611a      	str	r2, [r3, #16]
          break;
 80069f6:	e009      	b.n	8006a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80069f8:	2308      	movs	r3, #8
 80069fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	615a      	str	r2, [r3, #20]
          break;
 8006a02:	e003      	b.n	8006a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006a04:	2300      	movs	r3, #0
 8006a06:	623b      	str	r3, [r7, #32]
          break;
 8006a08:	e000      	b.n	8006a0c <HAL_GPIO_Init+0x130>
          break;
 8006a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	2bff      	cmp	r3, #255	; 0xff
 8006a10:	d801      	bhi.n	8006a16 <HAL_GPIO_Init+0x13a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	e001      	b.n	8006a1a <HAL_GPIO_Init+0x13e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2bff      	cmp	r3, #255	; 0xff
 8006a20:	d802      	bhi.n	8006a28 <HAL_GPIO_Init+0x14c>
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	e002      	b.n	8006a2e <HAL_GPIO_Init+0x152>
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	3b08      	subs	r3, #8
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	210f      	movs	r1, #15
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	401a      	ands	r2, r3
 8006a40:	6a39      	ldr	r1, [r7, #32]
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	fa01 f303 	lsl.w	r3, r1, r3
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 80b1 	beq.w	8006bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006a5c:	4b4d      	ldr	r3, [pc, #308]	; (8006b94 <HAL_GPIO_Init+0x2b8>)
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	4a4c      	ldr	r2, [pc, #304]	; (8006b94 <HAL_GPIO_Init+0x2b8>)
 8006a62:	f043 0301 	orr.w	r3, r3, #1
 8006a66:	6193      	str	r3, [r2, #24]
 8006a68:	4b4a      	ldr	r3, [pc, #296]	; (8006b94 <HAL_GPIO_Init+0x2b8>)
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006a74:	4a48      	ldr	r2, [pc, #288]	; (8006b98 <HAL_GPIO_Init+0x2bc>)
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	089b      	lsrs	r3, r3, #2
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	f003 0303 	and.w	r3, r3, #3
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	220f      	movs	r2, #15
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4013      	ands	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a40      	ldr	r2, [pc, #256]	; (8006b9c <HAL_GPIO_Init+0x2c0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d013      	beq.n	8006ac8 <HAL_GPIO_Init+0x1ec>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a3f      	ldr	r2, [pc, #252]	; (8006ba0 <HAL_GPIO_Init+0x2c4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00d      	beq.n	8006ac4 <HAL_GPIO_Init+0x1e8>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a3e      	ldr	r2, [pc, #248]	; (8006ba4 <HAL_GPIO_Init+0x2c8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d007      	beq.n	8006ac0 <HAL_GPIO_Init+0x1e4>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a3d      	ldr	r2, [pc, #244]	; (8006ba8 <HAL_GPIO_Init+0x2cc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d101      	bne.n	8006abc <HAL_GPIO_Init+0x1e0>
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e006      	b.n	8006aca <HAL_GPIO_Init+0x1ee>
 8006abc:	2304      	movs	r3, #4
 8006abe:	e004      	b.n	8006aca <HAL_GPIO_Init+0x1ee>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e002      	b.n	8006aca <HAL_GPIO_Init+0x1ee>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <HAL_GPIO_Init+0x1ee>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006acc:	f002 0203 	and.w	r2, r2, #3
 8006ad0:	0092      	lsls	r2, r2, #2
 8006ad2:	4093      	lsls	r3, r2
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006ada:	492f      	ldr	r1, [pc, #188]	; (8006b98 <HAL_GPIO_Init+0x2bc>)
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	089b      	lsrs	r3, r3, #2
 8006ae0:	3302      	adds	r3, #2
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d006      	beq.n	8006b02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006af4:	4b2d      	ldr	r3, [pc, #180]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	492c      	ldr	r1, [pc, #176]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	608b      	str	r3, [r1, #8]
 8006b00:	e006      	b.n	8006b10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006b02:	4b2a      	ldr	r3, [pc, #168]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	4928      	ldr	r1, [pc, #160]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d006      	beq.n	8006b2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006b1c:	4b23      	ldr	r3, [pc, #140]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	4922      	ldr	r1, [pc, #136]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60cb      	str	r3, [r1, #12]
 8006b28:	e006      	b.n	8006b38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006b2a:	4b20      	ldr	r3, [pc, #128]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	43db      	mvns	r3, r3
 8006b32:	491e      	ldr	r1, [pc, #120]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d006      	beq.n	8006b52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006b44:	4b19      	ldr	r3, [pc, #100]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	4918      	ldr	r1, [pc, #96]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	604b      	str	r3, [r1, #4]
 8006b50:	e006      	b.n	8006b60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006b52:	4b16      	ldr	r3, [pc, #88]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	43db      	mvns	r3, r3
 8006b5a:	4914      	ldr	r1, [pc, #80]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d021      	beq.n	8006bb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006b6c:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	490e      	ldr	r1, [pc, #56]	; (8006bac <HAL_GPIO_Init+0x2d0>)
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	600b      	str	r3, [r1, #0]
 8006b78:	e021      	b.n	8006bbe <HAL_GPIO_Init+0x2e2>
 8006b7a:	bf00      	nop
 8006b7c:	10320000 	.word	0x10320000
 8006b80:	10310000 	.word	0x10310000
 8006b84:	10220000 	.word	0x10220000
 8006b88:	10210000 	.word	0x10210000
 8006b8c:	10120000 	.word	0x10120000
 8006b90:	10110000 	.word	0x10110000
 8006b94:	40021000 	.word	0x40021000
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40010800 	.word	0x40010800
 8006ba0:	40010c00 	.word	0x40010c00
 8006ba4:	40011000 	.word	0x40011000
 8006ba8:	40011400 	.word	0x40011400
 8006bac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <HAL_GPIO_Init+0x304>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	4909      	ldr	r1, [pc, #36]	; (8006be0 <HAL_GPIO_Init+0x304>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	fa22 f303 	lsr.w	r3, r2, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f47f ae8e 	bne.w	80068f0 <HAL_GPIO_Init+0x14>
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	372c      	adds	r7, #44	; 0x2c
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr
 8006be0:	40010400 	.word	0x40010400

08006be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	807b      	strh	r3, [r7, #2]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bf4:	787b      	ldrb	r3, [r7, #1]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bfa:	887a      	ldrh	r2, [r7, #2]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006c00:	e003      	b.n	8006c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c02:	887b      	ldrh	r3, [r7, #2]
 8006c04:	041a      	lsls	r2, r3, #16
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	611a      	str	r2, [r3, #16]
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e12b      	b.n	8006e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d106      	bne.n	8006c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fe ffd4 	bl	8005be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2224      	movs	r2, #36	; 0x24
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c78:	f001 fbca 	bl	8008410 <HAL_RCC_GetPCLK1Freq>
 8006c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	4a81      	ldr	r2, [pc, #516]	; (8006e88 <HAL_I2C_Init+0x274>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d807      	bhi.n	8006c98 <HAL_I2C_Init+0x84>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4a80      	ldr	r2, [pc, #512]	; (8006e8c <HAL_I2C_Init+0x278>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	bf94      	ite	ls
 8006c90:	2301      	movls	r3, #1
 8006c92:	2300      	movhi	r3, #0
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	e006      	b.n	8006ca6 <HAL_I2C_Init+0x92>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a7d      	ldr	r2, [pc, #500]	; (8006e90 <HAL_I2C_Init+0x27c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	bf94      	ite	ls
 8006ca0:	2301      	movls	r3, #1
 8006ca2:	2300      	movhi	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e0e7      	b.n	8006e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4a78      	ldr	r2, [pc, #480]	; (8006e94 <HAL_I2C_Init+0x280>)
 8006cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb6:	0c9b      	lsrs	r3, r3, #18
 8006cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	4a6a      	ldr	r2, [pc, #424]	; (8006e88 <HAL_I2C_Init+0x274>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d802      	bhi.n	8006ce8 <HAL_I2C_Init+0xd4>
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	e009      	b.n	8006cfc <HAL_I2C_Init+0xe8>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	4a69      	ldr	r2, [pc, #420]	; (8006e98 <HAL_I2C_Init+0x284>)
 8006cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf8:	099b      	lsrs	r3, r3, #6
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	430b      	orrs	r3, r1
 8006d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	495c      	ldr	r1, [pc, #368]	; (8006e88 <HAL_I2C_Init+0x274>)
 8006d18:	428b      	cmp	r3, r1
 8006d1a:	d819      	bhi.n	8006d50 <HAL_I2C_Init+0x13c>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	1e59      	subs	r1, r3, #1
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d2a:	1c59      	adds	r1, r3, #1
 8006d2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d30:	400b      	ands	r3, r1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <HAL_I2C_Init+0x138>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	1e59      	subs	r1, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d44:	3301      	adds	r3, #1
 8006d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d4a:	e051      	b.n	8006df0 <HAL_I2C_Init+0x1dc>
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	e04f      	b.n	8006df0 <HAL_I2C_Init+0x1dc>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d111      	bne.n	8006d7c <HAL_I2C_Init+0x168>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	1e58      	subs	r0, r3, #1
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6859      	ldr	r1, [r3, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	440b      	add	r3, r1
 8006d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	bf0c      	ite	eq
 8006d74:	2301      	moveq	r3, #1
 8006d76:	2300      	movne	r3, #0
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	e012      	b.n	8006da2 <HAL_I2C_Init+0x18e>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	1e58      	subs	r0, r3, #1
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6859      	ldr	r1, [r3, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	440b      	add	r3, r1
 8006d8a:	0099      	lsls	r1, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d92:	3301      	adds	r3, #1
 8006d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bf0c      	ite	eq
 8006d9c:	2301      	moveq	r3, #1
 8006d9e:	2300      	movne	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <HAL_I2C_Init+0x196>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e022      	b.n	8006df0 <HAL_I2C_Init+0x1dc>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10e      	bne.n	8006dd0 <HAL_I2C_Init+0x1bc>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	1e58      	subs	r0, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6859      	ldr	r1, [r3, #4]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	440b      	add	r3, r1
 8006dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dce:	e00f      	b.n	8006df0 <HAL_I2C_Init+0x1dc>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	1e58      	subs	r0, r3, #1
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6859      	ldr	r1, [r3, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	440b      	add	r3, r1
 8006dde:	0099      	lsls	r1, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006de6:	3301      	adds	r3, #1
 8006de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	6809      	ldr	r1, [r1, #0]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69da      	ldr	r2, [r3, #28]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6911      	ldr	r1, [r2, #16]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	68d2      	ldr	r2, [r2, #12]
 8006e2a:	4311      	orrs	r1, r2
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6812      	ldr	r2, [r2, #0]
 8006e30:	430b      	orrs	r3, r1
 8006e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	695a      	ldr	r2, [r3, #20]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	000186a0 	.word	0x000186a0
 8006e8c:	001e847f 	.word	0x001e847f
 8006e90:	003d08ff 	.word	0x003d08ff
 8006e94:	431bde83 	.word	0x431bde83
 8006e98:	10624dd3 	.word	0x10624dd3

08006e9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	607a      	str	r2, [r7, #4]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	817b      	strh	r3, [r7, #10]
 8006eac:	4613      	mov	r3, r2
 8006eae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006eb0:	f7ff f8dc 	bl	800606c <HAL_GetTick>
 8006eb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	f040 80e0 	bne.w	8007084 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	2319      	movs	r3, #25
 8006eca:	2201      	movs	r2, #1
 8006ecc:	4970      	ldr	r1, [pc, #448]	; (8007090 <HAL_I2C_Master_Transmit+0x1f4>)
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 fc9e 	bl	8007810 <I2C_WaitOnFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006eda:	2302      	movs	r3, #2
 8006edc:	e0d3      	b.n	8007086 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_I2C_Master_Transmit+0x50>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e0cc      	b.n	8007086 <HAL_I2C_Master_Transmit+0x1ea>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d007      	beq.n	8006f12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2221      	movs	r2, #33	; 0x21
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2210      	movs	r2, #16
 8006f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	893a      	ldrh	r2, [r7, #8]
 8006f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4a50      	ldr	r2, [pc, #320]	; (8007094 <HAL_I2C_Master_Transmit+0x1f8>)
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006f54:	8979      	ldrh	r1, [r7, #10]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	6a3a      	ldr	r2, [r7, #32]
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 fb08 	bl	8007570 <I2C_MasterRequestWrite>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e08d      	b.n	8007086 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	613b      	str	r3, [r7, #16]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006f80:	e066      	b.n	8007050 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	6a39      	ldr	r1, [r7, #32]
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 fd5c 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00d      	beq.n	8006fae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d107      	bne.n	8006faa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e06b      	b.n	8007086 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	781a      	ldrb	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d11b      	bne.n	8007024 <HAL_I2C_Master_Transmit+0x188>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d017      	beq.n	8007024 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	781a      	ldrb	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700e:	b29b      	uxth	r3, r3
 8007010:	3b01      	subs	r3, #1
 8007012:	b29a      	uxth	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	6a39      	ldr	r1, [r7, #32]
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 fd53 	bl	8007ad4 <I2C_WaitOnBTFFlagUntilTimeout>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00d      	beq.n	8007050 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	2b04      	cmp	r3, #4
 800703a:	d107      	bne.n	800704c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800704a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e01a      	b.n	8007086 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007054:	2b00      	cmp	r3, #0
 8007056:	d194      	bne.n	8006f82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	e000      	b.n	8007086 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007084:	2302      	movs	r3, #2
  }
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	00100002 	.word	0x00100002
 8007094:	ffff0000 	.word	0xffff0000

08007098 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08c      	sub	sp, #48	; 0x30
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	461a      	mov	r2, r3
 80070a4:	460b      	mov	r3, r1
 80070a6:	817b      	strh	r3, [r7, #10]
 80070a8:	4613      	mov	r3, r2
 80070aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070b0:	f7fe ffdc 	bl	800606c <HAL_GetTick>
 80070b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b20      	cmp	r3, #32
 80070c0:	f040 824b 	bne.w	800755a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2319      	movs	r3, #25
 80070ca:	2201      	movs	r2, #1
 80070cc:	497f      	ldr	r1, [pc, #508]	; (80072cc <HAL_I2C_Master_Receive+0x234>)
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 fb9e 	bl	8007810 <I2C_WaitOnFlagUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80070da:	2302      	movs	r3, #2
 80070dc:	e23e      	b.n	800755c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_I2C_Master_Receive+0x54>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e237      	b.n	800755c <HAL_I2C_Master_Receive+0x4c4>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d007      	beq.n	8007112 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0201 	orr.w	r2, r2, #1
 8007110:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007120:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2222      	movs	r2, #34	; 0x22
 8007126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2210      	movs	r2, #16
 800712e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	893a      	ldrh	r2, [r7, #8]
 8007142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4a5f      	ldr	r2, [pc, #380]	; (80072d0 <HAL_I2C_Master_Receive+0x238>)
 8007152:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007154:	8979      	ldrh	r1, [r7, #10]
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fa8a 	bl	8007674 <I2C_MasterRequestRead>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e1f8      	b.n	800755c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716e:	2b00      	cmp	r3, #0
 8007170:	d113      	bne.n	800719a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007172:	2300      	movs	r3, #0
 8007174:	61fb      	str	r3, [r7, #28]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	61fb      	str	r3, [r7, #28]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	61fb      	str	r3, [r7, #28]
 8007186:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e1cc      	b.n	8007534 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d11e      	bne.n	80071e0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80071b2:	b672      	cpsid	i
}
 80071b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071b6:	2300      	movs	r3, #0
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	61bb      	str	r3, [r7, #24]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80071dc:	b662      	cpsie	i
}
 80071de:	e035      	b.n	800724c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d11e      	bne.n	8007226 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80071f8:	b672      	cpsid	i
}
 80071fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071fc:	2300      	movs	r3, #0
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007220:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007222:	b662      	cpsie	i
}
 8007224:	e012      	b.n	800724c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007236:	2300      	movs	r3, #0
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800724c:	e172      	b.n	8007534 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007252:	2b03      	cmp	r3, #3
 8007254:	f200 811f 	bhi.w	8007496 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800725c:	2b01      	cmp	r3, #1
 800725e:	d123      	bne.n	80072a8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007262:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 fc7d 	bl	8007b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e173      	b.n	800755c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072a6:	e145      	b.n	8007534 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d152      	bne.n	8007356 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	2200      	movs	r2, #0
 80072b8:	4906      	ldr	r1, [pc, #24]	; (80072d4 <HAL_I2C_Master_Receive+0x23c>)
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 faa8 	bl	8007810 <I2C_WaitOnFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d008      	beq.n	80072d8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e148      	b.n	800755c <HAL_I2C_Master_Receive+0x4c4>
 80072ca:	bf00      	nop
 80072cc:	00100002 	.word	0x00100002
 80072d0:	ffff0000 	.word	0xffff0000
 80072d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80072d8:	b672      	cpsid	i
}
 80072da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691a      	ldr	r2, [r3, #16]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	b29a      	uxth	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800731e:	b662      	cpsie	i
}
 8007320:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734a:	b29b      	uxth	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007354:	e0ee      	b.n	8007534 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	2200      	movs	r2, #0
 800735e:	4981      	ldr	r1, [pc, #516]	; (8007564 <HAL_I2C_Master_Receive+0x4cc>)
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 fa55 	bl	8007810 <I2C_WaitOnFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e0f5      	b.n	800755c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007380:	b672      	cpsid	i
}
 8007382:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691a      	ldr	r2, [r3, #16]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80073b6:	4b6c      	ldr	r3, [pc, #432]	; (8007568 <HAL_I2C_Master_Receive+0x4d0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	08db      	lsrs	r3, r3, #3
 80073bc:	4a6b      	ldr	r2, [pc, #428]	; (800756c <HAL_I2C_Master_Receive+0x4d4>)
 80073be:	fba2 2303 	umull	r2, r3, r2, r3
 80073c2:	0a1a      	lsrs	r2, r3, #8
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	00da      	lsls	r2, r3, #3
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d118      	bne.n	800740e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f043 0220 	orr.w	r2, r3, #32
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80073fe:	b662      	cpsie	i
}
 8007400:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e0a6      	b.n	800755c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b04      	cmp	r3, #4
 800741a:	d1d9      	bne.n	80073d0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800742a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	691a      	ldr	r2, [r3, #16]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007454:	b29b      	uxth	r3, r3
 8007456:	3b01      	subs	r3, #1
 8007458:	b29a      	uxth	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800745e:	b662      	cpsie	i
}
 8007460:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007494:	e04e      	b.n	8007534 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fb62 	bl	8007b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e058      	b.n	800755c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d124      	bne.n	8007534 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d107      	bne.n	8007502 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007500:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	691a      	ldr	r2, [r3, #16]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007538:	2b00      	cmp	r3, #0
 800753a:	f47f ae88 	bne.w	800724e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2220      	movs	r2, #32
 8007542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	e000      	b.n	800755c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800755a:	2302      	movs	r3, #2
  }
}
 800755c:	4618      	mov	r0, r3
 800755e:	3728      	adds	r7, #40	; 0x28
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	00010004 	.word	0x00010004
 8007568:	20000054 	.word	0x20000054
 800756c:	14f8b589 	.word	0x14f8b589

08007570 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af02      	add	r7, sp, #8
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	607a      	str	r2, [r7, #4]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	460b      	mov	r3, r1
 800757e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b08      	cmp	r3, #8
 800758a:	d006      	beq.n	800759a <I2C_MasterRequestWrite+0x2a>
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d003      	beq.n	800759a <I2C_MasterRequestWrite+0x2a>
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007598:	d108      	bne.n	80075ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	e00b      	b.n	80075c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	2b12      	cmp	r3, #18
 80075b2:	d107      	bne.n	80075c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f91d 	bl	8007810 <I2C_WaitOnFlagUntilTimeout>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00d      	beq.n	80075f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ea:	d103      	bne.n	80075f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e035      	b.n	8007664 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007600:	d108      	bne.n	8007614 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007602:	897b      	ldrh	r3, [r7, #10]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007610:	611a      	str	r2, [r3, #16]
 8007612:	e01b      	b.n	800764c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007614:	897b      	ldrh	r3, [r7, #10]
 8007616:	11db      	asrs	r3, r3, #7
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f003 0306 	and.w	r3, r3, #6
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f063 030f 	orn	r3, r3, #15
 8007624:	b2da      	uxtb	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	490e      	ldr	r1, [pc, #56]	; (800766c <I2C_MasterRequestWrite+0xfc>)
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 f966 	bl	8007904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e010      	b.n	8007664 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007642:	897b      	ldrh	r3, [r7, #10]
 8007644:	b2da      	uxtb	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	4907      	ldr	r1, [pc, #28]	; (8007670 <I2C_MasterRequestWrite+0x100>)
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 f956 	bl	8007904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e000      	b.n	8007664 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	00010008 	.word	0x00010008
 8007670:	00010002 	.word	0x00010002

08007674 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	607a      	str	r2, [r7, #4]
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	460b      	mov	r3, r1
 8007682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007698:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b08      	cmp	r3, #8
 800769e:	d006      	beq.n	80076ae <I2C_MasterRequestRead+0x3a>
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d003      	beq.n	80076ae <I2C_MasterRequestRead+0x3a>
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076ac:	d108      	bne.n	80076c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e00b      	b.n	80076d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c4:	2b11      	cmp	r3, #17
 80076c6:	d107      	bne.n	80076d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f893 	bl	8007810 <I2C_WaitOnFlagUntilTimeout>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00d      	beq.n	800770c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076fe:	d103      	bne.n	8007708 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e079      	b.n	8007800 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007714:	d108      	bne.n	8007728 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007716:	897b      	ldrh	r3, [r7, #10]
 8007718:	b2db      	uxtb	r3, r3
 800771a:	f043 0301 	orr.w	r3, r3, #1
 800771e:	b2da      	uxtb	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	611a      	str	r2, [r3, #16]
 8007726:	e05f      	b.n	80077e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007728:	897b      	ldrh	r3, [r7, #10]
 800772a:	11db      	asrs	r3, r3, #7
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f003 0306 	and.w	r3, r3, #6
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f063 030f 	orn	r3, r3, #15
 8007738:	b2da      	uxtb	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	4930      	ldr	r1, [pc, #192]	; (8007808 <I2C_MasterRequestRead+0x194>)
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f8dc 	bl	8007904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e054      	b.n	8007800 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007756:	897b      	ldrh	r3, [r7, #10]
 8007758:	b2da      	uxtb	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	4929      	ldr	r1, [pc, #164]	; (800780c <I2C_MasterRequestRead+0x198>)
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 f8cc 	bl	8007904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e044      	b.n	8007800 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007776:	2300      	movs	r3, #0
 8007778:	613b      	str	r3, [r7, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	613b      	str	r3, [r7, #16]
 800778a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800779a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f831 	bl	8007810 <I2C_WaitOnFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00d      	beq.n	80077d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c2:	d103      	bne.n	80077cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e017      	b.n	8007800 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80077d0:	897b      	ldrh	r3, [r7, #10]
 80077d2:	11db      	asrs	r3, r3, #7
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 0306 	and.w	r3, r3, #6
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	f063 030e 	orn	r3, r3, #14
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	4907      	ldr	r1, [pc, #28]	; (800780c <I2C_MasterRequestRead+0x198>)
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 f888 	bl	8007904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	00010008 	.word	0x00010008
 800780c:	00010002 	.word	0x00010002

08007810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	4613      	mov	r3, r2
 800781e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007820:	e048      	b.n	80078b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007828:	d044      	beq.n	80078b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782a:	f7fe fc1f 	bl	800606c <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d302      	bcc.n	8007840 <I2C_WaitOnFlagUntilTimeout+0x30>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d139      	bne.n	80078b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	0c1b      	lsrs	r3, r3, #16
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b01      	cmp	r3, #1
 8007848:	d10d      	bne.n	8007866 <I2C_WaitOnFlagUntilTimeout+0x56>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	43da      	mvns	r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	4013      	ands	r3, r2
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf0c      	ite	eq
 800785c:	2301      	moveq	r3, #1
 800785e:	2300      	movne	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	461a      	mov	r2, r3
 8007864:	e00c      	b.n	8007880 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	43da      	mvns	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4013      	ands	r3, r2
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	bf0c      	ite	eq
 8007878:	2301      	moveq	r3, #1
 800787a:	2300      	movne	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	429a      	cmp	r2, r3
 8007884:	d116      	bne.n	80078b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	f043 0220 	orr.w	r2, r3, #32
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e023      	b.n	80078fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	0c1b      	lsrs	r3, r3, #16
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d10d      	bne.n	80078da <I2C_WaitOnFlagUntilTimeout+0xca>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	43da      	mvns	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	4013      	ands	r3, r2
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bf0c      	ite	eq
 80078d0:	2301      	moveq	r3, #1
 80078d2:	2300      	movne	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	e00c      	b.n	80078f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	43da      	mvns	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	4013      	ands	r3, r2
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bf0c      	ite	eq
 80078ec:	2301      	moveq	r3, #1
 80078ee:	2300      	movne	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d093      	beq.n	8007822 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007912:	e071      	b.n	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800791e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007922:	d123      	bne.n	800796c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007932:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800793c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2220      	movs	r2, #32
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	f043 0204 	orr.w	r2, r3, #4
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e067      	b.n	8007a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007972:	d041      	beq.n	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007974:	f7fe fb7a 	bl	800606c <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d302      	bcc.n	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d136      	bne.n	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	0c1b      	lsrs	r3, r3, #16
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d10c      	bne.n	80079ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	43da      	mvns	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4013      	ands	r3, r2
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf14      	ite	ne
 80079a6:	2301      	movne	r3, #1
 80079a8:	2300      	moveq	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	e00b      	b.n	80079c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	43da      	mvns	r2, r3
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	4013      	ands	r3, r2
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bf14      	ite	ne
 80079c0:	2301      	movne	r3, #1
 80079c2:	2300      	moveq	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d016      	beq.n	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e4:	f043 0220 	orr.w	r2, r3, #32
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e021      	b.n	8007a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	0c1b      	lsrs	r3, r3, #16
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d10c      	bne.n	8007a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	43da      	mvns	r2, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e00b      	b.n	8007a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	43da      	mvns	r2, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4013      	ands	r3, r2
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bf14      	ite	ne
 8007a2e:	2301      	movne	r3, #1
 8007a30:	2300      	moveq	r3, #0
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f47f af6d 	bne.w	8007914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a50:	e034      	b.n	8007abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 f8e3 	bl	8007c1e <I2C_IsAcknowledgeFailed>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e034      	b.n	8007acc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d028      	beq.n	8007abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6a:	f7fe faff 	bl	800606c <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d302      	bcc.n	8007a80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d11d      	bne.n	8007abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8a:	2b80      	cmp	r3, #128	; 0x80
 8007a8c:	d016      	beq.n	8007abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa8:	f043 0220 	orr.w	r2, r3, #32
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e007      	b.n	8007acc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac6:	2b80      	cmp	r3, #128	; 0x80
 8007ac8:	d1c3      	bne.n	8007a52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ae0:	e034      	b.n	8007b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 f89b 	bl	8007c1e <I2C_IsAcknowledgeFailed>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e034      	b.n	8007b5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d028      	beq.n	8007b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afa:	f7fe fab7 	bl	800606c <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d11d      	bne.n	8007b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	f003 0304 	and.w	r3, r3, #4
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d016      	beq.n	8007b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	f043 0220 	orr.w	r2, r3, #32
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e007      	b.n	8007b5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	d1c3      	bne.n	8007ae2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b70:	e049      	b.n	8007c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	2b10      	cmp	r3, #16
 8007b7e:	d119      	bne.n	8007bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f06f 0210 	mvn.w	r2, #16
 8007b88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e030      	b.n	8007c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb4:	f7fe fa5a 	bl	800606c <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d302      	bcc.n	8007bca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d11d      	bne.n	8007c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	d016      	beq.n	8007c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	f043 0220 	orr.w	r2, r3, #32
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e007      	b.n	8007c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c10:	2b40      	cmp	r3, #64	; 0x40
 8007c12:	d1ae      	bne.n	8007b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c34:	d11b      	bne.n	8007c6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	f043 0204 	orr.w	r2, r3, #4
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e000      	b.n	8007c70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr
	...

08007c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e272      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 8087 	beq.w	8007daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c9c:	4b92      	ldr	r3, [pc, #584]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f003 030c 	and.w	r3, r3, #12
 8007ca4:	2b04      	cmp	r3, #4
 8007ca6:	d00c      	beq.n	8007cc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007ca8:	4b8f      	ldr	r3, [pc, #572]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f003 030c 	and.w	r3, r3, #12
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d112      	bne.n	8007cda <HAL_RCC_OscConfig+0x5e>
 8007cb4:	4b8c      	ldr	r3, [pc, #560]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc0:	d10b      	bne.n	8007cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc2:	4b89      	ldr	r3, [pc, #548]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d06c      	beq.n	8007da8 <HAL_RCC_OscConfig+0x12c>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d168      	bne.n	8007da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e24c      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce2:	d106      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x76>
 8007ce4:	4b80      	ldr	r3, [pc, #512]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a7f      	ldr	r2, [pc, #508]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	e02e      	b.n	8007d50 <HAL_RCC_OscConfig+0xd4>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10c      	bne.n	8007d14 <HAL_RCC_OscConfig+0x98>
 8007cfa:	4b7b      	ldr	r3, [pc, #492]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a7a      	ldr	r2, [pc, #488]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	4b78      	ldr	r3, [pc, #480]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a77      	ldr	r2, [pc, #476]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	e01d      	b.n	8007d50 <HAL_RCC_OscConfig+0xd4>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d1c:	d10c      	bne.n	8007d38 <HAL_RCC_OscConfig+0xbc>
 8007d1e:	4b72      	ldr	r3, [pc, #456]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a71      	ldr	r2, [pc, #452]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	4b6f      	ldr	r3, [pc, #444]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a6e      	ldr	r2, [pc, #440]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	e00b      	b.n	8007d50 <HAL_RCC_OscConfig+0xd4>
 8007d38:	4b6b      	ldr	r3, [pc, #428]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a6a      	ldr	r2, [pc, #424]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	4b68      	ldr	r3, [pc, #416]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a67      	ldr	r2, [pc, #412]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d013      	beq.n	8007d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d58:	f7fe f988 	bl	800606c <HAL_GetTick>
 8007d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d60:	f7fe f984 	bl	800606c <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b64      	cmp	r3, #100	; 0x64
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e200      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d72:	4b5d      	ldr	r3, [pc, #372]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0f0      	beq.n	8007d60 <HAL_RCC_OscConfig+0xe4>
 8007d7e:	e014      	b.n	8007daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d80:	f7fe f974 	bl	800606c <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d86:	e008      	b.n	8007d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d88:	f7fe f970 	bl	800606c <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b64      	cmp	r3, #100	; 0x64
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e1ec      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d9a:	4b53      	ldr	r3, [pc, #332]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1f0      	bne.n	8007d88 <HAL_RCC_OscConfig+0x10c>
 8007da6:	e000      	b.n	8007daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d063      	beq.n	8007e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007db6:	4b4c      	ldr	r3, [pc, #304]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f003 030c 	and.w	r3, r3, #12
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00b      	beq.n	8007dda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007dc2:	4b49      	ldr	r3, [pc, #292]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f003 030c 	and.w	r3, r3, #12
 8007dca:	2b08      	cmp	r3, #8
 8007dcc:	d11c      	bne.n	8007e08 <HAL_RCC_OscConfig+0x18c>
 8007dce:	4b46      	ldr	r3, [pc, #280]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d116      	bne.n	8007e08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dda:	4b43      	ldr	r3, [pc, #268]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d005      	beq.n	8007df2 <HAL_RCC_OscConfig+0x176>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d001      	beq.n	8007df2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e1c0      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df2:	4b3d      	ldr	r3, [pc, #244]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	4939      	ldr	r1, [pc, #228]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e06:	e03a      	b.n	8007e7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d020      	beq.n	8007e52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e10:	4b36      	ldr	r3, [pc, #216]	; (8007eec <HAL_RCC_OscConfig+0x270>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e16:	f7fe f929 	bl	800606c <HAL_GetTick>
 8007e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e1e:	f7fe f925 	bl	800606c <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e1a1      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e30:	4b2d      	ldr	r3, [pc, #180]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0f0      	beq.n	8007e1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e3c:	4b2a      	ldr	r3, [pc, #168]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4927      	ldr	r1, [pc, #156]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	600b      	str	r3, [r1, #0]
 8007e50:	e015      	b.n	8007e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e52:	4b26      	ldr	r3, [pc, #152]	; (8007eec <HAL_RCC_OscConfig+0x270>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e58:	f7fe f908 	bl	800606c <HAL_GetTick>
 8007e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e5e:	e008      	b.n	8007e72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e60:	f7fe f904 	bl	800606c <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d901      	bls.n	8007e72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e180      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e72:	4b1d      	ldr	r3, [pc, #116]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f0      	bne.n	8007e60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0308 	and.w	r3, r3, #8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d03a      	beq.n	8007f00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d019      	beq.n	8007ec6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e92:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <HAL_RCC_OscConfig+0x274>)
 8007e94:	2201      	movs	r2, #1
 8007e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e98:	f7fe f8e8 	bl	800606c <HAL_GetTick>
 8007e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ea0:	f7fe f8e4 	bl	800606c <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e160      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <HAL_RCC_OscConfig+0x26c>)
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f0      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	f000 face 	bl	8008460 <RCC_Delay>
 8007ec4:	e01c      	b.n	8007f00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ec6:	4b0a      	ldr	r3, [pc, #40]	; (8007ef0 <HAL_RCC_OscConfig+0x274>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ecc:	f7fe f8ce 	bl	800606c <HAL_GetTick>
 8007ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed2:	e00f      	b.n	8007ef4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ed4:	f7fe f8ca 	bl	800606c <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d908      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e146      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
 8007ee6:	bf00      	nop
 8007ee8:	40021000 	.word	0x40021000
 8007eec:	42420000 	.word	0x42420000
 8007ef0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ef4:	4b92      	ldr	r3, [pc, #584]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e9      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 80a6 	beq.w	800805a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f12:	4b8b      	ldr	r3, [pc, #556]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10d      	bne.n	8007f3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f1e:	4b88      	ldr	r3, [pc, #544]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	4a87      	ldr	r2, [pc, #540]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f28:	61d3      	str	r3, [r2, #28]
 8007f2a:	4b85      	ldr	r3, [pc, #532]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f32:	60bb      	str	r3, [r7, #8]
 8007f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f36:	2301      	movs	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f3a:	4b82      	ldr	r3, [pc, #520]	; (8008144 <HAL_RCC_OscConfig+0x4c8>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d118      	bne.n	8007f78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f46:	4b7f      	ldr	r3, [pc, #508]	; (8008144 <HAL_RCC_OscConfig+0x4c8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a7e      	ldr	r2, [pc, #504]	; (8008144 <HAL_RCC_OscConfig+0x4c8>)
 8007f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f52:	f7fe f88b 	bl	800606c <HAL_GetTick>
 8007f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f58:	e008      	b.n	8007f6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f5a:	f7fe f887 	bl	800606c <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b64      	cmp	r3, #100	; 0x64
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e103      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f6c:	4b75      	ldr	r3, [pc, #468]	; (8008144 <HAL_RCC_OscConfig+0x4c8>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0f0      	beq.n	8007f5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d106      	bne.n	8007f8e <HAL_RCC_OscConfig+0x312>
 8007f80:	4b6f      	ldr	r3, [pc, #444]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	4a6e      	ldr	r2, [pc, #440]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007f86:	f043 0301 	orr.w	r3, r3, #1
 8007f8a:	6213      	str	r3, [r2, #32]
 8007f8c:	e02d      	b.n	8007fea <HAL_RCC_OscConfig+0x36e>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10c      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x334>
 8007f96:	4b6a      	ldr	r3, [pc, #424]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	4a69      	ldr	r2, [pc, #420]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007f9c:	f023 0301 	bic.w	r3, r3, #1
 8007fa0:	6213      	str	r3, [r2, #32]
 8007fa2:	4b67      	ldr	r3, [pc, #412]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	4a66      	ldr	r2, [pc, #408]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007fa8:	f023 0304 	bic.w	r3, r3, #4
 8007fac:	6213      	str	r3, [r2, #32]
 8007fae:	e01c      	b.n	8007fea <HAL_RCC_OscConfig+0x36e>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b05      	cmp	r3, #5
 8007fb6:	d10c      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x356>
 8007fb8:	4b61      	ldr	r3, [pc, #388]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	4a60      	ldr	r2, [pc, #384]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007fbe:	f043 0304 	orr.w	r3, r3, #4
 8007fc2:	6213      	str	r3, [r2, #32]
 8007fc4:	4b5e      	ldr	r3, [pc, #376]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	4a5d      	ldr	r2, [pc, #372]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007fca:	f043 0301 	orr.w	r3, r3, #1
 8007fce:	6213      	str	r3, [r2, #32]
 8007fd0:	e00b      	b.n	8007fea <HAL_RCC_OscConfig+0x36e>
 8007fd2:	4b5b      	ldr	r3, [pc, #364]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	4a5a      	ldr	r2, [pc, #360]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007fd8:	f023 0301 	bic.w	r3, r3, #1
 8007fdc:	6213      	str	r3, [r2, #32]
 8007fde:	4b58      	ldr	r3, [pc, #352]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	4a57      	ldr	r2, [pc, #348]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8007fe4:	f023 0304 	bic.w	r3, r3, #4
 8007fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d015      	beq.n	800801e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ff2:	f7fe f83b 	bl	800606c <HAL_GetTick>
 8007ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ff8:	e00a      	b.n	8008010 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ffa:	f7fe f837 	bl	800606c <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	f241 3288 	movw	r2, #5000	; 0x1388
 8008008:	4293      	cmp	r3, r2
 800800a:	d901      	bls.n	8008010 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e0b1      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008010:	4b4b      	ldr	r3, [pc, #300]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	f003 0302 	and.w	r3, r3, #2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0ee      	beq.n	8007ffa <HAL_RCC_OscConfig+0x37e>
 800801c:	e014      	b.n	8008048 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800801e:	f7fe f825 	bl	800606c <HAL_GetTick>
 8008022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008024:	e00a      	b.n	800803c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008026:	f7fe f821 	bl	800606c <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	f241 3288 	movw	r2, #5000	; 0x1388
 8008034:	4293      	cmp	r3, r2
 8008036:	d901      	bls.n	800803c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e09b      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800803c:	4b40      	ldr	r3, [pc, #256]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1ee      	bne.n	8008026 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d105      	bne.n	800805a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800804e:	4b3c      	ldr	r3, [pc, #240]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	4a3b      	ldr	r2, [pc, #236]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8008054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008058:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 8087 	beq.w	8008172 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008064:	4b36      	ldr	r3, [pc, #216]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f003 030c 	and.w	r3, r3, #12
 800806c:	2b08      	cmp	r3, #8
 800806e:	d061      	beq.n	8008134 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	2b02      	cmp	r3, #2
 8008076:	d146      	bne.n	8008106 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008078:	4b33      	ldr	r3, [pc, #204]	; (8008148 <HAL_RCC_OscConfig+0x4cc>)
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800807e:	f7fd fff5 	bl	800606c <HAL_GetTick>
 8008082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008084:	e008      	b.n	8008098 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008086:	f7fd fff1 	bl	800606c <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b02      	cmp	r3, #2
 8008092:	d901      	bls.n	8008098 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e06d      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008098:	4b29      	ldr	r3, [pc, #164]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1f0      	bne.n	8008086 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ac:	d108      	bne.n	80080c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80080ae:	4b24      	ldr	r3, [pc, #144]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	4921      	ldr	r1, [pc, #132]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080c0:	4b1f      	ldr	r3, [pc, #124]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a19      	ldr	r1, [r3, #32]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	430b      	orrs	r3, r1
 80080d2:	491b      	ldr	r1, [pc, #108]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080d8:	4b1b      	ldr	r3, [pc, #108]	; (8008148 <HAL_RCC_OscConfig+0x4cc>)
 80080da:	2201      	movs	r2, #1
 80080dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080de:	f7fd ffc5 	bl	800606c <HAL_GetTick>
 80080e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80080e4:	e008      	b.n	80080f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080e6:	f7fd ffc1 	bl	800606c <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d901      	bls.n	80080f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e03d      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80080f8:	4b11      	ldr	r3, [pc, #68]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0f0      	beq.n	80080e6 <HAL_RCC_OscConfig+0x46a>
 8008104:	e035      	b.n	8008172 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008106:	4b10      	ldr	r3, [pc, #64]	; (8008148 <HAL_RCC_OscConfig+0x4cc>)
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800810c:	f7fd ffae 	bl	800606c <HAL_GetTick>
 8008110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008112:	e008      	b.n	8008126 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008114:	f7fd ffaa 	bl	800606c <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e026      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008126:	4b06      	ldr	r3, [pc, #24]	; (8008140 <HAL_RCC_OscConfig+0x4c4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1f0      	bne.n	8008114 <HAL_RCC_OscConfig+0x498>
 8008132:	e01e      	b.n	8008172 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d107      	bne.n	800814c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e019      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
 8008140:	40021000 	.word	0x40021000
 8008144:	40007000 	.word	0x40007000
 8008148:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800814c:	4b0b      	ldr	r3, [pc, #44]	; (800817c <HAL_RCC_OscConfig+0x500>)
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	429a      	cmp	r2, r3
 800815e:	d106      	bne.n	800816e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800816a:	429a      	cmp	r2, r3
 800816c:	d001      	beq.n	8008172 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40021000 	.word	0x40021000

08008180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e0d0      	b.n	8008336 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008194:	4b6a      	ldr	r3, [pc, #424]	; (8008340 <HAL_RCC_ClockConfig+0x1c0>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d910      	bls.n	80081c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081a2:	4b67      	ldr	r3, [pc, #412]	; (8008340 <HAL_RCC_ClockConfig+0x1c0>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f023 0207 	bic.w	r2, r3, #7
 80081aa:	4965      	ldr	r1, [pc, #404]	; (8008340 <HAL_RCC_ClockConfig+0x1c0>)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081b2:	4b63      	ldr	r3, [pc, #396]	; (8008340 <HAL_RCC_ClockConfig+0x1c0>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d001      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e0b8      	b.n	8008336 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d020      	beq.n	8008212 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081dc:	4b59      	ldr	r3, [pc, #356]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4a58      	ldr	r2, [pc, #352]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 80081e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80081e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0308 	and.w	r3, r3, #8
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081f4:	4b53      	ldr	r3, [pc, #332]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	4a52      	ldr	r2, [pc, #328]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 80081fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80081fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008200:	4b50      	ldr	r3, [pc, #320]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	494d      	ldr	r1, [pc, #308]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 800820e:	4313      	orrs	r3, r2
 8008210:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d040      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d107      	bne.n	8008236 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008226:	4b47      	ldr	r3, [pc, #284]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d115      	bne.n	800825e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e07f      	b.n	8008336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d107      	bne.n	800824e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800823e:	4b41      	ldr	r3, [pc, #260]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d109      	bne.n	800825e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e073      	b.n	8008336 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800824e:	4b3d      	ldr	r3, [pc, #244]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e06b      	b.n	8008336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800825e:	4b39      	ldr	r3, [pc, #228]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f023 0203 	bic.w	r2, r3, #3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	4936      	ldr	r1, [pc, #216]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 800826c:	4313      	orrs	r3, r2
 800826e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008270:	f7fd fefc 	bl	800606c <HAL_GetTick>
 8008274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008276:	e00a      	b.n	800828e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008278:	f7fd fef8 	bl	800606c <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	f241 3288 	movw	r2, #5000	; 0x1388
 8008286:	4293      	cmp	r3, r2
 8008288:	d901      	bls.n	800828e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e053      	b.n	8008336 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800828e:	4b2d      	ldr	r3, [pc, #180]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f003 020c 	and.w	r2, r3, #12
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	429a      	cmp	r2, r3
 800829e:	d1eb      	bne.n	8008278 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082a0:	4b27      	ldr	r3, [pc, #156]	; (8008340 <HAL_RCC_ClockConfig+0x1c0>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d210      	bcs.n	80082d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ae:	4b24      	ldr	r3, [pc, #144]	; (8008340 <HAL_RCC_ClockConfig+0x1c0>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f023 0207 	bic.w	r2, r3, #7
 80082b6:	4922      	ldr	r1, [pc, #136]	; (8008340 <HAL_RCC_ClockConfig+0x1c0>)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082be:	4b20      	ldr	r3, [pc, #128]	; (8008340 <HAL_RCC_ClockConfig+0x1c0>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d001      	beq.n	80082d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e032      	b.n	8008336 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082dc:	4b19      	ldr	r3, [pc, #100]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	4916      	ldr	r1, [pc, #88]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0308 	and.w	r3, r3, #8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d009      	beq.n	800830e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80082fa:	4b12      	ldr	r3, [pc, #72]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	490e      	ldr	r1, [pc, #56]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 800830a:	4313      	orrs	r3, r2
 800830c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800830e:	f000 f821 	bl	8008354 <HAL_RCC_GetSysClockFreq>
 8008312:	4602      	mov	r2, r0
 8008314:	4b0b      	ldr	r3, [pc, #44]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	091b      	lsrs	r3, r3, #4
 800831a:	f003 030f 	and.w	r3, r3, #15
 800831e:	490a      	ldr	r1, [pc, #40]	; (8008348 <HAL_RCC_ClockConfig+0x1c8>)
 8008320:	5ccb      	ldrb	r3, [r1, r3]
 8008322:	fa22 f303 	lsr.w	r3, r2, r3
 8008326:	4a09      	ldr	r2, [pc, #36]	; (800834c <HAL_RCC_ClockConfig+0x1cc>)
 8008328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800832a:	4b09      	ldr	r3, [pc, #36]	; (8008350 <HAL_RCC_ClockConfig+0x1d0>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4618      	mov	r0, r3
 8008330:	f7fd fe5a 	bl	8005fe8 <HAL_InitTick>

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	40022000 	.word	0x40022000
 8008344:	40021000 	.word	0x40021000
 8008348:	0800f178 	.word	0x0800f178
 800834c:	20000054 	.word	0x20000054
 8008350:	20000058 	.word	0x20000058

08008354 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	60fb      	str	r3, [r7, #12]
 800835e:	2300      	movs	r3, #0
 8008360:	60bb      	str	r3, [r7, #8]
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]
 8008366:	2300      	movs	r3, #0
 8008368:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800836e:	4b1e      	ldr	r3, [pc, #120]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f003 030c 	and.w	r3, r3, #12
 800837a:	2b04      	cmp	r3, #4
 800837c:	d002      	beq.n	8008384 <HAL_RCC_GetSysClockFreq+0x30>
 800837e:	2b08      	cmp	r3, #8
 8008380:	d003      	beq.n	800838a <HAL_RCC_GetSysClockFreq+0x36>
 8008382:	e027      	b.n	80083d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008384:	4b19      	ldr	r3, [pc, #100]	; (80083ec <HAL_RCC_GetSysClockFreq+0x98>)
 8008386:	613b      	str	r3, [r7, #16]
      break;
 8008388:	e027      	b.n	80083da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	0c9b      	lsrs	r3, r3, #18
 800838e:	f003 030f 	and.w	r3, r3, #15
 8008392:	4a17      	ldr	r2, [pc, #92]	; (80083f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008394:	5cd3      	ldrb	r3, [r2, r3]
 8008396:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d010      	beq.n	80083c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80083a2:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	0c5b      	lsrs	r3, r3, #17
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	4a11      	ldr	r2, [pc, #68]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80083ae:	5cd3      	ldrb	r3, [r2, r3]
 80083b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a0d      	ldr	r2, [pc, #52]	; (80083ec <HAL_RCC_GetSysClockFreq+0x98>)
 80083b6:	fb03 f202 	mul.w	r2, r3, r2
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	e004      	b.n	80083ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a0c      	ldr	r2, [pc, #48]	; (80083f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80083c8:	fb02 f303 	mul.w	r3, r2, r3
 80083cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	613b      	str	r3, [r7, #16]
      break;
 80083d2:	e002      	b.n	80083da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80083d4:	4b05      	ldr	r3, [pc, #20]	; (80083ec <HAL_RCC_GetSysClockFreq+0x98>)
 80083d6:	613b      	str	r3, [r7, #16]
      break;
 80083d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083da:	693b      	ldr	r3, [r7, #16]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40021000 	.word	0x40021000
 80083ec:	007a1200 	.word	0x007a1200
 80083f0:	0800f190 	.word	0x0800f190
 80083f4:	0800f1a0 	.word	0x0800f1a0
 80083f8:	003d0900 	.word	0x003d0900

080083fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008400:	4b02      	ldr	r3, [pc, #8]	; (800840c <HAL_RCC_GetHCLKFreq+0x10>)
 8008402:	681b      	ldr	r3, [r3, #0]
}
 8008404:	4618      	mov	r0, r3
 8008406:	46bd      	mov	sp, r7
 8008408:	bc80      	pop	{r7}
 800840a:	4770      	bx	lr
 800840c:	20000054 	.word	0x20000054

08008410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008414:	f7ff fff2 	bl	80083fc <HAL_RCC_GetHCLKFreq>
 8008418:	4602      	mov	r2, r0
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	0a1b      	lsrs	r3, r3, #8
 8008420:	f003 0307 	and.w	r3, r3, #7
 8008424:	4903      	ldr	r1, [pc, #12]	; (8008434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008426:	5ccb      	ldrb	r3, [r1, r3]
 8008428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800842c:	4618      	mov	r0, r3
 800842e:	bd80      	pop	{r7, pc}
 8008430:	40021000 	.word	0x40021000
 8008434:	0800f188 	.word	0x0800f188

08008438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800843c:	f7ff ffde 	bl	80083fc <HAL_RCC_GetHCLKFreq>
 8008440:	4602      	mov	r2, r0
 8008442:	4b05      	ldr	r3, [pc, #20]	; (8008458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	0adb      	lsrs	r3, r3, #11
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	4903      	ldr	r1, [pc, #12]	; (800845c <HAL_RCC_GetPCLK2Freq+0x24>)
 800844e:	5ccb      	ldrb	r3, [r1, r3]
 8008450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008454:	4618      	mov	r0, r3
 8008456:	bd80      	pop	{r7, pc}
 8008458:	40021000 	.word	0x40021000
 800845c:	0800f188 	.word	0x0800f188

08008460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008468:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <RCC_Delay+0x34>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a0a      	ldr	r2, [pc, #40]	; (8008498 <RCC_Delay+0x38>)
 800846e:	fba2 2303 	umull	r2, r3, r2, r3
 8008472:	0a5b      	lsrs	r3, r3, #9
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	fb02 f303 	mul.w	r3, r2, r3
 800847a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800847c:	bf00      	nop
  }
  while (Delay --);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	1e5a      	subs	r2, r3, #1
 8008482:	60fa      	str	r2, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1f9      	bne.n	800847c <RCC_Delay+0x1c>
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	bc80      	pop	{r7}
 8008492:	4770      	bx	lr
 8008494:	20000054 	.word	0x20000054
 8008498:	10624dd3 	.word	0x10624dd3

0800849c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	2300      	movs	r3, #0
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d07d      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80084b8:	2300      	movs	r3, #0
 80084ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084bc:	4b4f      	ldr	r3, [pc, #316]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10d      	bne.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084c8:	4b4c      	ldr	r3, [pc, #304]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	4a4b      	ldr	r2, [pc, #300]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084d2:	61d3      	str	r3, [r2, #28]
 80084d4:	4b49      	ldr	r3, [pc, #292]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084dc:	60bb      	str	r3, [r7, #8]
 80084de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084e0:	2301      	movs	r3, #1
 80084e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084e4:	4b46      	ldr	r3, [pc, #280]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d118      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084f0:	4b43      	ldr	r3, [pc, #268]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a42      	ldr	r2, [pc, #264]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084fc:	f7fd fdb6 	bl	800606c <HAL_GetTick>
 8008500:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008502:	e008      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008504:	f7fd fdb2 	bl	800606c <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b64      	cmp	r3, #100	; 0x64
 8008510:	d901      	bls.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e06d      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008516:	4b3a      	ldr	r3, [pc, #232]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0f0      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008522:	4b36      	ldr	r3, [pc, #216]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800852a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d02e      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	429a      	cmp	r2, r3
 800853e:	d027      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008540:	4b2e      	ldr	r3, [pc, #184]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008548:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800854a:	4b2e      	ldr	r3, [pc, #184]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800854c:	2201      	movs	r2, #1
 800854e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008550:	4b2c      	ldr	r3, [pc, #176]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008556:	4a29      	ldr	r2, [pc, #164]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d014      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008566:	f7fd fd81 	bl	800606c <HAL_GetTick>
 800856a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800856c:	e00a      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800856e:	f7fd fd7d 	bl	800606c <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	f241 3288 	movw	r2, #5000	; 0x1388
 800857c:	4293      	cmp	r3, r2
 800857e:	d901      	bls.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e036      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008584:	4b1d      	ldr	r3, [pc, #116]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008586:	6a1b      	ldr	r3, [r3, #32]
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d0ee      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008590:	4b1a      	ldr	r3, [pc, #104]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	4917      	ldr	r1, [pc, #92]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d105      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085a8:	4b14      	ldr	r3, [pc, #80]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	4a13      	ldr	r2, [pc, #76]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d008      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085c0:	4b0e      	ldr	r3, [pc, #56]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	490b      	ldr	r1, [pc, #44]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d008      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085de:	4b07      	ldr	r3, [pc, #28]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	4904      	ldr	r1, [pc, #16]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	40021000 	.word	0x40021000
 8008600:	40007000 	.word	0x40007000
 8008604:	42420440 	.word	0x42420440

08008608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e076      	b.n	8008708 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861e:	2b00      	cmp	r3, #0
 8008620:	d108      	bne.n	8008634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800862a:	d009      	beq.n	8008640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	61da      	str	r2, [r3, #28]
 8008632:	e005      	b.n	8008640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7fd fb04 	bl	8005c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008676:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008688:	431a      	orrs	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008692:	431a      	orrs	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	431a      	orrs	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	431a      	orrs	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086b0:	431a      	orrs	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086ba:	431a      	orrs	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c4:	ea42 0103 	orr.w	r1, r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	0c1a      	lsrs	r2, r3, #16
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f002 0204 	and.w	r2, r2, #4
 80086e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69da      	ldr	r2, [r3, #28]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	4613      	mov	r3, r2
 800871e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800872a:	2b01      	cmp	r3, #1
 800872c:	d101      	bne.n	8008732 <HAL_SPI_Transmit+0x22>
 800872e:	2302      	movs	r3, #2
 8008730:	e12d      	b.n	800898e <HAL_SPI_Transmit+0x27e>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800873a:	f7fd fc97 	bl	800606c <HAL_GetTick>
 800873e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b01      	cmp	r3, #1
 800874e:	d002      	beq.n	8008756 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008750:	2302      	movs	r3, #2
 8008752:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008754:	e116      	b.n	8008984 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <HAL_SPI_Transmit+0x52>
 800875c:	88fb      	ldrh	r3, [r7, #6]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008766:	e10d      	b.n	8008984 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2203      	movs	r2, #3
 800876c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	88fa      	ldrh	r2, [r7, #6]
 8008780:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	88fa      	ldrh	r2, [r7, #6]
 8008786:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ae:	d10f      	bne.n	80087d0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087da:	2b40      	cmp	r3, #64	; 0x40
 80087dc:	d007      	beq.n	80087ee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087f6:	d14f      	bne.n	8008898 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <HAL_SPI_Transmit+0xf6>
 8008800:	8afb      	ldrh	r3, [r7, #22]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d142      	bne.n	800888c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	881a      	ldrh	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	1c9a      	adds	r2, r3, #2
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008820:	b29b      	uxth	r3, r3
 8008822:	3b01      	subs	r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800882a:	e02f      	b.n	800888c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b02      	cmp	r3, #2
 8008838:	d112      	bne.n	8008860 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	881a      	ldrh	r2, [r3, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884a:	1c9a      	adds	r2, r3, #2
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	86da      	strh	r2, [r3, #54]	; 0x36
 800885e:	e015      	b.n	800888c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008860:	f7fd fc04 	bl	800606c <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	429a      	cmp	r2, r3
 800886e:	d803      	bhi.n	8008878 <HAL_SPI_Transmit+0x168>
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008876:	d102      	bne.n	800887e <HAL_SPI_Transmit+0x16e>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d106      	bne.n	800888c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800888a:	e07b      	b.n	8008984 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008890:	b29b      	uxth	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1ca      	bne.n	800882c <HAL_SPI_Transmit+0x11c>
 8008896:	e050      	b.n	800893a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <HAL_SPI_Transmit+0x196>
 80088a0:	8afb      	ldrh	r3, [r7, #22]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d144      	bne.n	8008930 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	330c      	adds	r3, #12
 80088b0:	7812      	ldrb	r2, [r2, #0]
 80088b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80088cc:	e030      	b.n	8008930 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f003 0302 	and.w	r3, r3, #2
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d113      	bne.n	8008904 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	330c      	adds	r3, #12
 80088e6:	7812      	ldrb	r2, [r2, #0]
 80088e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	1c5a      	adds	r2, r3, #1
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	3b01      	subs	r3, #1
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	86da      	strh	r2, [r3, #54]	; 0x36
 8008902:	e015      	b.n	8008930 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008904:	f7fd fbb2 	bl	800606c <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d803      	bhi.n	800891c <HAL_SPI_Transmit+0x20c>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891a:	d102      	bne.n	8008922 <HAL_SPI_Transmit+0x212>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d106      	bne.n	8008930 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800892e:	e029      	b.n	8008984 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1c9      	bne.n	80088ce <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 fbcc 	bl	80090dc <SPI_EndRxTxTransaction>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d002      	beq.n	8008950 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2220      	movs	r2, #32
 800894e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10a      	bne.n	800896e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008958:	2300      	movs	r3, #0
 800895a:	613b      	str	r3, [r7, #16]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	613b      	str	r3, [r7, #16]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	613b      	str	r3, [r7, #16]
 800896c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	77fb      	strb	r3, [r7, #31]
 800897a:	e003      	b.n	8008984 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800898c:	7ffb      	ldrb	r3, [r7, #31]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3720      	adds	r7, #32
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b088      	sub	sp, #32
 800899a:	af02      	add	r7, sp, #8
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	603b      	str	r3, [r7, #0]
 80089a2:	4613      	mov	r3, r2
 80089a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d002      	beq.n	80089bc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80089b6:	2302      	movs	r3, #2
 80089b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80089ba:	e0fb      	b.n	8008bb4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089c4:	d112      	bne.n	80089ec <HAL_SPI_Receive+0x56>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10e      	bne.n	80089ec <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2204      	movs	r2, #4
 80089d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80089d6:	88fa      	ldrh	r2, [r7, #6]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	4613      	mov	r3, r2
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 f8ef 	bl	8008bc6 <HAL_SPI_TransmitReceive>
 80089e8:	4603      	mov	r3, r0
 80089ea:	e0e8      	b.n	8008bbe <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_SPI_Receive+0x64>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e0e1      	b.n	8008bbe <HAL_SPI_Receive+0x228>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a02:	f7fd fb33 	bl	800606c <HAL_GetTick>
 8008a06:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <HAL_SPI_Receive+0x7e>
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a18:	e0cc      	b.n	8008bb4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2204      	movs	r2, #4
 8008a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	88fa      	ldrh	r2, [r7, #6]
 8008a32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	88fa      	ldrh	r2, [r7, #6]
 8008a38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a60:	d10f      	bne.n	8008a82 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b40      	cmp	r3, #64	; 0x40
 8008a8e:	d007      	beq.n	8008aa0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d16a      	bne.n	8008b7e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008aa8:	e032      	b.n	8008b10 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d115      	bne.n	8008ae4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f103 020c 	add.w	r2, r3, #12
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	7812      	ldrb	r2, [r2, #0]
 8008ac6:	b2d2      	uxtb	r2, r2
 8008ac8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	3b01      	subs	r3, #1
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ae2:	e015      	b.n	8008b10 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ae4:	f7fd fac2 	bl	800606c <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d803      	bhi.n	8008afc <HAL_SPI_Receive+0x166>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afa:	d102      	bne.n	8008b02 <HAL_SPI_Receive+0x16c>
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d106      	bne.n	8008b10 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008b0e:	e051      	b.n	8008bb4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1c7      	bne.n	8008aaa <HAL_SPI_Receive+0x114>
 8008b1a:	e035      	b.n	8008b88 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d113      	bne.n	8008b52 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68da      	ldr	r2, [r3, #12]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b34:	b292      	uxth	r2, r2
 8008b36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3c:	1c9a      	adds	r2, r3, #2
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b50:	e015      	b.n	8008b7e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b52:	f7fd fa8b 	bl	800606c <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d803      	bhi.n	8008b6a <HAL_SPI_Receive+0x1d4>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b68:	d102      	bne.n	8008b70 <HAL_SPI_Receive+0x1da>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d106      	bne.n	8008b7e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008b7c:	e01a      	b.n	8008bb4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1c9      	bne.n	8008b1c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 fa53 	bl	8009038 <SPI_EndRxTransaction>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2220      	movs	r2, #32
 8008b9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	75fb      	strb	r3, [r7, #23]
 8008baa:	e003      	b.n	8008bb4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b08c      	sub	sp, #48	; 0x30
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d101      	bne.n	8008bec <HAL_SPI_TransmitReceive+0x26>
 8008be8:	2302      	movs	r3, #2
 8008bea:	e198      	b.n	8008f1e <HAL_SPI_TransmitReceive+0x358>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bf4:	f7fd fa3a 	bl	800606c <HAL_GetTick>
 8008bf8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c0a:	887b      	ldrh	r3, [r7, #2]
 8008c0c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d00f      	beq.n	8008c36 <HAL_SPI_TransmitReceive+0x70>
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c1c:	d107      	bne.n	8008c2e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d103      	bne.n	8008c2e <HAL_SPI_TransmitReceive+0x68>
 8008c26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d003      	beq.n	8008c36 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c2e:	2302      	movs	r3, #2
 8008c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c34:	e16d      	b.n	8008f12 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <HAL_SPI_TransmitReceive+0x82>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <HAL_SPI_TransmitReceive+0x82>
 8008c42:	887b      	ldrh	r3, [r7, #2]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c4e:	e160      	b.n	8008f12 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d003      	beq.n	8008c64 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2205      	movs	r2, #5
 8008c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	887a      	ldrh	r2, [r7, #2]
 8008c74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	887a      	ldrh	r2, [r7, #2]
 8008c7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	887a      	ldrh	r2, [r7, #2]
 8008c86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	887a      	ldrh	r2, [r7, #2]
 8008c8c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca4:	2b40      	cmp	r3, #64	; 0x40
 8008ca6:	d007      	beq.n	8008cb8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cc0:	d17c      	bne.n	8008dbc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d002      	beq.n	8008cd0 <HAL_SPI_TransmitReceive+0x10a>
 8008cca:	8b7b      	ldrh	r3, [r7, #26]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d16a      	bne.n	8008da6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd4:	881a      	ldrh	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce0:	1c9a      	adds	r2, r3, #2
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	3b01      	subs	r3, #1
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cf4:	e057      	b.n	8008da6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d11b      	bne.n	8008d3c <HAL_SPI_TransmitReceive+0x176>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d016      	beq.n	8008d3c <HAL_SPI_TransmitReceive+0x176>
 8008d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d113      	bne.n	8008d3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d18:	881a      	ldrh	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d24:	1c9a      	adds	r2, r3, #2
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	3b01      	subs	r3, #1
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d119      	bne.n	8008d7e <HAL_SPI_TransmitReceive+0x1b8>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d014      	beq.n	8008d7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5e:	b292      	uxth	r2, r2
 8008d60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d66:	1c9a      	adds	r2, r3, #2
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	3b01      	subs	r3, #1
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d7e:	f7fd f975 	bl	800606c <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d80b      	bhi.n	8008da6 <HAL_SPI_TransmitReceive+0x1e0>
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d94:	d007      	beq.n	8008da6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008da4:	e0b5      	b.n	8008f12 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1a2      	bne.n	8008cf6 <HAL_SPI_TransmitReceive+0x130>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d19d      	bne.n	8008cf6 <HAL_SPI_TransmitReceive+0x130>
 8008dba:	e080      	b.n	8008ebe <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <HAL_SPI_TransmitReceive+0x204>
 8008dc4:	8b7b      	ldrh	r3, [r7, #26]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d16f      	bne.n	8008eaa <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	330c      	adds	r3, #12
 8008dd4:	7812      	ldrb	r2, [r2, #0]
 8008dd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	3b01      	subs	r3, #1
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008df0:	e05b      	b.n	8008eaa <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f003 0302 	and.w	r3, r3, #2
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d11c      	bne.n	8008e3a <HAL_SPI_TransmitReceive+0x274>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d017      	beq.n	8008e3a <HAL_SPI_TransmitReceive+0x274>
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d114      	bne.n	8008e3a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	330c      	adds	r3, #12
 8008e1a:	7812      	ldrb	r2, [r2, #0]
 8008e1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d119      	bne.n	8008e7c <HAL_SPI_TransmitReceive+0x2b6>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d014      	beq.n	8008e7c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	b2d2      	uxtb	r2, r2
 8008e5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	3b01      	subs	r3, #1
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e7c:	f7fd f8f6 	bl	800606c <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d803      	bhi.n	8008e94 <HAL_SPI_TransmitReceive+0x2ce>
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e92:	d102      	bne.n	8008e9a <HAL_SPI_TransmitReceive+0x2d4>
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d107      	bne.n	8008eaa <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008ea8:	e033      	b.n	8008f12 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d19e      	bne.n	8008df2 <HAL_SPI_TransmitReceive+0x22c>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d199      	bne.n	8008df2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f90a 	bl	80090dc <SPI_EndRxTxTransaction>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d006      	beq.n	8008edc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008eda:	e01a      	b.n	8008f12 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10a      	bne.n	8008efa <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f08:	e003      	b.n	8008f12 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3730      	adds	r7, #48	; 0x30
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
	...

08008f28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	4613      	mov	r3, r2
 8008f36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f38:	f7fd f898 	bl	800606c <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f40:	1a9b      	subs	r3, r3, r2
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	4413      	add	r3, r2
 8008f46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f48:	f7fd f890 	bl	800606c <HAL_GetTick>
 8008f4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f4e:	4b39      	ldr	r3, [pc, #228]	; (8009034 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	015b      	lsls	r3, r3, #5
 8008f54:	0d1b      	lsrs	r3, r3, #20
 8008f56:	69fa      	ldr	r2, [r7, #28]
 8008f58:	fb02 f303 	mul.w	r3, r2, r3
 8008f5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f5e:	e054      	b.n	800900a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f66:	d050      	beq.n	800900a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f68:	f7fd f880 	bl	800606c <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d902      	bls.n	8008f7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d13d      	bne.n	8008ffa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f96:	d111      	bne.n	8008fbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fa0:	d004      	beq.n	8008fac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008faa:	d107      	bne.n	8008fbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fc4:	d10f      	bne.n	8008fe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e017      	b.n	800902a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009000:	2300      	movs	r3, #0
 8009002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	3b01      	subs	r3, #1
 8009008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	4013      	ands	r3, r2
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	429a      	cmp	r2, r3
 8009018:	bf0c      	ite	eq
 800901a:	2301      	moveq	r3, #1
 800901c:	2300      	movne	r3, #0
 800901e:	b2db      	uxtb	r3, r3
 8009020:	461a      	mov	r2, r3
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	429a      	cmp	r2, r3
 8009026:	d19b      	bne.n	8008f60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3720      	adds	r7, #32
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20000054 	.word	0x20000054

08009038 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af02      	add	r7, sp, #8
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800904c:	d111      	bne.n	8009072 <SPI_EndRxTransaction+0x3a>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009056:	d004      	beq.n	8009062 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009060:	d107      	bne.n	8009072 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009070:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800907a:	d117      	bne.n	80090ac <SPI_EndRxTransaction+0x74>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009084:	d112      	bne.n	80090ac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2200      	movs	r2, #0
 800908e:	2101      	movs	r1, #1
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f7ff ff49 	bl	8008f28 <SPI_WaitFlagStateUntilTimeout>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01a      	beq.n	80090d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a0:	f043 0220 	orr.w	r2, r3, #32
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e013      	b.n	80090d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2200      	movs	r2, #0
 80090b4:	2180      	movs	r1, #128	; 0x80
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff ff36 	bl	8008f28 <SPI_WaitFlagStateUntilTimeout>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d007      	beq.n	80090d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c6:	f043 0220 	orr.w	r2, r3, #32
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e000      	b.n	80090d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af02      	add	r7, sp, #8
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2200      	movs	r2, #0
 80090f0:	2180      	movs	r1, #128	; 0x80
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff ff18 	bl	8008f28 <SPI_WaitFlagStateUntilTimeout>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d007      	beq.n	800910e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009102:	f043 0220 	orr.w	r2, r3, #32
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e000      	b.n	8009110 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e042      	b.n	80091b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7fc fddc 	bl	8005cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2224      	movs	r2, #36	; 0x24
 8009148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800915a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f91d 	bl	800939c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	691a      	ldr	r2, [r3, #16]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	695a      	ldr	r2, [r3, #20]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68da      	ldr	r2, [r3, #12]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2220      	movs	r2, #32
 800919c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2220      	movs	r2, #32
 80091a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	; 0x28
 80091bc:	af02      	add	r7, sp, #8
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	603b      	str	r3, [r7, #0]
 80091c4:	4613      	mov	r3, r2
 80091c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	d16d      	bne.n	80092b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <HAL_UART_Transmit+0x2c>
 80091de:	88fb      	ldrh	r3, [r7, #6]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e066      	b.n	80092b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2221      	movs	r2, #33	; 0x21
 80091f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091f6:	f7fc ff39 	bl	800606c <HAL_GetTick>
 80091fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	88fa      	ldrh	r2, [r7, #6]
 8009200:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	88fa      	ldrh	r2, [r7, #6]
 8009206:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009210:	d108      	bne.n	8009224 <HAL_UART_Transmit+0x6c>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d104      	bne.n	8009224 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	61bb      	str	r3, [r7, #24]
 8009222:	e003      	b.n	800922c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009228:	2300      	movs	r3, #0
 800922a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800922c:	e02a      	b.n	8009284 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2200      	movs	r2, #0
 8009236:	2180      	movs	r1, #128	; 0x80
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 f840 	bl	80092be <UART_WaitOnFlagUntilTimeout>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009244:	2303      	movs	r3, #3
 8009246:	e036      	b.n	80092b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10b      	bne.n	8009266 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800925c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	3302      	adds	r3, #2
 8009262:	61bb      	str	r3, [r7, #24]
 8009264:	e007      	b.n	8009276 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	781a      	ldrb	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	3301      	adds	r3, #1
 8009274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800927a:	b29b      	uxth	r3, r3
 800927c:	3b01      	subs	r3, #1
 800927e:	b29a      	uxth	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1cf      	bne.n	800922e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2200      	movs	r2, #0
 8009296:	2140      	movs	r1, #64	; 0x40
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 f810 	bl	80092be <UART_WaitOnFlagUntilTimeout>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e006      	b.n	80092b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2220      	movs	r2, #32
 80092ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	e000      	b.n	80092b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80092b4:	2302      	movs	r3, #2
  }
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3720      	adds	r7, #32
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b090      	sub	sp, #64	; 0x40
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	603b      	str	r3, [r7, #0]
 80092ca:	4613      	mov	r3, r2
 80092cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ce:	e050      	b.n	8009372 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d6:	d04c      	beq.n	8009372 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d007      	beq.n	80092ee <UART_WaitOnFlagUntilTimeout+0x30>
 80092de:	f7fc fec5 	bl	800606c <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d241      	bcs.n	8009372 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	330c      	adds	r3, #12
 80092f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	330c      	adds	r3, #12
 800930c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800930e:	637a      	str	r2, [r7, #52]	; 0x34
 8009310:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009316:	e841 2300 	strex	r3, r2, [r1]
 800931a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1e5      	bne.n	80092ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3314      	adds	r3, #20
 8009328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	e853 3f00 	ldrex	r3, [r3]
 8009330:	613b      	str	r3, [r7, #16]
   return(result);
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f023 0301 	bic.w	r3, r3, #1
 8009338:	63bb      	str	r3, [r7, #56]	; 0x38
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3314      	adds	r3, #20
 8009340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009342:	623a      	str	r2, [r7, #32]
 8009344:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009346:	69f9      	ldr	r1, [r7, #28]
 8009348:	6a3a      	ldr	r2, [r7, #32]
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1e5      	bne.n	8009322 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2220      	movs	r2, #32
 800935a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2220      	movs	r2, #32
 8009362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e00f      	b.n	8009392 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	4013      	ands	r3, r2
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	429a      	cmp	r2, r3
 8009380:	bf0c      	ite	eq
 8009382:	2301      	moveq	r3, #1
 8009384:	2300      	movne	r3, #0
 8009386:	b2db      	uxtb	r3, r3
 8009388:	461a      	mov	r2, r3
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	429a      	cmp	r2, r3
 800938e:	d09f      	beq.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3740      	adds	r7, #64	; 0x40
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
	...

0800939c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80093d6:	f023 030c 	bic.w	r3, r3, #12
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6812      	ldr	r2, [r2, #0]
 80093de:	68b9      	ldr	r1, [r7, #8]
 80093e0:	430b      	orrs	r3, r1
 80093e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699a      	ldr	r2, [r3, #24]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a2c      	ldr	r2, [pc, #176]	; (80094b0 <UART_SetConfig+0x114>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d103      	bne.n	800940c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009404:	f7ff f818 	bl	8008438 <HAL_RCC_GetPCLK2Freq>
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	e002      	b.n	8009412 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800940c:	f7ff f800 	bl	8008410 <HAL_RCC_GetPCLK1Freq>
 8009410:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009a      	lsls	r2, r3, #2
 800941c:	441a      	add	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	fbb2 f3f3 	udiv	r3, r2, r3
 8009428:	4a22      	ldr	r2, [pc, #136]	; (80094b4 <UART_SetConfig+0x118>)
 800942a:	fba2 2303 	umull	r2, r3, r2, r3
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	0119      	lsls	r1, r3, #4
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	4613      	mov	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	009a      	lsls	r2, r3, #2
 800943c:	441a      	add	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	fbb2 f2f3 	udiv	r2, r2, r3
 8009448:	4b1a      	ldr	r3, [pc, #104]	; (80094b4 <UART_SetConfig+0x118>)
 800944a:	fba3 0302 	umull	r0, r3, r3, r2
 800944e:	095b      	lsrs	r3, r3, #5
 8009450:	2064      	movs	r0, #100	; 0x64
 8009452:	fb00 f303 	mul.w	r3, r0, r3
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	3332      	adds	r3, #50	; 0x32
 800945c:	4a15      	ldr	r2, [pc, #84]	; (80094b4 <UART_SetConfig+0x118>)
 800945e:	fba2 2303 	umull	r2, r3, r2, r3
 8009462:	095b      	lsrs	r3, r3, #5
 8009464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009468:	4419      	add	r1, r3
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009a      	lsls	r2, r3, #2
 8009474:	441a      	add	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009480:	4b0c      	ldr	r3, [pc, #48]	; (80094b4 <UART_SetConfig+0x118>)
 8009482:	fba3 0302 	umull	r0, r3, r3, r2
 8009486:	095b      	lsrs	r3, r3, #5
 8009488:	2064      	movs	r0, #100	; 0x64
 800948a:	fb00 f303 	mul.w	r3, r0, r3
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	011b      	lsls	r3, r3, #4
 8009492:	3332      	adds	r3, #50	; 0x32
 8009494:	4a07      	ldr	r2, [pc, #28]	; (80094b4 <UART_SetConfig+0x118>)
 8009496:	fba2 2303 	umull	r2, r3, r2, r3
 800949a:	095b      	lsrs	r3, r3, #5
 800949c:	f003 020f 	and.w	r2, r3, #15
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	440a      	add	r2, r1
 80094a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80094a8:	bf00      	nop
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40013800 	.word	0x40013800
 80094b4:	51eb851f 	.word	0x51eb851f

080094b8 <LL_RTC_SetAsynchPrescaler>:
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f023 020f 	bic.w	r2, r3, #15
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	0c1b      	lsrs	r3, r3, #16
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	0c1b      	lsrs	r3, r3, #16
 80094da:	041b      	lsls	r3, r3, #16
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	b292      	uxth	r2, r2
 80094e0:	431a      	orrs	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60da      	str	r2, [r3, #12]
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bc80      	pop	{r7}
 80094ee:	4770      	bx	lr

080094f0 <LL_RTC_SetOutputSource>:
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(BKPx->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), OutputSource);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fe:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	431a      	orrs	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800950a:	bf00      	nop
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	bc80      	pop	{r7}
 8009512:	4770      	bx	lr

08009514 <LL_RTC_EnableWriteProtection>:
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_CNF);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	f023 0210 	bic.w	r2, r3, #16
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	605a      	str	r2, [r3, #4]
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	bc80      	pop	{r7}
 8009530:	4770      	bx	lr

08009532 <LL_RTC_DisableWriteProtection>:
{
 8009532:	b480      	push	{r7}
 8009534:	b083      	sub	sp, #12
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CRL, RTC_CRL_CNF);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f043 0210 	orr.w	r2, r3, #16
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	605a      	str	r2, [r3, #4]
}
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	bc80      	pop	{r7}
 800954e:	4770      	bx	lr

08009550 <LL_RTC_TIME_Set>:
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  WRITE_REG(RTCx->CNTH, (TimeCounter >> 16U));
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	0c1a      	lsrs	r2, r3, #16
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	619a      	str	r2, [r3, #24]
  WRITE_REG(RTCx->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	b29a      	uxth	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	61da      	str	r2, [r3, #28]
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <LL_RTC_TAMPER_Disable>:
  * @brief  Disable RTC_TAMPx Tamper
  * @rmtoll CR    TPE        LL_RTC_TAMPER_Disable\n
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TAMPER_Disable(BKP_TypeDef *BKPx)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800957c:	4b05      	ldr	r3, [pc, #20]	; (8009594 <LL_RTC_TAMPER_Disable+0x20>)
 800957e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009580:	4a04      	ldr	r2, [pc, #16]	; (8009594 <LL_RTC_TAMPER_Disable+0x20>)
 8009582:	f023 0301 	bic.w	r3, r3, #1
 8009586:	6313      	str	r3, [r2, #48]	; 0x30
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	bc80      	pop	{r7}
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	40006c00 	.word	0x40006c00

08009598 <LL_RTC_ClearFlag_ALR>:
  * @rmtoll CRL          ALRF         LL_RTC_ClearFlag_ALR
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_ALR(RTC_TypeDef *RTCx)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_ALRF);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f023 0202 	bic.w	r2, r3, #2
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	605a      	str	r2, [r3, #4]
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bc80      	pop	{r7}
 80095b4:	4770      	bx	lr

080095b6 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll CRL          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RSF) == (RTC_CRL_RSF));
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b08      	cmp	r3, #8
 80095c8:	bf0c      	ite	eq
 80095ca:	2301      	moveq	r3, #1
 80095cc:	2300      	movne	r3, #0
 80095ce:	b2db      	uxtb	r3, r3
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bc80      	pop	{r7}
 80095d8:	4770      	bx	lr

080095da <LL_RTC_ClearFlag_RS>:
  * @rmtoll CRL          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_RSF);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f023 0208 	bic.w	r2, r3, #8
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	605a      	str	r2, [r3, #4]
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bc80      	pop	{r7}
 80095f6:	4770      	bx	lr

080095f8 <LL_RTC_ClearFlag_OW>:
  * @rmtoll CRL          OWF           LL_RTC_ClearFlag_OW
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_OW(RTC_TypeDef *RTCx)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_OWF);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	f023 0204 	bic.w	r2, r3, #4
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	605a      	str	r2, [r3, #4]
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	bc80      	pop	{r7}
 8009614:	4770      	bx	lr

08009616 <LL_RTC_ClearFlag_SEC>:
  * @rmtoll CRL          SECF           LL_RTC_ClearFlag_SEC
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_SEC(RTC_TypeDef *RTCx)
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_SECF);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	f023 0201 	bic.w	r2, r3, #1
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	605a      	str	r2, [r3, #4]
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	bc80      	pop	{r7}
 8009632:	4770      	bx	lr

08009634 <LL_RTC_IsActiveFlag_RTOF>:
  * @rmtoll CRL          RTOFF         LL_RTC_IsActiveFlag_RTOF
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RTOF(RTC_TypeDef *RTCx)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RTOFF) == (RTC_CRL_RTOFF));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f003 0320 	and.w	r3, r3, #32
 8009644:	2b20      	cmp	r3, #32
 8009646:	bf0c      	ite	eq
 8009648:	2301      	moveq	r3, #1
 800964a:	2300      	movne	r3, #0
 800964c:	b2db      	uxtb	r3, r3
}
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	bc80      	pop	{r7}
 8009656:	4770      	bx	lr

08009658 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8009658:	b480      	push	{r7}
 800965a:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800965c:	4b06      	ldr	r3, [pc, #24]	; (8009678 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009668:	bf0c      	ite	eq
 800966a:	2301      	moveq	r3, #1
 800966c:	2300      	movne	r3, #0
 800966e:	b2db      	uxtb	r3, r3
}
 8009670:	4618      	mov	r0, r3
 8009672:	46bd      	mov	sp, r7
 8009674:	bc80      	pop	{r7}
 8009676:	4770      	bx	lr
 8009678:	e000e010 	.word	0xe000e010

0800967c <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_CALIB_OUTPUT(RTC_InitStruct->OutPutSource));
  /* Waiting for synchro */
  if (LL_RTC_WaitForSynchro(RTCx) != ERROR)
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f906 	bl	800989c <LL_RTC_WaitForSynchro>
 8009690:	4603      	mov	r3, r0
 8009692:	2b01      	cmp	r3, #1
 8009694:	d026      	beq.n	80096e4 <LL_RTC_Init+0x68>
  {
    /* Set Initialization mode */
    if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f8a2 	bl	80097e0 <LL_RTC_EnterInitMode>
 800969c:	4603      	mov	r3, r0
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d020      	beq.n	80096e4 <LL_RTC_Init+0x68>
    {
      /* Clear Flag Bits */
      LL_RTC_ClearFlag_ALR(RTCx);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7ff ff78 	bl	8009598 <LL_RTC_ClearFlag_ALR>
      LL_RTC_ClearFlag_OW(RTCx);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff ffa5 	bl	80095f8 <LL_RTC_ClearFlag_OW>
      LL_RTC_ClearFlag_SEC(RTCx);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff ffb1 	bl	8009616 <LL_RTC_ClearFlag_SEC>

      if (RTC_InitStruct->OutPutSource != LL_RTC_CALIB_OUTPUT_NONE)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <LL_RTC_Init+0x46>
      {
        /* Disable the selected Tamper Pin */
        LL_RTC_TAMPER_Disable(BKP);
 80096bc:	480c      	ldr	r0, [pc, #48]	; (80096f0 <LL_RTC_Init+0x74>)
 80096be:	f7ff ff59 	bl	8009574 <LL_RTC_TAMPER_Disable>
      }
      /* Set the signal which will be routed to RTC Tamper Pin */
      LL_RTC_SetOutputSource(BKP, RTC_InitStruct->OutPutSource);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	4619      	mov	r1, r3
 80096c8:	4809      	ldr	r0, [pc, #36]	; (80096f0 <LL_RTC_Init+0x74>)
 80096ca:	f7ff ff11 	bl	80094f0 <LL_RTC_SetOutputSource>

      /* Configure Synchronous and Asynchronous prescaler factor */
      LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff feef 	bl	80094b8 <LL_RTC_SetAsynchPrescaler>

      /* Exit Initialization Mode */
      LL_RTC_ExitInitMode(RTCx);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f8af 	bl	800983e <LL_RTC_ExitInitMode>

      status = SUCCESS;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	40006c00 	.word	0x40006c00

080096f4 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	75fb      	strb	r3, [r7, #23]
  uint32_t counter_time = 0U;
 8009704:	2300      	movs	r3, #0
 8009706:	613b      	str	r3, [r7, #16]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Enter Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 f869 	bl	80097e0 <LL_RTC_EnterInitMode>
 800970e:	4603      	mov	r3, r0
 8009710:	2b01      	cmp	r3, #1
 8009712:	d05d      	beq.n	80097d0 <LL_RTC_TIME_Init+0xdc>
  {
    /* Check the input parameters format */
    if (RTC_Format == LL_RTC_FORMAT_BIN)
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d117      	bne.n	800974a <LL_RTC_TIME_Init+0x56>
    {
      counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009724:	fb03 f202 	mul.w	r2, r3, r2
                                ((uint32_t)RTC_TimeStruct->Minutes * 60U) + \
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	4619      	mov	r1, r3
 800972e:	460b      	mov	r3, r1
 8009730:	011b      	lsls	r3, r3, #4
 8009732:	1a5b      	subs	r3, r3, r1
 8009734:	009b      	lsls	r3, r3, #2
      counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8009736:	4413      	add	r3, r2
                                ((uint32_t)RTC_TimeStruct->Seconds));
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	7892      	ldrb	r2, [r2, #2]
      counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 800973c:	4413      	add	r3, r2
 800973e:	613b      	str	r3, [r7, #16]
      LL_RTC_TIME_Set(RTCx, counter_time);
 8009740:	6939      	ldr	r1, [r7, #16]
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff ff04 	bl	8009550 <LL_RTC_TIME_Set>
 8009748:	e040      	b.n	80097cc <LL_RTC_TIME_Init+0xd8>
    }
    else
    {
      counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	091b      	lsrs	r3, r3, #4
 8009750:	b2db      	uxtb	r3, r3
 8009752:	461a      	mov	r2, r3
 8009754:	0092      	lsls	r2, r2, #2
 8009756:	4413      	add	r3, r2
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	b2da      	uxtb	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	f003 030f 	and.w	r3, r3, #15
 8009764:	b2db      	uxtb	r3, r3
 8009766:	4413      	add	r3, r2
 8009768:	b2db      	uxtb	r3, r3
 800976a:	461a      	mov	r2, r3
 800976c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009770:	fb03 f202 	mul.w	r2, r3, r2
                      ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)) * 60U) + \
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	785b      	ldrb	r3, [r3, #1]
 8009778:	091b      	lsrs	r3, r3, #4
 800977a:	b2db      	uxtb	r3, r3
 800977c:	4619      	mov	r1, r3
 800977e:	0089      	lsls	r1, r1, #2
 8009780:	440b      	add	r3, r1
 8009782:	005b      	lsls	r3, r3, #1
 8009784:	b2d9      	uxtb	r1, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	785b      	ldrb	r3, [r3, #1]
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	b2db      	uxtb	r3, r3
 8009790:	440b      	add	r3, r1
 8009792:	b2db      	uxtb	r3, r3
 8009794:	4619      	mov	r1, r3
 8009796:	460b      	mov	r3, r1
 8009798:	011b      	lsls	r3, r3, #4
 800979a:	1a5b      	subs	r3, r3, r1
 800979c:	009b      	lsls	r3, r3, #2
      counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 800979e:	4413      	add	r3, r2
                      ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds))));
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7892      	ldrb	r2, [r2, #2]
 80097a4:	0912      	lsrs	r2, r2, #4
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	4611      	mov	r1, r2
 80097aa:	0089      	lsls	r1, r1, #2
 80097ac:	440a      	add	r2, r1
 80097ae:	0052      	lsls	r2, r2, #1
 80097b0:	b2d1      	uxtb	r1, r2
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	7892      	ldrb	r2, [r2, #2]
 80097b6:	f002 020f 	and.w	r2, r2, #15
 80097ba:	b2d2      	uxtb	r2, r2
 80097bc:	440a      	add	r2, r1
 80097be:	b2d2      	uxtb	r2, r2
      counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 80097c0:	4413      	add	r3, r2
 80097c2:	613b      	str	r3, [r7, #16]
      LL_RTC_TIME_Set(RTCx, counter_time);
 80097c4:	6939      	ldr	r1, [r7, #16]
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff fec2 	bl	8009550 <LL_RTC_TIME_Set>
    }
    status = SUCCESS;
 80097cc:	2300      	movs	r3, #0
 80097ce:	75fb      	strb	r3, [r7, #23]
  }
  /* Exit Initialization mode */
  LL_RTC_ExitInitMode(RTCx);
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 f834 	bl	800983e <LL_RTC_ExitInitMode>

  return status;
 80097d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3718      	adds	r7, #24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80097e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80097ec:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80097ee:	2300      	movs	r3, #0
 80097f0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Wait till RTC is in INIT state and if Time out is reached exit */
  tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7ff ff1c 	bl	8009634 <LL_RTC_IsActiveFlag_RTOF>
 80097fc:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 1U))
 80097fe:	e010      	b.n	8009822 <LL_RTC_EnterInitMode+0x42>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8009800:	f7ff ff2a 	bl	8009658 <LL_SYSTICK_IsActiveCounterFlag>
 8009804:	4603      	mov	r3, r0
 8009806:	2b01      	cmp	r3, #1
 8009808:	d102      	bne.n	8009810 <LL_RTC_EnterInitMode+0x30>
    {
      timeout --;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	3b01      	subs	r3, #1
 800980e:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7ff ff0f 	bl	8009634 <LL_RTC_IsActiveFlag_RTOF>
 8009816:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <LL_RTC_EnterInitMode+0x42>
    {
      status = ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 1U))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <LL_RTC_EnterInitMode+0x4e>
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d1e8      	bne.n	8009800 <LL_RTC_EnterInitMode+0x20>
    }
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7ff fe7f 	bl	8009532 <LL_RTC_DisableWriteProtection>

  return status;
 8009834:	7dfb      	ldrb	r3, [r7, #23]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <LL_RTC_ExitInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC exited from in Init mode
  *          - ERROR: Not applicable
  */
ErrorStatus LL_RTC_ExitInitMode(RTC_TypeDef *RTCx)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b086      	sub	sp, #24
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8009846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800984a:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 800984c:	2300      	movs	r3, #0
 800984e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Disable initialization mode */
  LL_RTC_EnableWriteProtection(RTCx);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff fe5d 	bl	8009514 <LL_RTC_EnableWriteProtection>

  /* Wait till RTC is in INIT state and if Time out is reached exit */
  tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7ff feea 	bl	8009634 <LL_RTC_IsActiveFlag_RTOF>
 8009860:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 1U))
 8009862:	e010      	b.n	8009886 <LL_RTC_ExitInitMode+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8009864:	f7ff fef8 	bl	8009658 <LL_SYSTICK_IsActiveCounterFlag>
 8009868:	4603      	mov	r3, r0
 800986a:	2b01      	cmp	r3, #1
 800986c:	d102      	bne.n	8009874 <LL_RTC_ExitInitMode+0x36>
    {
      timeout --;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	3b01      	subs	r3, #1
 8009872:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff fedd 	bl	8009634 <LL_RTC_IsActiveFlag_RTOF>
 800987a:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <LL_RTC_ExitInitMode+0x48>
    {
      status = ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 1U))
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <LL_RTC_ExitInitMode+0x54>
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d1e8      	bne.n	8009864 <LL_RTC_ExitInitMode+0x26>
    }
  }
  return status;
 8009892:	7dfb      	ldrb	r3, [r7, #23]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 80098a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098a8:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80098aa:	2300      	movs	r3, #0
 80098ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 80098ae:	2300      	movs	r3, #0
 80098b0:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f7ff fe91 	bl	80095da <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7ff fe7c 	bl	80095b6 <LL_RTC_IsActiveFlag_RS>
 80098be:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 80098c0:	e010      	b.n	80098e4 <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80098c2:	f7ff fec9 	bl	8009658 <LL_SYSTICK_IsActiveCounterFlag>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d102      	bne.n	80098d2 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff fe6f 	bl	80095b6 <LL_RTC_IsActiveFlag_RS>
 80098d8:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <LL_RTC_WaitForSynchro+0x54>
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e8      	bne.n	80098c2 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  return (status);
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <__itoa>:
 80098fa:	1e93      	subs	r3, r2, #2
 80098fc:	2b22      	cmp	r3, #34	; 0x22
 80098fe:	b510      	push	{r4, lr}
 8009900:	460c      	mov	r4, r1
 8009902:	d904      	bls.n	800990e <__itoa+0x14>
 8009904:	2300      	movs	r3, #0
 8009906:	461c      	mov	r4, r3
 8009908:	700b      	strb	r3, [r1, #0]
 800990a:	4620      	mov	r0, r4
 800990c:	bd10      	pop	{r4, pc}
 800990e:	2a0a      	cmp	r2, #10
 8009910:	d109      	bne.n	8009926 <__itoa+0x2c>
 8009912:	2800      	cmp	r0, #0
 8009914:	da07      	bge.n	8009926 <__itoa+0x2c>
 8009916:	232d      	movs	r3, #45	; 0x2d
 8009918:	700b      	strb	r3, [r1, #0]
 800991a:	2101      	movs	r1, #1
 800991c:	4240      	negs	r0, r0
 800991e:	4421      	add	r1, r4
 8009920:	f000 ff94 	bl	800a84c <__utoa>
 8009924:	e7f1      	b.n	800990a <__itoa+0x10>
 8009926:	2100      	movs	r1, #0
 8009928:	e7f9      	b.n	800991e <__itoa+0x24>

0800992a <itoa>:
 800992a:	f7ff bfe6 	b.w	80098fa <__itoa>
	...

08009930 <malloc>:
 8009930:	4b02      	ldr	r3, [pc, #8]	; (800993c <malloc+0xc>)
 8009932:	4601      	mov	r1, r0
 8009934:	6818      	ldr	r0, [r3, #0]
 8009936:	f000 b82b 	b.w	8009990 <_malloc_r>
 800993a:	bf00      	nop
 800993c:	20000224 	.word	0x20000224

08009940 <free>:
 8009940:	4b02      	ldr	r3, [pc, #8]	; (800994c <free+0xc>)
 8009942:	4601      	mov	r1, r0
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	f002 bfcf 	b.w	800c8e8 <_free_r>
 800994a:	bf00      	nop
 800994c:	20000224 	.word	0x20000224

08009950 <sbrk_aligned>:
 8009950:	b570      	push	{r4, r5, r6, lr}
 8009952:	4e0e      	ldr	r6, [pc, #56]	; (800998c <sbrk_aligned+0x3c>)
 8009954:	460c      	mov	r4, r1
 8009956:	6831      	ldr	r1, [r6, #0]
 8009958:	4605      	mov	r5, r0
 800995a:	b911      	cbnz	r1, 8009962 <sbrk_aligned+0x12>
 800995c:	f002 f8da 	bl	800bb14 <_sbrk_r>
 8009960:	6030      	str	r0, [r6, #0]
 8009962:	4621      	mov	r1, r4
 8009964:	4628      	mov	r0, r5
 8009966:	f002 f8d5 	bl	800bb14 <_sbrk_r>
 800996a:	1c43      	adds	r3, r0, #1
 800996c:	d00a      	beq.n	8009984 <sbrk_aligned+0x34>
 800996e:	1cc4      	adds	r4, r0, #3
 8009970:	f024 0403 	bic.w	r4, r4, #3
 8009974:	42a0      	cmp	r0, r4
 8009976:	d007      	beq.n	8009988 <sbrk_aligned+0x38>
 8009978:	1a21      	subs	r1, r4, r0
 800997a:	4628      	mov	r0, r5
 800997c:	f002 f8ca 	bl	800bb14 <_sbrk_r>
 8009980:	3001      	adds	r0, #1
 8009982:	d101      	bne.n	8009988 <sbrk_aligned+0x38>
 8009984:	f04f 34ff 	mov.w	r4, #4294967295
 8009988:	4620      	mov	r0, r4
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	20000990 	.word	0x20000990

08009990 <_malloc_r>:
 8009990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009994:	1ccd      	adds	r5, r1, #3
 8009996:	f025 0503 	bic.w	r5, r5, #3
 800999a:	3508      	adds	r5, #8
 800999c:	2d0c      	cmp	r5, #12
 800999e:	bf38      	it	cc
 80099a0:	250c      	movcc	r5, #12
 80099a2:	2d00      	cmp	r5, #0
 80099a4:	4607      	mov	r7, r0
 80099a6:	db01      	blt.n	80099ac <_malloc_r+0x1c>
 80099a8:	42a9      	cmp	r1, r5
 80099aa:	d905      	bls.n	80099b8 <_malloc_r+0x28>
 80099ac:	230c      	movs	r3, #12
 80099ae:	2600      	movs	r6, #0
 80099b0:	603b      	str	r3, [r7, #0]
 80099b2:	4630      	mov	r0, r6
 80099b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a8c <_malloc_r+0xfc>
 80099bc:	f000 f868 	bl	8009a90 <__malloc_lock>
 80099c0:	f8d8 3000 	ldr.w	r3, [r8]
 80099c4:	461c      	mov	r4, r3
 80099c6:	bb5c      	cbnz	r4, 8009a20 <_malloc_r+0x90>
 80099c8:	4629      	mov	r1, r5
 80099ca:	4638      	mov	r0, r7
 80099cc:	f7ff ffc0 	bl	8009950 <sbrk_aligned>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	4604      	mov	r4, r0
 80099d4:	d155      	bne.n	8009a82 <_malloc_r+0xf2>
 80099d6:	f8d8 4000 	ldr.w	r4, [r8]
 80099da:	4626      	mov	r6, r4
 80099dc:	2e00      	cmp	r6, #0
 80099de:	d145      	bne.n	8009a6c <_malloc_r+0xdc>
 80099e0:	2c00      	cmp	r4, #0
 80099e2:	d048      	beq.n	8009a76 <_malloc_r+0xe6>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	4631      	mov	r1, r6
 80099e8:	4638      	mov	r0, r7
 80099ea:	eb04 0903 	add.w	r9, r4, r3
 80099ee:	f002 f891 	bl	800bb14 <_sbrk_r>
 80099f2:	4581      	cmp	r9, r0
 80099f4:	d13f      	bne.n	8009a76 <_malloc_r+0xe6>
 80099f6:	6821      	ldr	r1, [r4, #0]
 80099f8:	4638      	mov	r0, r7
 80099fa:	1a6d      	subs	r5, r5, r1
 80099fc:	4629      	mov	r1, r5
 80099fe:	f7ff ffa7 	bl	8009950 <sbrk_aligned>
 8009a02:	3001      	adds	r0, #1
 8009a04:	d037      	beq.n	8009a76 <_malloc_r+0xe6>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	442b      	add	r3, r5
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d038      	beq.n	8009a86 <_malloc_r+0xf6>
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	42a2      	cmp	r2, r4
 8009a18:	d12b      	bne.n	8009a72 <_malloc_r+0xe2>
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	605a      	str	r2, [r3, #4]
 8009a1e:	e00f      	b.n	8009a40 <_malloc_r+0xb0>
 8009a20:	6822      	ldr	r2, [r4, #0]
 8009a22:	1b52      	subs	r2, r2, r5
 8009a24:	d41f      	bmi.n	8009a66 <_malloc_r+0xd6>
 8009a26:	2a0b      	cmp	r2, #11
 8009a28:	d917      	bls.n	8009a5a <_malloc_r+0xca>
 8009a2a:	1961      	adds	r1, r4, r5
 8009a2c:	42a3      	cmp	r3, r4
 8009a2e:	6025      	str	r5, [r4, #0]
 8009a30:	bf18      	it	ne
 8009a32:	6059      	strne	r1, [r3, #4]
 8009a34:	6863      	ldr	r3, [r4, #4]
 8009a36:	bf08      	it	eq
 8009a38:	f8c8 1000 	streq.w	r1, [r8]
 8009a3c:	5162      	str	r2, [r4, r5]
 8009a3e:	604b      	str	r3, [r1, #4]
 8009a40:	4638      	mov	r0, r7
 8009a42:	f104 060b 	add.w	r6, r4, #11
 8009a46:	f000 f829 	bl	8009a9c <__malloc_unlock>
 8009a4a:	f026 0607 	bic.w	r6, r6, #7
 8009a4e:	1d23      	adds	r3, r4, #4
 8009a50:	1af2      	subs	r2, r6, r3
 8009a52:	d0ae      	beq.n	80099b2 <_malloc_r+0x22>
 8009a54:	1b9b      	subs	r3, r3, r6
 8009a56:	50a3      	str	r3, [r4, r2]
 8009a58:	e7ab      	b.n	80099b2 <_malloc_r+0x22>
 8009a5a:	42a3      	cmp	r3, r4
 8009a5c:	6862      	ldr	r2, [r4, #4]
 8009a5e:	d1dd      	bne.n	8009a1c <_malloc_r+0x8c>
 8009a60:	f8c8 2000 	str.w	r2, [r8]
 8009a64:	e7ec      	b.n	8009a40 <_malloc_r+0xb0>
 8009a66:	4623      	mov	r3, r4
 8009a68:	6864      	ldr	r4, [r4, #4]
 8009a6a:	e7ac      	b.n	80099c6 <_malloc_r+0x36>
 8009a6c:	4634      	mov	r4, r6
 8009a6e:	6876      	ldr	r6, [r6, #4]
 8009a70:	e7b4      	b.n	80099dc <_malloc_r+0x4c>
 8009a72:	4613      	mov	r3, r2
 8009a74:	e7cc      	b.n	8009a10 <_malloc_r+0x80>
 8009a76:	230c      	movs	r3, #12
 8009a78:	4638      	mov	r0, r7
 8009a7a:	603b      	str	r3, [r7, #0]
 8009a7c:	f000 f80e 	bl	8009a9c <__malloc_unlock>
 8009a80:	e797      	b.n	80099b2 <_malloc_r+0x22>
 8009a82:	6025      	str	r5, [r4, #0]
 8009a84:	e7dc      	b.n	8009a40 <_malloc_r+0xb0>
 8009a86:	605b      	str	r3, [r3, #4]
 8009a88:	deff      	udf	#255	; 0xff
 8009a8a:	bf00      	nop
 8009a8c:	2000098c 	.word	0x2000098c

08009a90 <__malloc_lock>:
 8009a90:	4801      	ldr	r0, [pc, #4]	; (8009a98 <__malloc_lock+0x8>)
 8009a92:	f002 b88b 	b.w	800bbac <__retarget_lock_acquire_recursive>
 8009a96:	bf00      	nop
 8009a98:	20000ad4 	.word	0x20000ad4

08009a9c <__malloc_unlock>:
 8009a9c:	4801      	ldr	r0, [pc, #4]	; (8009aa4 <__malloc_unlock+0x8>)
 8009a9e:	f002 b886 	b.w	800bbae <__retarget_lock_release_recursive>
 8009aa2:	bf00      	nop
 8009aa4:	20000ad4 	.word	0x20000ad4

08009aa8 <realloc>:
 8009aa8:	4b02      	ldr	r3, [pc, #8]	; (8009ab4 <realloc+0xc>)
 8009aaa:	460a      	mov	r2, r1
 8009aac:	4601      	mov	r1, r0
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	f000 b802 	b.w	8009ab8 <_realloc_r>
 8009ab4:	20000224 	.word	0x20000224

08009ab8 <_realloc_r>:
 8009ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009abc:	4680      	mov	r8, r0
 8009abe:	4614      	mov	r4, r2
 8009ac0:	460e      	mov	r6, r1
 8009ac2:	b921      	cbnz	r1, 8009ace <_realloc_r+0x16>
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aca:	f7ff bf61 	b.w	8009990 <_malloc_r>
 8009ace:	b92a      	cbnz	r2, 8009adc <_realloc_r+0x24>
 8009ad0:	f002 ff0a 	bl	800c8e8 <_free_r>
 8009ad4:	4625      	mov	r5, r4
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009adc:	f003 ff54 	bl	800d988 <_malloc_usable_size_r>
 8009ae0:	4284      	cmp	r4, r0
 8009ae2:	4607      	mov	r7, r0
 8009ae4:	d802      	bhi.n	8009aec <_realloc_r+0x34>
 8009ae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009aea:	d812      	bhi.n	8009b12 <_realloc_r+0x5a>
 8009aec:	4621      	mov	r1, r4
 8009aee:	4640      	mov	r0, r8
 8009af0:	f7ff ff4e 	bl	8009990 <_malloc_r>
 8009af4:	4605      	mov	r5, r0
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d0ed      	beq.n	8009ad6 <_realloc_r+0x1e>
 8009afa:	42bc      	cmp	r4, r7
 8009afc:	4622      	mov	r2, r4
 8009afe:	4631      	mov	r1, r6
 8009b00:	bf28      	it	cs
 8009b02:	463a      	movcs	r2, r7
 8009b04:	f002 f86a 	bl	800bbdc <memcpy>
 8009b08:	4631      	mov	r1, r6
 8009b0a:	4640      	mov	r0, r8
 8009b0c:	f002 feec 	bl	800c8e8 <_free_r>
 8009b10:	e7e1      	b.n	8009ad6 <_realloc_r+0x1e>
 8009b12:	4635      	mov	r5, r6
 8009b14:	e7df      	b.n	8009ad6 <_realloc_r+0x1e>

08009b16 <sulp>:
 8009b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	4690      	mov	r8, r2
 8009b1e:	f003 fe03 	bl	800d728 <__ulp>
 8009b22:	4604      	mov	r4, r0
 8009b24:	460d      	mov	r5, r1
 8009b26:	f1b8 0f00 	cmp.w	r8, #0
 8009b2a:	d011      	beq.n	8009b50 <sulp+0x3a>
 8009b2c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009b30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dd0b      	ble.n	8009b50 <sulp+0x3a>
 8009b38:	2400      	movs	r4, #0
 8009b3a:	051b      	lsls	r3, r3, #20
 8009b3c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009b44:	4622      	mov	r2, r4
 8009b46:	462b      	mov	r3, r5
 8009b48:	f7f6 fcc6 	bl	80004d8 <__aeabi_dmul>
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	460d      	mov	r5, r1
 8009b50:	4620      	mov	r0, r4
 8009b52:	4629      	mov	r1, r5
 8009b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b58 <_strtod_l>:
 8009b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	b09f      	sub	sp, #124	; 0x7c
 8009b5e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b60:	2200      	movs	r2, #0
 8009b62:	4604      	mov	r4, r0
 8009b64:	921a      	str	r2, [sp, #104]	; 0x68
 8009b66:	460d      	mov	r5, r1
 8009b68:	f04f 0800 	mov.w	r8, #0
 8009b6c:	f04f 0900 	mov.w	r9, #0
 8009b70:	460a      	mov	r2, r1
 8009b72:	9219      	str	r2, [sp, #100]	; 0x64
 8009b74:	7811      	ldrb	r1, [r2, #0]
 8009b76:	292b      	cmp	r1, #43	; 0x2b
 8009b78:	d04a      	beq.n	8009c10 <_strtod_l+0xb8>
 8009b7a:	d838      	bhi.n	8009bee <_strtod_l+0x96>
 8009b7c:	290d      	cmp	r1, #13
 8009b7e:	d832      	bhi.n	8009be6 <_strtod_l+0x8e>
 8009b80:	2908      	cmp	r1, #8
 8009b82:	d832      	bhi.n	8009bea <_strtod_l+0x92>
 8009b84:	2900      	cmp	r1, #0
 8009b86:	d03b      	beq.n	8009c00 <_strtod_l+0xa8>
 8009b88:	2200      	movs	r2, #0
 8009b8a:	920e      	str	r2, [sp, #56]	; 0x38
 8009b8c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009b8e:	7832      	ldrb	r2, [r6, #0]
 8009b90:	2a30      	cmp	r2, #48	; 0x30
 8009b92:	f040 80b2 	bne.w	8009cfa <_strtod_l+0x1a2>
 8009b96:	7872      	ldrb	r2, [r6, #1]
 8009b98:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009b9c:	2a58      	cmp	r2, #88	; 0x58
 8009b9e:	d16e      	bne.n	8009c7e <_strtod_l+0x126>
 8009ba0:	9302      	str	r3, [sp, #8]
 8009ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	9301      	str	r3, [sp, #4]
 8009ba8:	ab1a      	add	r3, sp, #104	; 0x68
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	4a8c      	ldr	r2, [pc, #560]	; (8009de0 <_strtod_l+0x288>)
 8009bae:	ab1b      	add	r3, sp, #108	; 0x6c
 8009bb0:	a919      	add	r1, sp, #100	; 0x64
 8009bb2:	f002 ff49 	bl	800ca48 <__gethex>
 8009bb6:	f010 070f 	ands.w	r7, r0, #15
 8009bba:	4605      	mov	r5, r0
 8009bbc:	d005      	beq.n	8009bca <_strtod_l+0x72>
 8009bbe:	2f06      	cmp	r7, #6
 8009bc0:	d128      	bne.n	8009c14 <_strtod_l+0xbc>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	3601      	adds	r6, #1
 8009bc6:	9619      	str	r6, [sp, #100]	; 0x64
 8009bc8:	930e      	str	r3, [sp, #56]	; 0x38
 8009bca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f040 85a0 	bne.w	800a712 <_strtod_l+0xbba>
 8009bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bd4:	b1cb      	cbz	r3, 8009c0a <_strtod_l+0xb2>
 8009bd6:	4642      	mov	r2, r8
 8009bd8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009bdc:	4610      	mov	r0, r2
 8009bde:	4619      	mov	r1, r3
 8009be0:	b01f      	add	sp, #124	; 0x7c
 8009be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be6:	2920      	cmp	r1, #32
 8009be8:	d1ce      	bne.n	8009b88 <_strtod_l+0x30>
 8009bea:	3201      	adds	r2, #1
 8009bec:	e7c1      	b.n	8009b72 <_strtod_l+0x1a>
 8009bee:	292d      	cmp	r1, #45	; 0x2d
 8009bf0:	d1ca      	bne.n	8009b88 <_strtod_l+0x30>
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	910e      	str	r1, [sp, #56]	; 0x38
 8009bf6:	1c51      	adds	r1, r2, #1
 8009bf8:	9119      	str	r1, [sp, #100]	; 0x64
 8009bfa:	7852      	ldrb	r2, [r2, #1]
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	d1c5      	bne.n	8009b8c <_strtod_l+0x34>
 8009c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c02:	9519      	str	r5, [sp, #100]	; 0x64
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f040 8582 	bne.w	800a70e <_strtod_l+0xbb6>
 8009c0a:	4642      	mov	r2, r8
 8009c0c:	464b      	mov	r3, r9
 8009c0e:	e7e5      	b.n	8009bdc <_strtod_l+0x84>
 8009c10:	2100      	movs	r1, #0
 8009c12:	e7ef      	b.n	8009bf4 <_strtod_l+0x9c>
 8009c14:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c16:	b13a      	cbz	r2, 8009c28 <_strtod_l+0xd0>
 8009c18:	2135      	movs	r1, #53	; 0x35
 8009c1a:	a81c      	add	r0, sp, #112	; 0x70
 8009c1c:	f003 fe70 	bl	800d900 <__copybits>
 8009c20:	4620      	mov	r0, r4
 8009c22:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c24:	f003 fa54 	bl	800d0d0 <_Bfree>
 8009c28:	3f01      	subs	r7, #1
 8009c2a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c2c:	2f04      	cmp	r7, #4
 8009c2e:	d806      	bhi.n	8009c3e <_strtod_l+0xe6>
 8009c30:	e8df f007 	tbb	[pc, r7]
 8009c34:	201d0314 	.word	0x201d0314
 8009c38:	14          	.byte	0x14
 8009c39:	00          	.byte	0x00
 8009c3a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009c3e:	05e9      	lsls	r1, r5, #23
 8009c40:	bf48      	it	mi
 8009c42:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009c46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c4a:	0d1b      	lsrs	r3, r3, #20
 8009c4c:	051b      	lsls	r3, r3, #20
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1bb      	bne.n	8009bca <_strtod_l+0x72>
 8009c52:	f001 ff81 	bl	800bb58 <__errno>
 8009c56:	2322      	movs	r3, #34	; 0x22
 8009c58:	6003      	str	r3, [r0, #0]
 8009c5a:	e7b6      	b.n	8009bca <_strtod_l+0x72>
 8009c5c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c60:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009c64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009c6c:	e7e7      	b.n	8009c3e <_strtod_l+0xe6>
 8009c6e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009de4 <_strtod_l+0x28c>
 8009c72:	e7e4      	b.n	8009c3e <_strtod_l+0xe6>
 8009c74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009c78:	f04f 38ff 	mov.w	r8, #4294967295
 8009c7c:	e7df      	b.n	8009c3e <_strtod_l+0xe6>
 8009c7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	9219      	str	r2, [sp, #100]	; 0x64
 8009c84:	785b      	ldrb	r3, [r3, #1]
 8009c86:	2b30      	cmp	r3, #48	; 0x30
 8009c88:	d0f9      	beq.n	8009c7e <_strtod_l+0x126>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d09d      	beq.n	8009bca <_strtod_l+0x72>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	f04f 0a00 	mov.w	sl, #0
 8009c94:	220a      	movs	r2, #10
 8009c96:	46d3      	mov	fp, sl
 8009c98:	9305      	str	r3, [sp, #20]
 8009c9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c9c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009ca0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ca2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009ca4:	7806      	ldrb	r6, [r0, #0]
 8009ca6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009caa:	b2d9      	uxtb	r1, r3
 8009cac:	2909      	cmp	r1, #9
 8009cae:	d926      	bls.n	8009cfe <_strtod_l+0x1a6>
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	494d      	ldr	r1, [pc, #308]	; (8009de8 <_strtod_l+0x290>)
 8009cb4:	f001 fed1 	bl	800ba5a <strncmp>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d030      	beq.n	8009d1e <_strtod_l+0x1c6>
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	4632      	mov	r2, r6
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	465e      	mov	r6, fp
 8009cc4:	9008      	str	r0, [sp, #32]
 8009cc6:	2a65      	cmp	r2, #101	; 0x65
 8009cc8:	d001      	beq.n	8009cce <_strtod_l+0x176>
 8009cca:	2a45      	cmp	r2, #69	; 0x45
 8009ccc:	d113      	bne.n	8009cf6 <_strtod_l+0x19e>
 8009cce:	b91e      	cbnz	r6, 8009cd8 <_strtod_l+0x180>
 8009cd0:	9a05      	ldr	r2, [sp, #20]
 8009cd2:	4302      	orrs	r2, r0
 8009cd4:	d094      	beq.n	8009c00 <_strtod_l+0xa8>
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009cda:	1c6a      	adds	r2, r5, #1
 8009cdc:	9219      	str	r2, [sp, #100]	; 0x64
 8009cde:	786a      	ldrb	r2, [r5, #1]
 8009ce0:	2a2b      	cmp	r2, #43	; 0x2b
 8009ce2:	d074      	beq.n	8009dce <_strtod_l+0x276>
 8009ce4:	2a2d      	cmp	r2, #45	; 0x2d
 8009ce6:	d078      	beq.n	8009dda <_strtod_l+0x282>
 8009ce8:	f04f 0c00 	mov.w	ip, #0
 8009cec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009cf0:	2909      	cmp	r1, #9
 8009cf2:	d97f      	bls.n	8009df4 <_strtod_l+0x29c>
 8009cf4:	9519      	str	r5, [sp, #100]	; 0x64
 8009cf6:	2700      	movs	r7, #0
 8009cf8:	e09e      	b.n	8009e38 <_strtod_l+0x2e0>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e7c8      	b.n	8009c90 <_strtod_l+0x138>
 8009cfe:	f1bb 0f08 	cmp.w	fp, #8
 8009d02:	bfd8      	it	le
 8009d04:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8009d06:	f100 0001 	add.w	r0, r0, #1
 8009d0a:	bfd6      	itet	le
 8009d0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d10:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009d14:	930a      	strle	r3, [sp, #40]	; 0x28
 8009d16:	f10b 0b01 	add.w	fp, fp, #1
 8009d1a:	9019      	str	r0, [sp, #100]	; 0x64
 8009d1c:	e7c1      	b.n	8009ca2 <_strtod_l+0x14a>
 8009d1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	9219      	str	r2, [sp, #100]	; 0x64
 8009d24:	785a      	ldrb	r2, [r3, #1]
 8009d26:	f1bb 0f00 	cmp.w	fp, #0
 8009d2a:	d037      	beq.n	8009d9c <_strtod_l+0x244>
 8009d2c:	465e      	mov	r6, fp
 8009d2e:	9008      	str	r0, [sp, #32]
 8009d30:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009d34:	2b09      	cmp	r3, #9
 8009d36:	d912      	bls.n	8009d5e <_strtod_l+0x206>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e7c4      	b.n	8009cc6 <_strtod_l+0x16e>
 8009d3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d3e:	3001      	adds	r0, #1
 8009d40:	1c5a      	adds	r2, r3, #1
 8009d42:	9219      	str	r2, [sp, #100]	; 0x64
 8009d44:	785a      	ldrb	r2, [r3, #1]
 8009d46:	2a30      	cmp	r2, #48	; 0x30
 8009d48:	d0f8      	beq.n	8009d3c <_strtod_l+0x1e4>
 8009d4a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009d4e:	2b08      	cmp	r3, #8
 8009d50:	f200 84e4 	bhi.w	800a71c <_strtod_l+0xbc4>
 8009d54:	9008      	str	r0, [sp, #32]
 8009d56:	2000      	movs	r0, #0
 8009d58:	4606      	mov	r6, r0
 8009d5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d5e:	3a30      	subs	r2, #48	; 0x30
 8009d60:	f100 0301 	add.w	r3, r0, #1
 8009d64:	d014      	beq.n	8009d90 <_strtod_l+0x238>
 8009d66:	9908      	ldr	r1, [sp, #32]
 8009d68:	eb00 0c06 	add.w	ip, r0, r6
 8009d6c:	4419      	add	r1, r3
 8009d6e:	9108      	str	r1, [sp, #32]
 8009d70:	4633      	mov	r3, r6
 8009d72:	210a      	movs	r1, #10
 8009d74:	4563      	cmp	r3, ip
 8009d76:	d113      	bne.n	8009da0 <_strtod_l+0x248>
 8009d78:	1833      	adds	r3, r6, r0
 8009d7a:	2b08      	cmp	r3, #8
 8009d7c:	f106 0601 	add.w	r6, r6, #1
 8009d80:	4406      	add	r6, r0
 8009d82:	dc1a      	bgt.n	8009dba <_strtod_l+0x262>
 8009d84:	230a      	movs	r3, #10
 8009d86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d88:	fb03 2301 	mla	r3, r3, r1, r2
 8009d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8009d8e:	2300      	movs	r3, #0
 8009d90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d92:	4618      	mov	r0, r3
 8009d94:	1c51      	adds	r1, r2, #1
 8009d96:	9119      	str	r1, [sp, #100]	; 0x64
 8009d98:	7852      	ldrb	r2, [r2, #1]
 8009d9a:	e7c9      	b.n	8009d30 <_strtod_l+0x1d8>
 8009d9c:	4658      	mov	r0, fp
 8009d9e:	e7d2      	b.n	8009d46 <_strtod_l+0x1ee>
 8009da0:	2b08      	cmp	r3, #8
 8009da2:	f103 0301 	add.w	r3, r3, #1
 8009da6:	dc03      	bgt.n	8009db0 <_strtod_l+0x258>
 8009da8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009daa:	434f      	muls	r7, r1
 8009dac:	970a      	str	r7, [sp, #40]	; 0x28
 8009dae:	e7e1      	b.n	8009d74 <_strtod_l+0x21c>
 8009db0:	2b10      	cmp	r3, #16
 8009db2:	bfd8      	it	le
 8009db4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009db8:	e7dc      	b.n	8009d74 <_strtod_l+0x21c>
 8009dba:	2e10      	cmp	r6, #16
 8009dbc:	bfdc      	itt	le
 8009dbe:	230a      	movle	r3, #10
 8009dc0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009dc4:	e7e3      	b.n	8009d8e <_strtod_l+0x236>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9308      	str	r3, [sp, #32]
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e780      	b.n	8009cd0 <_strtod_l+0x178>
 8009dce:	f04f 0c00 	mov.w	ip, #0
 8009dd2:	1caa      	adds	r2, r5, #2
 8009dd4:	9219      	str	r2, [sp, #100]	; 0x64
 8009dd6:	78aa      	ldrb	r2, [r5, #2]
 8009dd8:	e788      	b.n	8009cec <_strtod_l+0x194>
 8009dda:	f04f 0c01 	mov.w	ip, #1
 8009dde:	e7f8      	b.n	8009dd2 <_strtod_l+0x27a>
 8009de0:	0800f1a4 	.word	0x0800f1a4
 8009de4:	7ff00000 	.word	0x7ff00000
 8009de8:	0800f1a2 	.word	0x0800f1a2
 8009dec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009dee:	1c51      	adds	r1, r2, #1
 8009df0:	9119      	str	r1, [sp, #100]	; 0x64
 8009df2:	7852      	ldrb	r2, [r2, #1]
 8009df4:	2a30      	cmp	r2, #48	; 0x30
 8009df6:	d0f9      	beq.n	8009dec <_strtod_l+0x294>
 8009df8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009dfc:	2908      	cmp	r1, #8
 8009dfe:	f63f af7a 	bhi.w	8009cf6 <_strtod_l+0x19e>
 8009e02:	3a30      	subs	r2, #48	; 0x30
 8009e04:	9209      	str	r2, [sp, #36]	; 0x24
 8009e06:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e08:	920c      	str	r2, [sp, #48]	; 0x30
 8009e0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e0c:	1c57      	adds	r7, r2, #1
 8009e0e:	9719      	str	r7, [sp, #100]	; 0x64
 8009e10:	7852      	ldrb	r2, [r2, #1]
 8009e12:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009e16:	f1be 0f09 	cmp.w	lr, #9
 8009e1a:	d938      	bls.n	8009e8e <_strtod_l+0x336>
 8009e1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e1e:	1a7f      	subs	r7, r7, r1
 8009e20:	2f08      	cmp	r7, #8
 8009e22:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009e26:	dc03      	bgt.n	8009e30 <_strtod_l+0x2d8>
 8009e28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e2a:	428f      	cmp	r7, r1
 8009e2c:	bfa8      	it	ge
 8009e2e:	460f      	movge	r7, r1
 8009e30:	f1bc 0f00 	cmp.w	ip, #0
 8009e34:	d000      	beq.n	8009e38 <_strtod_l+0x2e0>
 8009e36:	427f      	negs	r7, r7
 8009e38:	2e00      	cmp	r6, #0
 8009e3a:	d14f      	bne.n	8009edc <_strtod_l+0x384>
 8009e3c:	9905      	ldr	r1, [sp, #20]
 8009e3e:	4301      	orrs	r1, r0
 8009e40:	f47f aec3 	bne.w	8009bca <_strtod_l+0x72>
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f47f aedb 	bne.w	8009c00 <_strtod_l+0xa8>
 8009e4a:	2a69      	cmp	r2, #105	; 0x69
 8009e4c:	d029      	beq.n	8009ea2 <_strtod_l+0x34a>
 8009e4e:	dc26      	bgt.n	8009e9e <_strtod_l+0x346>
 8009e50:	2a49      	cmp	r2, #73	; 0x49
 8009e52:	d026      	beq.n	8009ea2 <_strtod_l+0x34a>
 8009e54:	2a4e      	cmp	r2, #78	; 0x4e
 8009e56:	f47f aed3 	bne.w	8009c00 <_strtod_l+0xa8>
 8009e5a:	499a      	ldr	r1, [pc, #616]	; (800a0c4 <_strtod_l+0x56c>)
 8009e5c:	a819      	add	r0, sp, #100	; 0x64
 8009e5e:	f003 f835 	bl	800cecc <__match>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f43f aecc 	beq.w	8009c00 <_strtod_l+0xa8>
 8009e68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	2b28      	cmp	r3, #40	; 0x28
 8009e6e:	d12f      	bne.n	8009ed0 <_strtod_l+0x378>
 8009e70:	4995      	ldr	r1, [pc, #596]	; (800a0c8 <_strtod_l+0x570>)
 8009e72:	aa1c      	add	r2, sp, #112	; 0x70
 8009e74:	a819      	add	r0, sp, #100	; 0x64
 8009e76:	f003 f83d 	bl	800cef4 <__hexnan>
 8009e7a:	2805      	cmp	r0, #5
 8009e7c:	d128      	bne.n	8009ed0 <_strtod_l+0x378>
 8009e7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e80:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009e84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009e88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009e8c:	e69d      	b.n	8009bca <_strtod_l+0x72>
 8009e8e:	210a      	movs	r1, #10
 8009e90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e92:	fb01 2107 	mla	r1, r1, r7, r2
 8009e96:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e9c:	e7b5      	b.n	8009e0a <_strtod_l+0x2b2>
 8009e9e:	2a6e      	cmp	r2, #110	; 0x6e
 8009ea0:	e7d9      	b.n	8009e56 <_strtod_l+0x2fe>
 8009ea2:	498a      	ldr	r1, [pc, #552]	; (800a0cc <_strtod_l+0x574>)
 8009ea4:	a819      	add	r0, sp, #100	; 0x64
 8009ea6:	f003 f811 	bl	800cecc <__match>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	f43f aea8 	beq.w	8009c00 <_strtod_l+0xa8>
 8009eb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009eb2:	4987      	ldr	r1, [pc, #540]	; (800a0d0 <_strtod_l+0x578>)
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	a819      	add	r0, sp, #100	; 0x64
 8009eb8:	9319      	str	r3, [sp, #100]	; 0x64
 8009eba:	f003 f807 	bl	800cecc <__match>
 8009ebe:	b910      	cbnz	r0, 8009ec6 <_strtod_l+0x36e>
 8009ec0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	9319      	str	r3, [sp, #100]	; 0x64
 8009ec6:	f04f 0800 	mov.w	r8, #0
 8009eca:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800a0d4 <_strtod_l+0x57c>
 8009ece:	e67c      	b.n	8009bca <_strtod_l+0x72>
 8009ed0:	4881      	ldr	r0, [pc, #516]	; (800a0d8 <_strtod_l+0x580>)
 8009ed2:	f001 fe91 	bl	800bbf8 <nan>
 8009ed6:	4680      	mov	r8, r0
 8009ed8:	4689      	mov	r9, r1
 8009eda:	e676      	b.n	8009bca <_strtod_l+0x72>
 8009edc:	9b08      	ldr	r3, [sp, #32]
 8009ede:	f1bb 0f00 	cmp.w	fp, #0
 8009ee2:	bf08      	it	eq
 8009ee4:	46b3      	moveq	fp, r6
 8009ee6:	1afb      	subs	r3, r7, r3
 8009ee8:	2e10      	cmp	r6, #16
 8009eea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009eec:	4635      	mov	r5, r6
 8009eee:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef0:	bfa8      	it	ge
 8009ef2:	2510      	movge	r5, #16
 8009ef4:	f7f6 fa76 	bl	80003e4 <__aeabi_ui2d>
 8009ef8:	2e09      	cmp	r6, #9
 8009efa:	4680      	mov	r8, r0
 8009efc:	4689      	mov	r9, r1
 8009efe:	dd13      	ble.n	8009f28 <_strtod_l+0x3d0>
 8009f00:	4b76      	ldr	r3, [pc, #472]	; (800a0dc <_strtod_l+0x584>)
 8009f02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009f06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009f0a:	f7f6 fae5 	bl	80004d8 <__aeabi_dmul>
 8009f0e:	4680      	mov	r8, r0
 8009f10:	4650      	mov	r0, sl
 8009f12:	4689      	mov	r9, r1
 8009f14:	f7f6 fa66 	bl	80003e4 <__aeabi_ui2d>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	4649      	mov	r1, r9
 8009f20:	f7f6 f924 	bl	800016c <__adddf3>
 8009f24:	4680      	mov	r8, r0
 8009f26:	4689      	mov	r9, r1
 8009f28:	2e0f      	cmp	r6, #15
 8009f2a:	dc36      	bgt.n	8009f9a <_strtod_l+0x442>
 8009f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f43f ae4b 	beq.w	8009bca <_strtod_l+0x72>
 8009f34:	dd22      	ble.n	8009f7c <_strtod_l+0x424>
 8009f36:	2b16      	cmp	r3, #22
 8009f38:	dc09      	bgt.n	8009f4e <_strtod_l+0x3f6>
 8009f3a:	4968      	ldr	r1, [pc, #416]	; (800a0dc <_strtod_l+0x584>)
 8009f3c:	4642      	mov	r2, r8
 8009f3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f42:	464b      	mov	r3, r9
 8009f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f48:	f7f6 fac6 	bl	80004d8 <__aeabi_dmul>
 8009f4c:	e7c3      	b.n	8009ed6 <_strtod_l+0x37e>
 8009f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f50:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009f54:	4293      	cmp	r3, r2
 8009f56:	db20      	blt.n	8009f9a <_strtod_l+0x442>
 8009f58:	4c60      	ldr	r4, [pc, #384]	; (800a0dc <_strtod_l+0x584>)
 8009f5a:	f1c6 060f 	rsb	r6, r6, #15
 8009f5e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009f62:	4642      	mov	r2, r8
 8009f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f68:	464b      	mov	r3, r9
 8009f6a:	f7f6 fab5 	bl	80004d8 <__aeabi_dmul>
 8009f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f70:	1b9e      	subs	r6, r3, r6
 8009f72:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009f76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f7a:	e7e5      	b.n	8009f48 <_strtod_l+0x3f0>
 8009f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f7e:	3316      	adds	r3, #22
 8009f80:	db0b      	blt.n	8009f9a <_strtod_l+0x442>
 8009f82:	9b08      	ldr	r3, [sp, #32]
 8009f84:	4640      	mov	r0, r8
 8009f86:	1bdf      	subs	r7, r3, r7
 8009f88:	4b54      	ldr	r3, [pc, #336]	; (800a0dc <_strtod_l+0x584>)
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f94:	f7f6 fbca 	bl	800072c <__aeabi_ddiv>
 8009f98:	e79d      	b.n	8009ed6 <_strtod_l+0x37e>
 8009f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f9c:	1b75      	subs	r5, r6, r5
 8009f9e:	441d      	add	r5, r3
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	dd70      	ble.n	800a086 <_strtod_l+0x52e>
 8009fa4:	f015 030f 	ands.w	r3, r5, #15
 8009fa8:	d00a      	beq.n	8009fc0 <_strtod_l+0x468>
 8009faa:	494c      	ldr	r1, [pc, #304]	; (800a0dc <_strtod_l+0x584>)
 8009fac:	4642      	mov	r2, r8
 8009fae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	f7f6 fa8e 	bl	80004d8 <__aeabi_dmul>
 8009fbc:	4680      	mov	r8, r0
 8009fbe:	4689      	mov	r9, r1
 8009fc0:	f035 050f 	bics.w	r5, r5, #15
 8009fc4:	d04d      	beq.n	800a062 <_strtod_l+0x50a>
 8009fc6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009fca:	dd22      	ble.n	800a012 <_strtod_l+0x4ba>
 8009fcc:	2600      	movs	r6, #0
 8009fce:	46b3      	mov	fp, r6
 8009fd0:	960b      	str	r6, [sp, #44]	; 0x2c
 8009fd2:	9608      	str	r6, [sp, #32]
 8009fd4:	2322      	movs	r3, #34	; 0x22
 8009fd6:	f04f 0800 	mov.w	r8, #0
 8009fda:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800a0d4 <_strtod_l+0x57c>
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f43f adf1 	beq.w	8009bca <_strtod_l+0x72>
 8009fe8:	4620      	mov	r0, r4
 8009fea:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009fec:	f003 f870 	bl	800d0d0 <_Bfree>
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	9908      	ldr	r1, [sp, #32]
 8009ff4:	f003 f86c 	bl	800d0d0 <_Bfree>
 8009ff8:	4659      	mov	r1, fp
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f003 f868 	bl	800d0d0 <_Bfree>
 800a000:	4620      	mov	r0, r4
 800a002:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a004:	f003 f864 	bl	800d0d0 <_Bfree>
 800a008:	4631      	mov	r1, r6
 800a00a:	4620      	mov	r0, r4
 800a00c:	f003 f860 	bl	800d0d0 <_Bfree>
 800a010:	e5db      	b.n	8009bca <_strtod_l+0x72>
 800a012:	4b33      	ldr	r3, [pc, #204]	; (800a0e0 <_strtod_l+0x588>)
 800a014:	4640      	mov	r0, r8
 800a016:	9305      	str	r3, [sp, #20]
 800a018:	2300      	movs	r3, #0
 800a01a:	4649      	mov	r1, r9
 800a01c:	469a      	mov	sl, r3
 800a01e:	112d      	asrs	r5, r5, #4
 800a020:	2d01      	cmp	r5, #1
 800a022:	dc21      	bgt.n	800a068 <_strtod_l+0x510>
 800a024:	b10b      	cbz	r3, 800a02a <_strtod_l+0x4d2>
 800a026:	4680      	mov	r8, r0
 800a028:	4689      	mov	r9, r1
 800a02a:	492d      	ldr	r1, [pc, #180]	; (800a0e0 <_strtod_l+0x588>)
 800a02c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a030:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a034:	4642      	mov	r2, r8
 800a036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a03a:	464b      	mov	r3, r9
 800a03c:	f7f6 fa4c 	bl	80004d8 <__aeabi_dmul>
 800a040:	4b24      	ldr	r3, [pc, #144]	; (800a0d4 <_strtod_l+0x57c>)
 800a042:	460a      	mov	r2, r1
 800a044:	400b      	ands	r3, r1
 800a046:	4927      	ldr	r1, [pc, #156]	; (800a0e4 <_strtod_l+0x58c>)
 800a048:	4680      	mov	r8, r0
 800a04a:	428b      	cmp	r3, r1
 800a04c:	d8be      	bhi.n	8009fcc <_strtod_l+0x474>
 800a04e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a052:	428b      	cmp	r3, r1
 800a054:	bf86      	itte	hi
 800a056:	f04f 38ff 	movhi.w	r8, #4294967295
 800a05a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800a0e8 <_strtod_l+0x590>
 800a05e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a062:	2300      	movs	r3, #0
 800a064:	9305      	str	r3, [sp, #20]
 800a066:	e07b      	b.n	800a160 <_strtod_l+0x608>
 800a068:	07ea      	lsls	r2, r5, #31
 800a06a:	d505      	bpl.n	800a078 <_strtod_l+0x520>
 800a06c:	9b05      	ldr	r3, [sp, #20]
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f7f6 fa31 	bl	80004d8 <__aeabi_dmul>
 800a076:	2301      	movs	r3, #1
 800a078:	9a05      	ldr	r2, [sp, #20]
 800a07a:	f10a 0a01 	add.w	sl, sl, #1
 800a07e:	3208      	adds	r2, #8
 800a080:	106d      	asrs	r5, r5, #1
 800a082:	9205      	str	r2, [sp, #20]
 800a084:	e7cc      	b.n	800a020 <_strtod_l+0x4c8>
 800a086:	d0ec      	beq.n	800a062 <_strtod_l+0x50a>
 800a088:	426d      	negs	r5, r5
 800a08a:	f015 020f 	ands.w	r2, r5, #15
 800a08e:	d00a      	beq.n	800a0a6 <_strtod_l+0x54e>
 800a090:	4b12      	ldr	r3, [pc, #72]	; (800a0dc <_strtod_l+0x584>)
 800a092:	4640      	mov	r0, r8
 800a094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a098:	4649      	mov	r1, r9
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 fb45 	bl	800072c <__aeabi_ddiv>
 800a0a2:	4680      	mov	r8, r0
 800a0a4:	4689      	mov	r9, r1
 800a0a6:	112d      	asrs	r5, r5, #4
 800a0a8:	d0db      	beq.n	800a062 <_strtod_l+0x50a>
 800a0aa:	2d1f      	cmp	r5, #31
 800a0ac:	dd1e      	ble.n	800a0ec <_strtod_l+0x594>
 800a0ae:	2600      	movs	r6, #0
 800a0b0:	46b3      	mov	fp, r6
 800a0b2:	960b      	str	r6, [sp, #44]	; 0x2c
 800a0b4:	9608      	str	r6, [sp, #32]
 800a0b6:	2322      	movs	r3, #34	; 0x22
 800a0b8:	f04f 0800 	mov.w	r8, #0
 800a0bc:	f04f 0900 	mov.w	r9, #0
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	e78d      	b.n	8009fe0 <_strtod_l+0x488>
 800a0c4:	0800f32b 	.word	0x0800f32b
 800a0c8:	0800f1b8 	.word	0x0800f1b8
 800a0cc:	0800f323 	.word	0x0800f323
 800a0d0:	0800f360 	.word	0x0800f360
 800a0d4:	7ff00000 	.word	0x7ff00000
 800a0d8:	0800f60b 	.word	0x0800f60b
 800a0dc:	0800f4d0 	.word	0x0800f4d0
 800a0e0:	0800f4a8 	.word	0x0800f4a8
 800a0e4:	7ca00000 	.word	0x7ca00000
 800a0e8:	7fefffff 	.word	0x7fefffff
 800a0ec:	f015 0310 	ands.w	r3, r5, #16
 800a0f0:	bf18      	it	ne
 800a0f2:	236a      	movne	r3, #106	; 0x6a
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	9305      	str	r3, [sp, #20]
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800a3c8 <_strtod_l+0x870>
 800a100:	07ea      	lsls	r2, r5, #31
 800a102:	d504      	bpl.n	800a10e <_strtod_l+0x5b6>
 800a104:	e9da 2300 	ldrd	r2, r3, [sl]
 800a108:	f7f6 f9e6 	bl	80004d8 <__aeabi_dmul>
 800a10c:	2301      	movs	r3, #1
 800a10e:	106d      	asrs	r5, r5, #1
 800a110:	f10a 0a08 	add.w	sl, sl, #8
 800a114:	d1f4      	bne.n	800a100 <_strtod_l+0x5a8>
 800a116:	b10b      	cbz	r3, 800a11c <_strtod_l+0x5c4>
 800a118:	4680      	mov	r8, r0
 800a11a:	4689      	mov	r9, r1
 800a11c:	9b05      	ldr	r3, [sp, #20]
 800a11e:	b1bb      	cbz	r3, 800a150 <_strtod_l+0x5f8>
 800a120:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a124:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a128:	2b00      	cmp	r3, #0
 800a12a:	4649      	mov	r1, r9
 800a12c:	dd10      	ble.n	800a150 <_strtod_l+0x5f8>
 800a12e:	2b1f      	cmp	r3, #31
 800a130:	f340 8128 	ble.w	800a384 <_strtod_l+0x82c>
 800a134:	2b34      	cmp	r3, #52	; 0x34
 800a136:	bfd8      	it	le
 800a138:	f04f 33ff 	movle.w	r3, #4294967295
 800a13c:	f04f 0800 	mov.w	r8, #0
 800a140:	bfcf      	iteee	gt
 800a142:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a146:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a14a:	4093      	lslle	r3, r2
 800a14c:	ea03 0901 	andle.w	r9, r3, r1
 800a150:	2200      	movs	r2, #0
 800a152:	2300      	movs	r3, #0
 800a154:	4640      	mov	r0, r8
 800a156:	4649      	mov	r1, r9
 800a158:	f7f6 fc26 	bl	80009a8 <__aeabi_dcmpeq>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d1a6      	bne.n	800a0ae <_strtod_l+0x556>
 800a160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a162:	465a      	mov	r2, fp
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	4620      	mov	r0, r4
 800a168:	4633      	mov	r3, r6
 800a16a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a16c:	f003 f818 	bl	800d1a0 <__s2b>
 800a170:	900b      	str	r0, [sp, #44]	; 0x2c
 800a172:	2800      	cmp	r0, #0
 800a174:	f43f af2a 	beq.w	8009fcc <_strtod_l+0x474>
 800a178:	2600      	movs	r6, #0
 800a17a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a17c:	9b08      	ldr	r3, [sp, #32]
 800a17e:	2a00      	cmp	r2, #0
 800a180:	eba3 0307 	sub.w	r3, r3, r7
 800a184:	bfa8      	it	ge
 800a186:	2300      	movge	r3, #0
 800a188:	46b3      	mov	fp, r6
 800a18a:	9312      	str	r3, [sp, #72]	; 0x48
 800a18c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a190:	9316      	str	r3, [sp, #88]	; 0x58
 800a192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a194:	4620      	mov	r0, r4
 800a196:	6859      	ldr	r1, [r3, #4]
 800a198:	f002 ff5a 	bl	800d050 <_Balloc>
 800a19c:	9008      	str	r0, [sp, #32]
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	f43f af18 	beq.w	8009fd4 <_strtod_l+0x47c>
 800a1a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1a6:	300c      	adds	r0, #12
 800a1a8:	691a      	ldr	r2, [r3, #16]
 800a1aa:	f103 010c 	add.w	r1, r3, #12
 800a1ae:	3202      	adds	r2, #2
 800a1b0:	0092      	lsls	r2, r2, #2
 800a1b2:	f001 fd13 	bl	800bbdc <memcpy>
 800a1b6:	ab1c      	add	r3, sp, #112	; 0x70
 800a1b8:	9301      	str	r3, [sp, #4]
 800a1ba:	ab1b      	add	r3, sp, #108	; 0x6c
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	4642      	mov	r2, r8
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a1c8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800a1cc:	f003 fb14 	bl	800d7f8 <__d2b>
 800a1d0:	901a      	str	r0, [sp, #104]	; 0x68
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	f43f aefe 	beq.w	8009fd4 <_strtod_l+0x47c>
 800a1d8:	2101      	movs	r1, #1
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f003 f878 	bl	800d2d0 <__i2b>
 800a1e0:	4683      	mov	fp, r0
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	f43f aef6 	beq.w	8009fd4 <_strtod_l+0x47c>
 800a1e8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a1ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a1ec:	2f00      	cmp	r7, #0
 800a1ee:	bfab      	itete	ge
 800a1f0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800a1f2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a1f4:	eb07 0a03 	addge.w	sl, r7, r3
 800a1f8:	1bdd      	sublt	r5, r3, r7
 800a1fa:	9b05      	ldr	r3, [sp, #20]
 800a1fc:	bfa8      	it	ge
 800a1fe:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a200:	eba7 0703 	sub.w	r7, r7, r3
 800a204:	4417      	add	r7, r2
 800a206:	4b71      	ldr	r3, [pc, #452]	; (800a3cc <_strtod_l+0x874>)
 800a208:	f107 37ff 	add.w	r7, r7, #4294967295
 800a20c:	bfb8      	it	lt
 800a20e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800a212:	429f      	cmp	r7, r3
 800a214:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a218:	f280 80c7 	bge.w	800a3aa <_strtod_l+0x852>
 800a21c:	1bdb      	subs	r3, r3, r7
 800a21e:	2b1f      	cmp	r3, #31
 800a220:	f04f 0101 	mov.w	r1, #1
 800a224:	eba2 0203 	sub.w	r2, r2, r3
 800a228:	f300 80b3 	bgt.w	800a392 <_strtod_l+0x83a>
 800a22c:	fa01 f303 	lsl.w	r3, r1, r3
 800a230:	9313      	str	r3, [sp, #76]	; 0x4c
 800a232:	2300      	movs	r3, #0
 800a234:	9310      	str	r3, [sp, #64]	; 0x40
 800a236:	eb0a 0702 	add.w	r7, sl, r2
 800a23a:	9b05      	ldr	r3, [sp, #20]
 800a23c:	45ba      	cmp	sl, r7
 800a23e:	4415      	add	r5, r2
 800a240:	441d      	add	r5, r3
 800a242:	4653      	mov	r3, sl
 800a244:	bfa8      	it	ge
 800a246:	463b      	movge	r3, r7
 800a248:	42ab      	cmp	r3, r5
 800a24a:	bfa8      	it	ge
 800a24c:	462b      	movge	r3, r5
 800a24e:	2b00      	cmp	r3, #0
 800a250:	bfc2      	ittt	gt
 800a252:	1aff      	subgt	r7, r7, r3
 800a254:	1aed      	subgt	r5, r5, r3
 800a256:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a25a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dd17      	ble.n	800a290 <_strtod_l+0x738>
 800a260:	4659      	mov	r1, fp
 800a262:	461a      	mov	r2, r3
 800a264:	4620      	mov	r0, r4
 800a266:	f003 f8f1 	bl	800d44c <__pow5mult>
 800a26a:	4683      	mov	fp, r0
 800a26c:	2800      	cmp	r0, #0
 800a26e:	f43f aeb1 	beq.w	8009fd4 <_strtod_l+0x47c>
 800a272:	4601      	mov	r1, r0
 800a274:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a276:	4620      	mov	r0, r4
 800a278:	f003 f840 	bl	800d2fc <__multiply>
 800a27c:	900a      	str	r0, [sp, #40]	; 0x28
 800a27e:	2800      	cmp	r0, #0
 800a280:	f43f aea8 	beq.w	8009fd4 <_strtod_l+0x47c>
 800a284:	4620      	mov	r0, r4
 800a286:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a288:	f002 ff22 	bl	800d0d0 <_Bfree>
 800a28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a28e:	931a      	str	r3, [sp, #104]	; 0x68
 800a290:	2f00      	cmp	r7, #0
 800a292:	f300 808f 	bgt.w	800a3b4 <_strtod_l+0x85c>
 800a296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a298:	2b00      	cmp	r3, #0
 800a29a:	dd08      	ble.n	800a2ae <_strtod_l+0x756>
 800a29c:	4620      	mov	r0, r4
 800a29e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2a0:	9908      	ldr	r1, [sp, #32]
 800a2a2:	f003 f8d3 	bl	800d44c <__pow5mult>
 800a2a6:	9008      	str	r0, [sp, #32]
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	f43f ae93 	beq.w	8009fd4 <_strtod_l+0x47c>
 800a2ae:	2d00      	cmp	r5, #0
 800a2b0:	dd08      	ble.n	800a2c4 <_strtod_l+0x76c>
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	9908      	ldr	r1, [sp, #32]
 800a2b8:	f003 f922 	bl	800d500 <__lshift>
 800a2bc:	9008      	str	r0, [sp, #32]
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f43f ae88 	beq.w	8009fd4 <_strtod_l+0x47c>
 800a2c4:	f1ba 0f00 	cmp.w	sl, #0
 800a2c8:	dd08      	ble.n	800a2dc <_strtod_l+0x784>
 800a2ca:	4659      	mov	r1, fp
 800a2cc:	4652      	mov	r2, sl
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f003 f916 	bl	800d500 <__lshift>
 800a2d4:	4683      	mov	fp, r0
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f43f ae7c 	beq.w	8009fd4 <_strtod_l+0x47c>
 800a2dc:	4620      	mov	r0, r4
 800a2de:	9a08      	ldr	r2, [sp, #32]
 800a2e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a2e2:	f003 f995 	bl	800d610 <__mdiff>
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	f43f ae73 	beq.w	8009fd4 <_strtod_l+0x47c>
 800a2ee:	2500      	movs	r5, #0
 800a2f0:	68c3      	ldr	r3, [r0, #12]
 800a2f2:	4659      	mov	r1, fp
 800a2f4:	60c5      	str	r5, [r0, #12]
 800a2f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2f8:	f003 f96e 	bl	800d5d8 <__mcmp>
 800a2fc:	42a8      	cmp	r0, r5
 800a2fe:	da6b      	bge.n	800a3d8 <_strtod_l+0x880>
 800a300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a302:	ea53 0308 	orrs.w	r3, r3, r8
 800a306:	f040 808f 	bne.w	800a428 <_strtod_l+0x8d0>
 800a30a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f040 808a 	bne.w	800a428 <_strtod_l+0x8d0>
 800a314:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a318:	0d1b      	lsrs	r3, r3, #20
 800a31a:	051b      	lsls	r3, r3, #20
 800a31c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a320:	f240 8082 	bls.w	800a428 <_strtod_l+0x8d0>
 800a324:	6973      	ldr	r3, [r6, #20]
 800a326:	b913      	cbnz	r3, 800a32e <_strtod_l+0x7d6>
 800a328:	6933      	ldr	r3, [r6, #16]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	dd7c      	ble.n	800a428 <_strtod_l+0x8d0>
 800a32e:	4631      	mov	r1, r6
 800a330:	2201      	movs	r2, #1
 800a332:	4620      	mov	r0, r4
 800a334:	f003 f8e4 	bl	800d500 <__lshift>
 800a338:	4659      	mov	r1, fp
 800a33a:	4606      	mov	r6, r0
 800a33c:	f003 f94c 	bl	800d5d8 <__mcmp>
 800a340:	2800      	cmp	r0, #0
 800a342:	dd71      	ble.n	800a428 <_strtod_l+0x8d0>
 800a344:	9905      	ldr	r1, [sp, #20]
 800a346:	464b      	mov	r3, r9
 800a348:	4a21      	ldr	r2, [pc, #132]	; (800a3d0 <_strtod_l+0x878>)
 800a34a:	2900      	cmp	r1, #0
 800a34c:	f000 808d 	beq.w	800a46a <_strtod_l+0x912>
 800a350:	ea02 0109 	and.w	r1, r2, r9
 800a354:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a358:	f300 8087 	bgt.w	800a46a <_strtod_l+0x912>
 800a35c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a360:	f77f aea9 	ble.w	800a0b6 <_strtod_l+0x55e>
 800a364:	4640      	mov	r0, r8
 800a366:	4649      	mov	r1, r9
 800a368:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <_strtod_l+0x87c>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	f7f6 f8b4 	bl	80004d8 <__aeabi_dmul>
 800a370:	4b17      	ldr	r3, [pc, #92]	; (800a3d0 <_strtod_l+0x878>)
 800a372:	4680      	mov	r8, r0
 800a374:	400b      	ands	r3, r1
 800a376:	4689      	mov	r9, r1
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f47f ae35 	bne.w	8009fe8 <_strtod_l+0x490>
 800a37e:	2322      	movs	r3, #34	; 0x22
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	e631      	b.n	8009fe8 <_strtod_l+0x490>
 800a384:	f04f 32ff 	mov.w	r2, #4294967295
 800a388:	fa02 f303 	lsl.w	r3, r2, r3
 800a38c:	ea03 0808 	and.w	r8, r3, r8
 800a390:	e6de      	b.n	800a150 <_strtod_l+0x5f8>
 800a392:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800a396:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800a39a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800a39e:	37e2      	adds	r7, #226	; 0xe2
 800a3a0:	fa01 f307 	lsl.w	r3, r1, r7
 800a3a4:	9310      	str	r3, [sp, #64]	; 0x40
 800a3a6:	9113      	str	r1, [sp, #76]	; 0x4c
 800a3a8:	e745      	b.n	800a236 <_strtod_l+0x6de>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	9310      	str	r3, [sp, #64]	; 0x40
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3b2:	e740      	b.n	800a236 <_strtod_l+0x6de>
 800a3b4:	463a      	mov	r2, r7
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a3ba:	f003 f8a1 	bl	800d500 <__lshift>
 800a3be:	901a      	str	r0, [sp, #104]	; 0x68
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	f47f af68 	bne.w	800a296 <_strtod_l+0x73e>
 800a3c6:	e605      	b.n	8009fd4 <_strtod_l+0x47c>
 800a3c8:	0800f1d0 	.word	0x0800f1d0
 800a3cc:	fffffc02 	.word	0xfffffc02
 800a3d0:	7ff00000 	.word	0x7ff00000
 800a3d4:	39500000 	.word	0x39500000
 800a3d8:	46ca      	mov	sl, r9
 800a3da:	d165      	bne.n	800a4a8 <_strtod_l+0x950>
 800a3dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3e2:	b352      	cbz	r2, 800a43a <_strtod_l+0x8e2>
 800a3e4:	4a9e      	ldr	r2, [pc, #632]	; (800a660 <_strtod_l+0xb08>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d12a      	bne.n	800a440 <_strtod_l+0x8e8>
 800a3ea:	9b05      	ldr	r3, [sp, #20]
 800a3ec:	4641      	mov	r1, r8
 800a3ee:	b1fb      	cbz	r3, 800a430 <_strtod_l+0x8d8>
 800a3f0:	4b9c      	ldr	r3, [pc, #624]	; (800a664 <_strtod_l+0xb0c>)
 800a3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f6:	ea09 0303 	and.w	r3, r9, r3
 800a3fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a3fe:	d81a      	bhi.n	800a436 <_strtod_l+0x8de>
 800a400:	0d1b      	lsrs	r3, r3, #20
 800a402:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a406:	fa02 f303 	lsl.w	r3, r2, r3
 800a40a:	4299      	cmp	r1, r3
 800a40c:	d118      	bne.n	800a440 <_strtod_l+0x8e8>
 800a40e:	4b96      	ldr	r3, [pc, #600]	; (800a668 <_strtod_l+0xb10>)
 800a410:	459a      	cmp	sl, r3
 800a412:	d102      	bne.n	800a41a <_strtod_l+0x8c2>
 800a414:	3101      	adds	r1, #1
 800a416:	f43f addd 	beq.w	8009fd4 <_strtod_l+0x47c>
 800a41a:	f04f 0800 	mov.w	r8, #0
 800a41e:	4b91      	ldr	r3, [pc, #580]	; (800a664 <_strtod_l+0xb0c>)
 800a420:	ea0a 0303 	and.w	r3, sl, r3
 800a424:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a428:	9b05      	ldr	r3, [sp, #20]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d19a      	bne.n	800a364 <_strtod_l+0x80c>
 800a42e:	e5db      	b.n	8009fe8 <_strtod_l+0x490>
 800a430:	f04f 33ff 	mov.w	r3, #4294967295
 800a434:	e7e9      	b.n	800a40a <_strtod_l+0x8b2>
 800a436:	4613      	mov	r3, r2
 800a438:	e7e7      	b.n	800a40a <_strtod_l+0x8b2>
 800a43a:	ea53 0308 	orrs.w	r3, r3, r8
 800a43e:	d081      	beq.n	800a344 <_strtod_l+0x7ec>
 800a440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a442:	b1e3      	cbz	r3, 800a47e <_strtod_l+0x926>
 800a444:	ea13 0f0a 	tst.w	r3, sl
 800a448:	d0ee      	beq.n	800a428 <_strtod_l+0x8d0>
 800a44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a44c:	4640      	mov	r0, r8
 800a44e:	4649      	mov	r1, r9
 800a450:	9a05      	ldr	r2, [sp, #20]
 800a452:	b1c3      	cbz	r3, 800a486 <_strtod_l+0x92e>
 800a454:	f7ff fb5f 	bl	8009b16 <sulp>
 800a458:	4602      	mov	r2, r0
 800a45a:	460b      	mov	r3, r1
 800a45c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a45e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a460:	f7f5 fe84 	bl	800016c <__adddf3>
 800a464:	4680      	mov	r8, r0
 800a466:	4689      	mov	r9, r1
 800a468:	e7de      	b.n	800a428 <_strtod_l+0x8d0>
 800a46a:	4013      	ands	r3, r2
 800a46c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a470:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a474:	f04f 38ff 	mov.w	r8, #4294967295
 800a478:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a47c:	e7d4      	b.n	800a428 <_strtod_l+0x8d0>
 800a47e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a480:	ea13 0f08 	tst.w	r3, r8
 800a484:	e7e0      	b.n	800a448 <_strtod_l+0x8f0>
 800a486:	f7ff fb46 	bl	8009b16 <sulp>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a490:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a492:	f7f5 fe69 	bl	8000168 <__aeabi_dsub>
 800a496:	2200      	movs	r2, #0
 800a498:	2300      	movs	r3, #0
 800a49a:	4680      	mov	r8, r0
 800a49c:	4689      	mov	r9, r1
 800a49e:	f7f6 fa83 	bl	80009a8 <__aeabi_dcmpeq>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d0c0      	beq.n	800a428 <_strtod_l+0x8d0>
 800a4a6:	e606      	b.n	800a0b6 <_strtod_l+0x55e>
 800a4a8:	4659      	mov	r1, fp
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f003 f9fa 	bl	800d8a4 <__ratio>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4be:	f7f6 fa87 	bl	80009d0 <__aeabi_dcmple>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d06f      	beq.n	800a5a6 <_strtod_l+0xa4e>
 800a4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d17c      	bne.n	800a5c6 <_strtod_l+0xa6e>
 800a4cc:	f1b8 0f00 	cmp.w	r8, #0
 800a4d0:	d159      	bne.n	800a586 <_strtod_l+0xa2e>
 800a4d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d17b      	bne.n	800a5d2 <_strtod_l+0xa7a>
 800a4da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4de:	2200      	movs	r2, #0
 800a4e0:	4b62      	ldr	r3, [pc, #392]	; (800a66c <_strtod_l+0xb14>)
 800a4e2:	f7f6 fa6b 	bl	80009bc <__aeabi_dcmplt>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d15a      	bne.n	800a5a0 <_strtod_l+0xa48>
 800a4ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	4b5f      	ldr	r3, [pc, #380]	; (800a670 <_strtod_l+0xb18>)
 800a4f2:	f7f5 fff1 	bl	80004d8 <__aeabi_dmul>
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	460f      	mov	r7, r1
 800a4fa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a4fe:	9506      	str	r5, [sp, #24]
 800a500:	9307      	str	r3, [sp, #28]
 800a502:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a506:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a50a:	4b56      	ldr	r3, [pc, #344]	; (800a664 <_strtod_l+0xb0c>)
 800a50c:	4a55      	ldr	r2, [pc, #340]	; (800a664 <_strtod_l+0xb0c>)
 800a50e:	ea0a 0303 	and.w	r3, sl, r3
 800a512:	9313      	str	r3, [sp, #76]	; 0x4c
 800a514:	4b57      	ldr	r3, [pc, #348]	; (800a674 <_strtod_l+0xb1c>)
 800a516:	ea0a 0202 	and.w	r2, sl, r2
 800a51a:	429a      	cmp	r2, r3
 800a51c:	f040 80b0 	bne.w	800a680 <_strtod_l+0xb28>
 800a520:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a524:	4640      	mov	r0, r8
 800a526:	4649      	mov	r1, r9
 800a528:	f003 f8fe 	bl	800d728 <__ulp>
 800a52c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a530:	f7f5 ffd2 	bl	80004d8 <__aeabi_dmul>
 800a534:	4642      	mov	r2, r8
 800a536:	464b      	mov	r3, r9
 800a538:	f7f5 fe18 	bl	800016c <__adddf3>
 800a53c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a664 <_strtod_l+0xb0c>
 800a540:	4a4d      	ldr	r2, [pc, #308]	; (800a678 <_strtod_l+0xb20>)
 800a542:	ea01 0a0a 	and.w	sl, r1, sl
 800a546:	4592      	cmp	sl, r2
 800a548:	4680      	mov	r8, r0
 800a54a:	d948      	bls.n	800a5de <_strtod_l+0xa86>
 800a54c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a54e:	4b46      	ldr	r3, [pc, #280]	; (800a668 <_strtod_l+0xb10>)
 800a550:	429a      	cmp	r2, r3
 800a552:	d103      	bne.n	800a55c <_strtod_l+0xa04>
 800a554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a556:	3301      	adds	r3, #1
 800a558:	f43f ad3c 	beq.w	8009fd4 <_strtod_l+0x47c>
 800a55c:	f04f 38ff 	mov.w	r8, #4294967295
 800a560:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a668 <_strtod_l+0xb10>
 800a564:	4620      	mov	r0, r4
 800a566:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a568:	f002 fdb2 	bl	800d0d0 <_Bfree>
 800a56c:	4620      	mov	r0, r4
 800a56e:	9908      	ldr	r1, [sp, #32]
 800a570:	f002 fdae 	bl	800d0d0 <_Bfree>
 800a574:	4659      	mov	r1, fp
 800a576:	4620      	mov	r0, r4
 800a578:	f002 fdaa 	bl	800d0d0 <_Bfree>
 800a57c:	4631      	mov	r1, r6
 800a57e:	4620      	mov	r0, r4
 800a580:	f002 fda6 	bl	800d0d0 <_Bfree>
 800a584:	e605      	b.n	800a192 <_strtod_l+0x63a>
 800a586:	f1b8 0f01 	cmp.w	r8, #1
 800a58a:	d103      	bne.n	800a594 <_strtod_l+0xa3c>
 800a58c:	f1b9 0f00 	cmp.w	r9, #0
 800a590:	f43f ad91 	beq.w	800a0b6 <_strtod_l+0x55e>
 800a594:	2200      	movs	r2, #0
 800a596:	4b39      	ldr	r3, [pc, #228]	; (800a67c <_strtod_l+0xb24>)
 800a598:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a59a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a59e:	e016      	b.n	800a5ce <_strtod_l+0xa76>
 800a5a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a5a2:	4f33      	ldr	r7, [pc, #204]	; (800a670 <_strtod_l+0xb18>)
 800a5a4:	e7a9      	b.n	800a4fa <_strtod_l+0x9a2>
 800a5a6:	4b32      	ldr	r3, [pc, #200]	; (800a670 <_strtod_l+0xb18>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5ae:	f7f5 ff93 	bl	80004d8 <__aeabi_dmul>
 800a5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	460f      	mov	r7, r1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d09e      	beq.n	800a4fa <_strtod_l+0x9a2>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5c4:	e79d      	b.n	800a502 <_strtod_l+0x9aa>
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	4b28      	ldr	r3, [pc, #160]	; (800a66c <_strtod_l+0xb14>)
 800a5ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5ce:	4f27      	ldr	r7, [pc, #156]	; (800a66c <_strtod_l+0xb14>)
 800a5d0:	e797      	b.n	800a502 <_strtod_l+0x9aa>
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	4b29      	ldr	r3, [pc, #164]	; (800a67c <_strtod_l+0xb24>)
 800a5d6:	4645      	mov	r5, r8
 800a5d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5dc:	e7f7      	b.n	800a5ce <_strtod_l+0xa76>
 800a5de:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800a5e2:	9b05      	ldr	r3, [sp, #20]
 800a5e4:	46ca      	mov	sl, r9
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1bc      	bne.n	800a564 <_strtod_l+0xa0c>
 800a5ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a5f0:	0d1b      	lsrs	r3, r3, #20
 800a5f2:	051b      	lsls	r3, r3, #20
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d1b5      	bne.n	800a564 <_strtod_l+0xa0c>
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	4639      	mov	r1, r7
 800a5fc:	f7f6 facc 	bl	8000b98 <__aeabi_d2lz>
 800a600:	f7f5 ff3c 	bl	800047c <__aeabi_l2d>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4628      	mov	r0, r5
 800a60a:	4639      	mov	r1, r7
 800a60c:	f7f5 fdac 	bl	8000168 <__aeabi_dsub>
 800a610:	460b      	mov	r3, r1
 800a612:	4602      	mov	r2, r0
 800a614:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800a618:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a61c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a61e:	ea4a 0a08 	orr.w	sl, sl, r8
 800a622:	ea5a 0a03 	orrs.w	sl, sl, r3
 800a626:	d06c      	beq.n	800a702 <_strtod_l+0xbaa>
 800a628:	a309      	add	r3, pc, #36	; (adr r3, 800a650 <_strtod_l+0xaf8>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f7f6 f9c5 	bl	80009bc <__aeabi_dcmplt>
 800a632:	2800      	cmp	r0, #0
 800a634:	f47f acd8 	bne.w	8009fe8 <_strtod_l+0x490>
 800a638:	a307      	add	r3, pc, #28	; (adr r3, 800a658 <_strtod_l+0xb00>)
 800a63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a642:	f7f6 f9d9 	bl	80009f8 <__aeabi_dcmpgt>
 800a646:	2800      	cmp	r0, #0
 800a648:	d08c      	beq.n	800a564 <_strtod_l+0xa0c>
 800a64a:	e4cd      	b.n	8009fe8 <_strtod_l+0x490>
 800a64c:	f3af 8000 	nop.w
 800a650:	94a03595 	.word	0x94a03595
 800a654:	3fdfffff 	.word	0x3fdfffff
 800a658:	35afe535 	.word	0x35afe535
 800a65c:	3fe00000 	.word	0x3fe00000
 800a660:	000fffff 	.word	0x000fffff
 800a664:	7ff00000 	.word	0x7ff00000
 800a668:	7fefffff 	.word	0x7fefffff
 800a66c:	3ff00000 	.word	0x3ff00000
 800a670:	3fe00000 	.word	0x3fe00000
 800a674:	7fe00000 	.word	0x7fe00000
 800a678:	7c9fffff 	.word	0x7c9fffff
 800a67c:	bff00000 	.word	0xbff00000
 800a680:	9b05      	ldr	r3, [sp, #20]
 800a682:	b333      	cbz	r3, 800a6d2 <_strtod_l+0xb7a>
 800a684:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a686:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a68a:	d822      	bhi.n	800a6d2 <_strtod_l+0xb7a>
 800a68c:	a328      	add	r3, pc, #160	; (adr r3, 800a730 <_strtod_l+0xbd8>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	4628      	mov	r0, r5
 800a694:	4639      	mov	r1, r7
 800a696:	f7f6 f99b 	bl	80009d0 <__aeabi_dcmple>
 800a69a:	b1a0      	cbz	r0, 800a6c6 <_strtod_l+0xb6e>
 800a69c:	4639      	mov	r1, r7
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f7f6 f9f2 	bl	8000a88 <__aeabi_d2uiz>
 800a6a4:	2801      	cmp	r0, #1
 800a6a6:	bf38      	it	cc
 800a6a8:	2001      	movcc	r0, #1
 800a6aa:	f7f5 fe9b 	bl	80003e4 <__aeabi_ui2d>
 800a6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	460f      	mov	r7, r1
 800a6b4:	bb03      	cbnz	r3, 800a6f8 <_strtod_l+0xba0>
 800a6b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6ba:	9014      	str	r0, [sp, #80]	; 0x50
 800a6bc:	9315      	str	r3, [sp, #84]	; 0x54
 800a6be:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a6c2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a6c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6ca:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a6ce:	1a9b      	subs	r3, r3, r2
 800a6d0:	9311      	str	r3, [sp, #68]	; 0x44
 800a6d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a6d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6d6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800a6da:	f003 f825 	bl	800d728 <__ulp>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4640      	mov	r0, r8
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	f7f5 fef7 	bl	80004d8 <__aeabi_dmul>
 800a6ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6ee:	f7f5 fd3d 	bl	800016c <__adddf3>
 800a6f2:	4680      	mov	r8, r0
 800a6f4:	4689      	mov	r9, r1
 800a6f6:	e774      	b.n	800a5e2 <_strtod_l+0xa8a>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a700:	e7dd      	b.n	800a6be <_strtod_l+0xb66>
 800a702:	a30d      	add	r3, pc, #52	; (adr r3, 800a738 <_strtod_l+0xbe0>)
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f7f6 f958 	bl	80009bc <__aeabi_dcmplt>
 800a70c:	e79b      	b.n	800a646 <_strtod_l+0xaee>
 800a70e:	2300      	movs	r3, #0
 800a710:	930e      	str	r3, [sp, #56]	; 0x38
 800a712:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a714:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	f7ff ba5b 	b.w	8009bd2 <_strtod_l+0x7a>
 800a71c:	2a65      	cmp	r2, #101	; 0x65
 800a71e:	f43f ab52 	beq.w	8009dc6 <_strtod_l+0x26e>
 800a722:	2a45      	cmp	r2, #69	; 0x45
 800a724:	f43f ab4f 	beq.w	8009dc6 <_strtod_l+0x26e>
 800a728:	2301      	movs	r3, #1
 800a72a:	f7ff bb87 	b.w	8009e3c <_strtod_l+0x2e4>
 800a72e:	bf00      	nop
 800a730:	ffc00000 	.word	0xffc00000
 800a734:	41dfffff 	.word	0x41dfffff
 800a738:	94a03595 	.word	0x94a03595
 800a73c:	3fcfffff 	.word	0x3fcfffff

0800a740 <_strtod_r>:
 800a740:	4b01      	ldr	r3, [pc, #4]	; (800a748 <_strtod_r+0x8>)
 800a742:	f7ff ba09 	b.w	8009b58 <_strtod_l>
 800a746:	bf00      	nop
 800a748:	2000006c 	.word	0x2000006c

0800a74c <_strtol_l.constprop.0>:
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a752:	4686      	mov	lr, r0
 800a754:	4690      	mov	r8, r2
 800a756:	d001      	beq.n	800a75c <_strtol_l.constprop.0+0x10>
 800a758:	2b24      	cmp	r3, #36	; 0x24
 800a75a:	d906      	bls.n	800a76a <_strtol_l.constprop.0+0x1e>
 800a75c:	f001 f9fc 	bl	800bb58 <__errno>
 800a760:	2316      	movs	r3, #22
 800a762:	6003      	str	r3, [r0, #0]
 800a764:	2000      	movs	r0, #0
 800a766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76a:	460d      	mov	r5, r1
 800a76c:	4835      	ldr	r0, [pc, #212]	; (800a844 <_strtol_l.constprop.0+0xf8>)
 800a76e:	462a      	mov	r2, r5
 800a770:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a774:	5d06      	ldrb	r6, [r0, r4]
 800a776:	f016 0608 	ands.w	r6, r6, #8
 800a77a:	d1f8      	bne.n	800a76e <_strtol_l.constprop.0+0x22>
 800a77c:	2c2d      	cmp	r4, #45	; 0x2d
 800a77e:	d12e      	bne.n	800a7de <_strtol_l.constprop.0+0x92>
 800a780:	2601      	movs	r6, #1
 800a782:	782c      	ldrb	r4, [r5, #0]
 800a784:	1c95      	adds	r5, r2, #2
 800a786:	2b00      	cmp	r3, #0
 800a788:	d057      	beq.n	800a83a <_strtol_l.constprop.0+0xee>
 800a78a:	2b10      	cmp	r3, #16
 800a78c:	d109      	bne.n	800a7a2 <_strtol_l.constprop.0+0x56>
 800a78e:	2c30      	cmp	r4, #48	; 0x30
 800a790:	d107      	bne.n	800a7a2 <_strtol_l.constprop.0+0x56>
 800a792:	782a      	ldrb	r2, [r5, #0]
 800a794:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a798:	2a58      	cmp	r2, #88	; 0x58
 800a79a:	d149      	bne.n	800a830 <_strtol_l.constprop.0+0xe4>
 800a79c:	2310      	movs	r3, #16
 800a79e:	786c      	ldrb	r4, [r5, #1]
 800a7a0:	3502      	adds	r5, #2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a7a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a7ac:	fbbc f9f3 	udiv	r9, ip, r3
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	fb03 ca19 	mls	sl, r3, r9, ip
 800a7b6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a7ba:	2f09      	cmp	r7, #9
 800a7bc:	d814      	bhi.n	800a7e8 <_strtol_l.constprop.0+0x9c>
 800a7be:	463c      	mov	r4, r7
 800a7c0:	42a3      	cmp	r3, r4
 800a7c2:	dd20      	ble.n	800a806 <_strtol_l.constprop.0+0xba>
 800a7c4:	1c57      	adds	r7, r2, #1
 800a7c6:	d007      	beq.n	800a7d8 <_strtol_l.constprop.0+0x8c>
 800a7c8:	4581      	cmp	r9, r0
 800a7ca:	d319      	bcc.n	800a800 <_strtol_l.constprop.0+0xb4>
 800a7cc:	d101      	bne.n	800a7d2 <_strtol_l.constprop.0+0x86>
 800a7ce:	45a2      	cmp	sl, r4
 800a7d0:	db16      	blt.n	800a800 <_strtol_l.constprop.0+0xb4>
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	fb00 4003 	mla	r0, r0, r3, r4
 800a7d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7dc:	e7eb      	b.n	800a7b6 <_strtol_l.constprop.0+0x6a>
 800a7de:	2c2b      	cmp	r4, #43	; 0x2b
 800a7e0:	bf04      	itt	eq
 800a7e2:	782c      	ldrbeq	r4, [r5, #0]
 800a7e4:	1c95      	addeq	r5, r2, #2
 800a7e6:	e7ce      	b.n	800a786 <_strtol_l.constprop.0+0x3a>
 800a7e8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a7ec:	2f19      	cmp	r7, #25
 800a7ee:	d801      	bhi.n	800a7f4 <_strtol_l.constprop.0+0xa8>
 800a7f0:	3c37      	subs	r4, #55	; 0x37
 800a7f2:	e7e5      	b.n	800a7c0 <_strtol_l.constprop.0+0x74>
 800a7f4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a7f8:	2f19      	cmp	r7, #25
 800a7fa:	d804      	bhi.n	800a806 <_strtol_l.constprop.0+0xba>
 800a7fc:	3c57      	subs	r4, #87	; 0x57
 800a7fe:	e7df      	b.n	800a7c0 <_strtol_l.constprop.0+0x74>
 800a800:	f04f 32ff 	mov.w	r2, #4294967295
 800a804:	e7e8      	b.n	800a7d8 <_strtol_l.constprop.0+0x8c>
 800a806:	1c53      	adds	r3, r2, #1
 800a808:	d108      	bne.n	800a81c <_strtol_l.constprop.0+0xd0>
 800a80a:	2322      	movs	r3, #34	; 0x22
 800a80c:	4660      	mov	r0, ip
 800a80e:	f8ce 3000 	str.w	r3, [lr]
 800a812:	f1b8 0f00 	cmp.w	r8, #0
 800a816:	d0a6      	beq.n	800a766 <_strtol_l.constprop.0+0x1a>
 800a818:	1e69      	subs	r1, r5, #1
 800a81a:	e006      	b.n	800a82a <_strtol_l.constprop.0+0xde>
 800a81c:	b106      	cbz	r6, 800a820 <_strtol_l.constprop.0+0xd4>
 800a81e:	4240      	negs	r0, r0
 800a820:	f1b8 0f00 	cmp.w	r8, #0
 800a824:	d09f      	beq.n	800a766 <_strtol_l.constprop.0+0x1a>
 800a826:	2a00      	cmp	r2, #0
 800a828:	d1f6      	bne.n	800a818 <_strtol_l.constprop.0+0xcc>
 800a82a:	f8c8 1000 	str.w	r1, [r8]
 800a82e:	e79a      	b.n	800a766 <_strtol_l.constprop.0+0x1a>
 800a830:	2430      	movs	r4, #48	; 0x30
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1b5      	bne.n	800a7a2 <_strtol_l.constprop.0+0x56>
 800a836:	2308      	movs	r3, #8
 800a838:	e7b3      	b.n	800a7a2 <_strtol_l.constprop.0+0x56>
 800a83a:	2c30      	cmp	r4, #48	; 0x30
 800a83c:	d0a9      	beq.n	800a792 <_strtol_l.constprop.0+0x46>
 800a83e:	230a      	movs	r3, #10
 800a840:	e7af      	b.n	800a7a2 <_strtol_l.constprop.0+0x56>
 800a842:	bf00      	nop
 800a844:	0800f21e 	.word	0x0800f21e

0800a848 <_strtol_r>:
 800a848:	f7ff bf80 	b.w	800a74c <_strtol_l.constprop.0>

0800a84c <__utoa>:
 800a84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a84e:	b08b      	sub	sp, #44	; 0x2c
 800a850:	4605      	mov	r5, r0
 800a852:	460b      	mov	r3, r1
 800a854:	466e      	mov	r6, sp
 800a856:	4c1d      	ldr	r4, [pc, #116]	; (800a8cc <__utoa+0x80>)
 800a858:	f104 0c20 	add.w	ip, r4, #32
 800a85c:	4637      	mov	r7, r6
 800a85e:	6820      	ldr	r0, [r4, #0]
 800a860:	6861      	ldr	r1, [r4, #4]
 800a862:	3408      	adds	r4, #8
 800a864:	c703      	stmia	r7!, {r0, r1}
 800a866:	4564      	cmp	r4, ip
 800a868:	463e      	mov	r6, r7
 800a86a:	d1f7      	bne.n	800a85c <__utoa+0x10>
 800a86c:	7921      	ldrb	r1, [r4, #4]
 800a86e:	6820      	ldr	r0, [r4, #0]
 800a870:	7139      	strb	r1, [r7, #4]
 800a872:	1e91      	subs	r1, r2, #2
 800a874:	2922      	cmp	r1, #34	; 0x22
 800a876:	6038      	str	r0, [r7, #0]
 800a878:	f04f 0100 	mov.w	r1, #0
 800a87c:	d904      	bls.n	800a888 <__utoa+0x3c>
 800a87e:	7019      	strb	r1, [r3, #0]
 800a880:	460b      	mov	r3, r1
 800a882:	4618      	mov	r0, r3
 800a884:	b00b      	add	sp, #44	; 0x2c
 800a886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a888:	1e58      	subs	r0, r3, #1
 800a88a:	4684      	mov	ip, r0
 800a88c:	fbb5 f7f2 	udiv	r7, r5, r2
 800a890:	fb02 5617 	mls	r6, r2, r7, r5
 800a894:	3628      	adds	r6, #40	; 0x28
 800a896:	446e      	add	r6, sp
 800a898:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a89c:	460c      	mov	r4, r1
 800a89e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a8a2:	462e      	mov	r6, r5
 800a8a4:	42b2      	cmp	r2, r6
 800a8a6:	463d      	mov	r5, r7
 800a8a8:	f101 0101 	add.w	r1, r1, #1
 800a8ac:	d9ee      	bls.n	800a88c <__utoa+0x40>
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	545a      	strb	r2, [r3, r1]
 800a8b2:	1919      	adds	r1, r3, r4
 800a8b4:	1aa5      	subs	r5, r4, r2
 800a8b6:	42aa      	cmp	r2, r5
 800a8b8:	dae3      	bge.n	800a882 <__utoa+0x36>
 800a8ba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a8be:	780e      	ldrb	r6, [r1, #0]
 800a8c0:	3201      	adds	r2, #1
 800a8c2:	7006      	strb	r6, [r0, #0]
 800a8c4:	f801 5901 	strb.w	r5, [r1], #-1
 800a8c8:	e7f4      	b.n	800a8b4 <__utoa+0x68>
 800a8ca:	bf00      	nop
 800a8cc:	0800f1f8 	.word	0x0800f1f8

0800a8d0 <__cvt>:
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d6:	461f      	mov	r7, r3
 800a8d8:	bfbb      	ittet	lt
 800a8da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a8de:	461f      	movlt	r7, r3
 800a8e0:	2300      	movge	r3, #0
 800a8e2:	232d      	movlt	r3, #45	; 0x2d
 800a8e4:	b088      	sub	sp, #32
 800a8e6:	4614      	mov	r4, r2
 800a8e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a8ec:	7013      	strb	r3, [r2, #0]
 800a8ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a8f4:	f023 0820 	bic.w	r8, r3, #32
 800a8f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8fc:	d005      	beq.n	800a90a <__cvt+0x3a>
 800a8fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a902:	d100      	bne.n	800a906 <__cvt+0x36>
 800a904:	3501      	adds	r5, #1
 800a906:	2302      	movs	r3, #2
 800a908:	e000      	b.n	800a90c <__cvt+0x3c>
 800a90a:	2303      	movs	r3, #3
 800a90c:	aa07      	add	r2, sp, #28
 800a90e:	9204      	str	r2, [sp, #16]
 800a910:	aa06      	add	r2, sp, #24
 800a912:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a916:	e9cd 3500 	strd	r3, r5, [sp]
 800a91a:	4622      	mov	r2, r4
 800a91c:	463b      	mov	r3, r7
 800a91e:	f001 f9ff 	bl	800bd20 <_dtoa_r>
 800a922:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a926:	4606      	mov	r6, r0
 800a928:	d102      	bne.n	800a930 <__cvt+0x60>
 800a92a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a92c:	07db      	lsls	r3, r3, #31
 800a92e:	d522      	bpl.n	800a976 <__cvt+0xa6>
 800a930:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a934:	eb06 0905 	add.w	r9, r6, r5
 800a938:	d110      	bne.n	800a95c <__cvt+0x8c>
 800a93a:	7833      	ldrb	r3, [r6, #0]
 800a93c:	2b30      	cmp	r3, #48	; 0x30
 800a93e:	d10a      	bne.n	800a956 <__cvt+0x86>
 800a940:	2200      	movs	r2, #0
 800a942:	2300      	movs	r3, #0
 800a944:	4620      	mov	r0, r4
 800a946:	4639      	mov	r1, r7
 800a948:	f7f6 f82e 	bl	80009a8 <__aeabi_dcmpeq>
 800a94c:	b918      	cbnz	r0, 800a956 <__cvt+0x86>
 800a94e:	f1c5 0501 	rsb	r5, r5, #1
 800a952:	f8ca 5000 	str.w	r5, [sl]
 800a956:	f8da 3000 	ldr.w	r3, [sl]
 800a95a:	4499      	add	r9, r3
 800a95c:	2200      	movs	r2, #0
 800a95e:	2300      	movs	r3, #0
 800a960:	4620      	mov	r0, r4
 800a962:	4639      	mov	r1, r7
 800a964:	f7f6 f820 	bl	80009a8 <__aeabi_dcmpeq>
 800a968:	b108      	cbz	r0, 800a96e <__cvt+0x9e>
 800a96a:	f8cd 901c 	str.w	r9, [sp, #28]
 800a96e:	2230      	movs	r2, #48	; 0x30
 800a970:	9b07      	ldr	r3, [sp, #28]
 800a972:	454b      	cmp	r3, r9
 800a974:	d307      	bcc.n	800a986 <__cvt+0xb6>
 800a976:	4630      	mov	r0, r6
 800a978:	9b07      	ldr	r3, [sp, #28]
 800a97a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a97c:	1b9b      	subs	r3, r3, r6
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	b008      	add	sp, #32
 800a982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a986:	1c59      	adds	r1, r3, #1
 800a988:	9107      	str	r1, [sp, #28]
 800a98a:	701a      	strb	r2, [r3, #0]
 800a98c:	e7f0      	b.n	800a970 <__cvt+0xa0>

0800a98e <__exponent>:
 800a98e:	4603      	mov	r3, r0
 800a990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a992:	2900      	cmp	r1, #0
 800a994:	f803 2b02 	strb.w	r2, [r3], #2
 800a998:	bfb6      	itet	lt
 800a99a:	222d      	movlt	r2, #45	; 0x2d
 800a99c:	222b      	movge	r2, #43	; 0x2b
 800a99e:	4249      	neglt	r1, r1
 800a9a0:	2909      	cmp	r1, #9
 800a9a2:	7042      	strb	r2, [r0, #1]
 800a9a4:	dd2a      	ble.n	800a9fc <__exponent+0x6e>
 800a9a6:	f10d 0207 	add.w	r2, sp, #7
 800a9aa:	4617      	mov	r7, r2
 800a9ac:	260a      	movs	r6, #10
 800a9ae:	fb91 f5f6 	sdiv	r5, r1, r6
 800a9b2:	4694      	mov	ip, r2
 800a9b4:	fb06 1415 	mls	r4, r6, r5, r1
 800a9b8:	3430      	adds	r4, #48	; 0x30
 800a9ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a9be:	460c      	mov	r4, r1
 800a9c0:	2c63      	cmp	r4, #99	; 0x63
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	f102 32ff 	add.w	r2, r2, #4294967295
 800a9c8:	dcf1      	bgt.n	800a9ae <__exponent+0x20>
 800a9ca:	3130      	adds	r1, #48	; 0x30
 800a9cc:	f1ac 0402 	sub.w	r4, ip, #2
 800a9d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a9d4:	4622      	mov	r2, r4
 800a9d6:	1c41      	adds	r1, r0, #1
 800a9d8:	42ba      	cmp	r2, r7
 800a9da:	d30a      	bcc.n	800a9f2 <__exponent+0x64>
 800a9dc:	f10d 0209 	add.w	r2, sp, #9
 800a9e0:	eba2 020c 	sub.w	r2, r2, ip
 800a9e4:	42bc      	cmp	r4, r7
 800a9e6:	bf88      	it	hi
 800a9e8:	2200      	movhi	r2, #0
 800a9ea:	4413      	add	r3, r2
 800a9ec:	1a18      	subs	r0, r3, r0
 800a9ee:	b003      	add	sp, #12
 800a9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a9f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a9fa:	e7ed      	b.n	800a9d8 <__exponent+0x4a>
 800a9fc:	2330      	movs	r3, #48	; 0x30
 800a9fe:	3130      	adds	r1, #48	; 0x30
 800aa00:	7083      	strb	r3, [r0, #2]
 800aa02:	70c1      	strb	r1, [r0, #3]
 800aa04:	1d03      	adds	r3, r0, #4
 800aa06:	e7f1      	b.n	800a9ec <__exponent+0x5e>

0800aa08 <_printf_float>:
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	b091      	sub	sp, #68	; 0x44
 800aa0e:	460c      	mov	r4, r1
 800aa10:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800aa14:	4616      	mov	r6, r2
 800aa16:	461f      	mov	r7, r3
 800aa18:	4605      	mov	r5, r0
 800aa1a:	f001 f843 	bl	800baa4 <_localeconv_r>
 800aa1e:	6803      	ldr	r3, [r0, #0]
 800aa20:	4618      	mov	r0, r3
 800aa22:	9309      	str	r3, [sp, #36]	; 0x24
 800aa24:	f7f5 fb94 	bl	8000150 <strlen>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	930e      	str	r3, [sp, #56]	; 0x38
 800aa2c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa30:	900a      	str	r0, [sp, #40]	; 0x28
 800aa32:	3307      	adds	r3, #7
 800aa34:	f023 0307 	bic.w	r3, r3, #7
 800aa38:	f103 0208 	add.w	r2, r3, #8
 800aa3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800aa40:	f8d4 b000 	ldr.w	fp, [r4]
 800aa44:	f8c8 2000 	str.w	r2, [r8]
 800aa48:	e9d3 a800 	ldrd	sl, r8, [r3]
 800aa4c:	4652      	mov	r2, sl
 800aa4e:	4643      	mov	r3, r8
 800aa50:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa54:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800aa58:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa5a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5e:	4650      	mov	r0, sl
 800aa60:	4b9c      	ldr	r3, [pc, #624]	; (800acd4 <_printf_float+0x2cc>)
 800aa62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa64:	f7f5 ffd2 	bl	8000a0c <__aeabi_dcmpun>
 800aa68:	bb70      	cbnz	r0, 800aac8 <_printf_float+0xc0>
 800aa6a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6e:	4650      	mov	r0, sl
 800aa70:	4b98      	ldr	r3, [pc, #608]	; (800acd4 <_printf_float+0x2cc>)
 800aa72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa74:	f7f5 ffac 	bl	80009d0 <__aeabi_dcmple>
 800aa78:	bb30      	cbnz	r0, 800aac8 <_printf_float+0xc0>
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4650      	mov	r0, sl
 800aa80:	4641      	mov	r1, r8
 800aa82:	f7f5 ff9b 	bl	80009bc <__aeabi_dcmplt>
 800aa86:	b110      	cbz	r0, 800aa8e <_printf_float+0x86>
 800aa88:	232d      	movs	r3, #45	; 0x2d
 800aa8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa8e:	4a92      	ldr	r2, [pc, #584]	; (800acd8 <_printf_float+0x2d0>)
 800aa90:	4b92      	ldr	r3, [pc, #584]	; (800acdc <_printf_float+0x2d4>)
 800aa92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800aa96:	bf94      	ite	ls
 800aa98:	4690      	movls	r8, r2
 800aa9a:	4698      	movhi	r8, r3
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	f04f 0a00 	mov.w	sl, #0
 800aaa2:	6123      	str	r3, [r4, #16]
 800aaa4:	f02b 0304 	bic.w	r3, fp, #4
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	4633      	mov	r3, r6
 800aaac:	4621      	mov	r1, r4
 800aaae:	4628      	mov	r0, r5
 800aab0:	9700      	str	r7, [sp, #0]
 800aab2:	aa0f      	add	r2, sp, #60	; 0x3c
 800aab4:	f000 f9d6 	bl	800ae64 <_printf_common>
 800aab8:	3001      	adds	r0, #1
 800aaba:	f040 8090 	bne.w	800abde <_printf_float+0x1d6>
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295
 800aac2:	b011      	add	sp, #68	; 0x44
 800aac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac8:	4652      	mov	r2, sl
 800aaca:	4643      	mov	r3, r8
 800aacc:	4650      	mov	r0, sl
 800aace:	4641      	mov	r1, r8
 800aad0:	f7f5 ff9c 	bl	8000a0c <__aeabi_dcmpun>
 800aad4:	b148      	cbz	r0, 800aaea <_printf_float+0xe2>
 800aad6:	f1b8 0f00 	cmp.w	r8, #0
 800aada:	bfb8      	it	lt
 800aadc:	232d      	movlt	r3, #45	; 0x2d
 800aade:	4a80      	ldr	r2, [pc, #512]	; (800ace0 <_printf_float+0x2d8>)
 800aae0:	bfb8      	it	lt
 800aae2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aae6:	4b7f      	ldr	r3, [pc, #508]	; (800ace4 <_printf_float+0x2dc>)
 800aae8:	e7d3      	b.n	800aa92 <_printf_float+0x8a>
 800aaea:	6863      	ldr	r3, [r4, #4]
 800aaec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	d142      	bne.n	800ab7a <_printf_float+0x172>
 800aaf4:	2306      	movs	r3, #6
 800aaf6:	6063      	str	r3, [r4, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	9206      	str	r2, [sp, #24]
 800aafc:	aa0e      	add	r2, sp, #56	; 0x38
 800aafe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800ab02:	aa0d      	add	r2, sp, #52	; 0x34
 800ab04:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ab08:	9203      	str	r2, [sp, #12]
 800ab0a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ab0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ab12:	6023      	str	r3, [r4, #0]
 800ab14:	6863      	ldr	r3, [r4, #4]
 800ab16:	4652      	mov	r2, sl
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	4643      	mov	r3, r8
 800ab1e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ab20:	f7ff fed6 	bl	800a8d0 <__cvt>
 800ab24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab26:	4680      	mov	r8, r0
 800ab28:	2947      	cmp	r1, #71	; 0x47
 800ab2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab2c:	d108      	bne.n	800ab40 <_printf_float+0x138>
 800ab2e:	1cc8      	adds	r0, r1, #3
 800ab30:	db02      	blt.n	800ab38 <_printf_float+0x130>
 800ab32:	6863      	ldr	r3, [r4, #4]
 800ab34:	4299      	cmp	r1, r3
 800ab36:	dd40      	ble.n	800abba <_printf_float+0x1b2>
 800ab38:	f1a9 0902 	sub.w	r9, r9, #2
 800ab3c:	fa5f f989 	uxtb.w	r9, r9
 800ab40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ab44:	d81f      	bhi.n	800ab86 <_printf_float+0x17e>
 800ab46:	464a      	mov	r2, r9
 800ab48:	3901      	subs	r1, #1
 800ab4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab4e:	910d      	str	r1, [sp, #52]	; 0x34
 800ab50:	f7ff ff1d 	bl	800a98e <__exponent>
 800ab54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab56:	4682      	mov	sl, r0
 800ab58:	1813      	adds	r3, r2, r0
 800ab5a:	2a01      	cmp	r2, #1
 800ab5c:	6123      	str	r3, [r4, #16]
 800ab5e:	dc02      	bgt.n	800ab66 <_printf_float+0x15e>
 800ab60:	6822      	ldr	r2, [r4, #0]
 800ab62:	07d2      	lsls	r2, r2, #31
 800ab64:	d501      	bpl.n	800ab6a <_printf_float+0x162>
 800ab66:	3301      	adds	r3, #1
 800ab68:	6123      	str	r3, [r4, #16]
 800ab6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d09b      	beq.n	800aaaa <_printf_float+0xa2>
 800ab72:	232d      	movs	r3, #45	; 0x2d
 800ab74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab78:	e797      	b.n	800aaaa <_printf_float+0xa2>
 800ab7a:	2947      	cmp	r1, #71	; 0x47
 800ab7c:	d1bc      	bne.n	800aaf8 <_printf_float+0xf0>
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1ba      	bne.n	800aaf8 <_printf_float+0xf0>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e7b7      	b.n	800aaf6 <_printf_float+0xee>
 800ab86:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ab8a:	d118      	bne.n	800abbe <_printf_float+0x1b6>
 800ab8c:	2900      	cmp	r1, #0
 800ab8e:	6863      	ldr	r3, [r4, #4]
 800ab90:	dd0b      	ble.n	800abaa <_printf_float+0x1a2>
 800ab92:	6121      	str	r1, [r4, #16]
 800ab94:	b913      	cbnz	r3, 800ab9c <_printf_float+0x194>
 800ab96:	6822      	ldr	r2, [r4, #0]
 800ab98:	07d0      	lsls	r0, r2, #31
 800ab9a:	d502      	bpl.n	800aba2 <_printf_float+0x19a>
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	440b      	add	r3, r1
 800aba0:	6123      	str	r3, [r4, #16]
 800aba2:	f04f 0a00 	mov.w	sl, #0
 800aba6:	65a1      	str	r1, [r4, #88]	; 0x58
 800aba8:	e7df      	b.n	800ab6a <_printf_float+0x162>
 800abaa:	b913      	cbnz	r3, 800abb2 <_printf_float+0x1aa>
 800abac:	6822      	ldr	r2, [r4, #0]
 800abae:	07d2      	lsls	r2, r2, #31
 800abb0:	d501      	bpl.n	800abb6 <_printf_float+0x1ae>
 800abb2:	3302      	adds	r3, #2
 800abb4:	e7f4      	b.n	800aba0 <_printf_float+0x198>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e7f2      	b.n	800aba0 <_printf_float+0x198>
 800abba:	f04f 0967 	mov.w	r9, #103	; 0x67
 800abbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abc0:	4299      	cmp	r1, r3
 800abc2:	db05      	blt.n	800abd0 <_printf_float+0x1c8>
 800abc4:	6823      	ldr	r3, [r4, #0]
 800abc6:	6121      	str	r1, [r4, #16]
 800abc8:	07d8      	lsls	r0, r3, #31
 800abca:	d5ea      	bpl.n	800aba2 <_printf_float+0x19a>
 800abcc:	1c4b      	adds	r3, r1, #1
 800abce:	e7e7      	b.n	800aba0 <_printf_float+0x198>
 800abd0:	2900      	cmp	r1, #0
 800abd2:	bfcc      	ite	gt
 800abd4:	2201      	movgt	r2, #1
 800abd6:	f1c1 0202 	rsble	r2, r1, #2
 800abda:	4413      	add	r3, r2
 800abdc:	e7e0      	b.n	800aba0 <_printf_float+0x198>
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	055a      	lsls	r2, r3, #21
 800abe2:	d407      	bmi.n	800abf4 <_printf_float+0x1ec>
 800abe4:	6923      	ldr	r3, [r4, #16]
 800abe6:	4642      	mov	r2, r8
 800abe8:	4631      	mov	r1, r6
 800abea:	4628      	mov	r0, r5
 800abec:	47b8      	blx	r7
 800abee:	3001      	adds	r0, #1
 800abf0:	d12b      	bne.n	800ac4a <_printf_float+0x242>
 800abf2:	e764      	b.n	800aabe <_printf_float+0xb6>
 800abf4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800abf8:	f240 80dd 	bls.w	800adb6 <_printf_float+0x3ae>
 800abfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac00:	2200      	movs	r2, #0
 800ac02:	2300      	movs	r3, #0
 800ac04:	f7f5 fed0 	bl	80009a8 <__aeabi_dcmpeq>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d033      	beq.n	800ac74 <_printf_float+0x26c>
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	4631      	mov	r1, r6
 800ac10:	4628      	mov	r0, r5
 800ac12:	4a35      	ldr	r2, [pc, #212]	; (800ace8 <_printf_float+0x2e0>)
 800ac14:	47b8      	blx	r7
 800ac16:	3001      	adds	r0, #1
 800ac18:	f43f af51 	beq.w	800aabe <_printf_float+0xb6>
 800ac1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ac20:	429a      	cmp	r2, r3
 800ac22:	db02      	blt.n	800ac2a <_printf_float+0x222>
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	07d8      	lsls	r0, r3, #31
 800ac28:	d50f      	bpl.n	800ac4a <_printf_float+0x242>
 800ac2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac2e:	4631      	mov	r1, r6
 800ac30:	4628      	mov	r0, r5
 800ac32:	47b8      	blx	r7
 800ac34:	3001      	adds	r0, #1
 800ac36:	f43f af42 	beq.w	800aabe <_printf_float+0xb6>
 800ac3a:	f04f 0800 	mov.w	r8, #0
 800ac3e:	f104 091a 	add.w	r9, r4, #26
 800ac42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac44:	3b01      	subs	r3, #1
 800ac46:	4543      	cmp	r3, r8
 800ac48:	dc09      	bgt.n	800ac5e <_printf_float+0x256>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	079b      	lsls	r3, r3, #30
 800ac4e:	f100 8104 	bmi.w	800ae5a <_printf_float+0x452>
 800ac52:	68e0      	ldr	r0, [r4, #12]
 800ac54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac56:	4298      	cmp	r0, r3
 800ac58:	bfb8      	it	lt
 800ac5a:	4618      	movlt	r0, r3
 800ac5c:	e731      	b.n	800aac2 <_printf_float+0xba>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	464a      	mov	r2, r9
 800ac62:	4631      	mov	r1, r6
 800ac64:	4628      	mov	r0, r5
 800ac66:	47b8      	blx	r7
 800ac68:	3001      	adds	r0, #1
 800ac6a:	f43f af28 	beq.w	800aabe <_printf_float+0xb6>
 800ac6e:	f108 0801 	add.w	r8, r8, #1
 800ac72:	e7e6      	b.n	800ac42 <_printf_float+0x23a>
 800ac74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	dc38      	bgt.n	800acec <_printf_float+0x2e4>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	4628      	mov	r0, r5
 800ac80:	4a19      	ldr	r2, [pc, #100]	; (800ace8 <_printf_float+0x2e0>)
 800ac82:	47b8      	blx	r7
 800ac84:	3001      	adds	r0, #1
 800ac86:	f43f af1a 	beq.w	800aabe <_printf_float+0xb6>
 800ac8a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	d102      	bne.n	800ac98 <_printf_float+0x290>
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	07d9      	lsls	r1, r3, #31
 800ac96:	d5d8      	bpl.n	800ac4a <_printf_float+0x242>
 800ac98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac9c:	4631      	mov	r1, r6
 800ac9e:	4628      	mov	r0, r5
 800aca0:	47b8      	blx	r7
 800aca2:	3001      	adds	r0, #1
 800aca4:	f43f af0b 	beq.w	800aabe <_printf_float+0xb6>
 800aca8:	f04f 0900 	mov.w	r9, #0
 800acac:	f104 0a1a 	add.w	sl, r4, #26
 800acb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acb2:	425b      	negs	r3, r3
 800acb4:	454b      	cmp	r3, r9
 800acb6:	dc01      	bgt.n	800acbc <_printf_float+0x2b4>
 800acb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acba:	e794      	b.n	800abe6 <_printf_float+0x1de>
 800acbc:	2301      	movs	r3, #1
 800acbe:	4652      	mov	r2, sl
 800acc0:	4631      	mov	r1, r6
 800acc2:	4628      	mov	r0, r5
 800acc4:	47b8      	blx	r7
 800acc6:	3001      	adds	r0, #1
 800acc8:	f43f aef9 	beq.w	800aabe <_printf_float+0xb6>
 800accc:	f109 0901 	add.w	r9, r9, #1
 800acd0:	e7ee      	b.n	800acb0 <_printf_float+0x2a8>
 800acd2:	bf00      	nop
 800acd4:	7fefffff 	.word	0x7fefffff
 800acd8:	0800f31e 	.word	0x0800f31e
 800acdc:	0800f322 	.word	0x0800f322
 800ace0:	0800f326 	.word	0x0800f326
 800ace4:	0800f32a 	.word	0x0800f32a
 800ace8:	0800f5cb 	.word	0x0800f5cb
 800acec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acf0:	429a      	cmp	r2, r3
 800acf2:	bfa8      	it	ge
 800acf4:	461a      	movge	r2, r3
 800acf6:	2a00      	cmp	r2, #0
 800acf8:	4691      	mov	r9, r2
 800acfa:	dc37      	bgt.n	800ad6c <_printf_float+0x364>
 800acfc:	f04f 0b00 	mov.w	fp, #0
 800ad00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad04:	f104 021a 	add.w	r2, r4, #26
 800ad08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ad0c:	ebaa 0309 	sub.w	r3, sl, r9
 800ad10:	455b      	cmp	r3, fp
 800ad12:	dc33      	bgt.n	800ad7c <_printf_float+0x374>
 800ad14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	db3b      	blt.n	800ad94 <_printf_float+0x38c>
 800ad1c:	6823      	ldr	r3, [r4, #0]
 800ad1e:	07da      	lsls	r2, r3, #31
 800ad20:	d438      	bmi.n	800ad94 <_printf_float+0x38c>
 800ad22:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ad26:	eba2 0903 	sub.w	r9, r2, r3
 800ad2a:	eba2 020a 	sub.w	r2, r2, sl
 800ad2e:	4591      	cmp	r9, r2
 800ad30:	bfa8      	it	ge
 800ad32:	4691      	movge	r9, r2
 800ad34:	f1b9 0f00 	cmp.w	r9, #0
 800ad38:	dc34      	bgt.n	800ada4 <_printf_float+0x39c>
 800ad3a:	f04f 0800 	mov.w	r8, #0
 800ad3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad42:	f104 0a1a 	add.w	sl, r4, #26
 800ad46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ad4a:	1a9b      	subs	r3, r3, r2
 800ad4c:	eba3 0309 	sub.w	r3, r3, r9
 800ad50:	4543      	cmp	r3, r8
 800ad52:	f77f af7a 	ble.w	800ac4a <_printf_float+0x242>
 800ad56:	2301      	movs	r3, #1
 800ad58:	4652      	mov	r2, sl
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	47b8      	blx	r7
 800ad60:	3001      	adds	r0, #1
 800ad62:	f43f aeac 	beq.w	800aabe <_printf_float+0xb6>
 800ad66:	f108 0801 	add.w	r8, r8, #1
 800ad6a:	e7ec      	b.n	800ad46 <_printf_float+0x33e>
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	4631      	mov	r1, r6
 800ad70:	4642      	mov	r2, r8
 800ad72:	4628      	mov	r0, r5
 800ad74:	47b8      	blx	r7
 800ad76:	3001      	adds	r0, #1
 800ad78:	d1c0      	bne.n	800acfc <_printf_float+0x2f4>
 800ad7a:	e6a0      	b.n	800aabe <_printf_float+0xb6>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	4631      	mov	r1, r6
 800ad80:	4628      	mov	r0, r5
 800ad82:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad84:	47b8      	blx	r7
 800ad86:	3001      	adds	r0, #1
 800ad88:	f43f ae99 	beq.w	800aabe <_printf_float+0xb6>
 800ad8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad8e:	f10b 0b01 	add.w	fp, fp, #1
 800ad92:	e7b9      	b.n	800ad08 <_printf_float+0x300>
 800ad94:	4631      	mov	r1, r6
 800ad96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	47b8      	blx	r7
 800ad9e:	3001      	adds	r0, #1
 800ada0:	d1bf      	bne.n	800ad22 <_printf_float+0x31a>
 800ada2:	e68c      	b.n	800aabe <_printf_float+0xb6>
 800ada4:	464b      	mov	r3, r9
 800ada6:	4631      	mov	r1, r6
 800ada8:	4628      	mov	r0, r5
 800adaa:	eb08 020a 	add.w	r2, r8, sl
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	d1c2      	bne.n	800ad3a <_printf_float+0x332>
 800adb4:	e683      	b.n	800aabe <_printf_float+0xb6>
 800adb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adb8:	2a01      	cmp	r2, #1
 800adba:	dc01      	bgt.n	800adc0 <_printf_float+0x3b8>
 800adbc:	07db      	lsls	r3, r3, #31
 800adbe:	d539      	bpl.n	800ae34 <_printf_float+0x42c>
 800adc0:	2301      	movs	r3, #1
 800adc2:	4642      	mov	r2, r8
 800adc4:	4631      	mov	r1, r6
 800adc6:	4628      	mov	r0, r5
 800adc8:	47b8      	blx	r7
 800adca:	3001      	adds	r0, #1
 800adcc:	f43f ae77 	beq.w	800aabe <_printf_float+0xb6>
 800add0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	f43f ae6f 	beq.w	800aabe <_printf_float+0xb6>
 800ade0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ade4:	2200      	movs	r2, #0
 800ade6:	2300      	movs	r3, #0
 800ade8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800adec:	f7f5 fddc 	bl	80009a8 <__aeabi_dcmpeq>
 800adf0:	b9d8      	cbnz	r0, 800ae2a <_printf_float+0x422>
 800adf2:	f109 33ff 	add.w	r3, r9, #4294967295
 800adf6:	f108 0201 	add.w	r2, r8, #1
 800adfa:	4631      	mov	r1, r6
 800adfc:	4628      	mov	r0, r5
 800adfe:	47b8      	blx	r7
 800ae00:	3001      	adds	r0, #1
 800ae02:	d10e      	bne.n	800ae22 <_printf_float+0x41a>
 800ae04:	e65b      	b.n	800aabe <_printf_float+0xb6>
 800ae06:	2301      	movs	r3, #1
 800ae08:	464a      	mov	r2, r9
 800ae0a:	4631      	mov	r1, r6
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	47b8      	blx	r7
 800ae10:	3001      	adds	r0, #1
 800ae12:	f43f ae54 	beq.w	800aabe <_printf_float+0xb6>
 800ae16:	f108 0801 	add.w	r8, r8, #1
 800ae1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	4543      	cmp	r3, r8
 800ae20:	dcf1      	bgt.n	800ae06 <_printf_float+0x3fe>
 800ae22:	4653      	mov	r3, sl
 800ae24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae28:	e6de      	b.n	800abe8 <_printf_float+0x1e0>
 800ae2a:	f04f 0800 	mov.w	r8, #0
 800ae2e:	f104 091a 	add.w	r9, r4, #26
 800ae32:	e7f2      	b.n	800ae1a <_printf_float+0x412>
 800ae34:	2301      	movs	r3, #1
 800ae36:	4642      	mov	r2, r8
 800ae38:	e7df      	b.n	800adfa <_printf_float+0x3f2>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	464a      	mov	r2, r9
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4628      	mov	r0, r5
 800ae42:	47b8      	blx	r7
 800ae44:	3001      	adds	r0, #1
 800ae46:	f43f ae3a 	beq.w	800aabe <_printf_float+0xb6>
 800ae4a:	f108 0801 	add.w	r8, r8, #1
 800ae4e:	68e3      	ldr	r3, [r4, #12]
 800ae50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ae52:	1a5b      	subs	r3, r3, r1
 800ae54:	4543      	cmp	r3, r8
 800ae56:	dcf0      	bgt.n	800ae3a <_printf_float+0x432>
 800ae58:	e6fb      	b.n	800ac52 <_printf_float+0x24a>
 800ae5a:	f04f 0800 	mov.w	r8, #0
 800ae5e:	f104 0919 	add.w	r9, r4, #25
 800ae62:	e7f4      	b.n	800ae4e <_printf_float+0x446>

0800ae64 <_printf_common>:
 800ae64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae68:	4616      	mov	r6, r2
 800ae6a:	4699      	mov	r9, r3
 800ae6c:	688a      	ldr	r2, [r1, #8]
 800ae6e:	690b      	ldr	r3, [r1, #16]
 800ae70:	4607      	mov	r7, r0
 800ae72:	4293      	cmp	r3, r2
 800ae74:	bfb8      	it	lt
 800ae76:	4613      	movlt	r3, r2
 800ae78:	6033      	str	r3, [r6, #0]
 800ae7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae7e:	460c      	mov	r4, r1
 800ae80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae84:	b10a      	cbz	r2, 800ae8a <_printf_common+0x26>
 800ae86:	3301      	adds	r3, #1
 800ae88:	6033      	str	r3, [r6, #0]
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	0699      	lsls	r1, r3, #26
 800ae8e:	bf42      	ittt	mi
 800ae90:	6833      	ldrmi	r3, [r6, #0]
 800ae92:	3302      	addmi	r3, #2
 800ae94:	6033      	strmi	r3, [r6, #0]
 800ae96:	6825      	ldr	r5, [r4, #0]
 800ae98:	f015 0506 	ands.w	r5, r5, #6
 800ae9c:	d106      	bne.n	800aeac <_printf_common+0x48>
 800ae9e:	f104 0a19 	add.w	sl, r4, #25
 800aea2:	68e3      	ldr	r3, [r4, #12]
 800aea4:	6832      	ldr	r2, [r6, #0]
 800aea6:	1a9b      	subs	r3, r3, r2
 800aea8:	42ab      	cmp	r3, r5
 800aeaa:	dc2b      	bgt.n	800af04 <_printf_common+0xa0>
 800aeac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aeb0:	1e13      	subs	r3, r2, #0
 800aeb2:	6822      	ldr	r2, [r4, #0]
 800aeb4:	bf18      	it	ne
 800aeb6:	2301      	movne	r3, #1
 800aeb8:	0692      	lsls	r2, r2, #26
 800aeba:	d430      	bmi.n	800af1e <_printf_common+0xba>
 800aebc:	4649      	mov	r1, r9
 800aebe:	4638      	mov	r0, r7
 800aec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aec4:	47c0      	blx	r8
 800aec6:	3001      	adds	r0, #1
 800aec8:	d023      	beq.n	800af12 <_printf_common+0xae>
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	6922      	ldr	r2, [r4, #16]
 800aece:	f003 0306 	and.w	r3, r3, #6
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	bf14      	ite	ne
 800aed6:	2500      	movne	r5, #0
 800aed8:	6833      	ldreq	r3, [r6, #0]
 800aeda:	f04f 0600 	mov.w	r6, #0
 800aede:	bf08      	it	eq
 800aee0:	68e5      	ldreq	r5, [r4, #12]
 800aee2:	f104 041a 	add.w	r4, r4, #26
 800aee6:	bf08      	it	eq
 800aee8:	1aed      	subeq	r5, r5, r3
 800aeea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aeee:	bf08      	it	eq
 800aef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aef4:	4293      	cmp	r3, r2
 800aef6:	bfc4      	itt	gt
 800aef8:	1a9b      	subgt	r3, r3, r2
 800aefa:	18ed      	addgt	r5, r5, r3
 800aefc:	42b5      	cmp	r5, r6
 800aefe:	d11a      	bne.n	800af36 <_printf_common+0xd2>
 800af00:	2000      	movs	r0, #0
 800af02:	e008      	b.n	800af16 <_printf_common+0xb2>
 800af04:	2301      	movs	r3, #1
 800af06:	4652      	mov	r2, sl
 800af08:	4649      	mov	r1, r9
 800af0a:	4638      	mov	r0, r7
 800af0c:	47c0      	blx	r8
 800af0e:	3001      	adds	r0, #1
 800af10:	d103      	bne.n	800af1a <_printf_common+0xb6>
 800af12:	f04f 30ff 	mov.w	r0, #4294967295
 800af16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af1a:	3501      	adds	r5, #1
 800af1c:	e7c1      	b.n	800aea2 <_printf_common+0x3e>
 800af1e:	2030      	movs	r0, #48	; 0x30
 800af20:	18e1      	adds	r1, r4, r3
 800af22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af26:	1c5a      	adds	r2, r3, #1
 800af28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af2c:	4422      	add	r2, r4
 800af2e:	3302      	adds	r3, #2
 800af30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af34:	e7c2      	b.n	800aebc <_printf_common+0x58>
 800af36:	2301      	movs	r3, #1
 800af38:	4622      	mov	r2, r4
 800af3a:	4649      	mov	r1, r9
 800af3c:	4638      	mov	r0, r7
 800af3e:	47c0      	blx	r8
 800af40:	3001      	adds	r0, #1
 800af42:	d0e6      	beq.n	800af12 <_printf_common+0xae>
 800af44:	3601      	adds	r6, #1
 800af46:	e7d9      	b.n	800aefc <_printf_common+0x98>

0800af48 <_printf_i>:
 800af48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af4c:	7e0f      	ldrb	r7, [r1, #24]
 800af4e:	4691      	mov	r9, r2
 800af50:	2f78      	cmp	r7, #120	; 0x78
 800af52:	4680      	mov	r8, r0
 800af54:	460c      	mov	r4, r1
 800af56:	469a      	mov	sl, r3
 800af58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af5e:	d807      	bhi.n	800af70 <_printf_i+0x28>
 800af60:	2f62      	cmp	r7, #98	; 0x62
 800af62:	d80a      	bhi.n	800af7a <_printf_i+0x32>
 800af64:	2f00      	cmp	r7, #0
 800af66:	f000 80d5 	beq.w	800b114 <_printf_i+0x1cc>
 800af6a:	2f58      	cmp	r7, #88	; 0x58
 800af6c:	f000 80c1 	beq.w	800b0f2 <_printf_i+0x1aa>
 800af70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af78:	e03a      	b.n	800aff0 <_printf_i+0xa8>
 800af7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af7e:	2b15      	cmp	r3, #21
 800af80:	d8f6      	bhi.n	800af70 <_printf_i+0x28>
 800af82:	a101      	add	r1, pc, #4	; (adr r1, 800af88 <_printf_i+0x40>)
 800af84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af88:	0800afe1 	.word	0x0800afe1
 800af8c:	0800aff5 	.word	0x0800aff5
 800af90:	0800af71 	.word	0x0800af71
 800af94:	0800af71 	.word	0x0800af71
 800af98:	0800af71 	.word	0x0800af71
 800af9c:	0800af71 	.word	0x0800af71
 800afa0:	0800aff5 	.word	0x0800aff5
 800afa4:	0800af71 	.word	0x0800af71
 800afa8:	0800af71 	.word	0x0800af71
 800afac:	0800af71 	.word	0x0800af71
 800afb0:	0800af71 	.word	0x0800af71
 800afb4:	0800b0fb 	.word	0x0800b0fb
 800afb8:	0800b021 	.word	0x0800b021
 800afbc:	0800b0b5 	.word	0x0800b0b5
 800afc0:	0800af71 	.word	0x0800af71
 800afc4:	0800af71 	.word	0x0800af71
 800afc8:	0800b11d 	.word	0x0800b11d
 800afcc:	0800af71 	.word	0x0800af71
 800afd0:	0800b021 	.word	0x0800b021
 800afd4:	0800af71 	.word	0x0800af71
 800afd8:	0800af71 	.word	0x0800af71
 800afdc:	0800b0bd 	.word	0x0800b0bd
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	1d1a      	adds	r2, r3, #4
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	602a      	str	r2, [r5, #0]
 800afe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aff0:	2301      	movs	r3, #1
 800aff2:	e0a0      	b.n	800b136 <_printf_i+0x1ee>
 800aff4:	6820      	ldr	r0, [r4, #0]
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	0607      	lsls	r7, r0, #24
 800affa:	f103 0104 	add.w	r1, r3, #4
 800affe:	6029      	str	r1, [r5, #0]
 800b000:	d501      	bpl.n	800b006 <_printf_i+0xbe>
 800b002:	681e      	ldr	r6, [r3, #0]
 800b004:	e003      	b.n	800b00e <_printf_i+0xc6>
 800b006:	0646      	lsls	r6, r0, #25
 800b008:	d5fb      	bpl.n	800b002 <_printf_i+0xba>
 800b00a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b00e:	2e00      	cmp	r6, #0
 800b010:	da03      	bge.n	800b01a <_printf_i+0xd2>
 800b012:	232d      	movs	r3, #45	; 0x2d
 800b014:	4276      	negs	r6, r6
 800b016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b01a:	230a      	movs	r3, #10
 800b01c:	4859      	ldr	r0, [pc, #356]	; (800b184 <_printf_i+0x23c>)
 800b01e:	e012      	b.n	800b046 <_printf_i+0xfe>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	6820      	ldr	r0, [r4, #0]
 800b024:	1d19      	adds	r1, r3, #4
 800b026:	6029      	str	r1, [r5, #0]
 800b028:	0605      	lsls	r5, r0, #24
 800b02a:	d501      	bpl.n	800b030 <_printf_i+0xe8>
 800b02c:	681e      	ldr	r6, [r3, #0]
 800b02e:	e002      	b.n	800b036 <_printf_i+0xee>
 800b030:	0641      	lsls	r1, r0, #25
 800b032:	d5fb      	bpl.n	800b02c <_printf_i+0xe4>
 800b034:	881e      	ldrh	r6, [r3, #0]
 800b036:	2f6f      	cmp	r7, #111	; 0x6f
 800b038:	bf0c      	ite	eq
 800b03a:	2308      	moveq	r3, #8
 800b03c:	230a      	movne	r3, #10
 800b03e:	4851      	ldr	r0, [pc, #324]	; (800b184 <_printf_i+0x23c>)
 800b040:	2100      	movs	r1, #0
 800b042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b046:	6865      	ldr	r5, [r4, #4]
 800b048:	2d00      	cmp	r5, #0
 800b04a:	bfa8      	it	ge
 800b04c:	6821      	ldrge	r1, [r4, #0]
 800b04e:	60a5      	str	r5, [r4, #8]
 800b050:	bfa4      	itt	ge
 800b052:	f021 0104 	bicge.w	r1, r1, #4
 800b056:	6021      	strge	r1, [r4, #0]
 800b058:	b90e      	cbnz	r6, 800b05e <_printf_i+0x116>
 800b05a:	2d00      	cmp	r5, #0
 800b05c:	d04b      	beq.n	800b0f6 <_printf_i+0x1ae>
 800b05e:	4615      	mov	r5, r2
 800b060:	fbb6 f1f3 	udiv	r1, r6, r3
 800b064:	fb03 6711 	mls	r7, r3, r1, r6
 800b068:	5dc7      	ldrb	r7, [r0, r7]
 800b06a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b06e:	4637      	mov	r7, r6
 800b070:	42bb      	cmp	r3, r7
 800b072:	460e      	mov	r6, r1
 800b074:	d9f4      	bls.n	800b060 <_printf_i+0x118>
 800b076:	2b08      	cmp	r3, #8
 800b078:	d10b      	bne.n	800b092 <_printf_i+0x14a>
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	07de      	lsls	r6, r3, #31
 800b07e:	d508      	bpl.n	800b092 <_printf_i+0x14a>
 800b080:	6923      	ldr	r3, [r4, #16]
 800b082:	6861      	ldr	r1, [r4, #4]
 800b084:	4299      	cmp	r1, r3
 800b086:	bfde      	ittt	le
 800b088:	2330      	movle	r3, #48	; 0x30
 800b08a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b08e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b092:	1b52      	subs	r2, r2, r5
 800b094:	6122      	str	r2, [r4, #16]
 800b096:	464b      	mov	r3, r9
 800b098:	4621      	mov	r1, r4
 800b09a:	4640      	mov	r0, r8
 800b09c:	f8cd a000 	str.w	sl, [sp]
 800b0a0:	aa03      	add	r2, sp, #12
 800b0a2:	f7ff fedf 	bl	800ae64 <_printf_common>
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	d14a      	bne.n	800b140 <_printf_i+0x1f8>
 800b0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ae:	b004      	add	sp, #16
 800b0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	f043 0320 	orr.w	r3, r3, #32
 800b0ba:	6023      	str	r3, [r4, #0]
 800b0bc:	2778      	movs	r7, #120	; 0x78
 800b0be:	4832      	ldr	r0, [pc, #200]	; (800b188 <_printf_i+0x240>)
 800b0c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	6829      	ldr	r1, [r5, #0]
 800b0c8:	061f      	lsls	r7, r3, #24
 800b0ca:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0ce:	d402      	bmi.n	800b0d6 <_printf_i+0x18e>
 800b0d0:	065f      	lsls	r7, r3, #25
 800b0d2:	bf48      	it	mi
 800b0d4:	b2b6      	uxthmi	r6, r6
 800b0d6:	07df      	lsls	r7, r3, #31
 800b0d8:	bf48      	it	mi
 800b0da:	f043 0320 	orrmi.w	r3, r3, #32
 800b0de:	6029      	str	r1, [r5, #0]
 800b0e0:	bf48      	it	mi
 800b0e2:	6023      	strmi	r3, [r4, #0]
 800b0e4:	b91e      	cbnz	r6, 800b0ee <_printf_i+0x1a6>
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	f023 0320 	bic.w	r3, r3, #32
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	2310      	movs	r3, #16
 800b0f0:	e7a6      	b.n	800b040 <_printf_i+0xf8>
 800b0f2:	4824      	ldr	r0, [pc, #144]	; (800b184 <_printf_i+0x23c>)
 800b0f4:	e7e4      	b.n	800b0c0 <_printf_i+0x178>
 800b0f6:	4615      	mov	r5, r2
 800b0f8:	e7bd      	b.n	800b076 <_printf_i+0x12e>
 800b0fa:	682b      	ldr	r3, [r5, #0]
 800b0fc:	6826      	ldr	r6, [r4, #0]
 800b0fe:	1d18      	adds	r0, r3, #4
 800b100:	6961      	ldr	r1, [r4, #20]
 800b102:	6028      	str	r0, [r5, #0]
 800b104:	0635      	lsls	r5, r6, #24
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	d501      	bpl.n	800b10e <_printf_i+0x1c6>
 800b10a:	6019      	str	r1, [r3, #0]
 800b10c:	e002      	b.n	800b114 <_printf_i+0x1cc>
 800b10e:	0670      	lsls	r0, r6, #25
 800b110:	d5fb      	bpl.n	800b10a <_printf_i+0x1c2>
 800b112:	8019      	strh	r1, [r3, #0]
 800b114:	2300      	movs	r3, #0
 800b116:	4615      	mov	r5, r2
 800b118:	6123      	str	r3, [r4, #16]
 800b11a:	e7bc      	b.n	800b096 <_printf_i+0x14e>
 800b11c:	682b      	ldr	r3, [r5, #0]
 800b11e:	2100      	movs	r1, #0
 800b120:	1d1a      	adds	r2, r3, #4
 800b122:	602a      	str	r2, [r5, #0]
 800b124:	681d      	ldr	r5, [r3, #0]
 800b126:	6862      	ldr	r2, [r4, #4]
 800b128:	4628      	mov	r0, r5
 800b12a:	f000 fd49 	bl	800bbc0 <memchr>
 800b12e:	b108      	cbz	r0, 800b134 <_printf_i+0x1ec>
 800b130:	1b40      	subs	r0, r0, r5
 800b132:	6060      	str	r0, [r4, #4]
 800b134:	6863      	ldr	r3, [r4, #4]
 800b136:	6123      	str	r3, [r4, #16]
 800b138:	2300      	movs	r3, #0
 800b13a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b13e:	e7aa      	b.n	800b096 <_printf_i+0x14e>
 800b140:	462a      	mov	r2, r5
 800b142:	4649      	mov	r1, r9
 800b144:	4640      	mov	r0, r8
 800b146:	6923      	ldr	r3, [r4, #16]
 800b148:	47d0      	blx	sl
 800b14a:	3001      	adds	r0, #1
 800b14c:	d0ad      	beq.n	800b0aa <_printf_i+0x162>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	079b      	lsls	r3, r3, #30
 800b152:	d413      	bmi.n	800b17c <_printf_i+0x234>
 800b154:	68e0      	ldr	r0, [r4, #12]
 800b156:	9b03      	ldr	r3, [sp, #12]
 800b158:	4298      	cmp	r0, r3
 800b15a:	bfb8      	it	lt
 800b15c:	4618      	movlt	r0, r3
 800b15e:	e7a6      	b.n	800b0ae <_printf_i+0x166>
 800b160:	2301      	movs	r3, #1
 800b162:	4632      	mov	r2, r6
 800b164:	4649      	mov	r1, r9
 800b166:	4640      	mov	r0, r8
 800b168:	47d0      	blx	sl
 800b16a:	3001      	adds	r0, #1
 800b16c:	d09d      	beq.n	800b0aa <_printf_i+0x162>
 800b16e:	3501      	adds	r5, #1
 800b170:	68e3      	ldr	r3, [r4, #12]
 800b172:	9903      	ldr	r1, [sp, #12]
 800b174:	1a5b      	subs	r3, r3, r1
 800b176:	42ab      	cmp	r3, r5
 800b178:	dcf2      	bgt.n	800b160 <_printf_i+0x218>
 800b17a:	e7eb      	b.n	800b154 <_printf_i+0x20c>
 800b17c:	2500      	movs	r5, #0
 800b17e:	f104 0619 	add.w	r6, r4, #25
 800b182:	e7f5      	b.n	800b170 <_printf_i+0x228>
 800b184:	0800f32e 	.word	0x0800f32e
 800b188:	0800f33f 	.word	0x0800f33f

0800b18c <_scanf_float>:
 800b18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b190:	b087      	sub	sp, #28
 800b192:	9303      	str	r3, [sp, #12]
 800b194:	688b      	ldr	r3, [r1, #8]
 800b196:	4617      	mov	r7, r2
 800b198:	1e5a      	subs	r2, r3, #1
 800b19a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b19e:	bf85      	ittet	hi
 800b1a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b1a4:	195b      	addhi	r3, r3, r5
 800b1a6:	2300      	movls	r3, #0
 800b1a8:	9302      	strhi	r3, [sp, #8]
 800b1aa:	bf88      	it	hi
 800b1ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b1b0:	468b      	mov	fp, r1
 800b1b2:	f04f 0500 	mov.w	r5, #0
 800b1b6:	bf8c      	ite	hi
 800b1b8:	608b      	strhi	r3, [r1, #8]
 800b1ba:	9302      	strls	r3, [sp, #8]
 800b1bc:	680b      	ldr	r3, [r1, #0]
 800b1be:	4680      	mov	r8, r0
 800b1c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b1c4:	f84b 3b1c 	str.w	r3, [fp], #28
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	465e      	mov	r6, fp
 800b1cc:	46aa      	mov	sl, r5
 800b1ce:	46a9      	mov	r9, r5
 800b1d0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b1d4:	9501      	str	r5, [sp, #4]
 800b1d6:	68a2      	ldr	r2, [r4, #8]
 800b1d8:	b152      	cbz	r2, 800b1f0 <_scanf_float+0x64>
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	2b4e      	cmp	r3, #78	; 0x4e
 800b1e0:	d864      	bhi.n	800b2ac <_scanf_float+0x120>
 800b1e2:	2b40      	cmp	r3, #64	; 0x40
 800b1e4:	d83c      	bhi.n	800b260 <_scanf_float+0xd4>
 800b1e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b1ea:	b2c8      	uxtb	r0, r1
 800b1ec:	280e      	cmp	r0, #14
 800b1ee:	d93a      	bls.n	800b266 <_scanf_float+0xda>
 800b1f0:	f1b9 0f00 	cmp.w	r9, #0
 800b1f4:	d003      	beq.n	800b1fe <_scanf_float+0x72>
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b202:	f1ba 0f01 	cmp.w	sl, #1
 800b206:	f200 8113 	bhi.w	800b430 <_scanf_float+0x2a4>
 800b20a:	455e      	cmp	r6, fp
 800b20c:	f200 8105 	bhi.w	800b41a <_scanf_float+0x28e>
 800b210:	2501      	movs	r5, #1
 800b212:	4628      	mov	r0, r5
 800b214:	b007      	add	sp, #28
 800b216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b21e:	2a0d      	cmp	r2, #13
 800b220:	d8e6      	bhi.n	800b1f0 <_scanf_float+0x64>
 800b222:	a101      	add	r1, pc, #4	; (adr r1, 800b228 <_scanf_float+0x9c>)
 800b224:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b228:	0800b367 	.word	0x0800b367
 800b22c:	0800b1f1 	.word	0x0800b1f1
 800b230:	0800b1f1 	.word	0x0800b1f1
 800b234:	0800b1f1 	.word	0x0800b1f1
 800b238:	0800b3c7 	.word	0x0800b3c7
 800b23c:	0800b39f 	.word	0x0800b39f
 800b240:	0800b1f1 	.word	0x0800b1f1
 800b244:	0800b1f1 	.word	0x0800b1f1
 800b248:	0800b375 	.word	0x0800b375
 800b24c:	0800b1f1 	.word	0x0800b1f1
 800b250:	0800b1f1 	.word	0x0800b1f1
 800b254:	0800b1f1 	.word	0x0800b1f1
 800b258:	0800b1f1 	.word	0x0800b1f1
 800b25c:	0800b32d 	.word	0x0800b32d
 800b260:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b264:	e7db      	b.n	800b21e <_scanf_float+0x92>
 800b266:	290e      	cmp	r1, #14
 800b268:	d8c2      	bhi.n	800b1f0 <_scanf_float+0x64>
 800b26a:	a001      	add	r0, pc, #4	; (adr r0, 800b270 <_scanf_float+0xe4>)
 800b26c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b270:	0800b31f 	.word	0x0800b31f
 800b274:	0800b1f1 	.word	0x0800b1f1
 800b278:	0800b31f 	.word	0x0800b31f
 800b27c:	0800b3b3 	.word	0x0800b3b3
 800b280:	0800b1f1 	.word	0x0800b1f1
 800b284:	0800b2cd 	.word	0x0800b2cd
 800b288:	0800b309 	.word	0x0800b309
 800b28c:	0800b309 	.word	0x0800b309
 800b290:	0800b309 	.word	0x0800b309
 800b294:	0800b309 	.word	0x0800b309
 800b298:	0800b309 	.word	0x0800b309
 800b29c:	0800b309 	.word	0x0800b309
 800b2a0:	0800b309 	.word	0x0800b309
 800b2a4:	0800b309 	.word	0x0800b309
 800b2a8:	0800b309 	.word	0x0800b309
 800b2ac:	2b6e      	cmp	r3, #110	; 0x6e
 800b2ae:	d809      	bhi.n	800b2c4 <_scanf_float+0x138>
 800b2b0:	2b60      	cmp	r3, #96	; 0x60
 800b2b2:	d8b2      	bhi.n	800b21a <_scanf_float+0x8e>
 800b2b4:	2b54      	cmp	r3, #84	; 0x54
 800b2b6:	d077      	beq.n	800b3a8 <_scanf_float+0x21c>
 800b2b8:	2b59      	cmp	r3, #89	; 0x59
 800b2ba:	d199      	bne.n	800b1f0 <_scanf_float+0x64>
 800b2bc:	2d07      	cmp	r5, #7
 800b2be:	d197      	bne.n	800b1f0 <_scanf_float+0x64>
 800b2c0:	2508      	movs	r5, #8
 800b2c2:	e029      	b.n	800b318 <_scanf_float+0x18c>
 800b2c4:	2b74      	cmp	r3, #116	; 0x74
 800b2c6:	d06f      	beq.n	800b3a8 <_scanf_float+0x21c>
 800b2c8:	2b79      	cmp	r3, #121	; 0x79
 800b2ca:	e7f6      	b.n	800b2ba <_scanf_float+0x12e>
 800b2cc:	6821      	ldr	r1, [r4, #0]
 800b2ce:	05c8      	lsls	r0, r1, #23
 800b2d0:	d51a      	bpl.n	800b308 <_scanf_float+0x17c>
 800b2d2:	9b02      	ldr	r3, [sp, #8]
 800b2d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b2d8:	6021      	str	r1, [r4, #0]
 800b2da:	f109 0901 	add.w	r9, r9, #1
 800b2de:	b11b      	cbz	r3, 800b2e8 <_scanf_float+0x15c>
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	3201      	adds	r2, #1
 800b2e4:	9302      	str	r3, [sp, #8]
 800b2e6:	60a2      	str	r2, [r4, #8]
 800b2e8:	68a3      	ldr	r3, [r4, #8]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	60a3      	str	r3, [r4, #8]
 800b2ee:	6923      	ldr	r3, [r4, #16]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	6123      	str	r3, [r4, #16]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	607b      	str	r3, [r7, #4]
 800b2fc:	f340 8084 	ble.w	800b408 <_scanf_float+0x27c>
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	3301      	adds	r3, #1
 800b304:	603b      	str	r3, [r7, #0]
 800b306:	e766      	b.n	800b1d6 <_scanf_float+0x4a>
 800b308:	eb1a 0f05 	cmn.w	sl, r5
 800b30c:	f47f af70 	bne.w	800b1f0 <_scanf_float+0x64>
 800b310:	6822      	ldr	r2, [r4, #0]
 800b312:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b316:	6022      	str	r2, [r4, #0]
 800b318:	f806 3b01 	strb.w	r3, [r6], #1
 800b31c:	e7e4      	b.n	800b2e8 <_scanf_float+0x15c>
 800b31e:	6822      	ldr	r2, [r4, #0]
 800b320:	0610      	lsls	r0, r2, #24
 800b322:	f57f af65 	bpl.w	800b1f0 <_scanf_float+0x64>
 800b326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b32a:	e7f4      	b.n	800b316 <_scanf_float+0x18a>
 800b32c:	f1ba 0f00 	cmp.w	sl, #0
 800b330:	d10e      	bne.n	800b350 <_scanf_float+0x1c4>
 800b332:	f1b9 0f00 	cmp.w	r9, #0
 800b336:	d10e      	bne.n	800b356 <_scanf_float+0x1ca>
 800b338:	6822      	ldr	r2, [r4, #0]
 800b33a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b33e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b342:	d108      	bne.n	800b356 <_scanf_float+0x1ca>
 800b344:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b348:	f04f 0a01 	mov.w	sl, #1
 800b34c:	6022      	str	r2, [r4, #0]
 800b34e:	e7e3      	b.n	800b318 <_scanf_float+0x18c>
 800b350:	f1ba 0f02 	cmp.w	sl, #2
 800b354:	d055      	beq.n	800b402 <_scanf_float+0x276>
 800b356:	2d01      	cmp	r5, #1
 800b358:	d002      	beq.n	800b360 <_scanf_float+0x1d4>
 800b35a:	2d04      	cmp	r5, #4
 800b35c:	f47f af48 	bne.w	800b1f0 <_scanf_float+0x64>
 800b360:	3501      	adds	r5, #1
 800b362:	b2ed      	uxtb	r5, r5
 800b364:	e7d8      	b.n	800b318 <_scanf_float+0x18c>
 800b366:	f1ba 0f01 	cmp.w	sl, #1
 800b36a:	f47f af41 	bne.w	800b1f0 <_scanf_float+0x64>
 800b36e:	f04f 0a02 	mov.w	sl, #2
 800b372:	e7d1      	b.n	800b318 <_scanf_float+0x18c>
 800b374:	b97d      	cbnz	r5, 800b396 <_scanf_float+0x20a>
 800b376:	f1b9 0f00 	cmp.w	r9, #0
 800b37a:	f47f af3c 	bne.w	800b1f6 <_scanf_float+0x6a>
 800b37e:	6822      	ldr	r2, [r4, #0]
 800b380:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b384:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b388:	f47f af39 	bne.w	800b1fe <_scanf_float+0x72>
 800b38c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b390:	2501      	movs	r5, #1
 800b392:	6022      	str	r2, [r4, #0]
 800b394:	e7c0      	b.n	800b318 <_scanf_float+0x18c>
 800b396:	2d03      	cmp	r5, #3
 800b398:	d0e2      	beq.n	800b360 <_scanf_float+0x1d4>
 800b39a:	2d05      	cmp	r5, #5
 800b39c:	e7de      	b.n	800b35c <_scanf_float+0x1d0>
 800b39e:	2d02      	cmp	r5, #2
 800b3a0:	f47f af26 	bne.w	800b1f0 <_scanf_float+0x64>
 800b3a4:	2503      	movs	r5, #3
 800b3a6:	e7b7      	b.n	800b318 <_scanf_float+0x18c>
 800b3a8:	2d06      	cmp	r5, #6
 800b3aa:	f47f af21 	bne.w	800b1f0 <_scanf_float+0x64>
 800b3ae:	2507      	movs	r5, #7
 800b3b0:	e7b2      	b.n	800b318 <_scanf_float+0x18c>
 800b3b2:	6822      	ldr	r2, [r4, #0]
 800b3b4:	0591      	lsls	r1, r2, #22
 800b3b6:	f57f af1b 	bpl.w	800b1f0 <_scanf_float+0x64>
 800b3ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b3be:	6022      	str	r2, [r4, #0]
 800b3c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3c4:	e7a8      	b.n	800b318 <_scanf_float+0x18c>
 800b3c6:	6822      	ldr	r2, [r4, #0]
 800b3c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b3cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b3d0:	d006      	beq.n	800b3e0 <_scanf_float+0x254>
 800b3d2:	0550      	lsls	r0, r2, #21
 800b3d4:	f57f af0c 	bpl.w	800b1f0 <_scanf_float+0x64>
 800b3d8:	f1b9 0f00 	cmp.w	r9, #0
 800b3dc:	f43f af0f 	beq.w	800b1fe <_scanf_float+0x72>
 800b3e0:	0591      	lsls	r1, r2, #22
 800b3e2:	bf58      	it	pl
 800b3e4:	9901      	ldrpl	r1, [sp, #4]
 800b3e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b3ea:	bf58      	it	pl
 800b3ec:	eba9 0101 	subpl.w	r1, r9, r1
 800b3f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b3f4:	f04f 0900 	mov.w	r9, #0
 800b3f8:	bf58      	it	pl
 800b3fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b3fe:	6022      	str	r2, [r4, #0]
 800b400:	e78a      	b.n	800b318 <_scanf_float+0x18c>
 800b402:	f04f 0a03 	mov.w	sl, #3
 800b406:	e787      	b.n	800b318 <_scanf_float+0x18c>
 800b408:	4639      	mov	r1, r7
 800b40a:	4640      	mov	r0, r8
 800b40c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b410:	4798      	blx	r3
 800b412:	2800      	cmp	r0, #0
 800b414:	f43f aedf 	beq.w	800b1d6 <_scanf_float+0x4a>
 800b418:	e6ea      	b.n	800b1f0 <_scanf_float+0x64>
 800b41a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b41e:	463a      	mov	r2, r7
 800b420:	4640      	mov	r0, r8
 800b422:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b426:	4798      	blx	r3
 800b428:	6923      	ldr	r3, [r4, #16]
 800b42a:	3b01      	subs	r3, #1
 800b42c:	6123      	str	r3, [r4, #16]
 800b42e:	e6ec      	b.n	800b20a <_scanf_float+0x7e>
 800b430:	1e6b      	subs	r3, r5, #1
 800b432:	2b06      	cmp	r3, #6
 800b434:	d825      	bhi.n	800b482 <_scanf_float+0x2f6>
 800b436:	2d02      	cmp	r5, #2
 800b438:	d836      	bhi.n	800b4a8 <_scanf_float+0x31c>
 800b43a:	455e      	cmp	r6, fp
 800b43c:	f67f aee8 	bls.w	800b210 <_scanf_float+0x84>
 800b440:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b444:	463a      	mov	r2, r7
 800b446:	4640      	mov	r0, r8
 800b448:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b44c:	4798      	blx	r3
 800b44e:	6923      	ldr	r3, [r4, #16]
 800b450:	3b01      	subs	r3, #1
 800b452:	6123      	str	r3, [r4, #16]
 800b454:	e7f1      	b.n	800b43a <_scanf_float+0x2ae>
 800b456:	9802      	ldr	r0, [sp, #8]
 800b458:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b45c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b460:	463a      	mov	r2, r7
 800b462:	9002      	str	r0, [sp, #8]
 800b464:	4640      	mov	r0, r8
 800b466:	4798      	blx	r3
 800b468:	6923      	ldr	r3, [r4, #16]
 800b46a:	3b01      	subs	r3, #1
 800b46c:	6123      	str	r3, [r4, #16]
 800b46e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b472:	fa5f fa8a 	uxtb.w	sl, sl
 800b476:	f1ba 0f02 	cmp.w	sl, #2
 800b47a:	d1ec      	bne.n	800b456 <_scanf_float+0x2ca>
 800b47c:	3d03      	subs	r5, #3
 800b47e:	b2ed      	uxtb	r5, r5
 800b480:	1b76      	subs	r6, r6, r5
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	05da      	lsls	r2, r3, #23
 800b486:	d52f      	bpl.n	800b4e8 <_scanf_float+0x35c>
 800b488:	055b      	lsls	r3, r3, #21
 800b48a:	d510      	bpl.n	800b4ae <_scanf_float+0x322>
 800b48c:	455e      	cmp	r6, fp
 800b48e:	f67f aebf 	bls.w	800b210 <_scanf_float+0x84>
 800b492:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b496:	463a      	mov	r2, r7
 800b498:	4640      	mov	r0, r8
 800b49a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b49e:	4798      	blx	r3
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	6123      	str	r3, [r4, #16]
 800b4a6:	e7f1      	b.n	800b48c <_scanf_float+0x300>
 800b4a8:	46aa      	mov	sl, r5
 800b4aa:	9602      	str	r6, [sp, #8]
 800b4ac:	e7df      	b.n	800b46e <_scanf_float+0x2e2>
 800b4ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b4b2:	6923      	ldr	r3, [r4, #16]
 800b4b4:	2965      	cmp	r1, #101	; 0x65
 800b4b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4ba:	f106 35ff 	add.w	r5, r6, #4294967295
 800b4be:	6123      	str	r3, [r4, #16]
 800b4c0:	d00c      	beq.n	800b4dc <_scanf_float+0x350>
 800b4c2:	2945      	cmp	r1, #69	; 0x45
 800b4c4:	d00a      	beq.n	800b4dc <_scanf_float+0x350>
 800b4c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4ca:	463a      	mov	r2, r7
 800b4cc:	4640      	mov	r0, r8
 800b4ce:	4798      	blx	r3
 800b4d0:	6923      	ldr	r3, [r4, #16]
 800b4d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	1eb5      	subs	r5, r6, #2
 800b4da:	6123      	str	r3, [r4, #16]
 800b4dc:	463a      	mov	r2, r7
 800b4de:	4640      	mov	r0, r8
 800b4e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4e4:	4798      	blx	r3
 800b4e6:	462e      	mov	r6, r5
 800b4e8:	6825      	ldr	r5, [r4, #0]
 800b4ea:	f015 0510 	ands.w	r5, r5, #16
 800b4ee:	d155      	bne.n	800b59c <_scanf_float+0x410>
 800b4f0:	7035      	strb	r5, [r6, #0]
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b4f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4fc:	d11d      	bne.n	800b53a <_scanf_float+0x3ae>
 800b4fe:	9b01      	ldr	r3, [sp, #4]
 800b500:	454b      	cmp	r3, r9
 800b502:	eba3 0209 	sub.w	r2, r3, r9
 800b506:	d125      	bne.n	800b554 <_scanf_float+0x3c8>
 800b508:	2200      	movs	r2, #0
 800b50a:	4659      	mov	r1, fp
 800b50c:	4640      	mov	r0, r8
 800b50e:	f7ff f917 	bl	800a740 <_strtod_r>
 800b512:	9b03      	ldr	r3, [sp, #12]
 800b514:	f8d4 c000 	ldr.w	ip, [r4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f01c 0f02 	tst.w	ip, #2
 800b51e:	4606      	mov	r6, r0
 800b520:	460f      	mov	r7, r1
 800b522:	f103 0204 	add.w	r2, r3, #4
 800b526:	d020      	beq.n	800b56a <_scanf_float+0x3de>
 800b528:	9903      	ldr	r1, [sp, #12]
 800b52a:	600a      	str	r2, [r1, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	e9c3 6700 	strd	r6, r7, [r3]
 800b532:	68e3      	ldr	r3, [r4, #12]
 800b534:	3301      	adds	r3, #1
 800b536:	60e3      	str	r3, [r4, #12]
 800b538:	e66b      	b.n	800b212 <_scanf_float+0x86>
 800b53a:	9b04      	ldr	r3, [sp, #16]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0e3      	beq.n	800b508 <_scanf_float+0x37c>
 800b540:	9905      	ldr	r1, [sp, #20]
 800b542:	230a      	movs	r3, #10
 800b544:	462a      	mov	r2, r5
 800b546:	4640      	mov	r0, r8
 800b548:	3101      	adds	r1, #1
 800b54a:	f7ff f97d 	bl	800a848 <_strtol_r>
 800b54e:	9b04      	ldr	r3, [sp, #16]
 800b550:	9e05      	ldr	r6, [sp, #20]
 800b552:	1ac2      	subs	r2, r0, r3
 800b554:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b558:	429e      	cmp	r6, r3
 800b55a:	bf28      	it	cs
 800b55c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b560:	4630      	mov	r0, r6
 800b562:	490f      	ldr	r1, [pc, #60]	; (800b5a0 <_scanf_float+0x414>)
 800b564:	f000 f93e 	bl	800b7e4 <siprintf>
 800b568:	e7ce      	b.n	800b508 <_scanf_float+0x37c>
 800b56a:	f01c 0f04 	tst.w	ip, #4
 800b56e:	d1db      	bne.n	800b528 <_scanf_float+0x39c>
 800b570:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b574:	f8cc 2000 	str.w	r2, [ip]
 800b578:	f8d3 8000 	ldr.w	r8, [r3]
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
 800b580:	f7f5 fa44 	bl	8000a0c <__aeabi_dcmpun>
 800b584:	b128      	cbz	r0, 800b592 <_scanf_float+0x406>
 800b586:	4807      	ldr	r0, [pc, #28]	; (800b5a4 <_scanf_float+0x418>)
 800b588:	f000 fb3c 	bl	800bc04 <nanf>
 800b58c:	f8c8 0000 	str.w	r0, [r8]
 800b590:	e7cf      	b.n	800b532 <_scanf_float+0x3a6>
 800b592:	4630      	mov	r0, r6
 800b594:	4639      	mov	r1, r7
 800b596:	f7f5 fa97 	bl	8000ac8 <__aeabi_d2f>
 800b59a:	e7f7      	b.n	800b58c <_scanf_float+0x400>
 800b59c:	2500      	movs	r5, #0
 800b59e:	e638      	b.n	800b212 <_scanf_float+0x86>
 800b5a0:	0800f350 	.word	0x0800f350
 800b5a4:	0800f60b 	.word	0x0800f60b

0800b5a8 <std>:
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	b510      	push	{r4, lr}
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b5b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5b6:	6083      	str	r3, [r0, #8]
 800b5b8:	8181      	strh	r1, [r0, #12]
 800b5ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b5bc:	81c2      	strh	r2, [r0, #14]
 800b5be:	6183      	str	r3, [r0, #24]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	2208      	movs	r2, #8
 800b5c4:	305c      	adds	r0, #92	; 0x5c
 800b5c6:	f000 fa31 	bl	800ba2c <memset>
 800b5ca:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <std+0x38>)
 800b5cc:	6224      	str	r4, [r4, #32]
 800b5ce:	6263      	str	r3, [r4, #36]	; 0x24
 800b5d0:	4b04      	ldr	r3, [pc, #16]	; (800b5e4 <std+0x3c>)
 800b5d2:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5d4:	4b04      	ldr	r3, [pc, #16]	; (800b5e8 <std+0x40>)
 800b5d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5d8:	4b04      	ldr	r3, [pc, #16]	; (800b5ec <std+0x44>)
 800b5da:	6323      	str	r3, [r4, #48]	; 0x30
 800b5dc:	bd10      	pop	{r4, pc}
 800b5de:	bf00      	nop
 800b5e0:	0800b879 	.word	0x0800b879
 800b5e4:	0800b89f 	.word	0x0800b89f
 800b5e8:	0800b8d7 	.word	0x0800b8d7
 800b5ec:	0800b8fb 	.word	0x0800b8fb

0800b5f0 <stdio_exit_handler>:
 800b5f0:	4a02      	ldr	r2, [pc, #8]	; (800b5fc <stdio_exit_handler+0xc>)
 800b5f2:	4903      	ldr	r1, [pc, #12]	; (800b600 <stdio_exit_handler+0x10>)
 800b5f4:	4803      	ldr	r0, [pc, #12]	; (800b604 <stdio_exit_handler+0x14>)
 800b5f6:	f000 b869 	b.w	800b6cc <_fwalk_sglue>
 800b5fa:	bf00      	nop
 800b5fc:	20000060 	.word	0x20000060
 800b600:	0800e629 	.word	0x0800e629
 800b604:	200001d8 	.word	0x200001d8

0800b608 <cleanup_stdio>:
 800b608:	6841      	ldr	r1, [r0, #4]
 800b60a:	4b0c      	ldr	r3, [pc, #48]	; (800b63c <cleanup_stdio+0x34>)
 800b60c:	b510      	push	{r4, lr}
 800b60e:	4299      	cmp	r1, r3
 800b610:	4604      	mov	r4, r0
 800b612:	d001      	beq.n	800b618 <cleanup_stdio+0x10>
 800b614:	f003 f808 	bl	800e628 <_fflush_r>
 800b618:	68a1      	ldr	r1, [r4, #8]
 800b61a:	4b09      	ldr	r3, [pc, #36]	; (800b640 <cleanup_stdio+0x38>)
 800b61c:	4299      	cmp	r1, r3
 800b61e:	d002      	beq.n	800b626 <cleanup_stdio+0x1e>
 800b620:	4620      	mov	r0, r4
 800b622:	f003 f801 	bl	800e628 <_fflush_r>
 800b626:	68e1      	ldr	r1, [r4, #12]
 800b628:	4b06      	ldr	r3, [pc, #24]	; (800b644 <cleanup_stdio+0x3c>)
 800b62a:	4299      	cmp	r1, r3
 800b62c:	d004      	beq.n	800b638 <cleanup_stdio+0x30>
 800b62e:	4620      	mov	r0, r4
 800b630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b634:	f002 bff8 	b.w	800e628 <_fflush_r>
 800b638:	bd10      	pop	{r4, pc}
 800b63a:	bf00      	nop
 800b63c:	20000994 	.word	0x20000994
 800b640:	200009fc 	.word	0x200009fc
 800b644:	20000a64 	.word	0x20000a64

0800b648 <global_stdio_init.part.0>:
 800b648:	b510      	push	{r4, lr}
 800b64a:	4b0b      	ldr	r3, [pc, #44]	; (800b678 <global_stdio_init.part.0+0x30>)
 800b64c:	4c0b      	ldr	r4, [pc, #44]	; (800b67c <global_stdio_init.part.0+0x34>)
 800b64e:	4a0c      	ldr	r2, [pc, #48]	; (800b680 <global_stdio_init.part.0+0x38>)
 800b650:	4620      	mov	r0, r4
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	2104      	movs	r1, #4
 800b656:	2200      	movs	r2, #0
 800b658:	f7ff ffa6 	bl	800b5a8 <std>
 800b65c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b660:	2201      	movs	r2, #1
 800b662:	2109      	movs	r1, #9
 800b664:	f7ff ffa0 	bl	800b5a8 <std>
 800b668:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b66c:	2202      	movs	r2, #2
 800b66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b672:	2112      	movs	r1, #18
 800b674:	f7ff bf98 	b.w	800b5a8 <std>
 800b678:	20000acc 	.word	0x20000acc
 800b67c:	20000994 	.word	0x20000994
 800b680:	0800b5f1 	.word	0x0800b5f1

0800b684 <__sfp_lock_acquire>:
 800b684:	4801      	ldr	r0, [pc, #4]	; (800b68c <__sfp_lock_acquire+0x8>)
 800b686:	f000 ba91 	b.w	800bbac <__retarget_lock_acquire_recursive>
 800b68a:	bf00      	nop
 800b68c:	20000ad5 	.word	0x20000ad5

0800b690 <__sfp_lock_release>:
 800b690:	4801      	ldr	r0, [pc, #4]	; (800b698 <__sfp_lock_release+0x8>)
 800b692:	f000 ba8c 	b.w	800bbae <__retarget_lock_release_recursive>
 800b696:	bf00      	nop
 800b698:	20000ad5 	.word	0x20000ad5

0800b69c <__sinit>:
 800b69c:	b510      	push	{r4, lr}
 800b69e:	4604      	mov	r4, r0
 800b6a0:	f7ff fff0 	bl	800b684 <__sfp_lock_acquire>
 800b6a4:	6a23      	ldr	r3, [r4, #32]
 800b6a6:	b11b      	cbz	r3, 800b6b0 <__sinit+0x14>
 800b6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6ac:	f7ff bff0 	b.w	800b690 <__sfp_lock_release>
 800b6b0:	4b04      	ldr	r3, [pc, #16]	; (800b6c4 <__sinit+0x28>)
 800b6b2:	6223      	str	r3, [r4, #32]
 800b6b4:	4b04      	ldr	r3, [pc, #16]	; (800b6c8 <__sinit+0x2c>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1f5      	bne.n	800b6a8 <__sinit+0xc>
 800b6bc:	f7ff ffc4 	bl	800b648 <global_stdio_init.part.0>
 800b6c0:	e7f2      	b.n	800b6a8 <__sinit+0xc>
 800b6c2:	bf00      	nop
 800b6c4:	0800b609 	.word	0x0800b609
 800b6c8:	20000acc 	.word	0x20000acc

0800b6cc <_fwalk_sglue>:
 800b6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6d0:	4607      	mov	r7, r0
 800b6d2:	4688      	mov	r8, r1
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	2600      	movs	r6, #0
 800b6d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6dc:	f1b9 0901 	subs.w	r9, r9, #1
 800b6e0:	d505      	bpl.n	800b6ee <_fwalk_sglue+0x22>
 800b6e2:	6824      	ldr	r4, [r4, #0]
 800b6e4:	2c00      	cmp	r4, #0
 800b6e6:	d1f7      	bne.n	800b6d8 <_fwalk_sglue+0xc>
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ee:	89ab      	ldrh	r3, [r5, #12]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d907      	bls.n	800b704 <_fwalk_sglue+0x38>
 800b6f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	d003      	beq.n	800b704 <_fwalk_sglue+0x38>
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	4638      	mov	r0, r7
 800b700:	47c0      	blx	r8
 800b702:	4306      	orrs	r6, r0
 800b704:	3568      	adds	r5, #104	; 0x68
 800b706:	e7e9      	b.n	800b6dc <_fwalk_sglue+0x10>

0800b708 <iprintf>:
 800b708:	b40f      	push	{r0, r1, r2, r3}
 800b70a:	b507      	push	{r0, r1, r2, lr}
 800b70c:	4906      	ldr	r1, [pc, #24]	; (800b728 <iprintf+0x20>)
 800b70e:	ab04      	add	r3, sp, #16
 800b710:	6808      	ldr	r0, [r1, #0]
 800b712:	f853 2b04 	ldr.w	r2, [r3], #4
 800b716:	6881      	ldr	r1, [r0, #8]
 800b718:	9301      	str	r3, [sp, #4]
 800b71a:	f002 fc9d 	bl	800e058 <_vfiprintf_r>
 800b71e:	b003      	add	sp, #12
 800b720:	f85d eb04 	ldr.w	lr, [sp], #4
 800b724:	b004      	add	sp, #16
 800b726:	4770      	bx	lr
 800b728:	20000224 	.word	0x20000224

0800b72c <_puts_r>:
 800b72c:	6a03      	ldr	r3, [r0, #32]
 800b72e:	b570      	push	{r4, r5, r6, lr}
 800b730:	4605      	mov	r5, r0
 800b732:	460e      	mov	r6, r1
 800b734:	6884      	ldr	r4, [r0, #8]
 800b736:	b90b      	cbnz	r3, 800b73c <_puts_r+0x10>
 800b738:	f7ff ffb0 	bl	800b69c <__sinit>
 800b73c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b73e:	07db      	lsls	r3, r3, #31
 800b740:	d405      	bmi.n	800b74e <_puts_r+0x22>
 800b742:	89a3      	ldrh	r3, [r4, #12]
 800b744:	0598      	lsls	r0, r3, #22
 800b746:	d402      	bmi.n	800b74e <_puts_r+0x22>
 800b748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b74a:	f000 fa2f 	bl	800bbac <__retarget_lock_acquire_recursive>
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	0719      	lsls	r1, r3, #28
 800b752:	d513      	bpl.n	800b77c <_puts_r+0x50>
 800b754:	6923      	ldr	r3, [r4, #16]
 800b756:	b18b      	cbz	r3, 800b77c <_puts_r+0x50>
 800b758:	3e01      	subs	r6, #1
 800b75a:	68a3      	ldr	r3, [r4, #8]
 800b75c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b760:	3b01      	subs	r3, #1
 800b762:	60a3      	str	r3, [r4, #8]
 800b764:	b9e9      	cbnz	r1, 800b7a2 <_puts_r+0x76>
 800b766:	2b00      	cmp	r3, #0
 800b768:	da2e      	bge.n	800b7c8 <_puts_r+0x9c>
 800b76a:	4622      	mov	r2, r4
 800b76c:	210a      	movs	r1, #10
 800b76e:	4628      	mov	r0, r5
 800b770:	f000 f8c7 	bl	800b902 <__swbuf_r>
 800b774:	3001      	adds	r0, #1
 800b776:	d007      	beq.n	800b788 <_puts_r+0x5c>
 800b778:	250a      	movs	r5, #10
 800b77a:	e007      	b.n	800b78c <_puts_r+0x60>
 800b77c:	4621      	mov	r1, r4
 800b77e:	4628      	mov	r0, r5
 800b780:	f000 f8fc 	bl	800b97c <__swsetup_r>
 800b784:	2800      	cmp	r0, #0
 800b786:	d0e7      	beq.n	800b758 <_puts_r+0x2c>
 800b788:	f04f 35ff 	mov.w	r5, #4294967295
 800b78c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b78e:	07da      	lsls	r2, r3, #31
 800b790:	d405      	bmi.n	800b79e <_puts_r+0x72>
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	059b      	lsls	r3, r3, #22
 800b796:	d402      	bmi.n	800b79e <_puts_r+0x72>
 800b798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b79a:	f000 fa08 	bl	800bbae <__retarget_lock_release_recursive>
 800b79e:	4628      	mov	r0, r5
 800b7a0:	bd70      	pop	{r4, r5, r6, pc}
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	da04      	bge.n	800b7b0 <_puts_r+0x84>
 800b7a6:	69a2      	ldr	r2, [r4, #24]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	dc06      	bgt.n	800b7ba <_puts_r+0x8e>
 800b7ac:	290a      	cmp	r1, #10
 800b7ae:	d004      	beq.n	800b7ba <_puts_r+0x8e>
 800b7b0:	6823      	ldr	r3, [r4, #0]
 800b7b2:	1c5a      	adds	r2, r3, #1
 800b7b4:	6022      	str	r2, [r4, #0]
 800b7b6:	7019      	strb	r1, [r3, #0]
 800b7b8:	e7cf      	b.n	800b75a <_puts_r+0x2e>
 800b7ba:	4622      	mov	r2, r4
 800b7bc:	4628      	mov	r0, r5
 800b7be:	f000 f8a0 	bl	800b902 <__swbuf_r>
 800b7c2:	3001      	adds	r0, #1
 800b7c4:	d1c9      	bne.n	800b75a <_puts_r+0x2e>
 800b7c6:	e7df      	b.n	800b788 <_puts_r+0x5c>
 800b7c8:	250a      	movs	r5, #10
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	1c5a      	adds	r2, r3, #1
 800b7ce:	6022      	str	r2, [r4, #0]
 800b7d0:	701d      	strb	r5, [r3, #0]
 800b7d2:	e7db      	b.n	800b78c <_puts_r+0x60>

0800b7d4 <puts>:
 800b7d4:	4b02      	ldr	r3, [pc, #8]	; (800b7e0 <puts+0xc>)
 800b7d6:	4601      	mov	r1, r0
 800b7d8:	6818      	ldr	r0, [r3, #0]
 800b7da:	f7ff bfa7 	b.w	800b72c <_puts_r>
 800b7de:	bf00      	nop
 800b7e0:	20000224 	.word	0x20000224

0800b7e4 <siprintf>:
 800b7e4:	b40e      	push	{r1, r2, r3}
 800b7e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7ea:	b500      	push	{lr}
 800b7ec:	b09c      	sub	sp, #112	; 0x70
 800b7ee:	ab1d      	add	r3, sp, #116	; 0x74
 800b7f0:	9002      	str	r0, [sp, #8]
 800b7f2:	9006      	str	r0, [sp, #24]
 800b7f4:	9107      	str	r1, [sp, #28]
 800b7f6:	9104      	str	r1, [sp, #16]
 800b7f8:	4808      	ldr	r0, [pc, #32]	; (800b81c <siprintf+0x38>)
 800b7fa:	4909      	ldr	r1, [pc, #36]	; (800b820 <siprintf+0x3c>)
 800b7fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b800:	9105      	str	r1, [sp, #20]
 800b802:	6800      	ldr	r0, [r0, #0]
 800b804:	a902      	add	r1, sp, #8
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	f002 f92e 	bl	800da68 <_svfiprintf_r>
 800b80c:	2200      	movs	r2, #0
 800b80e:	9b02      	ldr	r3, [sp, #8]
 800b810:	701a      	strb	r2, [r3, #0]
 800b812:	b01c      	add	sp, #112	; 0x70
 800b814:	f85d eb04 	ldr.w	lr, [sp], #4
 800b818:	b003      	add	sp, #12
 800b81a:	4770      	bx	lr
 800b81c:	20000224 	.word	0x20000224
 800b820:	ffff0208 	.word	0xffff0208

0800b824 <siscanf>:
 800b824:	b40e      	push	{r1, r2, r3}
 800b826:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b82a:	b530      	push	{r4, r5, lr}
 800b82c:	b09c      	sub	sp, #112	; 0x70
 800b82e:	ac1f      	add	r4, sp, #124	; 0x7c
 800b830:	f854 5b04 	ldr.w	r5, [r4], #4
 800b834:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b838:	9002      	str	r0, [sp, #8]
 800b83a:	9006      	str	r0, [sp, #24]
 800b83c:	f7f4 fc88 	bl	8000150 <strlen>
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <siscanf+0x4c>)
 800b842:	9003      	str	r0, [sp, #12]
 800b844:	930b      	str	r3, [sp, #44]	; 0x2c
 800b846:	2300      	movs	r3, #0
 800b848:	930f      	str	r3, [sp, #60]	; 0x3c
 800b84a:	9314      	str	r3, [sp, #80]	; 0x50
 800b84c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b850:	9007      	str	r0, [sp, #28]
 800b852:	4808      	ldr	r0, [pc, #32]	; (800b874 <siscanf+0x50>)
 800b854:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b858:	462a      	mov	r2, r5
 800b85a:	4623      	mov	r3, r4
 800b85c:	a902      	add	r1, sp, #8
 800b85e:	6800      	ldr	r0, [r0, #0]
 800b860:	9401      	str	r4, [sp, #4]
 800b862:	f002 fa59 	bl	800dd18 <__ssvfiscanf_r>
 800b866:	b01c      	add	sp, #112	; 0x70
 800b868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b86c:	b003      	add	sp, #12
 800b86e:	4770      	bx	lr
 800b870:	0800b89b 	.word	0x0800b89b
 800b874:	20000224 	.word	0x20000224

0800b878 <__sread>:
 800b878:	b510      	push	{r4, lr}
 800b87a:	460c      	mov	r4, r1
 800b87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b880:	f000 f936 	bl	800baf0 <_read_r>
 800b884:	2800      	cmp	r0, #0
 800b886:	bfab      	itete	ge
 800b888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b88a:	89a3      	ldrhlt	r3, [r4, #12]
 800b88c:	181b      	addge	r3, r3, r0
 800b88e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b892:	bfac      	ite	ge
 800b894:	6563      	strge	r3, [r4, #84]	; 0x54
 800b896:	81a3      	strhlt	r3, [r4, #12]
 800b898:	bd10      	pop	{r4, pc}

0800b89a <__seofread>:
 800b89a:	2000      	movs	r0, #0
 800b89c:	4770      	bx	lr

0800b89e <__swrite>:
 800b89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a2:	461f      	mov	r7, r3
 800b8a4:	898b      	ldrh	r3, [r1, #12]
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	05db      	lsls	r3, r3, #23
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	4616      	mov	r6, r2
 800b8ae:	d505      	bpl.n	800b8bc <__swrite+0x1e>
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b8:	f000 f908 	bl	800bacc <_lseek_r>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	4632      	mov	r2, r6
 800b8c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8c4:	81a3      	strh	r3, [r4, #12]
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	463b      	mov	r3, r7
 800b8ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d2:	f000 b92f 	b.w	800bb34 <_write_r>

0800b8d6 <__sseek>:
 800b8d6:	b510      	push	{r4, lr}
 800b8d8:	460c      	mov	r4, r1
 800b8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8de:	f000 f8f5 	bl	800bacc <_lseek_r>
 800b8e2:	1c43      	adds	r3, r0, #1
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	bf15      	itete	ne
 800b8e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8f2:	81a3      	strheq	r3, [r4, #12]
 800b8f4:	bf18      	it	ne
 800b8f6:	81a3      	strhne	r3, [r4, #12]
 800b8f8:	bd10      	pop	{r4, pc}

0800b8fa <__sclose>:
 800b8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8fe:	f000 b8d5 	b.w	800baac <_close_r>

0800b902 <__swbuf_r>:
 800b902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b904:	460e      	mov	r6, r1
 800b906:	4614      	mov	r4, r2
 800b908:	4605      	mov	r5, r0
 800b90a:	b118      	cbz	r0, 800b914 <__swbuf_r+0x12>
 800b90c:	6a03      	ldr	r3, [r0, #32]
 800b90e:	b90b      	cbnz	r3, 800b914 <__swbuf_r+0x12>
 800b910:	f7ff fec4 	bl	800b69c <__sinit>
 800b914:	69a3      	ldr	r3, [r4, #24]
 800b916:	60a3      	str	r3, [r4, #8]
 800b918:	89a3      	ldrh	r3, [r4, #12]
 800b91a:	071a      	lsls	r2, r3, #28
 800b91c:	d525      	bpl.n	800b96a <__swbuf_r+0x68>
 800b91e:	6923      	ldr	r3, [r4, #16]
 800b920:	b31b      	cbz	r3, 800b96a <__swbuf_r+0x68>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	6922      	ldr	r2, [r4, #16]
 800b926:	b2f6      	uxtb	r6, r6
 800b928:	1a98      	subs	r0, r3, r2
 800b92a:	6963      	ldr	r3, [r4, #20]
 800b92c:	4637      	mov	r7, r6
 800b92e:	4283      	cmp	r3, r0
 800b930:	dc04      	bgt.n	800b93c <__swbuf_r+0x3a>
 800b932:	4621      	mov	r1, r4
 800b934:	4628      	mov	r0, r5
 800b936:	f002 fe77 	bl	800e628 <_fflush_r>
 800b93a:	b9e0      	cbnz	r0, 800b976 <__swbuf_r+0x74>
 800b93c:	68a3      	ldr	r3, [r4, #8]
 800b93e:	3b01      	subs	r3, #1
 800b940:	60a3      	str	r3, [r4, #8]
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	1c5a      	adds	r2, r3, #1
 800b946:	6022      	str	r2, [r4, #0]
 800b948:	701e      	strb	r6, [r3, #0]
 800b94a:	6962      	ldr	r2, [r4, #20]
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	429a      	cmp	r2, r3
 800b950:	d004      	beq.n	800b95c <__swbuf_r+0x5a>
 800b952:	89a3      	ldrh	r3, [r4, #12]
 800b954:	07db      	lsls	r3, r3, #31
 800b956:	d506      	bpl.n	800b966 <__swbuf_r+0x64>
 800b958:	2e0a      	cmp	r6, #10
 800b95a:	d104      	bne.n	800b966 <__swbuf_r+0x64>
 800b95c:	4621      	mov	r1, r4
 800b95e:	4628      	mov	r0, r5
 800b960:	f002 fe62 	bl	800e628 <_fflush_r>
 800b964:	b938      	cbnz	r0, 800b976 <__swbuf_r+0x74>
 800b966:	4638      	mov	r0, r7
 800b968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b96a:	4621      	mov	r1, r4
 800b96c:	4628      	mov	r0, r5
 800b96e:	f000 f805 	bl	800b97c <__swsetup_r>
 800b972:	2800      	cmp	r0, #0
 800b974:	d0d5      	beq.n	800b922 <__swbuf_r+0x20>
 800b976:	f04f 37ff 	mov.w	r7, #4294967295
 800b97a:	e7f4      	b.n	800b966 <__swbuf_r+0x64>

0800b97c <__swsetup_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	4b2a      	ldr	r3, [pc, #168]	; (800ba28 <__swsetup_r+0xac>)
 800b980:	4605      	mov	r5, r0
 800b982:	6818      	ldr	r0, [r3, #0]
 800b984:	460c      	mov	r4, r1
 800b986:	b118      	cbz	r0, 800b990 <__swsetup_r+0x14>
 800b988:	6a03      	ldr	r3, [r0, #32]
 800b98a:	b90b      	cbnz	r3, 800b990 <__swsetup_r+0x14>
 800b98c:	f7ff fe86 	bl	800b69c <__sinit>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b996:	0718      	lsls	r0, r3, #28
 800b998:	d422      	bmi.n	800b9e0 <__swsetup_r+0x64>
 800b99a:	06d9      	lsls	r1, r3, #27
 800b99c:	d407      	bmi.n	800b9ae <__swsetup_r+0x32>
 800b99e:	2309      	movs	r3, #9
 800b9a0:	602b      	str	r3, [r5, #0]
 800b9a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9aa:	81a3      	strh	r3, [r4, #12]
 800b9ac:	e034      	b.n	800ba18 <__swsetup_r+0x9c>
 800b9ae:	0758      	lsls	r0, r3, #29
 800b9b0:	d512      	bpl.n	800b9d8 <__swsetup_r+0x5c>
 800b9b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9b4:	b141      	cbz	r1, 800b9c8 <__swsetup_r+0x4c>
 800b9b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9ba:	4299      	cmp	r1, r3
 800b9bc:	d002      	beq.n	800b9c4 <__swsetup_r+0x48>
 800b9be:	4628      	mov	r0, r5
 800b9c0:	f000 ff92 	bl	800c8e8 <_free_r>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	6363      	str	r3, [r4, #52]	; 0x34
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9ce:	81a3      	strh	r3, [r4, #12]
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	6063      	str	r3, [r4, #4]
 800b9d4:	6923      	ldr	r3, [r4, #16]
 800b9d6:	6023      	str	r3, [r4, #0]
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	f043 0308 	orr.w	r3, r3, #8
 800b9de:	81a3      	strh	r3, [r4, #12]
 800b9e0:	6923      	ldr	r3, [r4, #16]
 800b9e2:	b94b      	cbnz	r3, 800b9f8 <__swsetup_r+0x7c>
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9ee:	d003      	beq.n	800b9f8 <__swsetup_r+0x7c>
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	f002 fe65 	bl	800e6c2 <__smakebuf_r>
 800b9f8:	89a0      	ldrh	r0, [r4, #12]
 800b9fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9fe:	f010 0301 	ands.w	r3, r0, #1
 800ba02:	d00a      	beq.n	800ba1a <__swsetup_r+0x9e>
 800ba04:	2300      	movs	r3, #0
 800ba06:	60a3      	str	r3, [r4, #8]
 800ba08:	6963      	ldr	r3, [r4, #20]
 800ba0a:	425b      	negs	r3, r3
 800ba0c:	61a3      	str	r3, [r4, #24]
 800ba0e:	6923      	ldr	r3, [r4, #16]
 800ba10:	b943      	cbnz	r3, 800ba24 <__swsetup_r+0xa8>
 800ba12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba16:	d1c4      	bne.n	800b9a2 <__swsetup_r+0x26>
 800ba18:	bd38      	pop	{r3, r4, r5, pc}
 800ba1a:	0781      	lsls	r1, r0, #30
 800ba1c:	bf58      	it	pl
 800ba1e:	6963      	ldrpl	r3, [r4, #20]
 800ba20:	60a3      	str	r3, [r4, #8]
 800ba22:	e7f4      	b.n	800ba0e <__swsetup_r+0x92>
 800ba24:	2000      	movs	r0, #0
 800ba26:	e7f7      	b.n	800ba18 <__swsetup_r+0x9c>
 800ba28:	20000224 	.word	0x20000224

0800ba2c <memset>:
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	4402      	add	r2, r0
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d100      	bne.n	800ba36 <memset+0xa>
 800ba34:	4770      	bx	lr
 800ba36:	f803 1b01 	strb.w	r1, [r3], #1
 800ba3a:	e7f9      	b.n	800ba30 <memset+0x4>

0800ba3c <strcat>:
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	b510      	push	{r4, lr}
 800ba40:	7814      	ldrb	r4, [r2, #0]
 800ba42:	4613      	mov	r3, r2
 800ba44:	3201      	adds	r2, #1
 800ba46:	2c00      	cmp	r4, #0
 800ba48:	d1fa      	bne.n	800ba40 <strcat+0x4>
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba50:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba54:	2a00      	cmp	r2, #0
 800ba56:	d1f9      	bne.n	800ba4c <strcat+0x10>
 800ba58:	bd10      	pop	{r4, pc}

0800ba5a <strncmp>:
 800ba5a:	b510      	push	{r4, lr}
 800ba5c:	b16a      	cbz	r2, 800ba7a <strncmp+0x20>
 800ba5e:	3901      	subs	r1, #1
 800ba60:	1884      	adds	r4, r0, r2
 800ba62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba66:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d103      	bne.n	800ba76 <strncmp+0x1c>
 800ba6e:	42a0      	cmp	r0, r4
 800ba70:	d001      	beq.n	800ba76 <strncmp+0x1c>
 800ba72:	2a00      	cmp	r2, #0
 800ba74:	d1f5      	bne.n	800ba62 <strncmp+0x8>
 800ba76:	1ad0      	subs	r0, r2, r3
 800ba78:	bd10      	pop	{r4, pc}
 800ba7a:	4610      	mov	r0, r2
 800ba7c:	e7fc      	b.n	800ba78 <strncmp+0x1e>

0800ba7e <strncpy>:
 800ba7e:	4603      	mov	r3, r0
 800ba80:	b510      	push	{r4, lr}
 800ba82:	3901      	subs	r1, #1
 800ba84:	b132      	cbz	r2, 800ba94 <strncpy+0x16>
 800ba86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ba8a:	3a01      	subs	r2, #1
 800ba8c:	f803 4b01 	strb.w	r4, [r3], #1
 800ba90:	2c00      	cmp	r4, #0
 800ba92:	d1f7      	bne.n	800ba84 <strncpy+0x6>
 800ba94:	2100      	movs	r1, #0
 800ba96:	441a      	add	r2, r3
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d100      	bne.n	800ba9e <strncpy+0x20>
 800ba9c:	bd10      	pop	{r4, pc}
 800ba9e:	f803 1b01 	strb.w	r1, [r3], #1
 800baa2:	e7f9      	b.n	800ba98 <strncpy+0x1a>

0800baa4 <_localeconv_r>:
 800baa4:	4800      	ldr	r0, [pc, #0]	; (800baa8 <_localeconv_r+0x4>)
 800baa6:	4770      	bx	lr
 800baa8:	2000015c 	.word	0x2000015c

0800baac <_close_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	2300      	movs	r3, #0
 800bab0:	4d05      	ldr	r5, [pc, #20]	; (800bac8 <_close_r+0x1c>)
 800bab2:	4604      	mov	r4, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	602b      	str	r3, [r5, #0]
 800bab8:	f7fa f9ed 	bl	8005e96 <_close>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d102      	bne.n	800bac6 <_close_r+0x1a>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	b103      	cbz	r3, 800bac6 <_close_r+0x1a>
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	20000ad0 	.word	0x20000ad0

0800bacc <_lseek_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4604      	mov	r4, r0
 800bad0:	4608      	mov	r0, r1
 800bad2:	4611      	mov	r1, r2
 800bad4:	2200      	movs	r2, #0
 800bad6:	4d05      	ldr	r5, [pc, #20]	; (800baec <_lseek_r+0x20>)
 800bad8:	602a      	str	r2, [r5, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	f7fa f9ff 	bl	8005ede <_lseek>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_lseek_r+0x1e>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_lseek_r+0x1e>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	20000ad0 	.word	0x20000ad0

0800baf0 <_read_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4604      	mov	r4, r0
 800baf4:	4608      	mov	r0, r1
 800baf6:	4611      	mov	r1, r2
 800baf8:	2200      	movs	r2, #0
 800bafa:	4d05      	ldr	r5, [pc, #20]	; (800bb10 <_read_r+0x20>)
 800bafc:	602a      	str	r2, [r5, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f7fa f990 	bl	8005e24 <_read>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d102      	bne.n	800bb0e <_read_r+0x1e>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b103      	cbz	r3, 800bb0e <_read_r+0x1e>
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	20000ad0 	.word	0x20000ad0

0800bb14 <_sbrk_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	2300      	movs	r3, #0
 800bb18:	4d05      	ldr	r5, [pc, #20]	; (800bb30 <_sbrk_r+0x1c>)
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4608      	mov	r0, r1
 800bb1e:	602b      	str	r3, [r5, #0]
 800bb20:	f7fa f9ea 	bl	8005ef8 <_sbrk>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	d102      	bne.n	800bb2e <_sbrk_r+0x1a>
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	b103      	cbz	r3, 800bb2e <_sbrk_r+0x1a>
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	bd38      	pop	{r3, r4, r5, pc}
 800bb30:	20000ad0 	.word	0x20000ad0

0800bb34 <_write_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4604      	mov	r4, r0
 800bb38:	4608      	mov	r0, r1
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	4d05      	ldr	r5, [pc, #20]	; (800bb54 <_write_r+0x20>)
 800bb40:	602a      	str	r2, [r5, #0]
 800bb42:	461a      	mov	r2, r3
 800bb44:	f7fa f98b 	bl	8005e5e <_write>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	d102      	bne.n	800bb52 <_write_r+0x1e>
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	b103      	cbz	r3, 800bb52 <_write_r+0x1e>
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	bd38      	pop	{r3, r4, r5, pc}
 800bb54:	20000ad0 	.word	0x20000ad0

0800bb58 <__errno>:
 800bb58:	4b01      	ldr	r3, [pc, #4]	; (800bb60 <__errno+0x8>)
 800bb5a:	6818      	ldr	r0, [r3, #0]
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	20000224 	.word	0x20000224

0800bb64 <__libc_init_array>:
 800bb64:	b570      	push	{r4, r5, r6, lr}
 800bb66:	2600      	movs	r6, #0
 800bb68:	4d0c      	ldr	r5, [pc, #48]	; (800bb9c <__libc_init_array+0x38>)
 800bb6a:	4c0d      	ldr	r4, [pc, #52]	; (800bba0 <__libc_init_array+0x3c>)
 800bb6c:	1b64      	subs	r4, r4, r5
 800bb6e:	10a4      	asrs	r4, r4, #2
 800bb70:	42a6      	cmp	r6, r4
 800bb72:	d109      	bne.n	800bb88 <__libc_init_array+0x24>
 800bb74:	f002 ff92 	bl	800ea9c <_init>
 800bb78:	2600      	movs	r6, #0
 800bb7a:	4d0a      	ldr	r5, [pc, #40]	; (800bba4 <__libc_init_array+0x40>)
 800bb7c:	4c0a      	ldr	r4, [pc, #40]	; (800bba8 <__libc_init_array+0x44>)
 800bb7e:	1b64      	subs	r4, r4, r5
 800bb80:	10a4      	asrs	r4, r4, #2
 800bb82:	42a6      	cmp	r6, r4
 800bb84:	d105      	bne.n	800bb92 <__libc_init_array+0x2e>
 800bb86:	bd70      	pop	{r4, r5, r6, pc}
 800bb88:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb8c:	4798      	blx	r3
 800bb8e:	3601      	adds	r6, #1
 800bb90:	e7ee      	b.n	800bb70 <__libc_init_array+0xc>
 800bb92:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb96:	4798      	blx	r3
 800bb98:	3601      	adds	r6, #1
 800bb9a:	e7f2      	b.n	800bb82 <__libc_init_array+0x1e>
 800bb9c:	0800f614 	.word	0x0800f614
 800bba0:	0800f614 	.word	0x0800f614
 800bba4:	0800f614 	.word	0x0800f614
 800bba8:	0800f618 	.word	0x0800f618

0800bbac <__retarget_lock_acquire_recursive>:
 800bbac:	4770      	bx	lr

0800bbae <__retarget_lock_release_recursive>:
 800bbae:	4770      	bx	lr

0800bbb0 <strcpy>:
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbb6:	f803 2b01 	strb.w	r2, [r3], #1
 800bbba:	2a00      	cmp	r2, #0
 800bbbc:	d1f9      	bne.n	800bbb2 <strcpy+0x2>
 800bbbe:	4770      	bx	lr

0800bbc0 <memchr>:
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	b510      	push	{r4, lr}
 800bbc4:	b2c9      	uxtb	r1, r1
 800bbc6:	4402      	add	r2, r0
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	4618      	mov	r0, r3
 800bbcc:	d101      	bne.n	800bbd2 <memchr+0x12>
 800bbce:	2000      	movs	r0, #0
 800bbd0:	e003      	b.n	800bbda <memchr+0x1a>
 800bbd2:	7804      	ldrb	r4, [r0, #0]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	428c      	cmp	r4, r1
 800bbd8:	d1f6      	bne.n	800bbc8 <memchr+0x8>
 800bbda:	bd10      	pop	{r4, pc}

0800bbdc <memcpy>:
 800bbdc:	440a      	add	r2, r1
 800bbde:	4291      	cmp	r1, r2
 800bbe0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbe4:	d100      	bne.n	800bbe8 <memcpy+0xc>
 800bbe6:	4770      	bx	lr
 800bbe8:	b510      	push	{r4, lr}
 800bbea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbee:	4291      	cmp	r1, r2
 800bbf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbf4:	d1f9      	bne.n	800bbea <memcpy+0xe>
 800bbf6:	bd10      	pop	{r4, pc}

0800bbf8 <nan>:
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	4901      	ldr	r1, [pc, #4]	; (800bc00 <nan+0x8>)
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	7ff80000 	.word	0x7ff80000

0800bc04 <nanf>:
 800bc04:	4800      	ldr	r0, [pc, #0]	; (800bc08 <nanf+0x4>)
 800bc06:	4770      	bx	lr
 800bc08:	7fc00000 	.word	0x7fc00000

0800bc0c <quorem>:
 800bc0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc10:	6903      	ldr	r3, [r0, #16]
 800bc12:	690c      	ldr	r4, [r1, #16]
 800bc14:	4607      	mov	r7, r0
 800bc16:	42a3      	cmp	r3, r4
 800bc18:	db7f      	blt.n	800bd1a <quorem+0x10e>
 800bc1a:	3c01      	subs	r4, #1
 800bc1c:	f100 0514 	add.w	r5, r0, #20
 800bc20:	f101 0814 	add.w	r8, r1, #20
 800bc24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc28:	9301      	str	r3, [sp, #4]
 800bc2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc32:	3301      	adds	r3, #1
 800bc34:	429a      	cmp	r2, r3
 800bc36:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc3a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc42:	d331      	bcc.n	800bca8 <quorem+0x9c>
 800bc44:	f04f 0e00 	mov.w	lr, #0
 800bc48:	4640      	mov	r0, r8
 800bc4a:	46ac      	mov	ip, r5
 800bc4c:	46f2      	mov	sl, lr
 800bc4e:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc52:	b293      	uxth	r3, r2
 800bc54:	fb06 e303 	mla	r3, r6, r3, lr
 800bc58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc5c:	0c1a      	lsrs	r2, r3, #16
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	fb06 220e 	mla	r2, r6, lr, r2
 800bc64:	ebaa 0303 	sub.w	r3, sl, r3
 800bc68:	f8dc a000 	ldr.w	sl, [ip]
 800bc6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc70:	fa1f fa8a 	uxth.w	sl, sl
 800bc74:	4453      	add	r3, sl
 800bc76:	f8dc a000 	ldr.w	sl, [ip]
 800bc7a:	b292      	uxth	r2, r2
 800bc7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc8a:	4581      	cmp	r9, r0
 800bc8c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc90:	f84c 3b04 	str.w	r3, [ip], #4
 800bc94:	d2db      	bcs.n	800bc4e <quorem+0x42>
 800bc96:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc9a:	b92b      	cbnz	r3, 800bca8 <quorem+0x9c>
 800bc9c:	9b01      	ldr	r3, [sp, #4]
 800bc9e:	3b04      	subs	r3, #4
 800bca0:	429d      	cmp	r5, r3
 800bca2:	461a      	mov	r2, r3
 800bca4:	d32d      	bcc.n	800bd02 <quorem+0xf6>
 800bca6:	613c      	str	r4, [r7, #16]
 800bca8:	4638      	mov	r0, r7
 800bcaa:	f001 fc95 	bl	800d5d8 <__mcmp>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	db23      	blt.n	800bcfa <quorem+0xee>
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	3601      	adds	r6, #1
 800bcb8:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcbc:	f8d1 c000 	ldr.w	ip, [r1]
 800bcc0:	b293      	uxth	r3, r2
 800bcc2:	1ac3      	subs	r3, r0, r3
 800bcc4:	0c12      	lsrs	r2, r2, #16
 800bcc6:	fa1f f08c 	uxth.w	r0, ip
 800bcca:	4403      	add	r3, r0
 800bccc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bcd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcda:	45c1      	cmp	r9, r8
 800bcdc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bce0:	f841 3b04 	str.w	r3, [r1], #4
 800bce4:	d2e8      	bcs.n	800bcb8 <quorem+0xac>
 800bce6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcee:	b922      	cbnz	r2, 800bcfa <quorem+0xee>
 800bcf0:	3b04      	subs	r3, #4
 800bcf2:	429d      	cmp	r5, r3
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	d30a      	bcc.n	800bd0e <quorem+0x102>
 800bcf8:	613c      	str	r4, [r7, #16]
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	b003      	add	sp, #12
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	6812      	ldr	r2, [r2, #0]
 800bd04:	3b04      	subs	r3, #4
 800bd06:	2a00      	cmp	r2, #0
 800bd08:	d1cd      	bne.n	800bca6 <quorem+0x9a>
 800bd0a:	3c01      	subs	r4, #1
 800bd0c:	e7c8      	b.n	800bca0 <quorem+0x94>
 800bd0e:	6812      	ldr	r2, [r2, #0]
 800bd10:	3b04      	subs	r3, #4
 800bd12:	2a00      	cmp	r2, #0
 800bd14:	d1f0      	bne.n	800bcf8 <quorem+0xec>
 800bd16:	3c01      	subs	r4, #1
 800bd18:	e7eb      	b.n	800bcf2 <quorem+0xe6>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e7ee      	b.n	800bcfc <quorem+0xf0>
	...

0800bd20 <_dtoa_r>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	4616      	mov	r6, r2
 800bd26:	461f      	mov	r7, r3
 800bd28:	69c4      	ldr	r4, [r0, #28]
 800bd2a:	b099      	sub	sp, #100	; 0x64
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bd32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bd36:	b974      	cbnz	r4, 800bd56 <_dtoa_r+0x36>
 800bd38:	2010      	movs	r0, #16
 800bd3a:	f7fd fdf9 	bl	8009930 <malloc>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	61e8      	str	r0, [r5, #28]
 800bd42:	b920      	cbnz	r0, 800bd4e <_dtoa_r+0x2e>
 800bd44:	21ef      	movs	r1, #239	; 0xef
 800bd46:	4bac      	ldr	r3, [pc, #688]	; (800bff8 <_dtoa_r+0x2d8>)
 800bd48:	48ac      	ldr	r0, [pc, #688]	; (800bffc <_dtoa_r+0x2dc>)
 800bd4a:	f002 fda3 	bl	800e894 <__assert_func>
 800bd4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd52:	6004      	str	r4, [r0, #0]
 800bd54:	60c4      	str	r4, [r0, #12]
 800bd56:	69eb      	ldr	r3, [r5, #28]
 800bd58:	6819      	ldr	r1, [r3, #0]
 800bd5a:	b151      	cbz	r1, 800bd72 <_dtoa_r+0x52>
 800bd5c:	685a      	ldr	r2, [r3, #4]
 800bd5e:	2301      	movs	r3, #1
 800bd60:	4093      	lsls	r3, r2
 800bd62:	604a      	str	r2, [r1, #4]
 800bd64:	608b      	str	r3, [r1, #8]
 800bd66:	4628      	mov	r0, r5
 800bd68:	f001 f9b2 	bl	800d0d0 <_Bfree>
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	69eb      	ldr	r3, [r5, #28]
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	1e3b      	subs	r3, r7, #0
 800bd74:	bfaf      	iteee	ge
 800bd76:	2300      	movge	r3, #0
 800bd78:	2201      	movlt	r2, #1
 800bd7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd7e:	9305      	strlt	r3, [sp, #20]
 800bd80:	bfa8      	it	ge
 800bd82:	f8c8 3000 	strge.w	r3, [r8]
 800bd86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bd8a:	4b9d      	ldr	r3, [pc, #628]	; (800c000 <_dtoa_r+0x2e0>)
 800bd8c:	bfb8      	it	lt
 800bd8e:	f8c8 2000 	strlt.w	r2, [r8]
 800bd92:	ea33 0309 	bics.w	r3, r3, r9
 800bd96:	d119      	bne.n	800bdcc <_dtoa_r+0xac>
 800bd98:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bd9e:	6013      	str	r3, [r2, #0]
 800bda0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bda4:	4333      	orrs	r3, r6
 800bda6:	f000 8589 	beq.w	800c8bc <_dtoa_r+0xb9c>
 800bdaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bdac:	b953      	cbnz	r3, 800bdc4 <_dtoa_r+0xa4>
 800bdae:	4b95      	ldr	r3, [pc, #596]	; (800c004 <_dtoa_r+0x2e4>)
 800bdb0:	e023      	b.n	800bdfa <_dtoa_r+0xda>
 800bdb2:	4b95      	ldr	r3, [pc, #596]	; (800c008 <_dtoa_r+0x2e8>)
 800bdb4:	9303      	str	r3, [sp, #12]
 800bdb6:	3308      	adds	r3, #8
 800bdb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bdba:	6013      	str	r3, [r2, #0]
 800bdbc:	9803      	ldr	r0, [sp, #12]
 800bdbe:	b019      	add	sp, #100	; 0x64
 800bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc4:	4b8f      	ldr	r3, [pc, #572]	; (800c004 <_dtoa_r+0x2e4>)
 800bdc6:	9303      	str	r3, [sp, #12]
 800bdc8:	3303      	adds	r3, #3
 800bdca:	e7f5      	b.n	800bdb8 <_dtoa_r+0x98>
 800bdcc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bdd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bdd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bdd8:	2200      	movs	r2, #0
 800bdda:	2300      	movs	r3, #0
 800bddc:	f7f4 fde4 	bl	80009a8 <__aeabi_dcmpeq>
 800bde0:	4680      	mov	r8, r0
 800bde2:	b160      	cbz	r0, 800bdfe <_dtoa_r+0xde>
 800bde4:	2301      	movs	r3, #1
 800bde6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bde8:	6013      	str	r3, [r2, #0]
 800bdea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f000 8562 	beq.w	800c8b6 <_dtoa_r+0xb96>
 800bdf2:	4b86      	ldr	r3, [pc, #536]	; (800c00c <_dtoa_r+0x2ec>)
 800bdf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bdf6:	6013      	str	r3, [r2, #0]
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	9303      	str	r3, [sp, #12]
 800bdfc:	e7de      	b.n	800bdbc <_dtoa_r+0x9c>
 800bdfe:	ab16      	add	r3, sp, #88	; 0x58
 800be00:	9301      	str	r3, [sp, #4]
 800be02:	ab17      	add	r3, sp, #92	; 0x5c
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	4628      	mov	r0, r5
 800be08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800be0c:	f001 fcf4 	bl	800d7f8 <__d2b>
 800be10:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800be14:	4682      	mov	sl, r0
 800be16:	2c00      	cmp	r4, #0
 800be18:	d07e      	beq.n	800bf18 <_dtoa_r+0x1f8>
 800be1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be20:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800be24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be28:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800be2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be30:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800be34:	4619      	mov	r1, r3
 800be36:	2200      	movs	r2, #0
 800be38:	4b75      	ldr	r3, [pc, #468]	; (800c010 <_dtoa_r+0x2f0>)
 800be3a:	f7f4 f995 	bl	8000168 <__aeabi_dsub>
 800be3e:	a368      	add	r3, pc, #416	; (adr r3, 800bfe0 <_dtoa_r+0x2c0>)
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f7f4 fb48 	bl	80004d8 <__aeabi_dmul>
 800be48:	a367      	add	r3, pc, #412	; (adr r3, 800bfe8 <_dtoa_r+0x2c8>)
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	f7f4 f98d 	bl	800016c <__adddf3>
 800be52:	4606      	mov	r6, r0
 800be54:	4620      	mov	r0, r4
 800be56:	460f      	mov	r7, r1
 800be58:	f7f4 fad4 	bl	8000404 <__aeabi_i2d>
 800be5c:	a364      	add	r3, pc, #400	; (adr r3, 800bff0 <_dtoa_r+0x2d0>)
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	f7f4 fb39 	bl	80004d8 <__aeabi_dmul>
 800be66:	4602      	mov	r2, r0
 800be68:	460b      	mov	r3, r1
 800be6a:	4630      	mov	r0, r6
 800be6c:	4639      	mov	r1, r7
 800be6e:	f7f4 f97d 	bl	800016c <__adddf3>
 800be72:	4606      	mov	r6, r0
 800be74:	460f      	mov	r7, r1
 800be76:	f7f4 fddf 	bl	8000a38 <__aeabi_d2iz>
 800be7a:	2200      	movs	r2, #0
 800be7c:	4683      	mov	fp, r0
 800be7e:	2300      	movs	r3, #0
 800be80:	4630      	mov	r0, r6
 800be82:	4639      	mov	r1, r7
 800be84:	f7f4 fd9a 	bl	80009bc <__aeabi_dcmplt>
 800be88:	b148      	cbz	r0, 800be9e <_dtoa_r+0x17e>
 800be8a:	4658      	mov	r0, fp
 800be8c:	f7f4 faba 	bl	8000404 <__aeabi_i2d>
 800be90:	4632      	mov	r2, r6
 800be92:	463b      	mov	r3, r7
 800be94:	f7f4 fd88 	bl	80009a8 <__aeabi_dcmpeq>
 800be98:	b908      	cbnz	r0, 800be9e <_dtoa_r+0x17e>
 800be9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be9e:	f1bb 0f16 	cmp.w	fp, #22
 800bea2:	d857      	bhi.n	800bf54 <_dtoa_r+0x234>
 800bea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bea8:	4b5a      	ldr	r3, [pc, #360]	; (800c014 <_dtoa_r+0x2f4>)
 800beaa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	f7f4 fd83 	bl	80009bc <__aeabi_dcmplt>
 800beb6:	2800      	cmp	r0, #0
 800beb8:	d04e      	beq.n	800bf58 <_dtoa_r+0x238>
 800beba:	2300      	movs	r3, #0
 800bebc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bec0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bec2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bec4:	1b1b      	subs	r3, r3, r4
 800bec6:	1e5a      	subs	r2, r3, #1
 800bec8:	bf46      	itte	mi
 800beca:	f1c3 0901 	rsbmi	r9, r3, #1
 800bece:	2300      	movmi	r3, #0
 800bed0:	f04f 0900 	movpl.w	r9, #0
 800bed4:	9209      	str	r2, [sp, #36]	; 0x24
 800bed6:	bf48      	it	mi
 800bed8:	9309      	strmi	r3, [sp, #36]	; 0x24
 800beda:	f1bb 0f00 	cmp.w	fp, #0
 800bede:	db3d      	blt.n	800bf5c <_dtoa_r+0x23c>
 800bee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bee6:	445b      	add	r3, fp
 800bee8:	9309      	str	r3, [sp, #36]	; 0x24
 800beea:	2300      	movs	r3, #0
 800beec:	930a      	str	r3, [sp, #40]	; 0x28
 800beee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bef0:	2b09      	cmp	r3, #9
 800bef2:	d867      	bhi.n	800bfc4 <_dtoa_r+0x2a4>
 800bef4:	2b05      	cmp	r3, #5
 800bef6:	bfc4      	itt	gt
 800bef8:	3b04      	subgt	r3, #4
 800befa:	9322      	strgt	r3, [sp, #136]	; 0x88
 800befc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800befe:	bfc8      	it	gt
 800bf00:	2400      	movgt	r4, #0
 800bf02:	f1a3 0302 	sub.w	r3, r3, #2
 800bf06:	bfd8      	it	le
 800bf08:	2401      	movle	r4, #1
 800bf0a:	2b03      	cmp	r3, #3
 800bf0c:	f200 8086 	bhi.w	800c01c <_dtoa_r+0x2fc>
 800bf10:	e8df f003 	tbb	[pc, r3]
 800bf14:	5637392c 	.word	0x5637392c
 800bf18:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bf1c:	441c      	add	r4, r3
 800bf1e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bf22:	2b20      	cmp	r3, #32
 800bf24:	bfc1      	itttt	gt
 800bf26:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf2a:	fa09 f903 	lslgt.w	r9, r9, r3
 800bf2e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800bf32:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bf36:	bfd6      	itet	le
 800bf38:	f1c3 0320 	rsble	r3, r3, #32
 800bf3c:	ea49 0003 	orrgt.w	r0, r9, r3
 800bf40:	fa06 f003 	lslle.w	r0, r6, r3
 800bf44:	f7f4 fa4e 	bl	80003e4 <__aeabi_ui2d>
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bf4e:	3c01      	subs	r4, #1
 800bf50:	9213      	str	r2, [sp, #76]	; 0x4c
 800bf52:	e76f      	b.n	800be34 <_dtoa_r+0x114>
 800bf54:	2301      	movs	r3, #1
 800bf56:	e7b3      	b.n	800bec0 <_dtoa_r+0x1a0>
 800bf58:	900f      	str	r0, [sp, #60]	; 0x3c
 800bf5a:	e7b2      	b.n	800bec2 <_dtoa_r+0x1a2>
 800bf5c:	f1cb 0300 	rsb	r3, fp, #0
 800bf60:	930a      	str	r3, [sp, #40]	; 0x28
 800bf62:	2300      	movs	r3, #0
 800bf64:	eba9 090b 	sub.w	r9, r9, fp
 800bf68:	930e      	str	r3, [sp, #56]	; 0x38
 800bf6a:	e7c0      	b.n	800beee <_dtoa_r+0x1ce>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	dc55      	bgt.n	800c022 <_dtoa_r+0x302>
 800bf76:	2301      	movs	r3, #1
 800bf78:	461a      	mov	r2, r3
 800bf7a:	9306      	str	r3, [sp, #24]
 800bf7c:	9308      	str	r3, [sp, #32]
 800bf7e:	9223      	str	r2, [sp, #140]	; 0x8c
 800bf80:	e00b      	b.n	800bf9a <_dtoa_r+0x27a>
 800bf82:	2301      	movs	r3, #1
 800bf84:	e7f3      	b.n	800bf6e <_dtoa_r+0x24e>
 800bf86:	2300      	movs	r3, #0
 800bf88:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf8c:	445b      	add	r3, fp
 800bf8e:	9306      	str	r3, [sp, #24]
 800bf90:	3301      	adds	r3, #1
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	9308      	str	r3, [sp, #32]
 800bf96:	bfb8      	it	lt
 800bf98:	2301      	movlt	r3, #1
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	2204      	movs	r2, #4
 800bf9e:	69e8      	ldr	r0, [r5, #28]
 800bfa0:	f102 0614 	add.w	r6, r2, #20
 800bfa4:	429e      	cmp	r6, r3
 800bfa6:	d940      	bls.n	800c02a <_dtoa_r+0x30a>
 800bfa8:	6041      	str	r1, [r0, #4]
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f001 f850 	bl	800d050 <_Balloc>
 800bfb0:	9003      	str	r0, [sp, #12]
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d13c      	bne.n	800c030 <_dtoa_r+0x310>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	f240 11af 	movw	r1, #431	; 0x1af
 800bfbc:	4b16      	ldr	r3, [pc, #88]	; (800c018 <_dtoa_r+0x2f8>)
 800bfbe:	e6c3      	b.n	800bd48 <_dtoa_r+0x28>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e7e1      	b.n	800bf88 <_dtoa_r+0x268>
 800bfc4:	2401      	movs	r4, #1
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	940b      	str	r4, [sp, #44]	; 0x2c
 800bfca:	9322      	str	r3, [sp, #136]	; 0x88
 800bfcc:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	9306      	str	r3, [sp, #24]
 800bfd4:	9308      	str	r3, [sp, #32]
 800bfd6:	2312      	movs	r3, #18
 800bfd8:	e7d1      	b.n	800bf7e <_dtoa_r+0x25e>
 800bfda:	bf00      	nop
 800bfdc:	f3af 8000 	nop.w
 800bfe0:	636f4361 	.word	0x636f4361
 800bfe4:	3fd287a7 	.word	0x3fd287a7
 800bfe8:	8b60c8b3 	.word	0x8b60c8b3
 800bfec:	3fc68a28 	.word	0x3fc68a28
 800bff0:	509f79fb 	.word	0x509f79fb
 800bff4:	3fd34413 	.word	0x3fd34413
 800bff8:	0800f36a 	.word	0x0800f36a
 800bffc:	0800f381 	.word	0x0800f381
 800c000:	7ff00000 	.word	0x7ff00000
 800c004:	0800f366 	.word	0x0800f366
 800c008:	0800f35d 	.word	0x0800f35d
 800c00c:	0800f5cc 	.word	0x0800f5cc
 800c010:	3ff80000 	.word	0x3ff80000
 800c014:	0800f4d0 	.word	0x0800f4d0
 800c018:	0800f3d9 	.word	0x0800f3d9
 800c01c:	2301      	movs	r3, #1
 800c01e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c020:	e7d4      	b.n	800bfcc <_dtoa_r+0x2ac>
 800c022:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c024:	9306      	str	r3, [sp, #24]
 800c026:	9308      	str	r3, [sp, #32]
 800c028:	e7b7      	b.n	800bf9a <_dtoa_r+0x27a>
 800c02a:	3101      	adds	r1, #1
 800c02c:	0052      	lsls	r2, r2, #1
 800c02e:	e7b7      	b.n	800bfa0 <_dtoa_r+0x280>
 800c030:	69eb      	ldr	r3, [r5, #28]
 800c032:	9a03      	ldr	r2, [sp, #12]
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	9b08      	ldr	r3, [sp, #32]
 800c038:	2b0e      	cmp	r3, #14
 800c03a:	f200 80a8 	bhi.w	800c18e <_dtoa_r+0x46e>
 800c03e:	2c00      	cmp	r4, #0
 800c040:	f000 80a5 	beq.w	800c18e <_dtoa_r+0x46e>
 800c044:	f1bb 0f00 	cmp.w	fp, #0
 800c048:	dd34      	ble.n	800c0b4 <_dtoa_r+0x394>
 800c04a:	4b9a      	ldr	r3, [pc, #616]	; (800c2b4 <_dtoa_r+0x594>)
 800c04c:	f00b 020f 	and.w	r2, fp, #15
 800c050:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c054:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c058:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c05c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c060:	ea4f 142b 	mov.w	r4, fp, asr #4
 800c064:	d016      	beq.n	800c094 <_dtoa_r+0x374>
 800c066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c06a:	4b93      	ldr	r3, [pc, #588]	; (800c2b8 <_dtoa_r+0x598>)
 800c06c:	2703      	movs	r7, #3
 800c06e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c072:	f7f4 fb5b 	bl	800072c <__aeabi_ddiv>
 800c076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c07a:	f004 040f 	and.w	r4, r4, #15
 800c07e:	4e8e      	ldr	r6, [pc, #568]	; (800c2b8 <_dtoa_r+0x598>)
 800c080:	b954      	cbnz	r4, 800c098 <_dtoa_r+0x378>
 800c082:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c086:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c08a:	f7f4 fb4f 	bl	800072c <__aeabi_ddiv>
 800c08e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c092:	e029      	b.n	800c0e8 <_dtoa_r+0x3c8>
 800c094:	2702      	movs	r7, #2
 800c096:	e7f2      	b.n	800c07e <_dtoa_r+0x35e>
 800c098:	07e1      	lsls	r1, r4, #31
 800c09a:	d508      	bpl.n	800c0ae <_dtoa_r+0x38e>
 800c09c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c0a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0a4:	f7f4 fa18 	bl	80004d8 <__aeabi_dmul>
 800c0a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c0ac:	3701      	adds	r7, #1
 800c0ae:	1064      	asrs	r4, r4, #1
 800c0b0:	3608      	adds	r6, #8
 800c0b2:	e7e5      	b.n	800c080 <_dtoa_r+0x360>
 800c0b4:	f000 80a5 	beq.w	800c202 <_dtoa_r+0x4e2>
 800c0b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c0bc:	f1cb 0400 	rsb	r4, fp, #0
 800c0c0:	4b7c      	ldr	r3, [pc, #496]	; (800c2b4 <_dtoa_r+0x594>)
 800c0c2:	f004 020f 	and.w	r2, r4, #15
 800c0c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	f7f4 fa03 	bl	80004d8 <__aeabi_dmul>
 800c0d2:	2702      	movs	r7, #2
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0da:	4e77      	ldr	r6, [pc, #476]	; (800c2b8 <_dtoa_r+0x598>)
 800c0dc:	1124      	asrs	r4, r4, #4
 800c0de:	2c00      	cmp	r4, #0
 800c0e0:	f040 8084 	bne.w	800c1ec <_dtoa_r+0x4cc>
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1d2      	bne.n	800c08e <_dtoa_r+0x36e>
 800c0e8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c0ec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c0f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f000 8087 	beq.w	800c206 <_dtoa_r+0x4e6>
 800c0f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	4b6f      	ldr	r3, [pc, #444]	; (800c2bc <_dtoa_r+0x59c>)
 800c100:	f7f4 fc5c 	bl	80009bc <__aeabi_dcmplt>
 800c104:	2800      	cmp	r0, #0
 800c106:	d07e      	beq.n	800c206 <_dtoa_r+0x4e6>
 800c108:	9b08      	ldr	r3, [sp, #32]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d07b      	beq.n	800c206 <_dtoa_r+0x4e6>
 800c10e:	9b06      	ldr	r3, [sp, #24]
 800c110:	2b00      	cmp	r3, #0
 800c112:	dd38      	ble.n	800c186 <_dtoa_r+0x466>
 800c114:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c118:	2200      	movs	r2, #0
 800c11a:	4b69      	ldr	r3, [pc, #420]	; (800c2c0 <_dtoa_r+0x5a0>)
 800c11c:	f7f4 f9dc 	bl	80004d8 <__aeabi_dmul>
 800c120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c124:	9c06      	ldr	r4, [sp, #24]
 800c126:	f10b 38ff 	add.w	r8, fp, #4294967295
 800c12a:	3701      	adds	r7, #1
 800c12c:	4638      	mov	r0, r7
 800c12e:	f7f4 f969 	bl	8000404 <__aeabi_i2d>
 800c132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c136:	f7f4 f9cf 	bl	80004d8 <__aeabi_dmul>
 800c13a:	2200      	movs	r2, #0
 800c13c:	4b61      	ldr	r3, [pc, #388]	; (800c2c4 <_dtoa_r+0x5a4>)
 800c13e:	f7f4 f815 	bl	800016c <__adddf3>
 800c142:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c146:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c14a:	9611      	str	r6, [sp, #68]	; 0x44
 800c14c:	2c00      	cmp	r4, #0
 800c14e:	d15d      	bne.n	800c20c <_dtoa_r+0x4ec>
 800c150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c154:	2200      	movs	r2, #0
 800c156:	4b5c      	ldr	r3, [pc, #368]	; (800c2c8 <_dtoa_r+0x5a8>)
 800c158:	f7f4 f806 	bl	8000168 <__aeabi_dsub>
 800c15c:	4602      	mov	r2, r0
 800c15e:	460b      	mov	r3, r1
 800c160:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c164:	4633      	mov	r3, r6
 800c166:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c168:	f7f4 fc46 	bl	80009f8 <__aeabi_dcmpgt>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	f040 8295 	bne.w	800c69c <_dtoa_r+0x97c>
 800c172:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c176:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c178:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c17c:	f7f4 fc1e 	bl	80009bc <__aeabi_dcmplt>
 800c180:	2800      	cmp	r0, #0
 800c182:	f040 8289 	bne.w	800c698 <_dtoa_r+0x978>
 800c186:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c18a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c18e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c190:	2b00      	cmp	r3, #0
 800c192:	f2c0 8151 	blt.w	800c438 <_dtoa_r+0x718>
 800c196:	f1bb 0f0e 	cmp.w	fp, #14
 800c19a:	f300 814d 	bgt.w	800c438 <_dtoa_r+0x718>
 800c19e:	4b45      	ldr	r3, [pc, #276]	; (800c2b4 <_dtoa_r+0x594>)
 800c1a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c1a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c1a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c1ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f280 80da 	bge.w	800c368 <_dtoa_r+0x648>
 800c1b4:	9b08      	ldr	r3, [sp, #32]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f300 80d6 	bgt.w	800c368 <_dtoa_r+0x648>
 800c1bc:	f040 826b 	bne.w	800c696 <_dtoa_r+0x976>
 800c1c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	4b40      	ldr	r3, [pc, #256]	; (800c2c8 <_dtoa_r+0x5a8>)
 800c1c8:	f7f4 f986 	bl	80004d8 <__aeabi_dmul>
 800c1cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1d0:	f7f4 fc08 	bl	80009e4 <__aeabi_dcmpge>
 800c1d4:	9c08      	ldr	r4, [sp, #32]
 800c1d6:	4626      	mov	r6, r4
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	f040 8241 	bne.w	800c660 <_dtoa_r+0x940>
 800c1de:	2331      	movs	r3, #49	; 0x31
 800c1e0:	9f03      	ldr	r7, [sp, #12]
 800c1e2:	f10b 0b01 	add.w	fp, fp, #1
 800c1e6:	f807 3b01 	strb.w	r3, [r7], #1
 800c1ea:	e23d      	b.n	800c668 <_dtoa_r+0x948>
 800c1ec:	07e2      	lsls	r2, r4, #31
 800c1ee:	d505      	bpl.n	800c1fc <_dtoa_r+0x4dc>
 800c1f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1f4:	f7f4 f970 	bl	80004d8 <__aeabi_dmul>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	3701      	adds	r7, #1
 800c1fc:	1064      	asrs	r4, r4, #1
 800c1fe:	3608      	adds	r6, #8
 800c200:	e76d      	b.n	800c0de <_dtoa_r+0x3be>
 800c202:	2702      	movs	r7, #2
 800c204:	e770      	b.n	800c0e8 <_dtoa_r+0x3c8>
 800c206:	46d8      	mov	r8, fp
 800c208:	9c08      	ldr	r4, [sp, #32]
 800c20a:	e78f      	b.n	800c12c <_dtoa_r+0x40c>
 800c20c:	9903      	ldr	r1, [sp, #12]
 800c20e:	4b29      	ldr	r3, [pc, #164]	; (800c2b4 <_dtoa_r+0x594>)
 800c210:	4421      	add	r1, r4
 800c212:	9112      	str	r1, [sp, #72]	; 0x48
 800c214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c216:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c21a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c21e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c222:	2900      	cmp	r1, #0
 800c224:	d054      	beq.n	800c2d0 <_dtoa_r+0x5b0>
 800c226:	2000      	movs	r0, #0
 800c228:	4928      	ldr	r1, [pc, #160]	; (800c2cc <_dtoa_r+0x5ac>)
 800c22a:	f7f4 fa7f 	bl	800072c <__aeabi_ddiv>
 800c22e:	463b      	mov	r3, r7
 800c230:	4632      	mov	r2, r6
 800c232:	f7f3 ff99 	bl	8000168 <__aeabi_dsub>
 800c236:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c23a:	9f03      	ldr	r7, [sp, #12]
 800c23c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c240:	f7f4 fbfa 	bl	8000a38 <__aeabi_d2iz>
 800c244:	4604      	mov	r4, r0
 800c246:	f7f4 f8dd 	bl	8000404 <__aeabi_i2d>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c252:	f7f3 ff89 	bl	8000168 <__aeabi_dsub>
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	3430      	adds	r4, #48	; 0x30
 800c25c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c264:	f807 4b01 	strb.w	r4, [r7], #1
 800c268:	f7f4 fba8 	bl	80009bc <__aeabi_dcmplt>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d173      	bne.n	800c358 <_dtoa_r+0x638>
 800c270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c274:	2000      	movs	r0, #0
 800c276:	4911      	ldr	r1, [pc, #68]	; (800c2bc <_dtoa_r+0x59c>)
 800c278:	f7f3 ff76 	bl	8000168 <__aeabi_dsub>
 800c27c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c280:	f7f4 fb9c 	bl	80009bc <__aeabi_dcmplt>
 800c284:	2800      	cmp	r0, #0
 800c286:	f040 80b6 	bne.w	800c3f6 <_dtoa_r+0x6d6>
 800c28a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c28c:	429f      	cmp	r7, r3
 800c28e:	f43f af7a 	beq.w	800c186 <_dtoa_r+0x466>
 800c292:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c296:	2200      	movs	r2, #0
 800c298:	4b09      	ldr	r3, [pc, #36]	; (800c2c0 <_dtoa_r+0x5a0>)
 800c29a:	f7f4 f91d 	bl	80004d8 <__aeabi_dmul>
 800c29e:	2200      	movs	r2, #0
 800c2a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c2a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2a8:	4b05      	ldr	r3, [pc, #20]	; (800c2c0 <_dtoa_r+0x5a0>)
 800c2aa:	f7f4 f915 	bl	80004d8 <__aeabi_dmul>
 800c2ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2b2:	e7c3      	b.n	800c23c <_dtoa_r+0x51c>
 800c2b4:	0800f4d0 	.word	0x0800f4d0
 800c2b8:	0800f4a8 	.word	0x0800f4a8
 800c2bc:	3ff00000 	.word	0x3ff00000
 800c2c0:	40240000 	.word	0x40240000
 800c2c4:	401c0000 	.word	0x401c0000
 800c2c8:	40140000 	.word	0x40140000
 800c2cc:	3fe00000 	.word	0x3fe00000
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	f7f4 f900 	bl	80004d8 <__aeabi_dmul>
 800c2d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c2de:	9c03      	ldr	r4, [sp, #12]
 800c2e0:	9314      	str	r3, [sp, #80]	; 0x50
 800c2e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2e6:	f7f4 fba7 	bl	8000a38 <__aeabi_d2iz>
 800c2ea:	9015      	str	r0, [sp, #84]	; 0x54
 800c2ec:	f7f4 f88a 	bl	8000404 <__aeabi_i2d>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2f8:	f7f3 ff36 	bl	8000168 <__aeabi_dsub>
 800c2fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2fe:	4606      	mov	r6, r0
 800c300:	3330      	adds	r3, #48	; 0x30
 800c302:	f804 3b01 	strb.w	r3, [r4], #1
 800c306:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c308:	460f      	mov	r7, r1
 800c30a:	429c      	cmp	r4, r3
 800c30c:	f04f 0200 	mov.w	r2, #0
 800c310:	d124      	bne.n	800c35c <_dtoa_r+0x63c>
 800c312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c316:	4baf      	ldr	r3, [pc, #700]	; (800c5d4 <_dtoa_r+0x8b4>)
 800c318:	f7f3 ff28 	bl	800016c <__adddf3>
 800c31c:	4602      	mov	r2, r0
 800c31e:	460b      	mov	r3, r1
 800c320:	4630      	mov	r0, r6
 800c322:	4639      	mov	r1, r7
 800c324:	f7f4 fb68 	bl	80009f8 <__aeabi_dcmpgt>
 800c328:	2800      	cmp	r0, #0
 800c32a:	d163      	bne.n	800c3f4 <_dtoa_r+0x6d4>
 800c32c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c330:	2000      	movs	r0, #0
 800c332:	49a8      	ldr	r1, [pc, #672]	; (800c5d4 <_dtoa_r+0x8b4>)
 800c334:	f7f3 ff18 	bl	8000168 <__aeabi_dsub>
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	4630      	mov	r0, r6
 800c33e:	4639      	mov	r1, r7
 800c340:	f7f4 fb3c 	bl	80009bc <__aeabi_dcmplt>
 800c344:	2800      	cmp	r0, #0
 800c346:	f43f af1e 	beq.w	800c186 <_dtoa_r+0x466>
 800c34a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c34c:	1e7b      	subs	r3, r7, #1
 800c34e:	9314      	str	r3, [sp, #80]	; 0x50
 800c350:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c354:	2b30      	cmp	r3, #48	; 0x30
 800c356:	d0f8      	beq.n	800c34a <_dtoa_r+0x62a>
 800c358:	46c3      	mov	fp, r8
 800c35a:	e03b      	b.n	800c3d4 <_dtoa_r+0x6b4>
 800c35c:	4b9e      	ldr	r3, [pc, #632]	; (800c5d8 <_dtoa_r+0x8b8>)
 800c35e:	f7f4 f8bb 	bl	80004d8 <__aeabi_dmul>
 800c362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c366:	e7bc      	b.n	800c2e2 <_dtoa_r+0x5c2>
 800c368:	9f03      	ldr	r7, [sp, #12]
 800c36a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c36e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c372:	4640      	mov	r0, r8
 800c374:	4649      	mov	r1, r9
 800c376:	f7f4 f9d9 	bl	800072c <__aeabi_ddiv>
 800c37a:	f7f4 fb5d 	bl	8000a38 <__aeabi_d2iz>
 800c37e:	4604      	mov	r4, r0
 800c380:	f7f4 f840 	bl	8000404 <__aeabi_i2d>
 800c384:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c388:	f7f4 f8a6 	bl	80004d8 <__aeabi_dmul>
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	4640      	mov	r0, r8
 800c392:	4649      	mov	r1, r9
 800c394:	f7f3 fee8 	bl	8000168 <__aeabi_dsub>
 800c398:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c39c:	f807 6b01 	strb.w	r6, [r7], #1
 800c3a0:	9e03      	ldr	r6, [sp, #12]
 800c3a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c3a6:	1bbe      	subs	r6, r7, r6
 800c3a8:	45b4      	cmp	ip, r6
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	d136      	bne.n	800c41e <_dtoa_r+0x6fe>
 800c3b0:	f7f3 fedc 	bl	800016c <__adddf3>
 800c3b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c3b8:	4680      	mov	r8, r0
 800c3ba:	4689      	mov	r9, r1
 800c3bc:	f7f4 fb1c 	bl	80009f8 <__aeabi_dcmpgt>
 800c3c0:	bb58      	cbnz	r0, 800c41a <_dtoa_r+0x6fa>
 800c3c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c3c6:	4640      	mov	r0, r8
 800c3c8:	4649      	mov	r1, r9
 800c3ca:	f7f4 faed 	bl	80009a8 <__aeabi_dcmpeq>
 800c3ce:	b108      	cbz	r0, 800c3d4 <_dtoa_r+0x6b4>
 800c3d0:	07e3      	lsls	r3, r4, #31
 800c3d2:	d422      	bmi.n	800c41a <_dtoa_r+0x6fa>
 800c3d4:	4651      	mov	r1, sl
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f000 fe7a 	bl	800d0d0 <_Bfree>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c3e0:	703b      	strb	r3, [r7, #0]
 800c3e2:	f10b 0301 	add.w	r3, fp, #1
 800c3e6:	6013      	str	r3, [r2, #0]
 800c3e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f43f ace6 	beq.w	800bdbc <_dtoa_r+0x9c>
 800c3f0:	601f      	str	r7, [r3, #0]
 800c3f2:	e4e3      	b.n	800bdbc <_dtoa_r+0x9c>
 800c3f4:	4627      	mov	r7, r4
 800c3f6:	463b      	mov	r3, r7
 800c3f8:	461f      	mov	r7, r3
 800c3fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3fe:	2a39      	cmp	r2, #57	; 0x39
 800c400:	d107      	bne.n	800c412 <_dtoa_r+0x6f2>
 800c402:	9a03      	ldr	r2, [sp, #12]
 800c404:	429a      	cmp	r2, r3
 800c406:	d1f7      	bne.n	800c3f8 <_dtoa_r+0x6d8>
 800c408:	2230      	movs	r2, #48	; 0x30
 800c40a:	9903      	ldr	r1, [sp, #12]
 800c40c:	f108 0801 	add.w	r8, r8, #1
 800c410:	700a      	strb	r2, [r1, #0]
 800c412:	781a      	ldrb	r2, [r3, #0]
 800c414:	3201      	adds	r2, #1
 800c416:	701a      	strb	r2, [r3, #0]
 800c418:	e79e      	b.n	800c358 <_dtoa_r+0x638>
 800c41a:	46d8      	mov	r8, fp
 800c41c:	e7eb      	b.n	800c3f6 <_dtoa_r+0x6d6>
 800c41e:	2200      	movs	r2, #0
 800c420:	4b6d      	ldr	r3, [pc, #436]	; (800c5d8 <_dtoa_r+0x8b8>)
 800c422:	f7f4 f859 	bl	80004d8 <__aeabi_dmul>
 800c426:	2200      	movs	r2, #0
 800c428:	2300      	movs	r3, #0
 800c42a:	4680      	mov	r8, r0
 800c42c:	4689      	mov	r9, r1
 800c42e:	f7f4 fabb 	bl	80009a8 <__aeabi_dcmpeq>
 800c432:	2800      	cmp	r0, #0
 800c434:	d09b      	beq.n	800c36e <_dtoa_r+0x64e>
 800c436:	e7cd      	b.n	800c3d4 <_dtoa_r+0x6b4>
 800c438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c43a:	2a00      	cmp	r2, #0
 800c43c:	f000 80c4 	beq.w	800c5c8 <_dtoa_r+0x8a8>
 800c440:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c442:	2a01      	cmp	r2, #1
 800c444:	f300 80a8 	bgt.w	800c598 <_dtoa_r+0x878>
 800c448:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c44a:	2a00      	cmp	r2, #0
 800c44c:	f000 80a0 	beq.w	800c590 <_dtoa_r+0x870>
 800c450:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c454:	464f      	mov	r7, r9
 800c456:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c45a:	2101      	movs	r1, #1
 800c45c:	441a      	add	r2, r3
 800c45e:	4628      	mov	r0, r5
 800c460:	4499      	add	r9, r3
 800c462:	9209      	str	r2, [sp, #36]	; 0x24
 800c464:	f000 ff34 	bl	800d2d0 <__i2b>
 800c468:	4606      	mov	r6, r0
 800c46a:	b15f      	cbz	r7, 800c484 <_dtoa_r+0x764>
 800c46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c46e:	2b00      	cmp	r3, #0
 800c470:	dd08      	ble.n	800c484 <_dtoa_r+0x764>
 800c472:	42bb      	cmp	r3, r7
 800c474:	bfa8      	it	ge
 800c476:	463b      	movge	r3, r7
 800c478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c47a:	eba9 0903 	sub.w	r9, r9, r3
 800c47e:	1aff      	subs	r7, r7, r3
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	9309      	str	r3, [sp, #36]	; 0x24
 800c484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c486:	b1f3      	cbz	r3, 800c4c6 <_dtoa_r+0x7a6>
 800c488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 80a0 	beq.w	800c5d0 <_dtoa_r+0x8b0>
 800c490:	2c00      	cmp	r4, #0
 800c492:	dd10      	ble.n	800c4b6 <_dtoa_r+0x796>
 800c494:	4631      	mov	r1, r6
 800c496:	4622      	mov	r2, r4
 800c498:	4628      	mov	r0, r5
 800c49a:	f000 ffd7 	bl	800d44c <__pow5mult>
 800c49e:	4652      	mov	r2, sl
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f000 ff29 	bl	800d2fc <__multiply>
 800c4aa:	4680      	mov	r8, r0
 800c4ac:	4651      	mov	r1, sl
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	f000 fe0e 	bl	800d0d0 <_Bfree>
 800c4b4:	46c2      	mov	sl, r8
 800c4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4b8:	1b1a      	subs	r2, r3, r4
 800c4ba:	d004      	beq.n	800c4c6 <_dtoa_r+0x7a6>
 800c4bc:	4651      	mov	r1, sl
 800c4be:	4628      	mov	r0, r5
 800c4c0:	f000 ffc4 	bl	800d44c <__pow5mult>
 800c4c4:	4682      	mov	sl, r0
 800c4c6:	2101      	movs	r1, #1
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f000 ff01 	bl	800d2d0 <__i2b>
 800c4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f340 8082 	ble.w	800c5dc <_dtoa_r+0x8bc>
 800c4d8:	461a      	mov	r2, r3
 800c4da:	4601      	mov	r1, r0
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f000 ffb5 	bl	800d44c <__pow5mult>
 800c4e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	dd7b      	ble.n	800c5e2 <_dtoa_r+0x8c2>
 800c4ea:	f04f 0800 	mov.w	r8, #0
 800c4ee:	6923      	ldr	r3, [r4, #16]
 800c4f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4f4:	6918      	ldr	r0, [r3, #16]
 800c4f6:	f000 fe9d 	bl	800d234 <__hi0bits>
 800c4fa:	f1c0 0020 	rsb	r0, r0, #32
 800c4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c500:	4418      	add	r0, r3
 800c502:	f010 001f 	ands.w	r0, r0, #31
 800c506:	f000 8092 	beq.w	800c62e <_dtoa_r+0x90e>
 800c50a:	f1c0 0320 	rsb	r3, r0, #32
 800c50e:	2b04      	cmp	r3, #4
 800c510:	f340 8085 	ble.w	800c61e <_dtoa_r+0x8fe>
 800c514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c516:	f1c0 001c 	rsb	r0, r0, #28
 800c51a:	4403      	add	r3, r0
 800c51c:	4481      	add	r9, r0
 800c51e:	4407      	add	r7, r0
 800c520:	9309      	str	r3, [sp, #36]	; 0x24
 800c522:	f1b9 0f00 	cmp.w	r9, #0
 800c526:	dd05      	ble.n	800c534 <_dtoa_r+0x814>
 800c528:	4651      	mov	r1, sl
 800c52a:	464a      	mov	r2, r9
 800c52c:	4628      	mov	r0, r5
 800c52e:	f000 ffe7 	bl	800d500 <__lshift>
 800c532:	4682      	mov	sl, r0
 800c534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c536:	2b00      	cmp	r3, #0
 800c538:	dd05      	ble.n	800c546 <_dtoa_r+0x826>
 800c53a:	4621      	mov	r1, r4
 800c53c:	461a      	mov	r2, r3
 800c53e:	4628      	mov	r0, r5
 800c540:	f000 ffde 	bl	800d500 <__lshift>
 800c544:	4604      	mov	r4, r0
 800c546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d072      	beq.n	800c632 <_dtoa_r+0x912>
 800c54c:	4621      	mov	r1, r4
 800c54e:	4650      	mov	r0, sl
 800c550:	f001 f842 	bl	800d5d8 <__mcmp>
 800c554:	2800      	cmp	r0, #0
 800c556:	da6c      	bge.n	800c632 <_dtoa_r+0x912>
 800c558:	2300      	movs	r3, #0
 800c55a:	4651      	mov	r1, sl
 800c55c:	220a      	movs	r2, #10
 800c55e:	4628      	mov	r0, r5
 800c560:	f000 fdd8 	bl	800d114 <__multadd>
 800c564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c566:	4682      	mov	sl, r0
 800c568:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 81ac 	beq.w	800c8ca <_dtoa_r+0xbaa>
 800c572:	2300      	movs	r3, #0
 800c574:	4631      	mov	r1, r6
 800c576:	220a      	movs	r2, #10
 800c578:	4628      	mov	r0, r5
 800c57a:	f000 fdcb 	bl	800d114 <__multadd>
 800c57e:	9b06      	ldr	r3, [sp, #24]
 800c580:	4606      	mov	r6, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	f300 8093 	bgt.w	800c6ae <_dtoa_r+0x98e>
 800c588:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c58a:	2b02      	cmp	r3, #2
 800c58c:	dc59      	bgt.n	800c642 <_dtoa_r+0x922>
 800c58e:	e08e      	b.n	800c6ae <_dtoa_r+0x98e>
 800c590:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c592:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c596:	e75d      	b.n	800c454 <_dtoa_r+0x734>
 800c598:	9b08      	ldr	r3, [sp, #32]
 800c59a:	1e5c      	subs	r4, r3, #1
 800c59c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c59e:	42a3      	cmp	r3, r4
 800c5a0:	bfbf      	itttt	lt
 800c5a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c5a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c5a6:	1ae3      	sublt	r3, r4, r3
 800c5a8:	18d2      	addlt	r2, r2, r3
 800c5aa:	bfa8      	it	ge
 800c5ac:	1b1c      	subge	r4, r3, r4
 800c5ae:	9b08      	ldr	r3, [sp, #32]
 800c5b0:	bfbe      	ittt	lt
 800c5b2:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c5b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 800c5b6:	2400      	movlt	r4, #0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	bfb5      	itete	lt
 800c5bc:	eba9 0703 	sublt.w	r7, r9, r3
 800c5c0:	464f      	movge	r7, r9
 800c5c2:	2300      	movlt	r3, #0
 800c5c4:	9b08      	ldrge	r3, [sp, #32]
 800c5c6:	e747      	b.n	800c458 <_dtoa_r+0x738>
 800c5c8:	464f      	mov	r7, r9
 800c5ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c5cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c5ce:	e74c      	b.n	800c46a <_dtoa_r+0x74a>
 800c5d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5d2:	e773      	b.n	800c4bc <_dtoa_r+0x79c>
 800c5d4:	3fe00000 	.word	0x3fe00000
 800c5d8:	40240000 	.word	0x40240000
 800c5dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	dc18      	bgt.n	800c614 <_dtoa_r+0x8f4>
 800c5e2:	9b04      	ldr	r3, [sp, #16]
 800c5e4:	b9b3      	cbnz	r3, 800c614 <_dtoa_r+0x8f4>
 800c5e6:	9b05      	ldr	r3, [sp, #20]
 800c5e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5ec:	b993      	cbnz	r3, 800c614 <_dtoa_r+0x8f4>
 800c5ee:	9b05      	ldr	r3, [sp, #20]
 800c5f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5f4:	0d1b      	lsrs	r3, r3, #20
 800c5f6:	051b      	lsls	r3, r3, #20
 800c5f8:	b17b      	cbz	r3, 800c61a <_dtoa_r+0x8fa>
 800c5fa:	f04f 0801 	mov.w	r8, #1
 800c5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c600:	f109 0901 	add.w	r9, r9, #1
 800c604:	3301      	adds	r3, #1
 800c606:	9309      	str	r3, [sp, #36]	; 0x24
 800c608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f47f af6f 	bne.w	800c4ee <_dtoa_r+0x7ce>
 800c610:	2001      	movs	r0, #1
 800c612:	e774      	b.n	800c4fe <_dtoa_r+0x7de>
 800c614:	f04f 0800 	mov.w	r8, #0
 800c618:	e7f6      	b.n	800c608 <_dtoa_r+0x8e8>
 800c61a:	4698      	mov	r8, r3
 800c61c:	e7f4      	b.n	800c608 <_dtoa_r+0x8e8>
 800c61e:	d080      	beq.n	800c522 <_dtoa_r+0x802>
 800c620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c622:	331c      	adds	r3, #28
 800c624:	441a      	add	r2, r3
 800c626:	4499      	add	r9, r3
 800c628:	441f      	add	r7, r3
 800c62a:	9209      	str	r2, [sp, #36]	; 0x24
 800c62c:	e779      	b.n	800c522 <_dtoa_r+0x802>
 800c62e:	4603      	mov	r3, r0
 800c630:	e7f6      	b.n	800c620 <_dtoa_r+0x900>
 800c632:	9b08      	ldr	r3, [sp, #32]
 800c634:	2b00      	cmp	r3, #0
 800c636:	dc34      	bgt.n	800c6a2 <_dtoa_r+0x982>
 800c638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	dd31      	ble.n	800c6a2 <_dtoa_r+0x982>
 800c63e:	9b08      	ldr	r3, [sp, #32]
 800c640:	9306      	str	r3, [sp, #24]
 800c642:	9b06      	ldr	r3, [sp, #24]
 800c644:	b963      	cbnz	r3, 800c660 <_dtoa_r+0x940>
 800c646:	4621      	mov	r1, r4
 800c648:	2205      	movs	r2, #5
 800c64a:	4628      	mov	r0, r5
 800c64c:	f000 fd62 	bl	800d114 <__multadd>
 800c650:	4601      	mov	r1, r0
 800c652:	4604      	mov	r4, r0
 800c654:	4650      	mov	r0, sl
 800c656:	f000 ffbf 	bl	800d5d8 <__mcmp>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	f73f adbf 	bgt.w	800c1de <_dtoa_r+0x4be>
 800c660:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c662:	9f03      	ldr	r7, [sp, #12]
 800c664:	ea6f 0b03 	mvn.w	fp, r3
 800c668:	f04f 0800 	mov.w	r8, #0
 800c66c:	4621      	mov	r1, r4
 800c66e:	4628      	mov	r0, r5
 800c670:	f000 fd2e 	bl	800d0d0 <_Bfree>
 800c674:	2e00      	cmp	r6, #0
 800c676:	f43f aead 	beq.w	800c3d4 <_dtoa_r+0x6b4>
 800c67a:	f1b8 0f00 	cmp.w	r8, #0
 800c67e:	d005      	beq.n	800c68c <_dtoa_r+0x96c>
 800c680:	45b0      	cmp	r8, r6
 800c682:	d003      	beq.n	800c68c <_dtoa_r+0x96c>
 800c684:	4641      	mov	r1, r8
 800c686:	4628      	mov	r0, r5
 800c688:	f000 fd22 	bl	800d0d0 <_Bfree>
 800c68c:	4631      	mov	r1, r6
 800c68e:	4628      	mov	r0, r5
 800c690:	f000 fd1e 	bl	800d0d0 <_Bfree>
 800c694:	e69e      	b.n	800c3d4 <_dtoa_r+0x6b4>
 800c696:	2400      	movs	r4, #0
 800c698:	4626      	mov	r6, r4
 800c69a:	e7e1      	b.n	800c660 <_dtoa_r+0x940>
 800c69c:	46c3      	mov	fp, r8
 800c69e:	4626      	mov	r6, r4
 800c6a0:	e59d      	b.n	800c1de <_dtoa_r+0x4be>
 800c6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f000 80c8 	beq.w	800c83a <_dtoa_r+0xb1a>
 800c6aa:	9b08      	ldr	r3, [sp, #32]
 800c6ac:	9306      	str	r3, [sp, #24]
 800c6ae:	2f00      	cmp	r7, #0
 800c6b0:	dd05      	ble.n	800c6be <_dtoa_r+0x99e>
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	463a      	mov	r2, r7
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f000 ff22 	bl	800d500 <__lshift>
 800c6bc:	4606      	mov	r6, r0
 800c6be:	f1b8 0f00 	cmp.w	r8, #0
 800c6c2:	d05b      	beq.n	800c77c <_dtoa_r+0xa5c>
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	6871      	ldr	r1, [r6, #4]
 800c6c8:	f000 fcc2 	bl	800d050 <_Balloc>
 800c6cc:	4607      	mov	r7, r0
 800c6ce:	b928      	cbnz	r0, 800c6dc <_dtoa_r+0x9bc>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c6d6:	4b81      	ldr	r3, [pc, #516]	; (800c8dc <_dtoa_r+0xbbc>)
 800c6d8:	f7ff bb36 	b.w	800bd48 <_dtoa_r+0x28>
 800c6dc:	6932      	ldr	r2, [r6, #16]
 800c6de:	f106 010c 	add.w	r1, r6, #12
 800c6e2:	3202      	adds	r2, #2
 800c6e4:	0092      	lsls	r2, r2, #2
 800c6e6:	300c      	adds	r0, #12
 800c6e8:	f7ff fa78 	bl	800bbdc <memcpy>
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	4639      	mov	r1, r7
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	f000 ff05 	bl	800d500 <__lshift>
 800c6f6:	46b0      	mov	r8, r6
 800c6f8:	4606      	mov	r6, r0
 800c6fa:	9b03      	ldr	r3, [sp, #12]
 800c6fc:	9a03      	ldr	r2, [sp, #12]
 800c6fe:	3301      	adds	r3, #1
 800c700:	9308      	str	r3, [sp, #32]
 800c702:	9b06      	ldr	r3, [sp, #24]
 800c704:	4413      	add	r3, r2
 800c706:	930b      	str	r3, [sp, #44]	; 0x2c
 800c708:	9b04      	ldr	r3, [sp, #16]
 800c70a:	f003 0301 	and.w	r3, r3, #1
 800c70e:	930a      	str	r3, [sp, #40]	; 0x28
 800c710:	9b08      	ldr	r3, [sp, #32]
 800c712:	4621      	mov	r1, r4
 800c714:	3b01      	subs	r3, #1
 800c716:	4650      	mov	r0, sl
 800c718:	9304      	str	r3, [sp, #16]
 800c71a:	f7ff fa77 	bl	800bc0c <quorem>
 800c71e:	4641      	mov	r1, r8
 800c720:	9006      	str	r0, [sp, #24]
 800c722:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c726:	4650      	mov	r0, sl
 800c728:	f000 ff56 	bl	800d5d8 <__mcmp>
 800c72c:	4632      	mov	r2, r6
 800c72e:	9009      	str	r0, [sp, #36]	; 0x24
 800c730:	4621      	mov	r1, r4
 800c732:	4628      	mov	r0, r5
 800c734:	f000 ff6c 	bl	800d610 <__mdiff>
 800c738:	68c2      	ldr	r2, [r0, #12]
 800c73a:	4607      	mov	r7, r0
 800c73c:	bb02      	cbnz	r2, 800c780 <_dtoa_r+0xa60>
 800c73e:	4601      	mov	r1, r0
 800c740:	4650      	mov	r0, sl
 800c742:	f000 ff49 	bl	800d5d8 <__mcmp>
 800c746:	4602      	mov	r2, r0
 800c748:	4639      	mov	r1, r7
 800c74a:	4628      	mov	r0, r5
 800c74c:	920c      	str	r2, [sp, #48]	; 0x30
 800c74e:	f000 fcbf 	bl	800d0d0 <_Bfree>
 800c752:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c756:	9f08      	ldr	r7, [sp, #32]
 800c758:	ea43 0102 	orr.w	r1, r3, r2
 800c75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c75e:	4319      	orrs	r1, r3
 800c760:	d110      	bne.n	800c784 <_dtoa_r+0xa64>
 800c762:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c766:	d029      	beq.n	800c7bc <_dtoa_r+0xa9c>
 800c768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	dd02      	ble.n	800c774 <_dtoa_r+0xa54>
 800c76e:	9b06      	ldr	r3, [sp, #24]
 800c770:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c774:	9b04      	ldr	r3, [sp, #16]
 800c776:	f883 9000 	strb.w	r9, [r3]
 800c77a:	e777      	b.n	800c66c <_dtoa_r+0x94c>
 800c77c:	4630      	mov	r0, r6
 800c77e:	e7ba      	b.n	800c6f6 <_dtoa_r+0x9d6>
 800c780:	2201      	movs	r2, #1
 800c782:	e7e1      	b.n	800c748 <_dtoa_r+0xa28>
 800c784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c786:	2b00      	cmp	r3, #0
 800c788:	db04      	blt.n	800c794 <_dtoa_r+0xa74>
 800c78a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c78c:	430b      	orrs	r3, r1
 800c78e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c790:	430b      	orrs	r3, r1
 800c792:	d120      	bne.n	800c7d6 <_dtoa_r+0xab6>
 800c794:	2a00      	cmp	r2, #0
 800c796:	dded      	ble.n	800c774 <_dtoa_r+0xa54>
 800c798:	4651      	mov	r1, sl
 800c79a:	2201      	movs	r2, #1
 800c79c:	4628      	mov	r0, r5
 800c79e:	f000 feaf 	bl	800d500 <__lshift>
 800c7a2:	4621      	mov	r1, r4
 800c7a4:	4682      	mov	sl, r0
 800c7a6:	f000 ff17 	bl	800d5d8 <__mcmp>
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	dc03      	bgt.n	800c7b6 <_dtoa_r+0xa96>
 800c7ae:	d1e1      	bne.n	800c774 <_dtoa_r+0xa54>
 800c7b0:	f019 0f01 	tst.w	r9, #1
 800c7b4:	d0de      	beq.n	800c774 <_dtoa_r+0xa54>
 800c7b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c7ba:	d1d8      	bne.n	800c76e <_dtoa_r+0xa4e>
 800c7bc:	2339      	movs	r3, #57	; 0x39
 800c7be:	9a04      	ldr	r2, [sp, #16]
 800c7c0:	7013      	strb	r3, [r2, #0]
 800c7c2:	463b      	mov	r3, r7
 800c7c4:	461f      	mov	r7, r3
 800c7c6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	2a39      	cmp	r2, #57	; 0x39
 800c7ce:	d06b      	beq.n	800c8a8 <_dtoa_r+0xb88>
 800c7d0:	3201      	adds	r2, #1
 800c7d2:	701a      	strb	r2, [r3, #0]
 800c7d4:	e74a      	b.n	800c66c <_dtoa_r+0x94c>
 800c7d6:	2a00      	cmp	r2, #0
 800c7d8:	dd07      	ble.n	800c7ea <_dtoa_r+0xaca>
 800c7da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c7de:	d0ed      	beq.n	800c7bc <_dtoa_r+0xa9c>
 800c7e0:	9a04      	ldr	r2, [sp, #16]
 800c7e2:	f109 0301 	add.w	r3, r9, #1
 800c7e6:	7013      	strb	r3, [r2, #0]
 800c7e8:	e740      	b.n	800c66c <_dtoa_r+0x94c>
 800c7ea:	9b08      	ldr	r3, [sp, #32]
 800c7ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7ee:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d042      	beq.n	800c87c <_dtoa_r+0xb5c>
 800c7f6:	4651      	mov	r1, sl
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	220a      	movs	r2, #10
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f000 fc89 	bl	800d114 <__multadd>
 800c802:	45b0      	cmp	r8, r6
 800c804:	4682      	mov	sl, r0
 800c806:	f04f 0300 	mov.w	r3, #0
 800c80a:	f04f 020a 	mov.w	r2, #10
 800c80e:	4641      	mov	r1, r8
 800c810:	4628      	mov	r0, r5
 800c812:	d107      	bne.n	800c824 <_dtoa_r+0xb04>
 800c814:	f000 fc7e 	bl	800d114 <__multadd>
 800c818:	4680      	mov	r8, r0
 800c81a:	4606      	mov	r6, r0
 800c81c:	9b08      	ldr	r3, [sp, #32]
 800c81e:	3301      	adds	r3, #1
 800c820:	9308      	str	r3, [sp, #32]
 800c822:	e775      	b.n	800c710 <_dtoa_r+0x9f0>
 800c824:	f000 fc76 	bl	800d114 <__multadd>
 800c828:	4631      	mov	r1, r6
 800c82a:	4680      	mov	r8, r0
 800c82c:	2300      	movs	r3, #0
 800c82e:	220a      	movs	r2, #10
 800c830:	4628      	mov	r0, r5
 800c832:	f000 fc6f 	bl	800d114 <__multadd>
 800c836:	4606      	mov	r6, r0
 800c838:	e7f0      	b.n	800c81c <_dtoa_r+0xafc>
 800c83a:	9b08      	ldr	r3, [sp, #32]
 800c83c:	9306      	str	r3, [sp, #24]
 800c83e:	9f03      	ldr	r7, [sp, #12]
 800c840:	4621      	mov	r1, r4
 800c842:	4650      	mov	r0, sl
 800c844:	f7ff f9e2 	bl	800bc0c <quorem>
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c84e:	f807 9b01 	strb.w	r9, [r7], #1
 800c852:	1afa      	subs	r2, r7, r3
 800c854:	9b06      	ldr	r3, [sp, #24]
 800c856:	4293      	cmp	r3, r2
 800c858:	dd07      	ble.n	800c86a <_dtoa_r+0xb4a>
 800c85a:	4651      	mov	r1, sl
 800c85c:	2300      	movs	r3, #0
 800c85e:	220a      	movs	r2, #10
 800c860:	4628      	mov	r0, r5
 800c862:	f000 fc57 	bl	800d114 <__multadd>
 800c866:	4682      	mov	sl, r0
 800c868:	e7ea      	b.n	800c840 <_dtoa_r+0xb20>
 800c86a:	9b06      	ldr	r3, [sp, #24]
 800c86c:	f04f 0800 	mov.w	r8, #0
 800c870:	2b00      	cmp	r3, #0
 800c872:	bfcc      	ite	gt
 800c874:	461f      	movgt	r7, r3
 800c876:	2701      	movle	r7, #1
 800c878:	9b03      	ldr	r3, [sp, #12]
 800c87a:	441f      	add	r7, r3
 800c87c:	4651      	mov	r1, sl
 800c87e:	2201      	movs	r2, #1
 800c880:	4628      	mov	r0, r5
 800c882:	f000 fe3d 	bl	800d500 <__lshift>
 800c886:	4621      	mov	r1, r4
 800c888:	4682      	mov	sl, r0
 800c88a:	f000 fea5 	bl	800d5d8 <__mcmp>
 800c88e:	2800      	cmp	r0, #0
 800c890:	dc97      	bgt.n	800c7c2 <_dtoa_r+0xaa2>
 800c892:	d102      	bne.n	800c89a <_dtoa_r+0xb7a>
 800c894:	f019 0f01 	tst.w	r9, #1
 800c898:	d193      	bne.n	800c7c2 <_dtoa_r+0xaa2>
 800c89a:	463b      	mov	r3, r7
 800c89c:	461f      	mov	r7, r3
 800c89e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8a2:	2a30      	cmp	r2, #48	; 0x30
 800c8a4:	d0fa      	beq.n	800c89c <_dtoa_r+0xb7c>
 800c8a6:	e6e1      	b.n	800c66c <_dtoa_r+0x94c>
 800c8a8:	9a03      	ldr	r2, [sp, #12]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d18a      	bne.n	800c7c4 <_dtoa_r+0xaa4>
 800c8ae:	2331      	movs	r3, #49	; 0x31
 800c8b0:	f10b 0b01 	add.w	fp, fp, #1
 800c8b4:	e797      	b.n	800c7e6 <_dtoa_r+0xac6>
 800c8b6:	4b0a      	ldr	r3, [pc, #40]	; (800c8e0 <_dtoa_r+0xbc0>)
 800c8b8:	f7ff ba9f 	b.w	800bdfa <_dtoa_r+0xda>
 800c8bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f47f aa77 	bne.w	800bdb2 <_dtoa_r+0x92>
 800c8c4:	4b07      	ldr	r3, [pc, #28]	; (800c8e4 <_dtoa_r+0xbc4>)
 800c8c6:	f7ff ba98 	b.w	800bdfa <_dtoa_r+0xda>
 800c8ca:	9b06      	ldr	r3, [sp, #24]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	dcb6      	bgt.n	800c83e <_dtoa_r+0xb1e>
 800c8d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	f73f aeb5 	bgt.w	800c642 <_dtoa_r+0x922>
 800c8d8:	e7b1      	b.n	800c83e <_dtoa_r+0xb1e>
 800c8da:	bf00      	nop
 800c8dc:	0800f3d9 	.word	0x0800f3d9
 800c8e0:	0800f5cb 	.word	0x0800f5cb
 800c8e4:	0800f35d 	.word	0x0800f35d

0800c8e8 <_free_r>:
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	2900      	cmp	r1, #0
 800c8ee:	d040      	beq.n	800c972 <_free_r+0x8a>
 800c8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8f4:	1f0c      	subs	r4, r1, #4
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	bfb8      	it	lt
 800c8fa:	18e4      	addlt	r4, r4, r3
 800c8fc:	f7fd f8c8 	bl	8009a90 <__malloc_lock>
 800c900:	4a1c      	ldr	r2, [pc, #112]	; (800c974 <_free_r+0x8c>)
 800c902:	6813      	ldr	r3, [r2, #0]
 800c904:	b933      	cbnz	r3, 800c914 <_free_r+0x2c>
 800c906:	6063      	str	r3, [r4, #4]
 800c908:	6014      	str	r4, [r2, #0]
 800c90a:	4628      	mov	r0, r5
 800c90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c910:	f7fd b8c4 	b.w	8009a9c <__malloc_unlock>
 800c914:	42a3      	cmp	r3, r4
 800c916:	d908      	bls.n	800c92a <_free_r+0x42>
 800c918:	6820      	ldr	r0, [r4, #0]
 800c91a:	1821      	adds	r1, r4, r0
 800c91c:	428b      	cmp	r3, r1
 800c91e:	bf01      	itttt	eq
 800c920:	6819      	ldreq	r1, [r3, #0]
 800c922:	685b      	ldreq	r3, [r3, #4]
 800c924:	1809      	addeq	r1, r1, r0
 800c926:	6021      	streq	r1, [r4, #0]
 800c928:	e7ed      	b.n	800c906 <_free_r+0x1e>
 800c92a:	461a      	mov	r2, r3
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	b10b      	cbz	r3, 800c934 <_free_r+0x4c>
 800c930:	42a3      	cmp	r3, r4
 800c932:	d9fa      	bls.n	800c92a <_free_r+0x42>
 800c934:	6811      	ldr	r1, [r2, #0]
 800c936:	1850      	adds	r0, r2, r1
 800c938:	42a0      	cmp	r0, r4
 800c93a:	d10b      	bne.n	800c954 <_free_r+0x6c>
 800c93c:	6820      	ldr	r0, [r4, #0]
 800c93e:	4401      	add	r1, r0
 800c940:	1850      	adds	r0, r2, r1
 800c942:	4283      	cmp	r3, r0
 800c944:	6011      	str	r1, [r2, #0]
 800c946:	d1e0      	bne.n	800c90a <_free_r+0x22>
 800c948:	6818      	ldr	r0, [r3, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	4408      	add	r0, r1
 800c94e:	6010      	str	r0, [r2, #0]
 800c950:	6053      	str	r3, [r2, #4]
 800c952:	e7da      	b.n	800c90a <_free_r+0x22>
 800c954:	d902      	bls.n	800c95c <_free_r+0x74>
 800c956:	230c      	movs	r3, #12
 800c958:	602b      	str	r3, [r5, #0]
 800c95a:	e7d6      	b.n	800c90a <_free_r+0x22>
 800c95c:	6820      	ldr	r0, [r4, #0]
 800c95e:	1821      	adds	r1, r4, r0
 800c960:	428b      	cmp	r3, r1
 800c962:	bf01      	itttt	eq
 800c964:	6819      	ldreq	r1, [r3, #0]
 800c966:	685b      	ldreq	r3, [r3, #4]
 800c968:	1809      	addeq	r1, r1, r0
 800c96a:	6021      	streq	r1, [r4, #0]
 800c96c:	6063      	str	r3, [r4, #4]
 800c96e:	6054      	str	r4, [r2, #4]
 800c970:	e7cb      	b.n	800c90a <_free_r+0x22>
 800c972:	bd38      	pop	{r3, r4, r5, pc}
 800c974:	2000098c 	.word	0x2000098c

0800c978 <rshift>:
 800c978:	6903      	ldr	r3, [r0, #16]
 800c97a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c97e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c982:	f100 0414 	add.w	r4, r0, #20
 800c986:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c98a:	dd46      	ble.n	800ca1a <rshift+0xa2>
 800c98c:	f011 011f 	ands.w	r1, r1, #31
 800c990:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c994:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c998:	d10c      	bne.n	800c9b4 <rshift+0x3c>
 800c99a:	4629      	mov	r1, r5
 800c99c:	f100 0710 	add.w	r7, r0, #16
 800c9a0:	42b1      	cmp	r1, r6
 800c9a2:	d335      	bcc.n	800ca10 <rshift+0x98>
 800c9a4:	1a9b      	subs	r3, r3, r2
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	1eea      	subs	r2, r5, #3
 800c9aa:	4296      	cmp	r6, r2
 800c9ac:	bf38      	it	cc
 800c9ae:	2300      	movcc	r3, #0
 800c9b0:	4423      	add	r3, r4
 800c9b2:	e015      	b.n	800c9e0 <rshift+0x68>
 800c9b4:	46a1      	mov	r9, r4
 800c9b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c9ba:	f1c1 0820 	rsb	r8, r1, #32
 800c9be:	40cf      	lsrs	r7, r1
 800c9c0:	f105 0e04 	add.w	lr, r5, #4
 800c9c4:	4576      	cmp	r6, lr
 800c9c6:	46f4      	mov	ip, lr
 800c9c8:	d816      	bhi.n	800c9f8 <rshift+0x80>
 800c9ca:	1a9a      	subs	r2, r3, r2
 800c9cc:	0092      	lsls	r2, r2, #2
 800c9ce:	3a04      	subs	r2, #4
 800c9d0:	3501      	adds	r5, #1
 800c9d2:	42ae      	cmp	r6, r5
 800c9d4:	bf38      	it	cc
 800c9d6:	2200      	movcc	r2, #0
 800c9d8:	18a3      	adds	r3, r4, r2
 800c9da:	50a7      	str	r7, [r4, r2]
 800c9dc:	b107      	cbz	r7, 800c9e0 <rshift+0x68>
 800c9de:	3304      	adds	r3, #4
 800c9e0:	42a3      	cmp	r3, r4
 800c9e2:	eba3 0204 	sub.w	r2, r3, r4
 800c9e6:	bf08      	it	eq
 800c9e8:	2300      	moveq	r3, #0
 800c9ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c9ee:	6102      	str	r2, [r0, #16]
 800c9f0:	bf08      	it	eq
 800c9f2:	6143      	streq	r3, [r0, #20]
 800c9f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9f8:	f8dc c000 	ldr.w	ip, [ip]
 800c9fc:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca00:	ea4c 0707 	orr.w	r7, ip, r7
 800ca04:	f849 7b04 	str.w	r7, [r9], #4
 800ca08:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca0c:	40cf      	lsrs	r7, r1
 800ca0e:	e7d9      	b.n	800c9c4 <rshift+0x4c>
 800ca10:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca14:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca18:	e7c2      	b.n	800c9a0 <rshift+0x28>
 800ca1a:	4623      	mov	r3, r4
 800ca1c:	e7e0      	b.n	800c9e0 <rshift+0x68>

0800ca1e <__hexdig_fun>:
 800ca1e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ca22:	2b09      	cmp	r3, #9
 800ca24:	d802      	bhi.n	800ca2c <__hexdig_fun+0xe>
 800ca26:	3820      	subs	r0, #32
 800ca28:	b2c0      	uxtb	r0, r0
 800ca2a:	4770      	bx	lr
 800ca2c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ca30:	2b05      	cmp	r3, #5
 800ca32:	d801      	bhi.n	800ca38 <__hexdig_fun+0x1a>
 800ca34:	3847      	subs	r0, #71	; 0x47
 800ca36:	e7f7      	b.n	800ca28 <__hexdig_fun+0xa>
 800ca38:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ca3c:	2b05      	cmp	r3, #5
 800ca3e:	d801      	bhi.n	800ca44 <__hexdig_fun+0x26>
 800ca40:	3827      	subs	r0, #39	; 0x27
 800ca42:	e7f1      	b.n	800ca28 <__hexdig_fun+0xa>
 800ca44:	2000      	movs	r0, #0
 800ca46:	4770      	bx	lr

0800ca48 <__gethex>:
 800ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	4681      	mov	r9, r0
 800ca4e:	468a      	mov	sl, r1
 800ca50:	4617      	mov	r7, r2
 800ca52:	680a      	ldr	r2, [r1, #0]
 800ca54:	b085      	sub	sp, #20
 800ca56:	f102 0b02 	add.w	fp, r2, #2
 800ca5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ca5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ca62:	9302      	str	r3, [sp, #8]
 800ca64:	32fe      	adds	r2, #254	; 0xfe
 800ca66:	eb02 030b 	add.w	r3, r2, fp
 800ca6a:	46d8      	mov	r8, fp
 800ca6c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ca70:	9301      	str	r3, [sp, #4]
 800ca72:	2830      	cmp	r0, #48	; 0x30
 800ca74:	d0f7      	beq.n	800ca66 <__gethex+0x1e>
 800ca76:	f7ff ffd2 	bl	800ca1e <__hexdig_fun>
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d138      	bne.n	800caf2 <__gethex+0xaa>
 800ca80:	2201      	movs	r2, #1
 800ca82:	4640      	mov	r0, r8
 800ca84:	49a7      	ldr	r1, [pc, #668]	; (800cd24 <__gethex+0x2dc>)
 800ca86:	f7fe ffe8 	bl	800ba5a <strncmp>
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d169      	bne.n	800cb64 <__gethex+0x11c>
 800ca90:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ca94:	465d      	mov	r5, fp
 800ca96:	f7ff ffc2 	bl	800ca1e <__hexdig_fun>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d064      	beq.n	800cb68 <__gethex+0x120>
 800ca9e:	465a      	mov	r2, fp
 800caa0:	7810      	ldrb	r0, [r2, #0]
 800caa2:	4690      	mov	r8, r2
 800caa4:	2830      	cmp	r0, #48	; 0x30
 800caa6:	f102 0201 	add.w	r2, r2, #1
 800caaa:	d0f9      	beq.n	800caa0 <__gethex+0x58>
 800caac:	f7ff ffb7 	bl	800ca1e <__hexdig_fun>
 800cab0:	2301      	movs	r3, #1
 800cab2:	fab0 f480 	clz	r4, r0
 800cab6:	465e      	mov	r6, fp
 800cab8:	0964      	lsrs	r4, r4, #5
 800caba:	9301      	str	r3, [sp, #4]
 800cabc:	4642      	mov	r2, r8
 800cabe:	4615      	mov	r5, r2
 800cac0:	7828      	ldrb	r0, [r5, #0]
 800cac2:	3201      	adds	r2, #1
 800cac4:	f7ff ffab 	bl	800ca1e <__hexdig_fun>
 800cac8:	2800      	cmp	r0, #0
 800caca:	d1f8      	bne.n	800cabe <__gethex+0x76>
 800cacc:	2201      	movs	r2, #1
 800cace:	4628      	mov	r0, r5
 800cad0:	4994      	ldr	r1, [pc, #592]	; (800cd24 <__gethex+0x2dc>)
 800cad2:	f7fe ffc2 	bl	800ba5a <strncmp>
 800cad6:	b978      	cbnz	r0, 800caf8 <__gethex+0xb0>
 800cad8:	b946      	cbnz	r6, 800caec <__gethex+0xa4>
 800cada:	1c6e      	adds	r6, r5, #1
 800cadc:	4632      	mov	r2, r6
 800cade:	4615      	mov	r5, r2
 800cae0:	7828      	ldrb	r0, [r5, #0]
 800cae2:	3201      	adds	r2, #1
 800cae4:	f7ff ff9b 	bl	800ca1e <__hexdig_fun>
 800cae8:	2800      	cmp	r0, #0
 800caea:	d1f8      	bne.n	800cade <__gethex+0x96>
 800caec:	1b73      	subs	r3, r6, r5
 800caee:	009e      	lsls	r6, r3, #2
 800caf0:	e004      	b.n	800cafc <__gethex+0xb4>
 800caf2:	2400      	movs	r4, #0
 800caf4:	4626      	mov	r6, r4
 800caf6:	e7e1      	b.n	800cabc <__gethex+0x74>
 800caf8:	2e00      	cmp	r6, #0
 800cafa:	d1f7      	bne.n	800caec <__gethex+0xa4>
 800cafc:	782b      	ldrb	r3, [r5, #0]
 800cafe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb02:	2b50      	cmp	r3, #80	; 0x50
 800cb04:	d13d      	bne.n	800cb82 <__gethex+0x13a>
 800cb06:	786b      	ldrb	r3, [r5, #1]
 800cb08:	2b2b      	cmp	r3, #43	; 0x2b
 800cb0a:	d02f      	beq.n	800cb6c <__gethex+0x124>
 800cb0c:	2b2d      	cmp	r3, #45	; 0x2d
 800cb0e:	d031      	beq.n	800cb74 <__gethex+0x12c>
 800cb10:	f04f 0b00 	mov.w	fp, #0
 800cb14:	1c69      	adds	r1, r5, #1
 800cb16:	7808      	ldrb	r0, [r1, #0]
 800cb18:	f7ff ff81 	bl	800ca1e <__hexdig_fun>
 800cb1c:	1e42      	subs	r2, r0, #1
 800cb1e:	b2d2      	uxtb	r2, r2
 800cb20:	2a18      	cmp	r2, #24
 800cb22:	d82e      	bhi.n	800cb82 <__gethex+0x13a>
 800cb24:	f1a0 0210 	sub.w	r2, r0, #16
 800cb28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb2c:	f7ff ff77 	bl	800ca1e <__hexdig_fun>
 800cb30:	f100 3cff 	add.w	ip, r0, #4294967295
 800cb34:	fa5f fc8c 	uxtb.w	ip, ip
 800cb38:	f1bc 0f18 	cmp.w	ip, #24
 800cb3c:	d91d      	bls.n	800cb7a <__gethex+0x132>
 800cb3e:	f1bb 0f00 	cmp.w	fp, #0
 800cb42:	d000      	beq.n	800cb46 <__gethex+0xfe>
 800cb44:	4252      	negs	r2, r2
 800cb46:	4416      	add	r6, r2
 800cb48:	f8ca 1000 	str.w	r1, [sl]
 800cb4c:	b1dc      	cbz	r4, 800cb86 <__gethex+0x13e>
 800cb4e:	9b01      	ldr	r3, [sp, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bf14      	ite	ne
 800cb54:	f04f 0800 	movne.w	r8, #0
 800cb58:	f04f 0806 	moveq.w	r8, #6
 800cb5c:	4640      	mov	r0, r8
 800cb5e:	b005      	add	sp, #20
 800cb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb64:	4645      	mov	r5, r8
 800cb66:	4626      	mov	r6, r4
 800cb68:	2401      	movs	r4, #1
 800cb6a:	e7c7      	b.n	800cafc <__gethex+0xb4>
 800cb6c:	f04f 0b00 	mov.w	fp, #0
 800cb70:	1ca9      	adds	r1, r5, #2
 800cb72:	e7d0      	b.n	800cb16 <__gethex+0xce>
 800cb74:	f04f 0b01 	mov.w	fp, #1
 800cb78:	e7fa      	b.n	800cb70 <__gethex+0x128>
 800cb7a:	230a      	movs	r3, #10
 800cb7c:	fb03 0002 	mla	r0, r3, r2, r0
 800cb80:	e7d0      	b.n	800cb24 <__gethex+0xdc>
 800cb82:	4629      	mov	r1, r5
 800cb84:	e7e0      	b.n	800cb48 <__gethex+0x100>
 800cb86:	4621      	mov	r1, r4
 800cb88:	eba5 0308 	sub.w	r3, r5, r8
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	2b07      	cmp	r3, #7
 800cb90:	dc0a      	bgt.n	800cba8 <__gethex+0x160>
 800cb92:	4648      	mov	r0, r9
 800cb94:	f000 fa5c 	bl	800d050 <_Balloc>
 800cb98:	4604      	mov	r4, r0
 800cb9a:	b940      	cbnz	r0, 800cbae <__gethex+0x166>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	21e4      	movs	r1, #228	; 0xe4
 800cba0:	4b61      	ldr	r3, [pc, #388]	; (800cd28 <__gethex+0x2e0>)
 800cba2:	4862      	ldr	r0, [pc, #392]	; (800cd2c <__gethex+0x2e4>)
 800cba4:	f001 fe76 	bl	800e894 <__assert_func>
 800cba8:	3101      	adds	r1, #1
 800cbaa:	105b      	asrs	r3, r3, #1
 800cbac:	e7ef      	b.n	800cb8e <__gethex+0x146>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	469b      	mov	fp, r3
 800cbb2:	f100 0a14 	add.w	sl, r0, #20
 800cbb6:	f8cd a004 	str.w	sl, [sp, #4]
 800cbba:	45a8      	cmp	r8, r5
 800cbbc:	d344      	bcc.n	800cc48 <__gethex+0x200>
 800cbbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cbc2:	4658      	mov	r0, fp
 800cbc4:	f848 bb04 	str.w	fp, [r8], #4
 800cbc8:	eba8 080a 	sub.w	r8, r8, sl
 800cbcc:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800cbd0:	6122      	str	r2, [r4, #16]
 800cbd2:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800cbd6:	f000 fb2d 	bl	800d234 <__hi0bits>
 800cbda:	683d      	ldr	r5, [r7, #0]
 800cbdc:	eba8 0800 	sub.w	r8, r8, r0
 800cbe0:	45a8      	cmp	r8, r5
 800cbe2:	dd59      	ble.n	800cc98 <__gethex+0x250>
 800cbe4:	eba8 0805 	sub.w	r8, r8, r5
 800cbe8:	4641      	mov	r1, r8
 800cbea:	4620      	mov	r0, r4
 800cbec:	f000 feab 	bl	800d946 <__any_on>
 800cbf0:	4683      	mov	fp, r0
 800cbf2:	b1b8      	cbz	r0, 800cc24 <__gethex+0x1dc>
 800cbf4:	f04f 0b01 	mov.w	fp, #1
 800cbf8:	f108 33ff 	add.w	r3, r8, #4294967295
 800cbfc:	1159      	asrs	r1, r3, #5
 800cbfe:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cc02:	f003 021f 	and.w	r2, r3, #31
 800cc06:	fa0b f202 	lsl.w	r2, fp, r2
 800cc0a:	420a      	tst	r2, r1
 800cc0c:	d00a      	beq.n	800cc24 <__gethex+0x1dc>
 800cc0e:	455b      	cmp	r3, fp
 800cc10:	dd06      	ble.n	800cc20 <__gethex+0x1d8>
 800cc12:	4620      	mov	r0, r4
 800cc14:	f1a8 0102 	sub.w	r1, r8, #2
 800cc18:	f000 fe95 	bl	800d946 <__any_on>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d138      	bne.n	800cc92 <__gethex+0x24a>
 800cc20:	f04f 0b02 	mov.w	fp, #2
 800cc24:	4641      	mov	r1, r8
 800cc26:	4620      	mov	r0, r4
 800cc28:	f7ff fea6 	bl	800c978 <rshift>
 800cc2c:	4446      	add	r6, r8
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	42b3      	cmp	r3, r6
 800cc32:	da41      	bge.n	800ccb8 <__gethex+0x270>
 800cc34:	4621      	mov	r1, r4
 800cc36:	4648      	mov	r0, r9
 800cc38:	f000 fa4a 	bl	800d0d0 <_Bfree>
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc40:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	e789      	b.n	800cb5c <__gethex+0x114>
 800cc48:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cc4c:	2a2e      	cmp	r2, #46	; 0x2e
 800cc4e:	d014      	beq.n	800cc7a <__gethex+0x232>
 800cc50:	2b20      	cmp	r3, #32
 800cc52:	d106      	bne.n	800cc62 <__gethex+0x21a>
 800cc54:	9b01      	ldr	r3, [sp, #4]
 800cc56:	f843 bb04 	str.w	fp, [r3], #4
 800cc5a:	f04f 0b00 	mov.w	fp, #0
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	465b      	mov	r3, fp
 800cc62:	7828      	ldrb	r0, [r5, #0]
 800cc64:	9303      	str	r3, [sp, #12]
 800cc66:	f7ff feda 	bl	800ca1e <__hexdig_fun>
 800cc6a:	9b03      	ldr	r3, [sp, #12]
 800cc6c:	f000 000f 	and.w	r0, r0, #15
 800cc70:	4098      	lsls	r0, r3
 800cc72:	ea4b 0b00 	orr.w	fp, fp, r0
 800cc76:	3304      	adds	r3, #4
 800cc78:	e79f      	b.n	800cbba <__gethex+0x172>
 800cc7a:	45a8      	cmp	r8, r5
 800cc7c:	d8e8      	bhi.n	800cc50 <__gethex+0x208>
 800cc7e:	2201      	movs	r2, #1
 800cc80:	4628      	mov	r0, r5
 800cc82:	4928      	ldr	r1, [pc, #160]	; (800cd24 <__gethex+0x2dc>)
 800cc84:	9303      	str	r3, [sp, #12]
 800cc86:	f7fe fee8 	bl	800ba5a <strncmp>
 800cc8a:	9b03      	ldr	r3, [sp, #12]
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d1df      	bne.n	800cc50 <__gethex+0x208>
 800cc90:	e793      	b.n	800cbba <__gethex+0x172>
 800cc92:	f04f 0b03 	mov.w	fp, #3
 800cc96:	e7c5      	b.n	800cc24 <__gethex+0x1dc>
 800cc98:	da0b      	bge.n	800ccb2 <__gethex+0x26a>
 800cc9a:	eba5 0808 	sub.w	r8, r5, r8
 800cc9e:	4621      	mov	r1, r4
 800cca0:	4642      	mov	r2, r8
 800cca2:	4648      	mov	r0, r9
 800cca4:	f000 fc2c 	bl	800d500 <__lshift>
 800cca8:	4604      	mov	r4, r0
 800ccaa:	eba6 0608 	sub.w	r6, r6, r8
 800ccae:	f100 0a14 	add.w	sl, r0, #20
 800ccb2:	f04f 0b00 	mov.w	fp, #0
 800ccb6:	e7ba      	b.n	800cc2e <__gethex+0x1e6>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	42b3      	cmp	r3, r6
 800ccbc:	dd74      	ble.n	800cda8 <__gethex+0x360>
 800ccbe:	1b9e      	subs	r6, r3, r6
 800ccc0:	42b5      	cmp	r5, r6
 800ccc2:	dc35      	bgt.n	800cd30 <__gethex+0x2e8>
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2b02      	cmp	r3, #2
 800ccc8:	d023      	beq.n	800cd12 <__gethex+0x2ca>
 800ccca:	2b03      	cmp	r3, #3
 800cccc:	d025      	beq.n	800cd1a <__gethex+0x2d2>
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d115      	bne.n	800ccfe <__gethex+0x2b6>
 800ccd2:	42b5      	cmp	r5, r6
 800ccd4:	d113      	bne.n	800ccfe <__gethex+0x2b6>
 800ccd6:	2d01      	cmp	r5, #1
 800ccd8:	d10b      	bne.n	800ccf2 <__gethex+0x2aa>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	9a02      	ldr	r2, [sp, #8]
 800ccde:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cce2:	6013      	str	r3, [r2, #0]
 800cce4:	2301      	movs	r3, #1
 800cce6:	6123      	str	r3, [r4, #16]
 800cce8:	f8ca 3000 	str.w	r3, [sl]
 800ccec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccee:	601c      	str	r4, [r3, #0]
 800ccf0:	e734      	b.n	800cb5c <__gethex+0x114>
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	1e69      	subs	r1, r5, #1
 800ccf6:	f000 fe26 	bl	800d946 <__any_on>
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	d1ed      	bne.n	800ccda <__gethex+0x292>
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4648      	mov	r0, r9
 800cd02:	f000 f9e5 	bl	800d0d0 <_Bfree>
 800cd06:	2300      	movs	r3, #0
 800cd08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd0a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cd0e:	6013      	str	r3, [r2, #0]
 800cd10:	e724      	b.n	800cb5c <__gethex+0x114>
 800cd12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1f2      	bne.n	800ccfe <__gethex+0x2b6>
 800cd18:	e7df      	b.n	800ccda <__gethex+0x292>
 800cd1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1dc      	bne.n	800ccda <__gethex+0x292>
 800cd20:	e7ed      	b.n	800ccfe <__gethex+0x2b6>
 800cd22:	bf00      	nop
 800cd24:	0800f1a2 	.word	0x0800f1a2
 800cd28:	0800f3d9 	.word	0x0800f3d9
 800cd2c:	0800f3ea 	.word	0x0800f3ea
 800cd30:	f106 38ff 	add.w	r8, r6, #4294967295
 800cd34:	f1bb 0f00 	cmp.w	fp, #0
 800cd38:	d133      	bne.n	800cda2 <__gethex+0x35a>
 800cd3a:	f1b8 0f00 	cmp.w	r8, #0
 800cd3e:	d004      	beq.n	800cd4a <__gethex+0x302>
 800cd40:	4641      	mov	r1, r8
 800cd42:	4620      	mov	r0, r4
 800cd44:	f000 fdff 	bl	800d946 <__any_on>
 800cd48:	4683      	mov	fp, r0
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cd50:	f008 081f 	and.w	r8, r8, #31
 800cd54:	fa03 f308 	lsl.w	r3, r3, r8
 800cd58:	f04f 0802 	mov.w	r8, #2
 800cd5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cd60:	4631      	mov	r1, r6
 800cd62:	4213      	tst	r3, r2
 800cd64:	4620      	mov	r0, r4
 800cd66:	bf18      	it	ne
 800cd68:	f04b 0b02 	orrne.w	fp, fp, #2
 800cd6c:	1bad      	subs	r5, r5, r6
 800cd6e:	f7ff fe03 	bl	800c978 <rshift>
 800cd72:	687e      	ldr	r6, [r7, #4]
 800cd74:	f1bb 0f00 	cmp.w	fp, #0
 800cd78:	d04a      	beq.n	800ce10 <__gethex+0x3c8>
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d016      	beq.n	800cdae <__gethex+0x366>
 800cd80:	2b03      	cmp	r3, #3
 800cd82:	d018      	beq.n	800cdb6 <__gethex+0x36e>
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d109      	bne.n	800cd9c <__gethex+0x354>
 800cd88:	f01b 0f02 	tst.w	fp, #2
 800cd8c:	d006      	beq.n	800cd9c <__gethex+0x354>
 800cd8e:	f8da 3000 	ldr.w	r3, [sl]
 800cd92:	ea4b 0b03 	orr.w	fp, fp, r3
 800cd96:	f01b 0f01 	tst.w	fp, #1
 800cd9a:	d10f      	bne.n	800cdbc <__gethex+0x374>
 800cd9c:	f048 0810 	orr.w	r8, r8, #16
 800cda0:	e036      	b.n	800ce10 <__gethex+0x3c8>
 800cda2:	f04f 0b01 	mov.w	fp, #1
 800cda6:	e7d0      	b.n	800cd4a <__gethex+0x302>
 800cda8:	f04f 0801 	mov.w	r8, #1
 800cdac:	e7e2      	b.n	800cd74 <__gethex+0x32c>
 800cdae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdb0:	f1c3 0301 	rsb	r3, r3, #1
 800cdb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d0ef      	beq.n	800cd9c <__gethex+0x354>
 800cdbc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cdc0:	f104 0214 	add.w	r2, r4, #20
 800cdc4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	2300      	movs	r3, #0
 800cdcc:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cdd0:	4694      	mov	ip, r2
 800cdd2:	f852 1b04 	ldr.w	r1, [r2], #4
 800cdd6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cdda:	d01e      	beq.n	800ce1a <__gethex+0x3d2>
 800cddc:	3101      	adds	r1, #1
 800cdde:	f8cc 1000 	str.w	r1, [ip]
 800cde2:	f1b8 0f02 	cmp.w	r8, #2
 800cde6:	f104 0214 	add.w	r2, r4, #20
 800cdea:	d13d      	bne.n	800ce68 <__gethex+0x420>
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	42ab      	cmp	r3, r5
 800cdf2:	d10b      	bne.n	800ce0c <__gethex+0x3c4>
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	1169      	asrs	r1, r5, #5
 800cdf8:	f005 051f 	and.w	r5, r5, #31
 800cdfc:	fa03 f505 	lsl.w	r5, r3, r5
 800ce00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce04:	421d      	tst	r5, r3
 800ce06:	bf18      	it	ne
 800ce08:	f04f 0801 	movne.w	r8, #1
 800ce0c:	f048 0820 	orr.w	r8, r8, #32
 800ce10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce12:	601c      	str	r4, [r3, #0]
 800ce14:	9b02      	ldr	r3, [sp, #8]
 800ce16:	601e      	str	r6, [r3, #0]
 800ce18:	e6a0      	b.n	800cb5c <__gethex+0x114>
 800ce1a:	4290      	cmp	r0, r2
 800ce1c:	f842 3c04 	str.w	r3, [r2, #-4]
 800ce20:	d8d6      	bhi.n	800cdd0 <__gethex+0x388>
 800ce22:	68a2      	ldr	r2, [r4, #8]
 800ce24:	4593      	cmp	fp, r2
 800ce26:	db17      	blt.n	800ce58 <__gethex+0x410>
 800ce28:	6861      	ldr	r1, [r4, #4]
 800ce2a:	4648      	mov	r0, r9
 800ce2c:	3101      	adds	r1, #1
 800ce2e:	f000 f90f 	bl	800d050 <_Balloc>
 800ce32:	4682      	mov	sl, r0
 800ce34:	b918      	cbnz	r0, 800ce3e <__gethex+0x3f6>
 800ce36:	4602      	mov	r2, r0
 800ce38:	2184      	movs	r1, #132	; 0x84
 800ce3a:	4b1a      	ldr	r3, [pc, #104]	; (800cea4 <__gethex+0x45c>)
 800ce3c:	e6b1      	b.n	800cba2 <__gethex+0x15a>
 800ce3e:	6922      	ldr	r2, [r4, #16]
 800ce40:	f104 010c 	add.w	r1, r4, #12
 800ce44:	3202      	adds	r2, #2
 800ce46:	0092      	lsls	r2, r2, #2
 800ce48:	300c      	adds	r0, #12
 800ce4a:	f7fe fec7 	bl	800bbdc <memcpy>
 800ce4e:	4621      	mov	r1, r4
 800ce50:	4648      	mov	r0, r9
 800ce52:	f000 f93d 	bl	800d0d0 <_Bfree>
 800ce56:	4654      	mov	r4, sl
 800ce58:	6922      	ldr	r2, [r4, #16]
 800ce5a:	1c51      	adds	r1, r2, #1
 800ce5c:	6121      	str	r1, [r4, #16]
 800ce5e:	2101      	movs	r1, #1
 800ce60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ce64:	6151      	str	r1, [r2, #20]
 800ce66:	e7bc      	b.n	800cde2 <__gethex+0x39a>
 800ce68:	6921      	ldr	r1, [r4, #16]
 800ce6a:	4559      	cmp	r1, fp
 800ce6c:	dd0b      	ble.n	800ce86 <__gethex+0x43e>
 800ce6e:	2101      	movs	r1, #1
 800ce70:	4620      	mov	r0, r4
 800ce72:	f7ff fd81 	bl	800c978 <rshift>
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	3601      	adds	r6, #1
 800ce7a:	42b3      	cmp	r3, r6
 800ce7c:	f6ff aeda 	blt.w	800cc34 <__gethex+0x1ec>
 800ce80:	f04f 0801 	mov.w	r8, #1
 800ce84:	e7c2      	b.n	800ce0c <__gethex+0x3c4>
 800ce86:	f015 051f 	ands.w	r5, r5, #31
 800ce8a:	d0f9      	beq.n	800ce80 <__gethex+0x438>
 800ce8c:	9b01      	ldr	r3, [sp, #4]
 800ce8e:	f1c5 0520 	rsb	r5, r5, #32
 800ce92:	441a      	add	r2, r3
 800ce94:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ce98:	f000 f9cc 	bl	800d234 <__hi0bits>
 800ce9c:	42a8      	cmp	r0, r5
 800ce9e:	dbe6      	blt.n	800ce6e <__gethex+0x426>
 800cea0:	e7ee      	b.n	800ce80 <__gethex+0x438>
 800cea2:	bf00      	nop
 800cea4:	0800f3d9 	.word	0x0800f3d9

0800cea8 <L_shift>:
 800cea8:	f1c2 0208 	rsb	r2, r2, #8
 800ceac:	0092      	lsls	r2, r2, #2
 800ceae:	b570      	push	{r4, r5, r6, lr}
 800ceb0:	f1c2 0620 	rsb	r6, r2, #32
 800ceb4:	6843      	ldr	r3, [r0, #4]
 800ceb6:	6804      	ldr	r4, [r0, #0]
 800ceb8:	fa03 f506 	lsl.w	r5, r3, r6
 800cebc:	432c      	orrs	r4, r5
 800cebe:	40d3      	lsrs	r3, r2
 800cec0:	6004      	str	r4, [r0, #0]
 800cec2:	f840 3f04 	str.w	r3, [r0, #4]!
 800cec6:	4288      	cmp	r0, r1
 800cec8:	d3f4      	bcc.n	800ceb4 <L_shift+0xc>
 800ceca:	bd70      	pop	{r4, r5, r6, pc}

0800cecc <__match>:
 800cecc:	b530      	push	{r4, r5, lr}
 800cece:	6803      	ldr	r3, [r0, #0]
 800ced0:	3301      	adds	r3, #1
 800ced2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ced6:	b914      	cbnz	r4, 800cede <__match+0x12>
 800ced8:	6003      	str	r3, [r0, #0]
 800ceda:	2001      	movs	r0, #1
 800cedc:	bd30      	pop	{r4, r5, pc}
 800cede:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cee2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cee6:	2d19      	cmp	r5, #25
 800cee8:	bf98      	it	ls
 800ceea:	3220      	addls	r2, #32
 800ceec:	42a2      	cmp	r2, r4
 800ceee:	d0f0      	beq.n	800ced2 <__match+0x6>
 800cef0:	2000      	movs	r0, #0
 800cef2:	e7f3      	b.n	800cedc <__match+0x10>

0800cef4 <__hexnan>:
 800cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef8:	2500      	movs	r5, #0
 800cefa:	680b      	ldr	r3, [r1, #0]
 800cefc:	4682      	mov	sl, r0
 800cefe:	115e      	asrs	r6, r3, #5
 800cf00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf04:	f013 031f 	ands.w	r3, r3, #31
 800cf08:	bf18      	it	ne
 800cf0a:	3604      	addne	r6, #4
 800cf0c:	1f37      	subs	r7, r6, #4
 800cf0e:	4690      	mov	r8, r2
 800cf10:	46b9      	mov	r9, r7
 800cf12:	463c      	mov	r4, r7
 800cf14:	46ab      	mov	fp, r5
 800cf16:	b087      	sub	sp, #28
 800cf18:	6801      	ldr	r1, [r0, #0]
 800cf1a:	9301      	str	r3, [sp, #4]
 800cf1c:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf20:	9502      	str	r5, [sp, #8]
 800cf22:	784a      	ldrb	r2, [r1, #1]
 800cf24:	1c4b      	adds	r3, r1, #1
 800cf26:	9303      	str	r3, [sp, #12]
 800cf28:	b342      	cbz	r2, 800cf7c <__hexnan+0x88>
 800cf2a:	4610      	mov	r0, r2
 800cf2c:	9105      	str	r1, [sp, #20]
 800cf2e:	9204      	str	r2, [sp, #16]
 800cf30:	f7ff fd75 	bl	800ca1e <__hexdig_fun>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d14f      	bne.n	800cfd8 <__hexnan+0xe4>
 800cf38:	9a04      	ldr	r2, [sp, #16]
 800cf3a:	9905      	ldr	r1, [sp, #20]
 800cf3c:	2a20      	cmp	r2, #32
 800cf3e:	d818      	bhi.n	800cf72 <__hexnan+0x7e>
 800cf40:	9b02      	ldr	r3, [sp, #8]
 800cf42:	459b      	cmp	fp, r3
 800cf44:	dd13      	ble.n	800cf6e <__hexnan+0x7a>
 800cf46:	454c      	cmp	r4, r9
 800cf48:	d206      	bcs.n	800cf58 <__hexnan+0x64>
 800cf4a:	2d07      	cmp	r5, #7
 800cf4c:	dc04      	bgt.n	800cf58 <__hexnan+0x64>
 800cf4e:	462a      	mov	r2, r5
 800cf50:	4649      	mov	r1, r9
 800cf52:	4620      	mov	r0, r4
 800cf54:	f7ff ffa8 	bl	800cea8 <L_shift>
 800cf58:	4544      	cmp	r4, r8
 800cf5a:	d950      	bls.n	800cffe <__hexnan+0x10a>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f1a4 0904 	sub.w	r9, r4, #4
 800cf62:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf66:	461d      	mov	r5, r3
 800cf68:	464c      	mov	r4, r9
 800cf6a:	f8cd b008 	str.w	fp, [sp, #8]
 800cf6e:	9903      	ldr	r1, [sp, #12]
 800cf70:	e7d7      	b.n	800cf22 <__hexnan+0x2e>
 800cf72:	2a29      	cmp	r2, #41	; 0x29
 800cf74:	d155      	bne.n	800d022 <__hexnan+0x12e>
 800cf76:	3102      	adds	r1, #2
 800cf78:	f8ca 1000 	str.w	r1, [sl]
 800cf7c:	f1bb 0f00 	cmp.w	fp, #0
 800cf80:	d04f      	beq.n	800d022 <__hexnan+0x12e>
 800cf82:	454c      	cmp	r4, r9
 800cf84:	d206      	bcs.n	800cf94 <__hexnan+0xa0>
 800cf86:	2d07      	cmp	r5, #7
 800cf88:	dc04      	bgt.n	800cf94 <__hexnan+0xa0>
 800cf8a:	462a      	mov	r2, r5
 800cf8c:	4649      	mov	r1, r9
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f7ff ff8a 	bl	800cea8 <L_shift>
 800cf94:	4544      	cmp	r4, r8
 800cf96:	d934      	bls.n	800d002 <__hexnan+0x10e>
 800cf98:	4623      	mov	r3, r4
 800cf9a:	f1a8 0204 	sub.w	r2, r8, #4
 800cf9e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cfa2:	429f      	cmp	r7, r3
 800cfa4:	f842 1f04 	str.w	r1, [r2, #4]!
 800cfa8:	d2f9      	bcs.n	800cf9e <__hexnan+0xaa>
 800cfaa:	1b3b      	subs	r3, r7, r4
 800cfac:	f023 0303 	bic.w	r3, r3, #3
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	3e03      	subs	r6, #3
 800cfb4:	3401      	adds	r4, #1
 800cfb6:	42a6      	cmp	r6, r4
 800cfb8:	bf38      	it	cc
 800cfba:	2304      	movcc	r3, #4
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	4443      	add	r3, r8
 800cfc0:	f843 2b04 	str.w	r2, [r3], #4
 800cfc4:	429f      	cmp	r7, r3
 800cfc6:	d2fb      	bcs.n	800cfc0 <__hexnan+0xcc>
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	b91b      	cbnz	r3, 800cfd4 <__hexnan+0xe0>
 800cfcc:	4547      	cmp	r7, r8
 800cfce:	d126      	bne.n	800d01e <__hexnan+0x12a>
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	603b      	str	r3, [r7, #0]
 800cfd4:	2005      	movs	r0, #5
 800cfd6:	e025      	b.n	800d024 <__hexnan+0x130>
 800cfd8:	3501      	adds	r5, #1
 800cfda:	2d08      	cmp	r5, #8
 800cfdc:	f10b 0b01 	add.w	fp, fp, #1
 800cfe0:	dd06      	ble.n	800cff0 <__hexnan+0xfc>
 800cfe2:	4544      	cmp	r4, r8
 800cfe4:	d9c3      	bls.n	800cf6e <__hexnan+0x7a>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2501      	movs	r5, #1
 800cfea:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfee:	3c04      	subs	r4, #4
 800cff0:	6822      	ldr	r2, [r4, #0]
 800cff2:	f000 000f 	and.w	r0, r0, #15
 800cff6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cffa:	6020      	str	r0, [r4, #0]
 800cffc:	e7b7      	b.n	800cf6e <__hexnan+0x7a>
 800cffe:	2508      	movs	r5, #8
 800d000:	e7b5      	b.n	800cf6e <__hexnan+0x7a>
 800d002:	9b01      	ldr	r3, [sp, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d0df      	beq.n	800cfc8 <__hexnan+0xd4>
 800d008:	f04f 32ff 	mov.w	r2, #4294967295
 800d00c:	f1c3 0320 	rsb	r3, r3, #32
 800d010:	40da      	lsrs	r2, r3
 800d012:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d016:	4013      	ands	r3, r2
 800d018:	f846 3c04 	str.w	r3, [r6, #-4]
 800d01c:	e7d4      	b.n	800cfc8 <__hexnan+0xd4>
 800d01e:	3f04      	subs	r7, #4
 800d020:	e7d2      	b.n	800cfc8 <__hexnan+0xd4>
 800d022:	2004      	movs	r0, #4
 800d024:	b007      	add	sp, #28
 800d026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d02a <__ascii_mbtowc>:
 800d02a:	b082      	sub	sp, #8
 800d02c:	b901      	cbnz	r1, 800d030 <__ascii_mbtowc+0x6>
 800d02e:	a901      	add	r1, sp, #4
 800d030:	b142      	cbz	r2, 800d044 <__ascii_mbtowc+0x1a>
 800d032:	b14b      	cbz	r3, 800d048 <__ascii_mbtowc+0x1e>
 800d034:	7813      	ldrb	r3, [r2, #0]
 800d036:	600b      	str	r3, [r1, #0]
 800d038:	7812      	ldrb	r2, [r2, #0]
 800d03a:	1e10      	subs	r0, r2, #0
 800d03c:	bf18      	it	ne
 800d03e:	2001      	movne	r0, #1
 800d040:	b002      	add	sp, #8
 800d042:	4770      	bx	lr
 800d044:	4610      	mov	r0, r2
 800d046:	e7fb      	b.n	800d040 <__ascii_mbtowc+0x16>
 800d048:	f06f 0001 	mvn.w	r0, #1
 800d04c:	e7f8      	b.n	800d040 <__ascii_mbtowc+0x16>
	...

0800d050 <_Balloc>:
 800d050:	b570      	push	{r4, r5, r6, lr}
 800d052:	69c6      	ldr	r6, [r0, #28]
 800d054:	4604      	mov	r4, r0
 800d056:	460d      	mov	r5, r1
 800d058:	b976      	cbnz	r6, 800d078 <_Balloc+0x28>
 800d05a:	2010      	movs	r0, #16
 800d05c:	f7fc fc68 	bl	8009930 <malloc>
 800d060:	4602      	mov	r2, r0
 800d062:	61e0      	str	r0, [r4, #28]
 800d064:	b920      	cbnz	r0, 800d070 <_Balloc+0x20>
 800d066:	216b      	movs	r1, #107	; 0x6b
 800d068:	4b17      	ldr	r3, [pc, #92]	; (800d0c8 <_Balloc+0x78>)
 800d06a:	4818      	ldr	r0, [pc, #96]	; (800d0cc <_Balloc+0x7c>)
 800d06c:	f001 fc12 	bl	800e894 <__assert_func>
 800d070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d074:	6006      	str	r6, [r0, #0]
 800d076:	60c6      	str	r6, [r0, #12]
 800d078:	69e6      	ldr	r6, [r4, #28]
 800d07a:	68f3      	ldr	r3, [r6, #12]
 800d07c:	b183      	cbz	r3, 800d0a0 <_Balloc+0x50>
 800d07e:	69e3      	ldr	r3, [r4, #28]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d086:	b9b8      	cbnz	r0, 800d0b8 <_Balloc+0x68>
 800d088:	2101      	movs	r1, #1
 800d08a:	fa01 f605 	lsl.w	r6, r1, r5
 800d08e:	1d72      	adds	r2, r6, #5
 800d090:	4620      	mov	r0, r4
 800d092:	0092      	lsls	r2, r2, #2
 800d094:	f001 fc1c 	bl	800e8d0 <_calloc_r>
 800d098:	b160      	cbz	r0, 800d0b4 <_Balloc+0x64>
 800d09a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d09e:	e00e      	b.n	800d0be <_Balloc+0x6e>
 800d0a0:	2221      	movs	r2, #33	; 0x21
 800d0a2:	2104      	movs	r1, #4
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f001 fc13 	bl	800e8d0 <_calloc_r>
 800d0aa:	69e3      	ldr	r3, [r4, #28]
 800d0ac:	60f0      	str	r0, [r6, #12]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d1e4      	bne.n	800d07e <_Balloc+0x2e>
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	bd70      	pop	{r4, r5, r6, pc}
 800d0b8:	6802      	ldr	r2, [r0, #0]
 800d0ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0be:	2300      	movs	r3, #0
 800d0c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0c4:	e7f7      	b.n	800d0b6 <_Balloc+0x66>
 800d0c6:	bf00      	nop
 800d0c8:	0800f36a 	.word	0x0800f36a
 800d0cc:	0800f44a 	.word	0x0800f44a

0800d0d0 <_Bfree>:
 800d0d0:	b570      	push	{r4, r5, r6, lr}
 800d0d2:	69c6      	ldr	r6, [r0, #28]
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	b976      	cbnz	r6, 800d0f8 <_Bfree+0x28>
 800d0da:	2010      	movs	r0, #16
 800d0dc:	f7fc fc28 	bl	8009930 <malloc>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	61e8      	str	r0, [r5, #28]
 800d0e4:	b920      	cbnz	r0, 800d0f0 <_Bfree+0x20>
 800d0e6:	218f      	movs	r1, #143	; 0x8f
 800d0e8:	4b08      	ldr	r3, [pc, #32]	; (800d10c <_Bfree+0x3c>)
 800d0ea:	4809      	ldr	r0, [pc, #36]	; (800d110 <_Bfree+0x40>)
 800d0ec:	f001 fbd2 	bl	800e894 <__assert_func>
 800d0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0f4:	6006      	str	r6, [r0, #0]
 800d0f6:	60c6      	str	r6, [r0, #12]
 800d0f8:	b13c      	cbz	r4, 800d10a <_Bfree+0x3a>
 800d0fa:	69eb      	ldr	r3, [r5, #28]
 800d0fc:	6862      	ldr	r2, [r4, #4]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d104:	6021      	str	r1, [r4, #0]
 800d106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d10a:	bd70      	pop	{r4, r5, r6, pc}
 800d10c:	0800f36a 	.word	0x0800f36a
 800d110:	0800f44a 	.word	0x0800f44a

0800d114 <__multadd>:
 800d114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d118:	4607      	mov	r7, r0
 800d11a:	460c      	mov	r4, r1
 800d11c:	461e      	mov	r6, r3
 800d11e:	2000      	movs	r0, #0
 800d120:	690d      	ldr	r5, [r1, #16]
 800d122:	f101 0c14 	add.w	ip, r1, #20
 800d126:	f8dc 3000 	ldr.w	r3, [ip]
 800d12a:	3001      	adds	r0, #1
 800d12c:	b299      	uxth	r1, r3
 800d12e:	fb02 6101 	mla	r1, r2, r1, r6
 800d132:	0c1e      	lsrs	r6, r3, #16
 800d134:	0c0b      	lsrs	r3, r1, #16
 800d136:	fb02 3306 	mla	r3, r2, r6, r3
 800d13a:	b289      	uxth	r1, r1
 800d13c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d140:	4285      	cmp	r5, r0
 800d142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d146:	f84c 1b04 	str.w	r1, [ip], #4
 800d14a:	dcec      	bgt.n	800d126 <__multadd+0x12>
 800d14c:	b30e      	cbz	r6, 800d192 <__multadd+0x7e>
 800d14e:	68a3      	ldr	r3, [r4, #8]
 800d150:	42ab      	cmp	r3, r5
 800d152:	dc19      	bgt.n	800d188 <__multadd+0x74>
 800d154:	6861      	ldr	r1, [r4, #4]
 800d156:	4638      	mov	r0, r7
 800d158:	3101      	adds	r1, #1
 800d15a:	f7ff ff79 	bl	800d050 <_Balloc>
 800d15e:	4680      	mov	r8, r0
 800d160:	b928      	cbnz	r0, 800d16e <__multadd+0x5a>
 800d162:	4602      	mov	r2, r0
 800d164:	21ba      	movs	r1, #186	; 0xba
 800d166:	4b0c      	ldr	r3, [pc, #48]	; (800d198 <__multadd+0x84>)
 800d168:	480c      	ldr	r0, [pc, #48]	; (800d19c <__multadd+0x88>)
 800d16a:	f001 fb93 	bl	800e894 <__assert_func>
 800d16e:	6922      	ldr	r2, [r4, #16]
 800d170:	f104 010c 	add.w	r1, r4, #12
 800d174:	3202      	adds	r2, #2
 800d176:	0092      	lsls	r2, r2, #2
 800d178:	300c      	adds	r0, #12
 800d17a:	f7fe fd2f 	bl	800bbdc <memcpy>
 800d17e:	4621      	mov	r1, r4
 800d180:	4638      	mov	r0, r7
 800d182:	f7ff ffa5 	bl	800d0d0 <_Bfree>
 800d186:	4644      	mov	r4, r8
 800d188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d18c:	3501      	adds	r5, #1
 800d18e:	615e      	str	r6, [r3, #20]
 800d190:	6125      	str	r5, [r4, #16]
 800d192:	4620      	mov	r0, r4
 800d194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d198:	0800f3d9 	.word	0x0800f3d9
 800d19c:	0800f44a 	.word	0x0800f44a

0800d1a0 <__s2b>:
 800d1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1a4:	4615      	mov	r5, r2
 800d1a6:	2209      	movs	r2, #9
 800d1a8:	461f      	mov	r7, r3
 800d1aa:	3308      	adds	r3, #8
 800d1ac:	460c      	mov	r4, r1
 800d1ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	db09      	blt.n	800d1d0 <__s2b+0x30>
 800d1bc:	4630      	mov	r0, r6
 800d1be:	f7ff ff47 	bl	800d050 <_Balloc>
 800d1c2:	b940      	cbnz	r0, 800d1d6 <__s2b+0x36>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	21d3      	movs	r1, #211	; 0xd3
 800d1c8:	4b18      	ldr	r3, [pc, #96]	; (800d22c <__s2b+0x8c>)
 800d1ca:	4819      	ldr	r0, [pc, #100]	; (800d230 <__s2b+0x90>)
 800d1cc:	f001 fb62 	bl	800e894 <__assert_func>
 800d1d0:	0052      	lsls	r2, r2, #1
 800d1d2:	3101      	adds	r1, #1
 800d1d4:	e7f0      	b.n	800d1b8 <__s2b+0x18>
 800d1d6:	9b08      	ldr	r3, [sp, #32]
 800d1d8:	2d09      	cmp	r5, #9
 800d1da:	6143      	str	r3, [r0, #20]
 800d1dc:	f04f 0301 	mov.w	r3, #1
 800d1e0:	6103      	str	r3, [r0, #16]
 800d1e2:	dd16      	ble.n	800d212 <__s2b+0x72>
 800d1e4:	f104 0909 	add.w	r9, r4, #9
 800d1e8:	46c8      	mov	r8, r9
 800d1ea:	442c      	add	r4, r5
 800d1ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d1f0:	4601      	mov	r1, r0
 800d1f2:	220a      	movs	r2, #10
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	3b30      	subs	r3, #48	; 0x30
 800d1f8:	f7ff ff8c 	bl	800d114 <__multadd>
 800d1fc:	45a0      	cmp	r8, r4
 800d1fe:	d1f5      	bne.n	800d1ec <__s2b+0x4c>
 800d200:	f1a5 0408 	sub.w	r4, r5, #8
 800d204:	444c      	add	r4, r9
 800d206:	1b2d      	subs	r5, r5, r4
 800d208:	1963      	adds	r3, r4, r5
 800d20a:	42bb      	cmp	r3, r7
 800d20c:	db04      	blt.n	800d218 <__s2b+0x78>
 800d20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d212:	2509      	movs	r5, #9
 800d214:	340a      	adds	r4, #10
 800d216:	e7f6      	b.n	800d206 <__s2b+0x66>
 800d218:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d21c:	4601      	mov	r1, r0
 800d21e:	220a      	movs	r2, #10
 800d220:	4630      	mov	r0, r6
 800d222:	3b30      	subs	r3, #48	; 0x30
 800d224:	f7ff ff76 	bl	800d114 <__multadd>
 800d228:	e7ee      	b.n	800d208 <__s2b+0x68>
 800d22a:	bf00      	nop
 800d22c:	0800f3d9 	.word	0x0800f3d9
 800d230:	0800f44a 	.word	0x0800f44a

0800d234 <__hi0bits>:
 800d234:	0c02      	lsrs	r2, r0, #16
 800d236:	0412      	lsls	r2, r2, #16
 800d238:	4603      	mov	r3, r0
 800d23a:	b9ca      	cbnz	r2, 800d270 <__hi0bits+0x3c>
 800d23c:	0403      	lsls	r3, r0, #16
 800d23e:	2010      	movs	r0, #16
 800d240:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d244:	bf04      	itt	eq
 800d246:	021b      	lsleq	r3, r3, #8
 800d248:	3008      	addeq	r0, #8
 800d24a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d24e:	bf04      	itt	eq
 800d250:	011b      	lsleq	r3, r3, #4
 800d252:	3004      	addeq	r0, #4
 800d254:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d258:	bf04      	itt	eq
 800d25a:	009b      	lsleq	r3, r3, #2
 800d25c:	3002      	addeq	r0, #2
 800d25e:	2b00      	cmp	r3, #0
 800d260:	db05      	blt.n	800d26e <__hi0bits+0x3a>
 800d262:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d266:	f100 0001 	add.w	r0, r0, #1
 800d26a:	bf08      	it	eq
 800d26c:	2020      	moveq	r0, #32
 800d26e:	4770      	bx	lr
 800d270:	2000      	movs	r0, #0
 800d272:	e7e5      	b.n	800d240 <__hi0bits+0xc>

0800d274 <__lo0bits>:
 800d274:	6803      	ldr	r3, [r0, #0]
 800d276:	4602      	mov	r2, r0
 800d278:	f013 0007 	ands.w	r0, r3, #7
 800d27c:	d00b      	beq.n	800d296 <__lo0bits+0x22>
 800d27e:	07d9      	lsls	r1, r3, #31
 800d280:	d421      	bmi.n	800d2c6 <__lo0bits+0x52>
 800d282:	0798      	lsls	r0, r3, #30
 800d284:	bf49      	itett	mi
 800d286:	085b      	lsrmi	r3, r3, #1
 800d288:	089b      	lsrpl	r3, r3, #2
 800d28a:	2001      	movmi	r0, #1
 800d28c:	6013      	strmi	r3, [r2, #0]
 800d28e:	bf5c      	itt	pl
 800d290:	2002      	movpl	r0, #2
 800d292:	6013      	strpl	r3, [r2, #0]
 800d294:	4770      	bx	lr
 800d296:	b299      	uxth	r1, r3
 800d298:	b909      	cbnz	r1, 800d29e <__lo0bits+0x2a>
 800d29a:	2010      	movs	r0, #16
 800d29c:	0c1b      	lsrs	r3, r3, #16
 800d29e:	b2d9      	uxtb	r1, r3
 800d2a0:	b909      	cbnz	r1, 800d2a6 <__lo0bits+0x32>
 800d2a2:	3008      	adds	r0, #8
 800d2a4:	0a1b      	lsrs	r3, r3, #8
 800d2a6:	0719      	lsls	r1, r3, #28
 800d2a8:	bf04      	itt	eq
 800d2aa:	091b      	lsreq	r3, r3, #4
 800d2ac:	3004      	addeq	r0, #4
 800d2ae:	0799      	lsls	r1, r3, #30
 800d2b0:	bf04      	itt	eq
 800d2b2:	089b      	lsreq	r3, r3, #2
 800d2b4:	3002      	addeq	r0, #2
 800d2b6:	07d9      	lsls	r1, r3, #31
 800d2b8:	d403      	bmi.n	800d2c2 <__lo0bits+0x4e>
 800d2ba:	085b      	lsrs	r3, r3, #1
 800d2bc:	f100 0001 	add.w	r0, r0, #1
 800d2c0:	d003      	beq.n	800d2ca <__lo0bits+0x56>
 800d2c2:	6013      	str	r3, [r2, #0]
 800d2c4:	4770      	bx	lr
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	4770      	bx	lr
 800d2ca:	2020      	movs	r0, #32
 800d2cc:	4770      	bx	lr
	...

0800d2d0 <__i2b>:
 800d2d0:	b510      	push	{r4, lr}
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	f7ff febb 	bl	800d050 <_Balloc>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	b928      	cbnz	r0, 800d2ea <__i2b+0x1a>
 800d2de:	f240 1145 	movw	r1, #325	; 0x145
 800d2e2:	4b04      	ldr	r3, [pc, #16]	; (800d2f4 <__i2b+0x24>)
 800d2e4:	4804      	ldr	r0, [pc, #16]	; (800d2f8 <__i2b+0x28>)
 800d2e6:	f001 fad5 	bl	800e894 <__assert_func>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	6144      	str	r4, [r0, #20]
 800d2ee:	6103      	str	r3, [r0, #16]
 800d2f0:	bd10      	pop	{r4, pc}
 800d2f2:	bf00      	nop
 800d2f4:	0800f3d9 	.word	0x0800f3d9
 800d2f8:	0800f44a 	.word	0x0800f44a

0800d2fc <__multiply>:
 800d2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d300:	4691      	mov	r9, r2
 800d302:	690a      	ldr	r2, [r1, #16]
 800d304:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d308:	460c      	mov	r4, r1
 800d30a:	429a      	cmp	r2, r3
 800d30c:	bfbe      	ittt	lt
 800d30e:	460b      	movlt	r3, r1
 800d310:	464c      	movlt	r4, r9
 800d312:	4699      	movlt	r9, r3
 800d314:	6927      	ldr	r7, [r4, #16]
 800d316:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d31a:	68a3      	ldr	r3, [r4, #8]
 800d31c:	6861      	ldr	r1, [r4, #4]
 800d31e:	eb07 060a 	add.w	r6, r7, sl
 800d322:	42b3      	cmp	r3, r6
 800d324:	b085      	sub	sp, #20
 800d326:	bfb8      	it	lt
 800d328:	3101      	addlt	r1, #1
 800d32a:	f7ff fe91 	bl	800d050 <_Balloc>
 800d32e:	b930      	cbnz	r0, 800d33e <__multiply+0x42>
 800d330:	4602      	mov	r2, r0
 800d332:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d336:	4b43      	ldr	r3, [pc, #268]	; (800d444 <__multiply+0x148>)
 800d338:	4843      	ldr	r0, [pc, #268]	; (800d448 <__multiply+0x14c>)
 800d33a:	f001 faab 	bl	800e894 <__assert_func>
 800d33e:	f100 0514 	add.w	r5, r0, #20
 800d342:	462b      	mov	r3, r5
 800d344:	2200      	movs	r2, #0
 800d346:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d34a:	4543      	cmp	r3, r8
 800d34c:	d321      	bcc.n	800d392 <__multiply+0x96>
 800d34e:	f104 0314 	add.w	r3, r4, #20
 800d352:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d356:	f109 0314 	add.w	r3, r9, #20
 800d35a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d35e:	9202      	str	r2, [sp, #8]
 800d360:	1b3a      	subs	r2, r7, r4
 800d362:	3a15      	subs	r2, #21
 800d364:	f022 0203 	bic.w	r2, r2, #3
 800d368:	3204      	adds	r2, #4
 800d36a:	f104 0115 	add.w	r1, r4, #21
 800d36e:	428f      	cmp	r7, r1
 800d370:	bf38      	it	cc
 800d372:	2204      	movcc	r2, #4
 800d374:	9201      	str	r2, [sp, #4]
 800d376:	9a02      	ldr	r2, [sp, #8]
 800d378:	9303      	str	r3, [sp, #12]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d80c      	bhi.n	800d398 <__multiply+0x9c>
 800d37e:	2e00      	cmp	r6, #0
 800d380:	dd03      	ble.n	800d38a <__multiply+0x8e>
 800d382:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d386:	2b00      	cmp	r3, #0
 800d388:	d05a      	beq.n	800d440 <__multiply+0x144>
 800d38a:	6106      	str	r6, [r0, #16]
 800d38c:	b005      	add	sp, #20
 800d38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d392:	f843 2b04 	str.w	r2, [r3], #4
 800d396:	e7d8      	b.n	800d34a <__multiply+0x4e>
 800d398:	f8b3 a000 	ldrh.w	sl, [r3]
 800d39c:	f1ba 0f00 	cmp.w	sl, #0
 800d3a0:	d023      	beq.n	800d3ea <__multiply+0xee>
 800d3a2:	46a9      	mov	r9, r5
 800d3a4:	f04f 0c00 	mov.w	ip, #0
 800d3a8:	f104 0e14 	add.w	lr, r4, #20
 800d3ac:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d3b0:	f8d9 1000 	ldr.w	r1, [r9]
 800d3b4:	fa1f fb82 	uxth.w	fp, r2
 800d3b8:	b289      	uxth	r1, r1
 800d3ba:	fb0a 110b 	mla	r1, sl, fp, r1
 800d3be:	4461      	add	r1, ip
 800d3c0:	f8d9 c000 	ldr.w	ip, [r9]
 800d3c4:	0c12      	lsrs	r2, r2, #16
 800d3c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d3ca:	fb0a c202 	mla	r2, sl, r2, ip
 800d3ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d3d2:	b289      	uxth	r1, r1
 800d3d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3d8:	4577      	cmp	r7, lr
 800d3da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3de:	f849 1b04 	str.w	r1, [r9], #4
 800d3e2:	d8e3      	bhi.n	800d3ac <__multiply+0xb0>
 800d3e4:	9a01      	ldr	r2, [sp, #4]
 800d3e6:	f845 c002 	str.w	ip, [r5, r2]
 800d3ea:	9a03      	ldr	r2, [sp, #12]
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d3f2:	f1b9 0f00 	cmp.w	r9, #0
 800d3f6:	d021      	beq.n	800d43c <__multiply+0x140>
 800d3f8:	46ae      	mov	lr, r5
 800d3fa:	f04f 0a00 	mov.w	sl, #0
 800d3fe:	6829      	ldr	r1, [r5, #0]
 800d400:	f104 0c14 	add.w	ip, r4, #20
 800d404:	f8bc b000 	ldrh.w	fp, [ip]
 800d408:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d40c:	b289      	uxth	r1, r1
 800d40e:	fb09 220b 	mla	r2, r9, fp, r2
 800d412:	4452      	add	r2, sl
 800d414:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d418:	f84e 1b04 	str.w	r1, [lr], #4
 800d41c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d420:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d424:	f8be 1000 	ldrh.w	r1, [lr]
 800d428:	4567      	cmp	r7, ip
 800d42a:	fb09 110a 	mla	r1, r9, sl, r1
 800d42e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d432:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d436:	d8e5      	bhi.n	800d404 <__multiply+0x108>
 800d438:	9a01      	ldr	r2, [sp, #4]
 800d43a:	50a9      	str	r1, [r5, r2]
 800d43c:	3504      	adds	r5, #4
 800d43e:	e79a      	b.n	800d376 <__multiply+0x7a>
 800d440:	3e01      	subs	r6, #1
 800d442:	e79c      	b.n	800d37e <__multiply+0x82>
 800d444:	0800f3d9 	.word	0x0800f3d9
 800d448:	0800f44a 	.word	0x0800f44a

0800d44c <__pow5mult>:
 800d44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d450:	4615      	mov	r5, r2
 800d452:	f012 0203 	ands.w	r2, r2, #3
 800d456:	4606      	mov	r6, r0
 800d458:	460f      	mov	r7, r1
 800d45a:	d007      	beq.n	800d46c <__pow5mult+0x20>
 800d45c:	4c25      	ldr	r4, [pc, #148]	; (800d4f4 <__pow5mult+0xa8>)
 800d45e:	3a01      	subs	r2, #1
 800d460:	2300      	movs	r3, #0
 800d462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d466:	f7ff fe55 	bl	800d114 <__multadd>
 800d46a:	4607      	mov	r7, r0
 800d46c:	10ad      	asrs	r5, r5, #2
 800d46e:	d03d      	beq.n	800d4ec <__pow5mult+0xa0>
 800d470:	69f4      	ldr	r4, [r6, #28]
 800d472:	b97c      	cbnz	r4, 800d494 <__pow5mult+0x48>
 800d474:	2010      	movs	r0, #16
 800d476:	f7fc fa5b 	bl	8009930 <malloc>
 800d47a:	4602      	mov	r2, r0
 800d47c:	61f0      	str	r0, [r6, #28]
 800d47e:	b928      	cbnz	r0, 800d48c <__pow5mult+0x40>
 800d480:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d484:	4b1c      	ldr	r3, [pc, #112]	; (800d4f8 <__pow5mult+0xac>)
 800d486:	481d      	ldr	r0, [pc, #116]	; (800d4fc <__pow5mult+0xb0>)
 800d488:	f001 fa04 	bl	800e894 <__assert_func>
 800d48c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d490:	6004      	str	r4, [r0, #0]
 800d492:	60c4      	str	r4, [r0, #12]
 800d494:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d49c:	b94c      	cbnz	r4, 800d4b2 <__pow5mult+0x66>
 800d49e:	f240 2171 	movw	r1, #625	; 0x271
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	f7ff ff14 	bl	800d2d0 <__i2b>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4b0:	6003      	str	r3, [r0, #0]
 800d4b2:	f04f 0900 	mov.w	r9, #0
 800d4b6:	07eb      	lsls	r3, r5, #31
 800d4b8:	d50a      	bpl.n	800d4d0 <__pow5mult+0x84>
 800d4ba:	4639      	mov	r1, r7
 800d4bc:	4622      	mov	r2, r4
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f7ff ff1c 	bl	800d2fc <__multiply>
 800d4c4:	4680      	mov	r8, r0
 800d4c6:	4639      	mov	r1, r7
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f7ff fe01 	bl	800d0d0 <_Bfree>
 800d4ce:	4647      	mov	r7, r8
 800d4d0:	106d      	asrs	r5, r5, #1
 800d4d2:	d00b      	beq.n	800d4ec <__pow5mult+0xa0>
 800d4d4:	6820      	ldr	r0, [r4, #0]
 800d4d6:	b938      	cbnz	r0, 800d4e8 <__pow5mult+0x9c>
 800d4d8:	4622      	mov	r2, r4
 800d4da:	4621      	mov	r1, r4
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f7ff ff0d 	bl	800d2fc <__multiply>
 800d4e2:	6020      	str	r0, [r4, #0]
 800d4e4:	f8c0 9000 	str.w	r9, [r0]
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	e7e4      	b.n	800d4b6 <__pow5mult+0x6a>
 800d4ec:	4638      	mov	r0, r7
 800d4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4f2:	bf00      	nop
 800d4f4:	0800f598 	.word	0x0800f598
 800d4f8:	0800f36a 	.word	0x0800f36a
 800d4fc:	0800f44a 	.word	0x0800f44a

0800d500 <__lshift>:
 800d500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d504:	460c      	mov	r4, r1
 800d506:	4607      	mov	r7, r0
 800d508:	4691      	mov	r9, r2
 800d50a:	6923      	ldr	r3, [r4, #16]
 800d50c:	6849      	ldr	r1, [r1, #4]
 800d50e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d512:	68a3      	ldr	r3, [r4, #8]
 800d514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d518:	f108 0601 	add.w	r6, r8, #1
 800d51c:	42b3      	cmp	r3, r6
 800d51e:	db0b      	blt.n	800d538 <__lshift+0x38>
 800d520:	4638      	mov	r0, r7
 800d522:	f7ff fd95 	bl	800d050 <_Balloc>
 800d526:	4605      	mov	r5, r0
 800d528:	b948      	cbnz	r0, 800d53e <__lshift+0x3e>
 800d52a:	4602      	mov	r2, r0
 800d52c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d530:	4b27      	ldr	r3, [pc, #156]	; (800d5d0 <__lshift+0xd0>)
 800d532:	4828      	ldr	r0, [pc, #160]	; (800d5d4 <__lshift+0xd4>)
 800d534:	f001 f9ae 	bl	800e894 <__assert_func>
 800d538:	3101      	adds	r1, #1
 800d53a:	005b      	lsls	r3, r3, #1
 800d53c:	e7ee      	b.n	800d51c <__lshift+0x1c>
 800d53e:	2300      	movs	r3, #0
 800d540:	f100 0114 	add.w	r1, r0, #20
 800d544:	f100 0210 	add.w	r2, r0, #16
 800d548:	4618      	mov	r0, r3
 800d54a:	4553      	cmp	r3, sl
 800d54c:	db33      	blt.n	800d5b6 <__lshift+0xb6>
 800d54e:	6920      	ldr	r0, [r4, #16]
 800d550:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d554:	f104 0314 	add.w	r3, r4, #20
 800d558:	f019 091f 	ands.w	r9, r9, #31
 800d55c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d560:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d564:	d02b      	beq.n	800d5be <__lshift+0xbe>
 800d566:	468a      	mov	sl, r1
 800d568:	2200      	movs	r2, #0
 800d56a:	f1c9 0e20 	rsb	lr, r9, #32
 800d56e:	6818      	ldr	r0, [r3, #0]
 800d570:	fa00 f009 	lsl.w	r0, r0, r9
 800d574:	4310      	orrs	r0, r2
 800d576:	f84a 0b04 	str.w	r0, [sl], #4
 800d57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d57e:	459c      	cmp	ip, r3
 800d580:	fa22 f20e 	lsr.w	r2, r2, lr
 800d584:	d8f3      	bhi.n	800d56e <__lshift+0x6e>
 800d586:	ebac 0304 	sub.w	r3, ip, r4
 800d58a:	3b15      	subs	r3, #21
 800d58c:	f023 0303 	bic.w	r3, r3, #3
 800d590:	3304      	adds	r3, #4
 800d592:	f104 0015 	add.w	r0, r4, #21
 800d596:	4584      	cmp	ip, r0
 800d598:	bf38      	it	cc
 800d59a:	2304      	movcc	r3, #4
 800d59c:	50ca      	str	r2, [r1, r3]
 800d59e:	b10a      	cbz	r2, 800d5a4 <__lshift+0xa4>
 800d5a0:	f108 0602 	add.w	r6, r8, #2
 800d5a4:	3e01      	subs	r6, #1
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	612e      	str	r6, [r5, #16]
 800d5ac:	f7ff fd90 	bl	800d0d0 <_Bfree>
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	e7c5      	b.n	800d54a <__lshift+0x4a>
 800d5be:	3904      	subs	r1, #4
 800d5c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5c4:	459c      	cmp	ip, r3
 800d5c6:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5ca:	d8f9      	bhi.n	800d5c0 <__lshift+0xc0>
 800d5cc:	e7ea      	b.n	800d5a4 <__lshift+0xa4>
 800d5ce:	bf00      	nop
 800d5d0:	0800f3d9 	.word	0x0800f3d9
 800d5d4:	0800f44a 	.word	0x0800f44a

0800d5d8 <__mcmp>:
 800d5d8:	4603      	mov	r3, r0
 800d5da:	690a      	ldr	r2, [r1, #16]
 800d5dc:	6900      	ldr	r0, [r0, #16]
 800d5de:	b530      	push	{r4, r5, lr}
 800d5e0:	1a80      	subs	r0, r0, r2
 800d5e2:	d10d      	bne.n	800d600 <__mcmp+0x28>
 800d5e4:	3314      	adds	r3, #20
 800d5e6:	3114      	adds	r1, #20
 800d5e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d5ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d5f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d5f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d5f8:	4295      	cmp	r5, r2
 800d5fa:	d002      	beq.n	800d602 <__mcmp+0x2a>
 800d5fc:	d304      	bcc.n	800d608 <__mcmp+0x30>
 800d5fe:	2001      	movs	r0, #1
 800d600:	bd30      	pop	{r4, r5, pc}
 800d602:	42a3      	cmp	r3, r4
 800d604:	d3f4      	bcc.n	800d5f0 <__mcmp+0x18>
 800d606:	e7fb      	b.n	800d600 <__mcmp+0x28>
 800d608:	f04f 30ff 	mov.w	r0, #4294967295
 800d60c:	e7f8      	b.n	800d600 <__mcmp+0x28>
	...

0800d610 <__mdiff>:
 800d610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d614:	460d      	mov	r5, r1
 800d616:	4607      	mov	r7, r0
 800d618:	4611      	mov	r1, r2
 800d61a:	4628      	mov	r0, r5
 800d61c:	4614      	mov	r4, r2
 800d61e:	f7ff ffdb 	bl	800d5d8 <__mcmp>
 800d622:	1e06      	subs	r6, r0, #0
 800d624:	d111      	bne.n	800d64a <__mdiff+0x3a>
 800d626:	4631      	mov	r1, r6
 800d628:	4638      	mov	r0, r7
 800d62a:	f7ff fd11 	bl	800d050 <_Balloc>
 800d62e:	4602      	mov	r2, r0
 800d630:	b928      	cbnz	r0, 800d63e <__mdiff+0x2e>
 800d632:	f240 2137 	movw	r1, #567	; 0x237
 800d636:	4b3a      	ldr	r3, [pc, #232]	; (800d720 <__mdiff+0x110>)
 800d638:	483a      	ldr	r0, [pc, #232]	; (800d724 <__mdiff+0x114>)
 800d63a:	f001 f92b 	bl	800e894 <__assert_func>
 800d63e:	2301      	movs	r3, #1
 800d640:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d644:	4610      	mov	r0, r2
 800d646:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d64a:	bfa4      	itt	ge
 800d64c:	4623      	movge	r3, r4
 800d64e:	462c      	movge	r4, r5
 800d650:	4638      	mov	r0, r7
 800d652:	6861      	ldr	r1, [r4, #4]
 800d654:	bfa6      	itte	ge
 800d656:	461d      	movge	r5, r3
 800d658:	2600      	movge	r6, #0
 800d65a:	2601      	movlt	r6, #1
 800d65c:	f7ff fcf8 	bl	800d050 <_Balloc>
 800d660:	4602      	mov	r2, r0
 800d662:	b918      	cbnz	r0, 800d66c <__mdiff+0x5c>
 800d664:	f240 2145 	movw	r1, #581	; 0x245
 800d668:	4b2d      	ldr	r3, [pc, #180]	; (800d720 <__mdiff+0x110>)
 800d66a:	e7e5      	b.n	800d638 <__mdiff+0x28>
 800d66c:	f102 0814 	add.w	r8, r2, #20
 800d670:	46c2      	mov	sl, r8
 800d672:	f04f 0c00 	mov.w	ip, #0
 800d676:	6927      	ldr	r7, [r4, #16]
 800d678:	60c6      	str	r6, [r0, #12]
 800d67a:	692e      	ldr	r6, [r5, #16]
 800d67c:	f104 0014 	add.w	r0, r4, #20
 800d680:	f105 0914 	add.w	r9, r5, #20
 800d684:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d688:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d68c:	3410      	adds	r4, #16
 800d68e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d692:	f859 3b04 	ldr.w	r3, [r9], #4
 800d696:	fa1f f18b 	uxth.w	r1, fp
 800d69a:	4461      	add	r1, ip
 800d69c:	fa1f fc83 	uxth.w	ip, r3
 800d6a0:	0c1b      	lsrs	r3, r3, #16
 800d6a2:	eba1 010c 	sub.w	r1, r1, ip
 800d6a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d6aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d6ae:	b289      	uxth	r1, r1
 800d6b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d6b4:	454e      	cmp	r6, r9
 800d6b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d6ba:	f84a 1b04 	str.w	r1, [sl], #4
 800d6be:	d8e6      	bhi.n	800d68e <__mdiff+0x7e>
 800d6c0:	1b73      	subs	r3, r6, r5
 800d6c2:	3b15      	subs	r3, #21
 800d6c4:	f023 0303 	bic.w	r3, r3, #3
 800d6c8:	3515      	adds	r5, #21
 800d6ca:	3304      	adds	r3, #4
 800d6cc:	42ae      	cmp	r6, r5
 800d6ce:	bf38      	it	cc
 800d6d0:	2304      	movcc	r3, #4
 800d6d2:	4418      	add	r0, r3
 800d6d4:	4443      	add	r3, r8
 800d6d6:	461e      	mov	r6, r3
 800d6d8:	4605      	mov	r5, r0
 800d6da:	4575      	cmp	r5, lr
 800d6dc:	d30e      	bcc.n	800d6fc <__mdiff+0xec>
 800d6de:	f10e 0103 	add.w	r1, lr, #3
 800d6e2:	1a09      	subs	r1, r1, r0
 800d6e4:	f021 0103 	bic.w	r1, r1, #3
 800d6e8:	3803      	subs	r0, #3
 800d6ea:	4586      	cmp	lr, r0
 800d6ec:	bf38      	it	cc
 800d6ee:	2100      	movcc	r1, #0
 800d6f0:	440b      	add	r3, r1
 800d6f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d6f6:	b189      	cbz	r1, 800d71c <__mdiff+0x10c>
 800d6f8:	6117      	str	r7, [r2, #16]
 800d6fa:	e7a3      	b.n	800d644 <__mdiff+0x34>
 800d6fc:	f855 8b04 	ldr.w	r8, [r5], #4
 800d700:	fa1f f188 	uxth.w	r1, r8
 800d704:	4461      	add	r1, ip
 800d706:	140c      	asrs	r4, r1, #16
 800d708:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d70c:	b289      	uxth	r1, r1
 800d70e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d712:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d716:	f846 1b04 	str.w	r1, [r6], #4
 800d71a:	e7de      	b.n	800d6da <__mdiff+0xca>
 800d71c:	3f01      	subs	r7, #1
 800d71e:	e7e8      	b.n	800d6f2 <__mdiff+0xe2>
 800d720:	0800f3d9 	.word	0x0800f3d9
 800d724:	0800f44a 	.word	0x0800f44a

0800d728 <__ulp>:
 800d728:	4b0e      	ldr	r3, [pc, #56]	; (800d764 <__ulp+0x3c>)
 800d72a:	400b      	ands	r3, r1
 800d72c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d730:	2b00      	cmp	r3, #0
 800d732:	dc08      	bgt.n	800d746 <__ulp+0x1e>
 800d734:	425b      	negs	r3, r3
 800d736:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d73a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d73e:	da04      	bge.n	800d74a <__ulp+0x22>
 800d740:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d744:	4113      	asrs	r3, r2
 800d746:	2200      	movs	r2, #0
 800d748:	e008      	b.n	800d75c <__ulp+0x34>
 800d74a:	f1a2 0314 	sub.w	r3, r2, #20
 800d74e:	2b1e      	cmp	r3, #30
 800d750:	bfd6      	itet	le
 800d752:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d756:	2201      	movgt	r2, #1
 800d758:	40da      	lsrle	r2, r3
 800d75a:	2300      	movs	r3, #0
 800d75c:	4619      	mov	r1, r3
 800d75e:	4610      	mov	r0, r2
 800d760:	4770      	bx	lr
 800d762:	bf00      	nop
 800d764:	7ff00000 	.word	0x7ff00000

0800d768 <__b2d>:
 800d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76a:	6905      	ldr	r5, [r0, #16]
 800d76c:	f100 0714 	add.w	r7, r0, #20
 800d770:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d774:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d778:	1f2e      	subs	r6, r5, #4
 800d77a:	4620      	mov	r0, r4
 800d77c:	f7ff fd5a 	bl	800d234 <__hi0bits>
 800d780:	f1c0 0220 	rsb	r2, r0, #32
 800d784:	280a      	cmp	r0, #10
 800d786:	4603      	mov	r3, r0
 800d788:	f8df c068 	ldr.w	ip, [pc, #104]	; 800d7f4 <__b2d+0x8c>
 800d78c:	600a      	str	r2, [r1, #0]
 800d78e:	dc12      	bgt.n	800d7b6 <__b2d+0x4e>
 800d790:	f1c0 0e0b 	rsb	lr, r0, #11
 800d794:	fa24 f20e 	lsr.w	r2, r4, lr
 800d798:	42b7      	cmp	r7, r6
 800d79a:	ea42 010c 	orr.w	r1, r2, ip
 800d79e:	bf2c      	ite	cs
 800d7a0:	2200      	movcs	r2, #0
 800d7a2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800d7a6:	3315      	adds	r3, #21
 800d7a8:	fa04 f303 	lsl.w	r3, r4, r3
 800d7ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800d7b0:	431a      	orrs	r2, r3
 800d7b2:	4610      	mov	r0, r2
 800d7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7b6:	42b7      	cmp	r7, r6
 800d7b8:	bf2e      	itee	cs
 800d7ba:	2200      	movcs	r2, #0
 800d7bc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800d7c0:	f1a5 0608 	subcc.w	r6, r5, #8
 800d7c4:	3b0b      	subs	r3, #11
 800d7c6:	d012      	beq.n	800d7ee <__b2d+0x86>
 800d7c8:	f1c3 0520 	rsb	r5, r3, #32
 800d7cc:	fa22 f105 	lsr.w	r1, r2, r5
 800d7d0:	409c      	lsls	r4, r3
 800d7d2:	430c      	orrs	r4, r1
 800d7d4:	42be      	cmp	r6, r7
 800d7d6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800d7da:	bf94      	ite	ls
 800d7dc:	2400      	movls	r4, #0
 800d7de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d7e2:	409a      	lsls	r2, r3
 800d7e4:	40ec      	lsrs	r4, r5
 800d7e6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d7ea:	4322      	orrs	r2, r4
 800d7ec:	e7e1      	b.n	800d7b2 <__b2d+0x4a>
 800d7ee:	ea44 010c 	orr.w	r1, r4, ip
 800d7f2:	e7de      	b.n	800d7b2 <__b2d+0x4a>
 800d7f4:	3ff00000 	.word	0x3ff00000

0800d7f8 <__d2b>:
 800d7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7fa:	2101      	movs	r1, #1
 800d7fc:	4617      	mov	r7, r2
 800d7fe:	461c      	mov	r4, r3
 800d800:	9e08      	ldr	r6, [sp, #32]
 800d802:	f7ff fc25 	bl	800d050 <_Balloc>
 800d806:	4605      	mov	r5, r0
 800d808:	b930      	cbnz	r0, 800d818 <__d2b+0x20>
 800d80a:	4602      	mov	r2, r0
 800d80c:	f240 310f 	movw	r1, #783	; 0x30f
 800d810:	4b22      	ldr	r3, [pc, #136]	; (800d89c <__d2b+0xa4>)
 800d812:	4823      	ldr	r0, [pc, #140]	; (800d8a0 <__d2b+0xa8>)
 800d814:	f001 f83e 	bl	800e894 <__assert_func>
 800d818:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d81c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d820:	bb24      	cbnz	r4, 800d86c <__d2b+0x74>
 800d822:	2f00      	cmp	r7, #0
 800d824:	9301      	str	r3, [sp, #4]
 800d826:	d026      	beq.n	800d876 <__d2b+0x7e>
 800d828:	4668      	mov	r0, sp
 800d82a:	9700      	str	r7, [sp, #0]
 800d82c:	f7ff fd22 	bl	800d274 <__lo0bits>
 800d830:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d834:	b1e8      	cbz	r0, 800d872 <__d2b+0x7a>
 800d836:	f1c0 0320 	rsb	r3, r0, #32
 800d83a:	fa02 f303 	lsl.w	r3, r2, r3
 800d83e:	430b      	orrs	r3, r1
 800d840:	40c2      	lsrs	r2, r0
 800d842:	616b      	str	r3, [r5, #20]
 800d844:	9201      	str	r2, [sp, #4]
 800d846:	9b01      	ldr	r3, [sp, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	bf14      	ite	ne
 800d84c:	2102      	movne	r1, #2
 800d84e:	2101      	moveq	r1, #1
 800d850:	61ab      	str	r3, [r5, #24]
 800d852:	6129      	str	r1, [r5, #16]
 800d854:	b1bc      	cbz	r4, 800d886 <__d2b+0x8e>
 800d856:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d85a:	4404      	add	r4, r0
 800d85c:	6034      	str	r4, [r6, #0]
 800d85e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d864:	6018      	str	r0, [r3, #0]
 800d866:	4628      	mov	r0, r5
 800d868:	b003      	add	sp, #12
 800d86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d86c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d870:	e7d7      	b.n	800d822 <__d2b+0x2a>
 800d872:	6169      	str	r1, [r5, #20]
 800d874:	e7e7      	b.n	800d846 <__d2b+0x4e>
 800d876:	a801      	add	r0, sp, #4
 800d878:	f7ff fcfc 	bl	800d274 <__lo0bits>
 800d87c:	9b01      	ldr	r3, [sp, #4]
 800d87e:	2101      	movs	r1, #1
 800d880:	616b      	str	r3, [r5, #20]
 800d882:	3020      	adds	r0, #32
 800d884:	e7e5      	b.n	800d852 <__d2b+0x5a>
 800d886:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d88a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800d88e:	6030      	str	r0, [r6, #0]
 800d890:	6918      	ldr	r0, [r3, #16]
 800d892:	f7ff fccf 	bl	800d234 <__hi0bits>
 800d896:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d89a:	e7e2      	b.n	800d862 <__d2b+0x6a>
 800d89c:	0800f3d9 	.word	0x0800f3d9
 800d8a0:	0800f44a 	.word	0x0800f44a

0800d8a4 <__ratio>:
 800d8a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a8:	4688      	mov	r8, r1
 800d8aa:	4669      	mov	r1, sp
 800d8ac:	4681      	mov	r9, r0
 800d8ae:	f7ff ff5b 	bl	800d768 <__b2d>
 800d8b2:	460f      	mov	r7, r1
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	460d      	mov	r5, r1
 800d8b8:	4640      	mov	r0, r8
 800d8ba:	a901      	add	r1, sp, #4
 800d8bc:	f7ff ff54 	bl	800d768 <__b2d>
 800d8c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d8c8:	468b      	mov	fp, r1
 800d8ca:	eba3 0c02 	sub.w	ip, r3, r2
 800d8ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d8d2:	1a9b      	subs	r3, r3, r2
 800d8d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	bfd5      	itete	le
 800d8dc:	460a      	movle	r2, r1
 800d8de:	462a      	movgt	r2, r5
 800d8e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d8e4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d8e8:	bfd8      	it	le
 800d8ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d8ee:	465b      	mov	r3, fp
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	4639      	mov	r1, r7
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f7f2 ff19 	bl	800072c <__aeabi_ddiv>
 800d8fa:	b003      	add	sp, #12
 800d8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d900 <__copybits>:
 800d900:	3901      	subs	r1, #1
 800d902:	b570      	push	{r4, r5, r6, lr}
 800d904:	1149      	asrs	r1, r1, #5
 800d906:	6914      	ldr	r4, [r2, #16]
 800d908:	3101      	adds	r1, #1
 800d90a:	f102 0314 	add.w	r3, r2, #20
 800d90e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d912:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d916:	1f05      	subs	r5, r0, #4
 800d918:	42a3      	cmp	r3, r4
 800d91a:	d30c      	bcc.n	800d936 <__copybits+0x36>
 800d91c:	1aa3      	subs	r3, r4, r2
 800d91e:	3b11      	subs	r3, #17
 800d920:	f023 0303 	bic.w	r3, r3, #3
 800d924:	3211      	adds	r2, #17
 800d926:	42a2      	cmp	r2, r4
 800d928:	bf88      	it	hi
 800d92a:	2300      	movhi	r3, #0
 800d92c:	4418      	add	r0, r3
 800d92e:	2300      	movs	r3, #0
 800d930:	4288      	cmp	r0, r1
 800d932:	d305      	bcc.n	800d940 <__copybits+0x40>
 800d934:	bd70      	pop	{r4, r5, r6, pc}
 800d936:	f853 6b04 	ldr.w	r6, [r3], #4
 800d93a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d93e:	e7eb      	b.n	800d918 <__copybits+0x18>
 800d940:	f840 3b04 	str.w	r3, [r0], #4
 800d944:	e7f4      	b.n	800d930 <__copybits+0x30>

0800d946 <__any_on>:
 800d946:	f100 0214 	add.w	r2, r0, #20
 800d94a:	6900      	ldr	r0, [r0, #16]
 800d94c:	114b      	asrs	r3, r1, #5
 800d94e:	4298      	cmp	r0, r3
 800d950:	b510      	push	{r4, lr}
 800d952:	db11      	blt.n	800d978 <__any_on+0x32>
 800d954:	dd0a      	ble.n	800d96c <__any_on+0x26>
 800d956:	f011 011f 	ands.w	r1, r1, #31
 800d95a:	d007      	beq.n	800d96c <__any_on+0x26>
 800d95c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d960:	fa24 f001 	lsr.w	r0, r4, r1
 800d964:	fa00 f101 	lsl.w	r1, r0, r1
 800d968:	428c      	cmp	r4, r1
 800d96a:	d10b      	bne.n	800d984 <__any_on+0x3e>
 800d96c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d970:	4293      	cmp	r3, r2
 800d972:	d803      	bhi.n	800d97c <__any_on+0x36>
 800d974:	2000      	movs	r0, #0
 800d976:	bd10      	pop	{r4, pc}
 800d978:	4603      	mov	r3, r0
 800d97a:	e7f7      	b.n	800d96c <__any_on+0x26>
 800d97c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d980:	2900      	cmp	r1, #0
 800d982:	d0f5      	beq.n	800d970 <__any_on+0x2a>
 800d984:	2001      	movs	r0, #1
 800d986:	e7f6      	b.n	800d976 <__any_on+0x30>

0800d988 <_malloc_usable_size_r>:
 800d988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d98c:	1f18      	subs	r0, r3, #4
 800d98e:	2b00      	cmp	r3, #0
 800d990:	bfbc      	itt	lt
 800d992:	580b      	ldrlt	r3, [r1, r0]
 800d994:	18c0      	addlt	r0, r0, r3
 800d996:	4770      	bx	lr

0800d998 <__ascii_wctomb>:
 800d998:	4603      	mov	r3, r0
 800d99a:	4608      	mov	r0, r1
 800d99c:	b141      	cbz	r1, 800d9b0 <__ascii_wctomb+0x18>
 800d99e:	2aff      	cmp	r2, #255	; 0xff
 800d9a0:	d904      	bls.n	800d9ac <__ascii_wctomb+0x14>
 800d9a2:	228a      	movs	r2, #138	; 0x8a
 800d9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a8:	601a      	str	r2, [r3, #0]
 800d9aa:	4770      	bx	lr
 800d9ac:	2001      	movs	r0, #1
 800d9ae:	700a      	strb	r2, [r1, #0]
 800d9b0:	4770      	bx	lr

0800d9b2 <__ssputs_r>:
 800d9b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b6:	461f      	mov	r7, r3
 800d9b8:	688e      	ldr	r6, [r1, #8]
 800d9ba:	4682      	mov	sl, r0
 800d9bc:	42be      	cmp	r6, r7
 800d9be:	460c      	mov	r4, r1
 800d9c0:	4690      	mov	r8, r2
 800d9c2:	680b      	ldr	r3, [r1, #0]
 800d9c4:	d82c      	bhi.n	800da20 <__ssputs_r+0x6e>
 800d9c6:	898a      	ldrh	r2, [r1, #12]
 800d9c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9cc:	d026      	beq.n	800da1c <__ssputs_r+0x6a>
 800d9ce:	6965      	ldr	r5, [r4, #20]
 800d9d0:	6909      	ldr	r1, [r1, #16]
 800d9d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9d6:	eba3 0901 	sub.w	r9, r3, r1
 800d9da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9de:	1c7b      	adds	r3, r7, #1
 800d9e0:	444b      	add	r3, r9
 800d9e2:	106d      	asrs	r5, r5, #1
 800d9e4:	429d      	cmp	r5, r3
 800d9e6:	bf38      	it	cc
 800d9e8:	461d      	movcc	r5, r3
 800d9ea:	0553      	lsls	r3, r2, #21
 800d9ec:	d527      	bpl.n	800da3e <__ssputs_r+0x8c>
 800d9ee:	4629      	mov	r1, r5
 800d9f0:	f7fb ffce 	bl	8009990 <_malloc_r>
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	b360      	cbz	r0, 800da52 <__ssputs_r+0xa0>
 800d9f8:	464a      	mov	r2, r9
 800d9fa:	6921      	ldr	r1, [r4, #16]
 800d9fc:	f7fe f8ee 	bl	800bbdc <memcpy>
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da0a:	81a3      	strh	r3, [r4, #12]
 800da0c:	6126      	str	r6, [r4, #16]
 800da0e:	444e      	add	r6, r9
 800da10:	6026      	str	r6, [r4, #0]
 800da12:	463e      	mov	r6, r7
 800da14:	6165      	str	r5, [r4, #20]
 800da16:	eba5 0509 	sub.w	r5, r5, r9
 800da1a:	60a5      	str	r5, [r4, #8]
 800da1c:	42be      	cmp	r6, r7
 800da1e:	d900      	bls.n	800da22 <__ssputs_r+0x70>
 800da20:	463e      	mov	r6, r7
 800da22:	4632      	mov	r2, r6
 800da24:	4641      	mov	r1, r8
 800da26:	6820      	ldr	r0, [r4, #0]
 800da28:	f000 fef8 	bl	800e81c <memmove>
 800da2c:	2000      	movs	r0, #0
 800da2e:	68a3      	ldr	r3, [r4, #8]
 800da30:	1b9b      	subs	r3, r3, r6
 800da32:	60a3      	str	r3, [r4, #8]
 800da34:	6823      	ldr	r3, [r4, #0]
 800da36:	4433      	add	r3, r6
 800da38:	6023      	str	r3, [r4, #0]
 800da3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da3e:	462a      	mov	r2, r5
 800da40:	f7fc f83a 	bl	8009ab8 <_realloc_r>
 800da44:	4606      	mov	r6, r0
 800da46:	2800      	cmp	r0, #0
 800da48:	d1e0      	bne.n	800da0c <__ssputs_r+0x5a>
 800da4a:	4650      	mov	r0, sl
 800da4c:	6921      	ldr	r1, [r4, #16]
 800da4e:	f7fe ff4b 	bl	800c8e8 <_free_r>
 800da52:	230c      	movs	r3, #12
 800da54:	f8ca 3000 	str.w	r3, [sl]
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	f04f 30ff 	mov.w	r0, #4294967295
 800da5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da62:	81a3      	strh	r3, [r4, #12]
 800da64:	e7e9      	b.n	800da3a <__ssputs_r+0x88>
	...

0800da68 <_svfiprintf_r>:
 800da68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da6c:	4698      	mov	r8, r3
 800da6e:	898b      	ldrh	r3, [r1, #12]
 800da70:	4607      	mov	r7, r0
 800da72:	061b      	lsls	r3, r3, #24
 800da74:	460d      	mov	r5, r1
 800da76:	4614      	mov	r4, r2
 800da78:	b09d      	sub	sp, #116	; 0x74
 800da7a:	d50e      	bpl.n	800da9a <_svfiprintf_r+0x32>
 800da7c:	690b      	ldr	r3, [r1, #16]
 800da7e:	b963      	cbnz	r3, 800da9a <_svfiprintf_r+0x32>
 800da80:	2140      	movs	r1, #64	; 0x40
 800da82:	f7fb ff85 	bl	8009990 <_malloc_r>
 800da86:	6028      	str	r0, [r5, #0]
 800da88:	6128      	str	r0, [r5, #16]
 800da8a:	b920      	cbnz	r0, 800da96 <_svfiprintf_r+0x2e>
 800da8c:	230c      	movs	r3, #12
 800da8e:	603b      	str	r3, [r7, #0]
 800da90:	f04f 30ff 	mov.w	r0, #4294967295
 800da94:	e0d0      	b.n	800dc38 <_svfiprintf_r+0x1d0>
 800da96:	2340      	movs	r3, #64	; 0x40
 800da98:	616b      	str	r3, [r5, #20]
 800da9a:	2300      	movs	r3, #0
 800da9c:	9309      	str	r3, [sp, #36]	; 0x24
 800da9e:	2320      	movs	r3, #32
 800daa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daa4:	2330      	movs	r3, #48	; 0x30
 800daa6:	f04f 0901 	mov.w	r9, #1
 800daaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800daae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800dc50 <_svfiprintf_r+0x1e8>
 800dab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dab6:	4623      	mov	r3, r4
 800dab8:	469a      	mov	sl, r3
 800daba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dabe:	b10a      	cbz	r2, 800dac4 <_svfiprintf_r+0x5c>
 800dac0:	2a25      	cmp	r2, #37	; 0x25
 800dac2:	d1f9      	bne.n	800dab8 <_svfiprintf_r+0x50>
 800dac4:	ebba 0b04 	subs.w	fp, sl, r4
 800dac8:	d00b      	beq.n	800dae2 <_svfiprintf_r+0x7a>
 800daca:	465b      	mov	r3, fp
 800dacc:	4622      	mov	r2, r4
 800dace:	4629      	mov	r1, r5
 800dad0:	4638      	mov	r0, r7
 800dad2:	f7ff ff6e 	bl	800d9b2 <__ssputs_r>
 800dad6:	3001      	adds	r0, #1
 800dad8:	f000 80a9 	beq.w	800dc2e <_svfiprintf_r+0x1c6>
 800dadc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dade:	445a      	add	r2, fp
 800dae0:	9209      	str	r2, [sp, #36]	; 0x24
 800dae2:	f89a 3000 	ldrb.w	r3, [sl]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f000 80a1 	beq.w	800dc2e <_svfiprintf_r+0x1c6>
 800daec:	2300      	movs	r3, #0
 800daee:	f04f 32ff 	mov.w	r2, #4294967295
 800daf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daf6:	f10a 0a01 	add.w	sl, sl, #1
 800dafa:	9304      	str	r3, [sp, #16]
 800dafc:	9307      	str	r3, [sp, #28]
 800dafe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db02:	931a      	str	r3, [sp, #104]	; 0x68
 800db04:	4654      	mov	r4, sl
 800db06:	2205      	movs	r2, #5
 800db08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db0c:	4850      	ldr	r0, [pc, #320]	; (800dc50 <_svfiprintf_r+0x1e8>)
 800db0e:	f7fe f857 	bl	800bbc0 <memchr>
 800db12:	9a04      	ldr	r2, [sp, #16]
 800db14:	b9d8      	cbnz	r0, 800db4e <_svfiprintf_r+0xe6>
 800db16:	06d0      	lsls	r0, r2, #27
 800db18:	bf44      	itt	mi
 800db1a:	2320      	movmi	r3, #32
 800db1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db20:	0711      	lsls	r1, r2, #28
 800db22:	bf44      	itt	mi
 800db24:	232b      	movmi	r3, #43	; 0x2b
 800db26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db2a:	f89a 3000 	ldrb.w	r3, [sl]
 800db2e:	2b2a      	cmp	r3, #42	; 0x2a
 800db30:	d015      	beq.n	800db5e <_svfiprintf_r+0xf6>
 800db32:	4654      	mov	r4, sl
 800db34:	2000      	movs	r0, #0
 800db36:	f04f 0c0a 	mov.w	ip, #10
 800db3a:	9a07      	ldr	r2, [sp, #28]
 800db3c:	4621      	mov	r1, r4
 800db3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db42:	3b30      	subs	r3, #48	; 0x30
 800db44:	2b09      	cmp	r3, #9
 800db46:	d94d      	bls.n	800dbe4 <_svfiprintf_r+0x17c>
 800db48:	b1b0      	cbz	r0, 800db78 <_svfiprintf_r+0x110>
 800db4a:	9207      	str	r2, [sp, #28]
 800db4c:	e014      	b.n	800db78 <_svfiprintf_r+0x110>
 800db4e:	eba0 0308 	sub.w	r3, r0, r8
 800db52:	fa09 f303 	lsl.w	r3, r9, r3
 800db56:	4313      	orrs	r3, r2
 800db58:	46a2      	mov	sl, r4
 800db5a:	9304      	str	r3, [sp, #16]
 800db5c:	e7d2      	b.n	800db04 <_svfiprintf_r+0x9c>
 800db5e:	9b03      	ldr	r3, [sp, #12]
 800db60:	1d19      	adds	r1, r3, #4
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	9103      	str	r1, [sp, #12]
 800db66:	2b00      	cmp	r3, #0
 800db68:	bfbb      	ittet	lt
 800db6a:	425b      	neglt	r3, r3
 800db6c:	f042 0202 	orrlt.w	r2, r2, #2
 800db70:	9307      	strge	r3, [sp, #28]
 800db72:	9307      	strlt	r3, [sp, #28]
 800db74:	bfb8      	it	lt
 800db76:	9204      	strlt	r2, [sp, #16]
 800db78:	7823      	ldrb	r3, [r4, #0]
 800db7a:	2b2e      	cmp	r3, #46	; 0x2e
 800db7c:	d10c      	bne.n	800db98 <_svfiprintf_r+0x130>
 800db7e:	7863      	ldrb	r3, [r4, #1]
 800db80:	2b2a      	cmp	r3, #42	; 0x2a
 800db82:	d134      	bne.n	800dbee <_svfiprintf_r+0x186>
 800db84:	9b03      	ldr	r3, [sp, #12]
 800db86:	3402      	adds	r4, #2
 800db88:	1d1a      	adds	r2, r3, #4
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	9203      	str	r2, [sp, #12]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	bfb8      	it	lt
 800db92:	f04f 33ff 	movlt.w	r3, #4294967295
 800db96:	9305      	str	r3, [sp, #20]
 800db98:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800dc54 <_svfiprintf_r+0x1ec>
 800db9c:	2203      	movs	r2, #3
 800db9e:	4650      	mov	r0, sl
 800dba0:	7821      	ldrb	r1, [r4, #0]
 800dba2:	f7fe f80d 	bl	800bbc0 <memchr>
 800dba6:	b138      	cbz	r0, 800dbb8 <_svfiprintf_r+0x150>
 800dba8:	2240      	movs	r2, #64	; 0x40
 800dbaa:	9b04      	ldr	r3, [sp, #16]
 800dbac:	eba0 000a 	sub.w	r0, r0, sl
 800dbb0:	4082      	lsls	r2, r0
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	3401      	adds	r4, #1
 800dbb6:	9304      	str	r3, [sp, #16]
 800dbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbbc:	2206      	movs	r2, #6
 800dbbe:	4826      	ldr	r0, [pc, #152]	; (800dc58 <_svfiprintf_r+0x1f0>)
 800dbc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbc4:	f7fd fffc 	bl	800bbc0 <memchr>
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	d038      	beq.n	800dc3e <_svfiprintf_r+0x1d6>
 800dbcc:	4b23      	ldr	r3, [pc, #140]	; (800dc5c <_svfiprintf_r+0x1f4>)
 800dbce:	bb1b      	cbnz	r3, 800dc18 <_svfiprintf_r+0x1b0>
 800dbd0:	9b03      	ldr	r3, [sp, #12]
 800dbd2:	3307      	adds	r3, #7
 800dbd4:	f023 0307 	bic.w	r3, r3, #7
 800dbd8:	3308      	adds	r3, #8
 800dbda:	9303      	str	r3, [sp, #12]
 800dbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbde:	4433      	add	r3, r6
 800dbe0:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe2:	e768      	b.n	800dab6 <_svfiprintf_r+0x4e>
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	2001      	movs	r0, #1
 800dbe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbec:	e7a6      	b.n	800db3c <_svfiprintf_r+0xd4>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	f04f 0c0a 	mov.w	ip, #10
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	3401      	adds	r4, #1
 800dbf8:	9305      	str	r3, [sp, #20]
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc00:	3a30      	subs	r2, #48	; 0x30
 800dc02:	2a09      	cmp	r2, #9
 800dc04:	d903      	bls.n	800dc0e <_svfiprintf_r+0x1a6>
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d0c6      	beq.n	800db98 <_svfiprintf_r+0x130>
 800dc0a:	9105      	str	r1, [sp, #20]
 800dc0c:	e7c4      	b.n	800db98 <_svfiprintf_r+0x130>
 800dc0e:	4604      	mov	r4, r0
 800dc10:	2301      	movs	r3, #1
 800dc12:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc16:	e7f0      	b.n	800dbfa <_svfiprintf_r+0x192>
 800dc18:	ab03      	add	r3, sp, #12
 800dc1a:	9300      	str	r3, [sp, #0]
 800dc1c:	462a      	mov	r2, r5
 800dc1e:	4638      	mov	r0, r7
 800dc20:	4b0f      	ldr	r3, [pc, #60]	; (800dc60 <_svfiprintf_r+0x1f8>)
 800dc22:	a904      	add	r1, sp, #16
 800dc24:	f7fc fef0 	bl	800aa08 <_printf_float>
 800dc28:	1c42      	adds	r2, r0, #1
 800dc2a:	4606      	mov	r6, r0
 800dc2c:	d1d6      	bne.n	800dbdc <_svfiprintf_r+0x174>
 800dc2e:	89ab      	ldrh	r3, [r5, #12]
 800dc30:	065b      	lsls	r3, r3, #25
 800dc32:	f53f af2d 	bmi.w	800da90 <_svfiprintf_r+0x28>
 800dc36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc38:	b01d      	add	sp, #116	; 0x74
 800dc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc3e:	ab03      	add	r3, sp, #12
 800dc40:	9300      	str	r3, [sp, #0]
 800dc42:	462a      	mov	r2, r5
 800dc44:	4638      	mov	r0, r7
 800dc46:	4b06      	ldr	r3, [pc, #24]	; (800dc60 <_svfiprintf_r+0x1f8>)
 800dc48:	a904      	add	r1, sp, #16
 800dc4a:	f7fd f97d 	bl	800af48 <_printf_i>
 800dc4e:	e7eb      	b.n	800dc28 <_svfiprintf_r+0x1c0>
 800dc50:	0800f5a4 	.word	0x0800f5a4
 800dc54:	0800f5aa 	.word	0x0800f5aa
 800dc58:	0800f5ae 	.word	0x0800f5ae
 800dc5c:	0800aa09 	.word	0x0800aa09
 800dc60:	0800d9b3 	.word	0x0800d9b3

0800dc64 <_sungetc_r>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	1c4b      	adds	r3, r1, #1
 800dc68:	4614      	mov	r4, r2
 800dc6a:	d103      	bne.n	800dc74 <_sungetc_r+0x10>
 800dc6c:	f04f 35ff 	mov.w	r5, #4294967295
 800dc70:	4628      	mov	r0, r5
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	8993      	ldrh	r3, [r2, #12]
 800dc76:	b2cd      	uxtb	r5, r1
 800dc78:	f023 0320 	bic.w	r3, r3, #32
 800dc7c:	8193      	strh	r3, [r2, #12]
 800dc7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc80:	6852      	ldr	r2, [r2, #4]
 800dc82:	b18b      	cbz	r3, 800dca8 <_sungetc_r+0x44>
 800dc84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc86:	4293      	cmp	r3, r2
 800dc88:	dd08      	ble.n	800dc9c <_sungetc_r+0x38>
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	1e5a      	subs	r2, r3, #1
 800dc8e:	6022      	str	r2, [r4, #0]
 800dc90:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dc94:	6863      	ldr	r3, [r4, #4]
 800dc96:	3301      	adds	r3, #1
 800dc98:	6063      	str	r3, [r4, #4]
 800dc9a:	e7e9      	b.n	800dc70 <_sungetc_r+0xc>
 800dc9c:	4621      	mov	r1, r4
 800dc9e:	f000 fd85 	bl	800e7ac <__submore>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d0f1      	beq.n	800dc8a <_sungetc_r+0x26>
 800dca6:	e7e1      	b.n	800dc6c <_sungetc_r+0x8>
 800dca8:	6921      	ldr	r1, [r4, #16]
 800dcaa:	6823      	ldr	r3, [r4, #0]
 800dcac:	b151      	cbz	r1, 800dcc4 <_sungetc_r+0x60>
 800dcae:	4299      	cmp	r1, r3
 800dcb0:	d208      	bcs.n	800dcc4 <_sungetc_r+0x60>
 800dcb2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800dcb6:	42a9      	cmp	r1, r5
 800dcb8:	d104      	bne.n	800dcc4 <_sungetc_r+0x60>
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	3201      	adds	r2, #1
 800dcbe:	6023      	str	r3, [r4, #0]
 800dcc0:	6062      	str	r2, [r4, #4]
 800dcc2:	e7d5      	b.n	800dc70 <_sungetc_r+0xc>
 800dcc4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800dcc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dccc:	6363      	str	r3, [r4, #52]	; 0x34
 800dcce:	2303      	movs	r3, #3
 800dcd0:	63a3      	str	r3, [r4, #56]	; 0x38
 800dcd2:	4623      	mov	r3, r4
 800dcd4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800dcd8:	6023      	str	r3, [r4, #0]
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e7dc      	b.n	800dc98 <_sungetc_r+0x34>

0800dcde <__ssrefill_r>:
 800dcde:	b510      	push	{r4, lr}
 800dce0:	460c      	mov	r4, r1
 800dce2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dce4:	b169      	cbz	r1, 800dd02 <__ssrefill_r+0x24>
 800dce6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcea:	4299      	cmp	r1, r3
 800dcec:	d001      	beq.n	800dcf2 <__ssrefill_r+0x14>
 800dcee:	f7fe fdfb 	bl	800c8e8 <_free_r>
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcf6:	6360      	str	r0, [r4, #52]	; 0x34
 800dcf8:	6063      	str	r3, [r4, #4]
 800dcfa:	b113      	cbz	r3, 800dd02 <__ssrefill_r+0x24>
 800dcfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dcfe:	6023      	str	r3, [r4, #0]
 800dd00:	bd10      	pop	{r4, pc}
 800dd02:	6923      	ldr	r3, [r4, #16]
 800dd04:	f04f 30ff 	mov.w	r0, #4294967295
 800dd08:	6023      	str	r3, [r4, #0]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	6063      	str	r3, [r4, #4]
 800dd0e:	89a3      	ldrh	r3, [r4, #12]
 800dd10:	f043 0320 	orr.w	r3, r3, #32
 800dd14:	81a3      	strh	r3, [r4, #12]
 800dd16:	e7f3      	b.n	800dd00 <__ssrefill_r+0x22>

0800dd18 <__ssvfiscanf_r>:
 800dd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	2100      	movs	r1, #0
 800dd20:	4606      	mov	r6, r0
 800dd22:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800dd26:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800dd2a:	49a6      	ldr	r1, [pc, #664]	; (800dfc4 <__ssvfiscanf_r+0x2ac>)
 800dd2c:	f10d 0804 	add.w	r8, sp, #4
 800dd30:	91a0      	str	r1, [sp, #640]	; 0x280
 800dd32:	49a5      	ldr	r1, [pc, #660]	; (800dfc8 <__ssvfiscanf_r+0x2b0>)
 800dd34:	4fa5      	ldr	r7, [pc, #660]	; (800dfcc <__ssvfiscanf_r+0x2b4>)
 800dd36:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800dfd0 <__ssvfiscanf_r+0x2b8>
 800dd3a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800dd3e:	91a1      	str	r1, [sp, #644]	; 0x284
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	7813      	ldrb	r3, [r2, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f000 815a 	beq.w	800dffe <__ssvfiscanf_r+0x2e6>
 800dd4a:	5cf9      	ldrb	r1, [r7, r3]
 800dd4c:	1c55      	adds	r5, r2, #1
 800dd4e:	f011 0108 	ands.w	r1, r1, #8
 800dd52:	d019      	beq.n	800dd88 <__ssvfiscanf_r+0x70>
 800dd54:	6863      	ldr	r3, [r4, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	dd0f      	ble.n	800dd7a <__ssvfiscanf_r+0x62>
 800dd5a:	6823      	ldr	r3, [r4, #0]
 800dd5c:	781a      	ldrb	r2, [r3, #0]
 800dd5e:	5cba      	ldrb	r2, [r7, r2]
 800dd60:	0712      	lsls	r2, r2, #28
 800dd62:	d401      	bmi.n	800dd68 <__ssvfiscanf_r+0x50>
 800dd64:	462a      	mov	r2, r5
 800dd66:	e7ec      	b.n	800dd42 <__ssvfiscanf_r+0x2a>
 800dd68:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	3201      	adds	r2, #1
 800dd6e:	9245      	str	r2, [sp, #276]	; 0x114
 800dd70:	6862      	ldr	r2, [r4, #4]
 800dd72:	6023      	str	r3, [r4, #0]
 800dd74:	3a01      	subs	r2, #1
 800dd76:	6062      	str	r2, [r4, #4]
 800dd78:	e7ec      	b.n	800dd54 <__ssvfiscanf_r+0x3c>
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dd80:	4798      	blx	r3
 800dd82:	2800      	cmp	r0, #0
 800dd84:	d0e9      	beq.n	800dd5a <__ssvfiscanf_r+0x42>
 800dd86:	e7ed      	b.n	800dd64 <__ssvfiscanf_r+0x4c>
 800dd88:	2b25      	cmp	r3, #37	; 0x25
 800dd8a:	d012      	beq.n	800ddb2 <__ssvfiscanf_r+0x9a>
 800dd8c:	469a      	mov	sl, r3
 800dd8e:	6863      	ldr	r3, [r4, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f340 8092 	ble.w	800deba <__ssvfiscanf_r+0x1a2>
 800dd96:	6822      	ldr	r2, [r4, #0]
 800dd98:	7813      	ldrb	r3, [r2, #0]
 800dd9a:	4553      	cmp	r3, sl
 800dd9c:	f040 812f 	bne.w	800dffe <__ssvfiscanf_r+0x2e6>
 800dda0:	6863      	ldr	r3, [r4, #4]
 800dda2:	3201      	adds	r2, #1
 800dda4:	3b01      	subs	r3, #1
 800dda6:	6063      	str	r3, [r4, #4]
 800dda8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ddaa:	6022      	str	r2, [r4, #0]
 800ddac:	3301      	adds	r3, #1
 800ddae:	9345      	str	r3, [sp, #276]	; 0x114
 800ddb0:	e7d8      	b.n	800dd64 <__ssvfiscanf_r+0x4c>
 800ddb2:	9141      	str	r1, [sp, #260]	; 0x104
 800ddb4:	9143      	str	r1, [sp, #268]	; 0x10c
 800ddb6:	7853      	ldrb	r3, [r2, #1]
 800ddb8:	2b2a      	cmp	r3, #42	; 0x2a
 800ddba:	bf04      	itt	eq
 800ddbc:	2310      	moveq	r3, #16
 800ddbe:	1c95      	addeq	r5, r2, #2
 800ddc0:	f04f 020a 	mov.w	r2, #10
 800ddc4:	bf08      	it	eq
 800ddc6:	9341      	streq	r3, [sp, #260]	; 0x104
 800ddc8:	46aa      	mov	sl, r5
 800ddca:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ddce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ddd2:	2b09      	cmp	r3, #9
 800ddd4:	d91c      	bls.n	800de10 <__ssvfiscanf_r+0xf8>
 800ddd6:	2203      	movs	r2, #3
 800ddd8:	487d      	ldr	r0, [pc, #500]	; (800dfd0 <__ssvfiscanf_r+0x2b8>)
 800ddda:	f7fd fef1 	bl	800bbc0 <memchr>
 800ddde:	b138      	cbz	r0, 800ddf0 <__ssvfiscanf_r+0xd8>
 800dde0:	2301      	movs	r3, #1
 800dde2:	4655      	mov	r5, sl
 800dde4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dde6:	eba0 0009 	sub.w	r0, r0, r9
 800ddea:	4083      	lsls	r3, r0
 800ddec:	4313      	orrs	r3, r2
 800ddee:	9341      	str	r3, [sp, #260]	; 0x104
 800ddf0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ddf4:	2b78      	cmp	r3, #120	; 0x78
 800ddf6:	d806      	bhi.n	800de06 <__ssvfiscanf_r+0xee>
 800ddf8:	2b57      	cmp	r3, #87	; 0x57
 800ddfa:	d810      	bhi.n	800de1e <__ssvfiscanf_r+0x106>
 800ddfc:	2b25      	cmp	r3, #37	; 0x25
 800ddfe:	d0c5      	beq.n	800dd8c <__ssvfiscanf_r+0x74>
 800de00:	d856      	bhi.n	800deb0 <__ssvfiscanf_r+0x198>
 800de02:	2b00      	cmp	r3, #0
 800de04:	d064      	beq.n	800ded0 <__ssvfiscanf_r+0x1b8>
 800de06:	2303      	movs	r3, #3
 800de08:	9347      	str	r3, [sp, #284]	; 0x11c
 800de0a:	230a      	movs	r3, #10
 800de0c:	9342      	str	r3, [sp, #264]	; 0x108
 800de0e:	e075      	b.n	800defc <__ssvfiscanf_r+0x1e4>
 800de10:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800de12:	4655      	mov	r5, sl
 800de14:	fb02 1103 	mla	r1, r2, r3, r1
 800de18:	3930      	subs	r1, #48	; 0x30
 800de1a:	9143      	str	r1, [sp, #268]	; 0x10c
 800de1c:	e7d4      	b.n	800ddc8 <__ssvfiscanf_r+0xb0>
 800de1e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800de22:	2a20      	cmp	r2, #32
 800de24:	d8ef      	bhi.n	800de06 <__ssvfiscanf_r+0xee>
 800de26:	a101      	add	r1, pc, #4	; (adr r1, 800de2c <__ssvfiscanf_r+0x114>)
 800de28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800de2c:	0800dedf 	.word	0x0800dedf
 800de30:	0800de07 	.word	0x0800de07
 800de34:	0800de07 	.word	0x0800de07
 800de38:	0800df3d 	.word	0x0800df3d
 800de3c:	0800de07 	.word	0x0800de07
 800de40:	0800de07 	.word	0x0800de07
 800de44:	0800de07 	.word	0x0800de07
 800de48:	0800de07 	.word	0x0800de07
 800de4c:	0800de07 	.word	0x0800de07
 800de50:	0800de07 	.word	0x0800de07
 800de54:	0800de07 	.word	0x0800de07
 800de58:	0800df53 	.word	0x0800df53
 800de5c:	0800df39 	.word	0x0800df39
 800de60:	0800deb7 	.word	0x0800deb7
 800de64:	0800deb7 	.word	0x0800deb7
 800de68:	0800deb7 	.word	0x0800deb7
 800de6c:	0800de07 	.word	0x0800de07
 800de70:	0800def5 	.word	0x0800def5
 800de74:	0800de07 	.word	0x0800de07
 800de78:	0800de07 	.word	0x0800de07
 800de7c:	0800de07 	.word	0x0800de07
 800de80:	0800de07 	.word	0x0800de07
 800de84:	0800df63 	.word	0x0800df63
 800de88:	0800df31 	.word	0x0800df31
 800de8c:	0800ded7 	.word	0x0800ded7
 800de90:	0800de07 	.word	0x0800de07
 800de94:	0800de07 	.word	0x0800de07
 800de98:	0800df5f 	.word	0x0800df5f
 800de9c:	0800de07 	.word	0x0800de07
 800dea0:	0800df39 	.word	0x0800df39
 800dea4:	0800de07 	.word	0x0800de07
 800dea8:	0800de07 	.word	0x0800de07
 800deac:	0800dedf 	.word	0x0800dedf
 800deb0:	3b45      	subs	r3, #69	; 0x45
 800deb2:	2b02      	cmp	r3, #2
 800deb4:	d8a7      	bhi.n	800de06 <__ssvfiscanf_r+0xee>
 800deb6:	2305      	movs	r3, #5
 800deb8:	e01f      	b.n	800defa <__ssvfiscanf_r+0x1e2>
 800deba:	4621      	mov	r1, r4
 800debc:	4630      	mov	r0, r6
 800debe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dec0:	4798      	blx	r3
 800dec2:	2800      	cmp	r0, #0
 800dec4:	f43f af67 	beq.w	800dd96 <__ssvfiscanf_r+0x7e>
 800dec8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800deca:	2800      	cmp	r0, #0
 800decc:	f040 808d 	bne.w	800dfea <__ssvfiscanf_r+0x2d2>
 800ded0:	f04f 30ff 	mov.w	r0, #4294967295
 800ded4:	e08f      	b.n	800dff6 <__ssvfiscanf_r+0x2de>
 800ded6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ded8:	f042 0220 	orr.w	r2, r2, #32
 800dedc:	9241      	str	r2, [sp, #260]	; 0x104
 800dede:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dee4:	9241      	str	r2, [sp, #260]	; 0x104
 800dee6:	2210      	movs	r2, #16
 800dee8:	2b6f      	cmp	r3, #111	; 0x6f
 800deea:	bf34      	ite	cc
 800deec:	2303      	movcc	r3, #3
 800deee:	2304      	movcs	r3, #4
 800def0:	9242      	str	r2, [sp, #264]	; 0x108
 800def2:	e002      	b.n	800defa <__ssvfiscanf_r+0x1e2>
 800def4:	2300      	movs	r3, #0
 800def6:	9342      	str	r3, [sp, #264]	; 0x108
 800def8:	2303      	movs	r3, #3
 800defa:	9347      	str	r3, [sp, #284]	; 0x11c
 800defc:	6863      	ldr	r3, [r4, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	dd3d      	ble.n	800df7e <__ssvfiscanf_r+0x266>
 800df02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800df04:	0659      	lsls	r1, r3, #25
 800df06:	d404      	bmi.n	800df12 <__ssvfiscanf_r+0x1fa>
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	781a      	ldrb	r2, [r3, #0]
 800df0c:	5cba      	ldrb	r2, [r7, r2]
 800df0e:	0712      	lsls	r2, r2, #28
 800df10:	d43c      	bmi.n	800df8c <__ssvfiscanf_r+0x274>
 800df12:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800df14:	2b02      	cmp	r3, #2
 800df16:	dc4b      	bgt.n	800dfb0 <__ssvfiscanf_r+0x298>
 800df18:	466b      	mov	r3, sp
 800df1a:	4622      	mov	r2, r4
 800df1c:	4630      	mov	r0, r6
 800df1e:	a941      	add	r1, sp, #260	; 0x104
 800df20:	f000 f9b4 	bl	800e28c <_scanf_chars>
 800df24:	2801      	cmp	r0, #1
 800df26:	d06a      	beq.n	800dffe <__ssvfiscanf_r+0x2e6>
 800df28:	2802      	cmp	r0, #2
 800df2a:	f47f af1b 	bne.w	800dd64 <__ssvfiscanf_r+0x4c>
 800df2e:	e7cb      	b.n	800dec8 <__ssvfiscanf_r+0x1b0>
 800df30:	2308      	movs	r3, #8
 800df32:	9342      	str	r3, [sp, #264]	; 0x108
 800df34:	2304      	movs	r3, #4
 800df36:	e7e0      	b.n	800defa <__ssvfiscanf_r+0x1e2>
 800df38:	220a      	movs	r2, #10
 800df3a:	e7d5      	b.n	800dee8 <__ssvfiscanf_r+0x1d0>
 800df3c:	4629      	mov	r1, r5
 800df3e:	4640      	mov	r0, r8
 800df40:	f000 fbfb 	bl	800e73a <__sccl>
 800df44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800df46:	4605      	mov	r5, r0
 800df48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df4c:	9341      	str	r3, [sp, #260]	; 0x104
 800df4e:	2301      	movs	r3, #1
 800df50:	e7d3      	b.n	800defa <__ssvfiscanf_r+0x1e2>
 800df52:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800df54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df58:	9341      	str	r3, [sp, #260]	; 0x104
 800df5a:	2300      	movs	r3, #0
 800df5c:	e7cd      	b.n	800defa <__ssvfiscanf_r+0x1e2>
 800df5e:	2302      	movs	r3, #2
 800df60:	e7cb      	b.n	800defa <__ssvfiscanf_r+0x1e2>
 800df62:	9841      	ldr	r0, [sp, #260]	; 0x104
 800df64:	06c3      	lsls	r3, r0, #27
 800df66:	f53f aefd 	bmi.w	800dd64 <__ssvfiscanf_r+0x4c>
 800df6a:	9b00      	ldr	r3, [sp, #0]
 800df6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800df6e:	1d19      	adds	r1, r3, #4
 800df70:	9100      	str	r1, [sp, #0]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	07c0      	lsls	r0, r0, #31
 800df76:	bf4c      	ite	mi
 800df78:	801a      	strhmi	r2, [r3, #0]
 800df7a:	601a      	strpl	r2, [r3, #0]
 800df7c:	e6f2      	b.n	800dd64 <__ssvfiscanf_r+0x4c>
 800df7e:	4621      	mov	r1, r4
 800df80:	4630      	mov	r0, r6
 800df82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800df84:	4798      	blx	r3
 800df86:	2800      	cmp	r0, #0
 800df88:	d0bb      	beq.n	800df02 <__ssvfiscanf_r+0x1ea>
 800df8a:	e79d      	b.n	800dec8 <__ssvfiscanf_r+0x1b0>
 800df8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800df8e:	3201      	adds	r2, #1
 800df90:	9245      	str	r2, [sp, #276]	; 0x114
 800df92:	6862      	ldr	r2, [r4, #4]
 800df94:	3a01      	subs	r2, #1
 800df96:	2a00      	cmp	r2, #0
 800df98:	6062      	str	r2, [r4, #4]
 800df9a:	dd02      	ble.n	800dfa2 <__ssvfiscanf_r+0x28a>
 800df9c:	3301      	adds	r3, #1
 800df9e:	6023      	str	r3, [r4, #0]
 800dfa0:	e7b2      	b.n	800df08 <__ssvfiscanf_r+0x1f0>
 800dfa2:	4621      	mov	r1, r4
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dfa8:	4798      	blx	r3
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	d0ac      	beq.n	800df08 <__ssvfiscanf_r+0x1f0>
 800dfae:	e78b      	b.n	800dec8 <__ssvfiscanf_r+0x1b0>
 800dfb0:	2b04      	cmp	r3, #4
 800dfb2:	dc0f      	bgt.n	800dfd4 <__ssvfiscanf_r+0x2bc>
 800dfb4:	466b      	mov	r3, sp
 800dfb6:	4622      	mov	r2, r4
 800dfb8:	4630      	mov	r0, r6
 800dfba:	a941      	add	r1, sp, #260	; 0x104
 800dfbc:	f000 f9c0 	bl	800e340 <_scanf_i>
 800dfc0:	e7b0      	b.n	800df24 <__ssvfiscanf_r+0x20c>
 800dfc2:	bf00      	nop
 800dfc4:	0800dc65 	.word	0x0800dc65
 800dfc8:	0800dcdf 	.word	0x0800dcdf
 800dfcc:	0800f21e 	.word	0x0800f21e
 800dfd0:	0800f5aa 	.word	0x0800f5aa
 800dfd4:	4b0b      	ldr	r3, [pc, #44]	; (800e004 <__ssvfiscanf_r+0x2ec>)
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	f43f aec4 	beq.w	800dd64 <__ssvfiscanf_r+0x4c>
 800dfdc:	466b      	mov	r3, sp
 800dfde:	4622      	mov	r2, r4
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	a941      	add	r1, sp, #260	; 0x104
 800dfe4:	f7fd f8d2 	bl	800b18c <_scanf_float>
 800dfe8:	e79c      	b.n	800df24 <__ssvfiscanf_r+0x20c>
 800dfea:	89a3      	ldrh	r3, [r4, #12]
 800dfec:	f013 0f40 	tst.w	r3, #64	; 0x40
 800dff0:	bf18      	it	ne
 800dff2:	f04f 30ff 	movne.w	r0, #4294967295
 800dff6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800dffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dffe:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e000:	e7f9      	b.n	800dff6 <__ssvfiscanf_r+0x2de>
 800e002:	bf00      	nop
 800e004:	0800b18d 	.word	0x0800b18d

0800e008 <__sfputc_r>:
 800e008:	6893      	ldr	r3, [r2, #8]
 800e00a:	b410      	push	{r4}
 800e00c:	3b01      	subs	r3, #1
 800e00e:	2b00      	cmp	r3, #0
 800e010:	6093      	str	r3, [r2, #8]
 800e012:	da07      	bge.n	800e024 <__sfputc_r+0x1c>
 800e014:	6994      	ldr	r4, [r2, #24]
 800e016:	42a3      	cmp	r3, r4
 800e018:	db01      	blt.n	800e01e <__sfputc_r+0x16>
 800e01a:	290a      	cmp	r1, #10
 800e01c:	d102      	bne.n	800e024 <__sfputc_r+0x1c>
 800e01e:	bc10      	pop	{r4}
 800e020:	f7fd bc6f 	b.w	800b902 <__swbuf_r>
 800e024:	6813      	ldr	r3, [r2, #0]
 800e026:	1c58      	adds	r0, r3, #1
 800e028:	6010      	str	r0, [r2, #0]
 800e02a:	7019      	strb	r1, [r3, #0]
 800e02c:	4608      	mov	r0, r1
 800e02e:	bc10      	pop	{r4}
 800e030:	4770      	bx	lr

0800e032 <__sfputs_r>:
 800e032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e034:	4606      	mov	r6, r0
 800e036:	460f      	mov	r7, r1
 800e038:	4614      	mov	r4, r2
 800e03a:	18d5      	adds	r5, r2, r3
 800e03c:	42ac      	cmp	r4, r5
 800e03e:	d101      	bne.n	800e044 <__sfputs_r+0x12>
 800e040:	2000      	movs	r0, #0
 800e042:	e007      	b.n	800e054 <__sfputs_r+0x22>
 800e044:	463a      	mov	r2, r7
 800e046:	4630      	mov	r0, r6
 800e048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e04c:	f7ff ffdc 	bl	800e008 <__sfputc_r>
 800e050:	1c43      	adds	r3, r0, #1
 800e052:	d1f3      	bne.n	800e03c <__sfputs_r+0xa>
 800e054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e058 <_vfiprintf_r>:
 800e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05c:	460d      	mov	r5, r1
 800e05e:	4614      	mov	r4, r2
 800e060:	4698      	mov	r8, r3
 800e062:	4606      	mov	r6, r0
 800e064:	b09d      	sub	sp, #116	; 0x74
 800e066:	b118      	cbz	r0, 800e070 <_vfiprintf_r+0x18>
 800e068:	6a03      	ldr	r3, [r0, #32]
 800e06a:	b90b      	cbnz	r3, 800e070 <_vfiprintf_r+0x18>
 800e06c:	f7fd fb16 	bl	800b69c <__sinit>
 800e070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e072:	07d9      	lsls	r1, r3, #31
 800e074:	d405      	bmi.n	800e082 <_vfiprintf_r+0x2a>
 800e076:	89ab      	ldrh	r3, [r5, #12]
 800e078:	059a      	lsls	r2, r3, #22
 800e07a:	d402      	bmi.n	800e082 <_vfiprintf_r+0x2a>
 800e07c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e07e:	f7fd fd95 	bl	800bbac <__retarget_lock_acquire_recursive>
 800e082:	89ab      	ldrh	r3, [r5, #12]
 800e084:	071b      	lsls	r3, r3, #28
 800e086:	d501      	bpl.n	800e08c <_vfiprintf_r+0x34>
 800e088:	692b      	ldr	r3, [r5, #16]
 800e08a:	b99b      	cbnz	r3, 800e0b4 <_vfiprintf_r+0x5c>
 800e08c:	4629      	mov	r1, r5
 800e08e:	4630      	mov	r0, r6
 800e090:	f7fd fc74 	bl	800b97c <__swsetup_r>
 800e094:	b170      	cbz	r0, 800e0b4 <_vfiprintf_r+0x5c>
 800e096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e098:	07dc      	lsls	r4, r3, #31
 800e09a:	d504      	bpl.n	800e0a6 <_vfiprintf_r+0x4e>
 800e09c:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a0:	b01d      	add	sp, #116	; 0x74
 800e0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a6:	89ab      	ldrh	r3, [r5, #12]
 800e0a8:	0598      	lsls	r0, r3, #22
 800e0aa:	d4f7      	bmi.n	800e09c <_vfiprintf_r+0x44>
 800e0ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0ae:	f7fd fd7e 	bl	800bbae <__retarget_lock_release_recursive>
 800e0b2:	e7f3      	b.n	800e09c <_vfiprintf_r+0x44>
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b8:	2320      	movs	r3, #32
 800e0ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0be:	2330      	movs	r3, #48	; 0x30
 800e0c0:	f04f 0901 	mov.w	r9, #1
 800e0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e278 <_vfiprintf_r+0x220>
 800e0cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0d0:	4623      	mov	r3, r4
 800e0d2:	469a      	mov	sl, r3
 800e0d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0d8:	b10a      	cbz	r2, 800e0de <_vfiprintf_r+0x86>
 800e0da:	2a25      	cmp	r2, #37	; 0x25
 800e0dc:	d1f9      	bne.n	800e0d2 <_vfiprintf_r+0x7a>
 800e0de:	ebba 0b04 	subs.w	fp, sl, r4
 800e0e2:	d00b      	beq.n	800e0fc <_vfiprintf_r+0xa4>
 800e0e4:	465b      	mov	r3, fp
 800e0e6:	4622      	mov	r2, r4
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	f7ff ffa1 	bl	800e032 <__sfputs_r>
 800e0f0:	3001      	adds	r0, #1
 800e0f2:	f000 80a9 	beq.w	800e248 <_vfiprintf_r+0x1f0>
 800e0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0f8:	445a      	add	r2, fp
 800e0fa:	9209      	str	r2, [sp, #36]	; 0x24
 800e0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e100:	2b00      	cmp	r3, #0
 800e102:	f000 80a1 	beq.w	800e248 <_vfiprintf_r+0x1f0>
 800e106:	2300      	movs	r3, #0
 800e108:	f04f 32ff 	mov.w	r2, #4294967295
 800e10c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e110:	f10a 0a01 	add.w	sl, sl, #1
 800e114:	9304      	str	r3, [sp, #16]
 800e116:	9307      	str	r3, [sp, #28]
 800e118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e11c:	931a      	str	r3, [sp, #104]	; 0x68
 800e11e:	4654      	mov	r4, sl
 800e120:	2205      	movs	r2, #5
 800e122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e126:	4854      	ldr	r0, [pc, #336]	; (800e278 <_vfiprintf_r+0x220>)
 800e128:	f7fd fd4a 	bl	800bbc0 <memchr>
 800e12c:	9a04      	ldr	r2, [sp, #16]
 800e12e:	b9d8      	cbnz	r0, 800e168 <_vfiprintf_r+0x110>
 800e130:	06d1      	lsls	r1, r2, #27
 800e132:	bf44      	itt	mi
 800e134:	2320      	movmi	r3, #32
 800e136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e13a:	0713      	lsls	r3, r2, #28
 800e13c:	bf44      	itt	mi
 800e13e:	232b      	movmi	r3, #43	; 0x2b
 800e140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e144:	f89a 3000 	ldrb.w	r3, [sl]
 800e148:	2b2a      	cmp	r3, #42	; 0x2a
 800e14a:	d015      	beq.n	800e178 <_vfiprintf_r+0x120>
 800e14c:	4654      	mov	r4, sl
 800e14e:	2000      	movs	r0, #0
 800e150:	f04f 0c0a 	mov.w	ip, #10
 800e154:	9a07      	ldr	r2, [sp, #28]
 800e156:	4621      	mov	r1, r4
 800e158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e15c:	3b30      	subs	r3, #48	; 0x30
 800e15e:	2b09      	cmp	r3, #9
 800e160:	d94d      	bls.n	800e1fe <_vfiprintf_r+0x1a6>
 800e162:	b1b0      	cbz	r0, 800e192 <_vfiprintf_r+0x13a>
 800e164:	9207      	str	r2, [sp, #28]
 800e166:	e014      	b.n	800e192 <_vfiprintf_r+0x13a>
 800e168:	eba0 0308 	sub.w	r3, r0, r8
 800e16c:	fa09 f303 	lsl.w	r3, r9, r3
 800e170:	4313      	orrs	r3, r2
 800e172:	46a2      	mov	sl, r4
 800e174:	9304      	str	r3, [sp, #16]
 800e176:	e7d2      	b.n	800e11e <_vfiprintf_r+0xc6>
 800e178:	9b03      	ldr	r3, [sp, #12]
 800e17a:	1d19      	adds	r1, r3, #4
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	9103      	str	r1, [sp, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	bfbb      	ittet	lt
 800e184:	425b      	neglt	r3, r3
 800e186:	f042 0202 	orrlt.w	r2, r2, #2
 800e18a:	9307      	strge	r3, [sp, #28]
 800e18c:	9307      	strlt	r3, [sp, #28]
 800e18e:	bfb8      	it	lt
 800e190:	9204      	strlt	r2, [sp, #16]
 800e192:	7823      	ldrb	r3, [r4, #0]
 800e194:	2b2e      	cmp	r3, #46	; 0x2e
 800e196:	d10c      	bne.n	800e1b2 <_vfiprintf_r+0x15a>
 800e198:	7863      	ldrb	r3, [r4, #1]
 800e19a:	2b2a      	cmp	r3, #42	; 0x2a
 800e19c:	d134      	bne.n	800e208 <_vfiprintf_r+0x1b0>
 800e19e:	9b03      	ldr	r3, [sp, #12]
 800e1a0:	3402      	adds	r4, #2
 800e1a2:	1d1a      	adds	r2, r3, #4
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	9203      	str	r2, [sp, #12]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	bfb8      	it	lt
 800e1ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1b0:	9305      	str	r3, [sp, #20]
 800e1b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e27c <_vfiprintf_r+0x224>
 800e1b6:	2203      	movs	r2, #3
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	7821      	ldrb	r1, [r4, #0]
 800e1bc:	f7fd fd00 	bl	800bbc0 <memchr>
 800e1c0:	b138      	cbz	r0, 800e1d2 <_vfiprintf_r+0x17a>
 800e1c2:	2240      	movs	r2, #64	; 0x40
 800e1c4:	9b04      	ldr	r3, [sp, #16]
 800e1c6:	eba0 000a 	sub.w	r0, r0, sl
 800e1ca:	4082      	lsls	r2, r0
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	3401      	adds	r4, #1
 800e1d0:	9304      	str	r3, [sp, #16]
 800e1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d6:	2206      	movs	r2, #6
 800e1d8:	4829      	ldr	r0, [pc, #164]	; (800e280 <_vfiprintf_r+0x228>)
 800e1da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1de:	f7fd fcef 	bl	800bbc0 <memchr>
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	d03f      	beq.n	800e266 <_vfiprintf_r+0x20e>
 800e1e6:	4b27      	ldr	r3, [pc, #156]	; (800e284 <_vfiprintf_r+0x22c>)
 800e1e8:	bb1b      	cbnz	r3, 800e232 <_vfiprintf_r+0x1da>
 800e1ea:	9b03      	ldr	r3, [sp, #12]
 800e1ec:	3307      	adds	r3, #7
 800e1ee:	f023 0307 	bic.w	r3, r3, #7
 800e1f2:	3308      	adds	r3, #8
 800e1f4:	9303      	str	r3, [sp, #12]
 800e1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1f8:	443b      	add	r3, r7
 800e1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e1fc:	e768      	b.n	800e0d0 <_vfiprintf_r+0x78>
 800e1fe:	460c      	mov	r4, r1
 800e200:	2001      	movs	r0, #1
 800e202:	fb0c 3202 	mla	r2, ip, r2, r3
 800e206:	e7a6      	b.n	800e156 <_vfiprintf_r+0xfe>
 800e208:	2300      	movs	r3, #0
 800e20a:	f04f 0c0a 	mov.w	ip, #10
 800e20e:	4619      	mov	r1, r3
 800e210:	3401      	adds	r4, #1
 800e212:	9305      	str	r3, [sp, #20]
 800e214:	4620      	mov	r0, r4
 800e216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e21a:	3a30      	subs	r2, #48	; 0x30
 800e21c:	2a09      	cmp	r2, #9
 800e21e:	d903      	bls.n	800e228 <_vfiprintf_r+0x1d0>
 800e220:	2b00      	cmp	r3, #0
 800e222:	d0c6      	beq.n	800e1b2 <_vfiprintf_r+0x15a>
 800e224:	9105      	str	r1, [sp, #20]
 800e226:	e7c4      	b.n	800e1b2 <_vfiprintf_r+0x15a>
 800e228:	4604      	mov	r4, r0
 800e22a:	2301      	movs	r3, #1
 800e22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e230:	e7f0      	b.n	800e214 <_vfiprintf_r+0x1bc>
 800e232:	ab03      	add	r3, sp, #12
 800e234:	9300      	str	r3, [sp, #0]
 800e236:	462a      	mov	r2, r5
 800e238:	4630      	mov	r0, r6
 800e23a:	4b13      	ldr	r3, [pc, #76]	; (800e288 <_vfiprintf_r+0x230>)
 800e23c:	a904      	add	r1, sp, #16
 800e23e:	f7fc fbe3 	bl	800aa08 <_printf_float>
 800e242:	4607      	mov	r7, r0
 800e244:	1c78      	adds	r0, r7, #1
 800e246:	d1d6      	bne.n	800e1f6 <_vfiprintf_r+0x19e>
 800e248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e24a:	07d9      	lsls	r1, r3, #31
 800e24c:	d405      	bmi.n	800e25a <_vfiprintf_r+0x202>
 800e24e:	89ab      	ldrh	r3, [r5, #12]
 800e250:	059a      	lsls	r2, r3, #22
 800e252:	d402      	bmi.n	800e25a <_vfiprintf_r+0x202>
 800e254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e256:	f7fd fcaa 	bl	800bbae <__retarget_lock_release_recursive>
 800e25a:	89ab      	ldrh	r3, [r5, #12]
 800e25c:	065b      	lsls	r3, r3, #25
 800e25e:	f53f af1d 	bmi.w	800e09c <_vfiprintf_r+0x44>
 800e262:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e264:	e71c      	b.n	800e0a0 <_vfiprintf_r+0x48>
 800e266:	ab03      	add	r3, sp, #12
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	462a      	mov	r2, r5
 800e26c:	4630      	mov	r0, r6
 800e26e:	4b06      	ldr	r3, [pc, #24]	; (800e288 <_vfiprintf_r+0x230>)
 800e270:	a904      	add	r1, sp, #16
 800e272:	f7fc fe69 	bl	800af48 <_printf_i>
 800e276:	e7e4      	b.n	800e242 <_vfiprintf_r+0x1ea>
 800e278:	0800f5a4 	.word	0x0800f5a4
 800e27c:	0800f5aa 	.word	0x0800f5aa
 800e280:	0800f5ae 	.word	0x0800f5ae
 800e284:	0800aa09 	.word	0x0800aa09
 800e288:	0800e033 	.word	0x0800e033

0800e28c <_scanf_chars>:
 800e28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e290:	4615      	mov	r5, r2
 800e292:	688a      	ldr	r2, [r1, #8]
 800e294:	4680      	mov	r8, r0
 800e296:	460c      	mov	r4, r1
 800e298:	b932      	cbnz	r2, 800e2a8 <_scanf_chars+0x1c>
 800e29a:	698a      	ldr	r2, [r1, #24]
 800e29c:	2a00      	cmp	r2, #0
 800e29e:	bf0c      	ite	eq
 800e2a0:	2201      	moveq	r2, #1
 800e2a2:	f04f 32ff 	movne.w	r2, #4294967295
 800e2a6:	608a      	str	r2, [r1, #8]
 800e2a8:	2700      	movs	r7, #0
 800e2aa:	6822      	ldr	r2, [r4, #0]
 800e2ac:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e33c <_scanf_chars+0xb0>
 800e2b0:	06d1      	lsls	r1, r2, #27
 800e2b2:	bf5f      	itttt	pl
 800e2b4:	681a      	ldrpl	r2, [r3, #0]
 800e2b6:	1d11      	addpl	r1, r2, #4
 800e2b8:	6019      	strpl	r1, [r3, #0]
 800e2ba:	6816      	ldrpl	r6, [r2, #0]
 800e2bc:	69a0      	ldr	r0, [r4, #24]
 800e2be:	b188      	cbz	r0, 800e2e4 <_scanf_chars+0x58>
 800e2c0:	2801      	cmp	r0, #1
 800e2c2:	d107      	bne.n	800e2d4 <_scanf_chars+0x48>
 800e2c4:	682b      	ldr	r3, [r5, #0]
 800e2c6:	781a      	ldrb	r2, [r3, #0]
 800e2c8:	6963      	ldr	r3, [r4, #20]
 800e2ca:	5c9b      	ldrb	r3, [r3, r2]
 800e2cc:	b953      	cbnz	r3, 800e2e4 <_scanf_chars+0x58>
 800e2ce:	2f00      	cmp	r7, #0
 800e2d0:	d031      	beq.n	800e336 <_scanf_chars+0xaa>
 800e2d2:	e022      	b.n	800e31a <_scanf_chars+0x8e>
 800e2d4:	2802      	cmp	r0, #2
 800e2d6:	d120      	bne.n	800e31a <_scanf_chars+0x8e>
 800e2d8:	682b      	ldr	r3, [r5, #0]
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e2e0:	071b      	lsls	r3, r3, #28
 800e2e2:	d41a      	bmi.n	800e31a <_scanf_chars+0x8e>
 800e2e4:	6823      	ldr	r3, [r4, #0]
 800e2e6:	3701      	adds	r7, #1
 800e2e8:	06da      	lsls	r2, r3, #27
 800e2ea:	bf5e      	ittt	pl
 800e2ec:	682b      	ldrpl	r3, [r5, #0]
 800e2ee:	781b      	ldrbpl	r3, [r3, #0]
 800e2f0:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e2f4:	682a      	ldr	r2, [r5, #0]
 800e2f6:	686b      	ldr	r3, [r5, #4]
 800e2f8:	3201      	adds	r2, #1
 800e2fa:	602a      	str	r2, [r5, #0]
 800e2fc:	68a2      	ldr	r2, [r4, #8]
 800e2fe:	3b01      	subs	r3, #1
 800e300:	3a01      	subs	r2, #1
 800e302:	606b      	str	r3, [r5, #4]
 800e304:	60a2      	str	r2, [r4, #8]
 800e306:	b142      	cbz	r2, 800e31a <_scanf_chars+0x8e>
 800e308:	2b00      	cmp	r3, #0
 800e30a:	dcd7      	bgt.n	800e2bc <_scanf_chars+0x30>
 800e30c:	4629      	mov	r1, r5
 800e30e:	4640      	mov	r0, r8
 800e310:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e314:	4798      	blx	r3
 800e316:	2800      	cmp	r0, #0
 800e318:	d0d0      	beq.n	800e2bc <_scanf_chars+0x30>
 800e31a:	6823      	ldr	r3, [r4, #0]
 800e31c:	f013 0310 	ands.w	r3, r3, #16
 800e320:	d105      	bne.n	800e32e <_scanf_chars+0xa2>
 800e322:	68e2      	ldr	r2, [r4, #12]
 800e324:	3201      	adds	r2, #1
 800e326:	60e2      	str	r2, [r4, #12]
 800e328:	69a2      	ldr	r2, [r4, #24]
 800e32a:	b102      	cbz	r2, 800e32e <_scanf_chars+0xa2>
 800e32c:	7033      	strb	r3, [r6, #0]
 800e32e:	2000      	movs	r0, #0
 800e330:	6923      	ldr	r3, [r4, #16]
 800e332:	443b      	add	r3, r7
 800e334:	6123      	str	r3, [r4, #16]
 800e336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e33a:	bf00      	nop
 800e33c:	0800f21e 	.word	0x0800f21e

0800e340 <_scanf_i>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	460c      	mov	r4, r1
 800e346:	4698      	mov	r8, r3
 800e348:	4b72      	ldr	r3, [pc, #456]	; (800e514 <_scanf_i+0x1d4>)
 800e34a:	b087      	sub	sp, #28
 800e34c:	4682      	mov	sl, r0
 800e34e:	4616      	mov	r6, r2
 800e350:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e354:	ab03      	add	r3, sp, #12
 800e356:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e35a:	4b6f      	ldr	r3, [pc, #444]	; (800e518 <_scanf_i+0x1d8>)
 800e35c:	69a1      	ldr	r1, [r4, #24]
 800e35e:	4a6f      	ldr	r2, [pc, #444]	; (800e51c <_scanf_i+0x1dc>)
 800e360:	4627      	mov	r7, r4
 800e362:	2903      	cmp	r1, #3
 800e364:	bf18      	it	ne
 800e366:	461a      	movne	r2, r3
 800e368:	68a3      	ldr	r3, [r4, #8]
 800e36a:	9201      	str	r2, [sp, #4]
 800e36c:	1e5a      	subs	r2, r3, #1
 800e36e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e372:	bf81      	itttt	hi
 800e374:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e378:	eb03 0905 	addhi.w	r9, r3, r5
 800e37c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e380:	60a3      	strhi	r3, [r4, #8]
 800e382:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e386:	bf98      	it	ls
 800e388:	f04f 0900 	movls.w	r9, #0
 800e38c:	463d      	mov	r5, r7
 800e38e:	f04f 0b00 	mov.w	fp, #0
 800e392:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e396:	6023      	str	r3, [r4, #0]
 800e398:	6831      	ldr	r1, [r6, #0]
 800e39a:	ab03      	add	r3, sp, #12
 800e39c:	2202      	movs	r2, #2
 800e39e:	7809      	ldrb	r1, [r1, #0]
 800e3a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e3a4:	f7fd fc0c 	bl	800bbc0 <memchr>
 800e3a8:	b328      	cbz	r0, 800e3f6 <_scanf_i+0xb6>
 800e3aa:	f1bb 0f01 	cmp.w	fp, #1
 800e3ae:	d159      	bne.n	800e464 <_scanf_i+0x124>
 800e3b0:	6862      	ldr	r2, [r4, #4]
 800e3b2:	b92a      	cbnz	r2, 800e3c0 <_scanf_i+0x80>
 800e3b4:	2308      	movs	r3, #8
 800e3b6:	6822      	ldr	r2, [r4, #0]
 800e3b8:	6063      	str	r3, [r4, #4]
 800e3ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e3be:	6022      	str	r2, [r4, #0]
 800e3c0:	6822      	ldr	r2, [r4, #0]
 800e3c2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e3c6:	6022      	str	r2, [r4, #0]
 800e3c8:	68a2      	ldr	r2, [r4, #8]
 800e3ca:	1e51      	subs	r1, r2, #1
 800e3cc:	60a1      	str	r1, [r4, #8]
 800e3ce:	b192      	cbz	r2, 800e3f6 <_scanf_i+0xb6>
 800e3d0:	6832      	ldr	r2, [r6, #0]
 800e3d2:	1c51      	adds	r1, r2, #1
 800e3d4:	6031      	str	r1, [r6, #0]
 800e3d6:	7812      	ldrb	r2, [r2, #0]
 800e3d8:	f805 2b01 	strb.w	r2, [r5], #1
 800e3dc:	6872      	ldr	r2, [r6, #4]
 800e3de:	3a01      	subs	r2, #1
 800e3e0:	2a00      	cmp	r2, #0
 800e3e2:	6072      	str	r2, [r6, #4]
 800e3e4:	dc07      	bgt.n	800e3f6 <_scanf_i+0xb6>
 800e3e6:	4631      	mov	r1, r6
 800e3e8:	4650      	mov	r0, sl
 800e3ea:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e3ee:	4790      	blx	r2
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	f040 8085 	bne.w	800e500 <_scanf_i+0x1c0>
 800e3f6:	f10b 0b01 	add.w	fp, fp, #1
 800e3fa:	f1bb 0f03 	cmp.w	fp, #3
 800e3fe:	d1cb      	bne.n	800e398 <_scanf_i+0x58>
 800e400:	6863      	ldr	r3, [r4, #4]
 800e402:	b90b      	cbnz	r3, 800e408 <_scanf_i+0xc8>
 800e404:	230a      	movs	r3, #10
 800e406:	6063      	str	r3, [r4, #4]
 800e408:	6863      	ldr	r3, [r4, #4]
 800e40a:	4945      	ldr	r1, [pc, #276]	; (800e520 <_scanf_i+0x1e0>)
 800e40c:	6960      	ldr	r0, [r4, #20]
 800e40e:	1ac9      	subs	r1, r1, r3
 800e410:	f000 f993 	bl	800e73a <__sccl>
 800e414:	f04f 0b00 	mov.w	fp, #0
 800e418:	68a3      	ldr	r3, [r4, #8]
 800e41a:	6822      	ldr	r2, [r4, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d03d      	beq.n	800e49c <_scanf_i+0x15c>
 800e420:	6831      	ldr	r1, [r6, #0]
 800e422:	6960      	ldr	r0, [r4, #20]
 800e424:	f891 c000 	ldrb.w	ip, [r1]
 800e428:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d035      	beq.n	800e49c <_scanf_i+0x15c>
 800e430:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e434:	d124      	bne.n	800e480 <_scanf_i+0x140>
 800e436:	0510      	lsls	r0, r2, #20
 800e438:	d522      	bpl.n	800e480 <_scanf_i+0x140>
 800e43a:	f10b 0b01 	add.w	fp, fp, #1
 800e43e:	f1b9 0f00 	cmp.w	r9, #0
 800e442:	d003      	beq.n	800e44c <_scanf_i+0x10c>
 800e444:	3301      	adds	r3, #1
 800e446:	f109 39ff 	add.w	r9, r9, #4294967295
 800e44a:	60a3      	str	r3, [r4, #8]
 800e44c:	6873      	ldr	r3, [r6, #4]
 800e44e:	3b01      	subs	r3, #1
 800e450:	2b00      	cmp	r3, #0
 800e452:	6073      	str	r3, [r6, #4]
 800e454:	dd1b      	ble.n	800e48e <_scanf_i+0x14e>
 800e456:	6833      	ldr	r3, [r6, #0]
 800e458:	3301      	adds	r3, #1
 800e45a:	6033      	str	r3, [r6, #0]
 800e45c:	68a3      	ldr	r3, [r4, #8]
 800e45e:	3b01      	subs	r3, #1
 800e460:	60a3      	str	r3, [r4, #8]
 800e462:	e7d9      	b.n	800e418 <_scanf_i+0xd8>
 800e464:	f1bb 0f02 	cmp.w	fp, #2
 800e468:	d1ae      	bne.n	800e3c8 <_scanf_i+0x88>
 800e46a:	6822      	ldr	r2, [r4, #0]
 800e46c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e470:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e474:	d1bf      	bne.n	800e3f6 <_scanf_i+0xb6>
 800e476:	2310      	movs	r3, #16
 800e478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e47c:	6063      	str	r3, [r4, #4]
 800e47e:	e7a2      	b.n	800e3c6 <_scanf_i+0x86>
 800e480:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e484:	6022      	str	r2, [r4, #0]
 800e486:	780b      	ldrb	r3, [r1, #0]
 800e488:	f805 3b01 	strb.w	r3, [r5], #1
 800e48c:	e7de      	b.n	800e44c <_scanf_i+0x10c>
 800e48e:	4631      	mov	r1, r6
 800e490:	4650      	mov	r0, sl
 800e492:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e496:	4798      	blx	r3
 800e498:	2800      	cmp	r0, #0
 800e49a:	d0df      	beq.n	800e45c <_scanf_i+0x11c>
 800e49c:	6823      	ldr	r3, [r4, #0]
 800e49e:	05d9      	lsls	r1, r3, #23
 800e4a0:	d50d      	bpl.n	800e4be <_scanf_i+0x17e>
 800e4a2:	42bd      	cmp	r5, r7
 800e4a4:	d909      	bls.n	800e4ba <_scanf_i+0x17a>
 800e4a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e4aa:	4632      	mov	r2, r6
 800e4ac:	4650      	mov	r0, sl
 800e4ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4b2:	f105 39ff 	add.w	r9, r5, #4294967295
 800e4b6:	4798      	blx	r3
 800e4b8:	464d      	mov	r5, r9
 800e4ba:	42bd      	cmp	r5, r7
 800e4bc:	d028      	beq.n	800e510 <_scanf_i+0x1d0>
 800e4be:	6822      	ldr	r2, [r4, #0]
 800e4c0:	f012 0210 	ands.w	r2, r2, #16
 800e4c4:	d113      	bne.n	800e4ee <_scanf_i+0x1ae>
 800e4c6:	702a      	strb	r2, [r5, #0]
 800e4c8:	4639      	mov	r1, r7
 800e4ca:	6863      	ldr	r3, [r4, #4]
 800e4cc:	4650      	mov	r0, sl
 800e4ce:	9e01      	ldr	r6, [sp, #4]
 800e4d0:	47b0      	blx	r6
 800e4d2:	f8d8 3000 	ldr.w	r3, [r8]
 800e4d6:	6821      	ldr	r1, [r4, #0]
 800e4d8:	1d1a      	adds	r2, r3, #4
 800e4da:	f8c8 2000 	str.w	r2, [r8]
 800e4de:	f011 0f20 	tst.w	r1, #32
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	d00f      	beq.n	800e506 <_scanf_i+0x1c6>
 800e4e6:	6018      	str	r0, [r3, #0]
 800e4e8:	68e3      	ldr	r3, [r4, #12]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	60e3      	str	r3, [r4, #12]
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	6923      	ldr	r3, [r4, #16]
 800e4f2:	1bed      	subs	r5, r5, r7
 800e4f4:	445d      	add	r5, fp
 800e4f6:	442b      	add	r3, r5
 800e4f8:	6123      	str	r3, [r4, #16]
 800e4fa:	b007      	add	sp, #28
 800e4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e500:	f04f 0b00 	mov.w	fp, #0
 800e504:	e7ca      	b.n	800e49c <_scanf_i+0x15c>
 800e506:	07ca      	lsls	r2, r1, #31
 800e508:	bf4c      	ite	mi
 800e50a:	8018      	strhmi	r0, [r3, #0]
 800e50c:	6018      	strpl	r0, [r3, #0]
 800e50e:	e7eb      	b.n	800e4e8 <_scanf_i+0x1a8>
 800e510:	2001      	movs	r0, #1
 800e512:	e7f2      	b.n	800e4fa <_scanf_i+0x1ba>
 800e514:	0800f11c 	.word	0x0800f11c
 800e518:	0800e9dd 	.word	0x0800e9dd
 800e51c:	0800a849 	.word	0x0800a849
 800e520:	0800f5c5 	.word	0x0800f5c5

0800e524 <__sflush_r>:
 800e524:	898a      	ldrh	r2, [r1, #12]
 800e526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e528:	4605      	mov	r5, r0
 800e52a:	0710      	lsls	r0, r2, #28
 800e52c:	460c      	mov	r4, r1
 800e52e:	d457      	bmi.n	800e5e0 <__sflush_r+0xbc>
 800e530:	684b      	ldr	r3, [r1, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	dc04      	bgt.n	800e540 <__sflush_r+0x1c>
 800e536:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e538:	2b00      	cmp	r3, #0
 800e53a:	dc01      	bgt.n	800e540 <__sflush_r+0x1c>
 800e53c:	2000      	movs	r0, #0
 800e53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e542:	2e00      	cmp	r6, #0
 800e544:	d0fa      	beq.n	800e53c <__sflush_r+0x18>
 800e546:	2300      	movs	r3, #0
 800e548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e54c:	682f      	ldr	r7, [r5, #0]
 800e54e:	6a21      	ldr	r1, [r4, #32]
 800e550:	602b      	str	r3, [r5, #0]
 800e552:	d032      	beq.n	800e5ba <__sflush_r+0x96>
 800e554:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e556:	89a3      	ldrh	r3, [r4, #12]
 800e558:	075a      	lsls	r2, r3, #29
 800e55a:	d505      	bpl.n	800e568 <__sflush_r+0x44>
 800e55c:	6863      	ldr	r3, [r4, #4]
 800e55e:	1ac0      	subs	r0, r0, r3
 800e560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e562:	b10b      	cbz	r3, 800e568 <__sflush_r+0x44>
 800e564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e566:	1ac0      	subs	r0, r0, r3
 800e568:	2300      	movs	r3, #0
 800e56a:	4602      	mov	r2, r0
 800e56c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e56e:	4628      	mov	r0, r5
 800e570:	6a21      	ldr	r1, [r4, #32]
 800e572:	47b0      	blx	r6
 800e574:	1c43      	adds	r3, r0, #1
 800e576:	89a3      	ldrh	r3, [r4, #12]
 800e578:	d106      	bne.n	800e588 <__sflush_r+0x64>
 800e57a:	6829      	ldr	r1, [r5, #0]
 800e57c:	291d      	cmp	r1, #29
 800e57e:	d82b      	bhi.n	800e5d8 <__sflush_r+0xb4>
 800e580:	4a28      	ldr	r2, [pc, #160]	; (800e624 <__sflush_r+0x100>)
 800e582:	410a      	asrs	r2, r1
 800e584:	07d6      	lsls	r6, r2, #31
 800e586:	d427      	bmi.n	800e5d8 <__sflush_r+0xb4>
 800e588:	2200      	movs	r2, #0
 800e58a:	6062      	str	r2, [r4, #4]
 800e58c:	6922      	ldr	r2, [r4, #16]
 800e58e:	04d9      	lsls	r1, r3, #19
 800e590:	6022      	str	r2, [r4, #0]
 800e592:	d504      	bpl.n	800e59e <__sflush_r+0x7a>
 800e594:	1c42      	adds	r2, r0, #1
 800e596:	d101      	bne.n	800e59c <__sflush_r+0x78>
 800e598:	682b      	ldr	r3, [r5, #0]
 800e59a:	b903      	cbnz	r3, 800e59e <__sflush_r+0x7a>
 800e59c:	6560      	str	r0, [r4, #84]	; 0x54
 800e59e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5a0:	602f      	str	r7, [r5, #0]
 800e5a2:	2900      	cmp	r1, #0
 800e5a4:	d0ca      	beq.n	800e53c <__sflush_r+0x18>
 800e5a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5aa:	4299      	cmp	r1, r3
 800e5ac:	d002      	beq.n	800e5b4 <__sflush_r+0x90>
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	f7fe f99a 	bl	800c8e8 <_free_r>
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	6360      	str	r0, [r4, #52]	; 0x34
 800e5b8:	e7c1      	b.n	800e53e <__sflush_r+0x1a>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	4628      	mov	r0, r5
 800e5be:	47b0      	blx	r6
 800e5c0:	1c41      	adds	r1, r0, #1
 800e5c2:	d1c8      	bne.n	800e556 <__sflush_r+0x32>
 800e5c4:	682b      	ldr	r3, [r5, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d0c5      	beq.n	800e556 <__sflush_r+0x32>
 800e5ca:	2b1d      	cmp	r3, #29
 800e5cc:	d001      	beq.n	800e5d2 <__sflush_r+0xae>
 800e5ce:	2b16      	cmp	r3, #22
 800e5d0:	d101      	bne.n	800e5d6 <__sflush_r+0xb2>
 800e5d2:	602f      	str	r7, [r5, #0]
 800e5d4:	e7b2      	b.n	800e53c <__sflush_r+0x18>
 800e5d6:	89a3      	ldrh	r3, [r4, #12]
 800e5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5dc:	81a3      	strh	r3, [r4, #12]
 800e5de:	e7ae      	b.n	800e53e <__sflush_r+0x1a>
 800e5e0:	690f      	ldr	r7, [r1, #16]
 800e5e2:	2f00      	cmp	r7, #0
 800e5e4:	d0aa      	beq.n	800e53c <__sflush_r+0x18>
 800e5e6:	0793      	lsls	r3, r2, #30
 800e5e8:	bf18      	it	ne
 800e5ea:	2300      	movne	r3, #0
 800e5ec:	680e      	ldr	r6, [r1, #0]
 800e5ee:	bf08      	it	eq
 800e5f0:	694b      	ldreq	r3, [r1, #20]
 800e5f2:	1bf6      	subs	r6, r6, r7
 800e5f4:	600f      	str	r7, [r1, #0]
 800e5f6:	608b      	str	r3, [r1, #8]
 800e5f8:	2e00      	cmp	r6, #0
 800e5fa:	dd9f      	ble.n	800e53c <__sflush_r+0x18>
 800e5fc:	4633      	mov	r3, r6
 800e5fe:	463a      	mov	r2, r7
 800e600:	4628      	mov	r0, r5
 800e602:	6a21      	ldr	r1, [r4, #32]
 800e604:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e608:	47e0      	blx	ip
 800e60a:	2800      	cmp	r0, #0
 800e60c:	dc06      	bgt.n	800e61c <__sflush_r+0xf8>
 800e60e:	89a3      	ldrh	r3, [r4, #12]
 800e610:	f04f 30ff 	mov.w	r0, #4294967295
 800e614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e618:	81a3      	strh	r3, [r4, #12]
 800e61a:	e790      	b.n	800e53e <__sflush_r+0x1a>
 800e61c:	4407      	add	r7, r0
 800e61e:	1a36      	subs	r6, r6, r0
 800e620:	e7ea      	b.n	800e5f8 <__sflush_r+0xd4>
 800e622:	bf00      	nop
 800e624:	dfbffffe 	.word	0xdfbffffe

0800e628 <_fflush_r>:
 800e628:	b538      	push	{r3, r4, r5, lr}
 800e62a:	690b      	ldr	r3, [r1, #16]
 800e62c:	4605      	mov	r5, r0
 800e62e:	460c      	mov	r4, r1
 800e630:	b913      	cbnz	r3, 800e638 <_fflush_r+0x10>
 800e632:	2500      	movs	r5, #0
 800e634:	4628      	mov	r0, r5
 800e636:	bd38      	pop	{r3, r4, r5, pc}
 800e638:	b118      	cbz	r0, 800e642 <_fflush_r+0x1a>
 800e63a:	6a03      	ldr	r3, [r0, #32]
 800e63c:	b90b      	cbnz	r3, 800e642 <_fflush_r+0x1a>
 800e63e:	f7fd f82d 	bl	800b69c <__sinit>
 800e642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d0f3      	beq.n	800e632 <_fflush_r+0xa>
 800e64a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e64c:	07d0      	lsls	r0, r2, #31
 800e64e:	d404      	bmi.n	800e65a <_fflush_r+0x32>
 800e650:	0599      	lsls	r1, r3, #22
 800e652:	d402      	bmi.n	800e65a <_fflush_r+0x32>
 800e654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e656:	f7fd faa9 	bl	800bbac <__retarget_lock_acquire_recursive>
 800e65a:	4628      	mov	r0, r5
 800e65c:	4621      	mov	r1, r4
 800e65e:	f7ff ff61 	bl	800e524 <__sflush_r>
 800e662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e664:	4605      	mov	r5, r0
 800e666:	07da      	lsls	r2, r3, #31
 800e668:	d4e4      	bmi.n	800e634 <_fflush_r+0xc>
 800e66a:	89a3      	ldrh	r3, [r4, #12]
 800e66c:	059b      	lsls	r3, r3, #22
 800e66e:	d4e1      	bmi.n	800e634 <_fflush_r+0xc>
 800e670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e672:	f7fd fa9c 	bl	800bbae <__retarget_lock_release_recursive>
 800e676:	e7dd      	b.n	800e634 <_fflush_r+0xc>

0800e678 <__swhatbuf_r>:
 800e678:	b570      	push	{r4, r5, r6, lr}
 800e67a:	460c      	mov	r4, r1
 800e67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e680:	4615      	mov	r5, r2
 800e682:	2900      	cmp	r1, #0
 800e684:	461e      	mov	r6, r3
 800e686:	b096      	sub	sp, #88	; 0x58
 800e688:	da0c      	bge.n	800e6a4 <__swhatbuf_r+0x2c>
 800e68a:	89a3      	ldrh	r3, [r4, #12]
 800e68c:	2100      	movs	r1, #0
 800e68e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e692:	bf0c      	ite	eq
 800e694:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e698:	2340      	movne	r3, #64	; 0x40
 800e69a:	2000      	movs	r0, #0
 800e69c:	6031      	str	r1, [r6, #0]
 800e69e:	602b      	str	r3, [r5, #0]
 800e6a0:	b016      	add	sp, #88	; 0x58
 800e6a2:	bd70      	pop	{r4, r5, r6, pc}
 800e6a4:	466a      	mov	r2, sp
 800e6a6:	f000 f8d3 	bl	800e850 <_fstat_r>
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	dbed      	blt.n	800e68a <__swhatbuf_r+0x12>
 800e6ae:	9901      	ldr	r1, [sp, #4]
 800e6b0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e6b4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e6b8:	4259      	negs	r1, r3
 800e6ba:	4159      	adcs	r1, r3
 800e6bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6c0:	e7eb      	b.n	800e69a <__swhatbuf_r+0x22>

0800e6c2 <__smakebuf_r>:
 800e6c2:	898b      	ldrh	r3, [r1, #12]
 800e6c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6c6:	079d      	lsls	r5, r3, #30
 800e6c8:	4606      	mov	r6, r0
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	d507      	bpl.n	800e6de <__smakebuf_r+0x1c>
 800e6ce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6d2:	6023      	str	r3, [r4, #0]
 800e6d4:	6123      	str	r3, [r4, #16]
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	6163      	str	r3, [r4, #20]
 800e6da:	b002      	add	sp, #8
 800e6dc:	bd70      	pop	{r4, r5, r6, pc}
 800e6de:	466a      	mov	r2, sp
 800e6e0:	ab01      	add	r3, sp, #4
 800e6e2:	f7ff ffc9 	bl	800e678 <__swhatbuf_r>
 800e6e6:	9900      	ldr	r1, [sp, #0]
 800e6e8:	4605      	mov	r5, r0
 800e6ea:	4630      	mov	r0, r6
 800e6ec:	f7fb f950 	bl	8009990 <_malloc_r>
 800e6f0:	b948      	cbnz	r0, 800e706 <__smakebuf_r+0x44>
 800e6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6f6:	059a      	lsls	r2, r3, #22
 800e6f8:	d4ef      	bmi.n	800e6da <__smakebuf_r+0x18>
 800e6fa:	f023 0303 	bic.w	r3, r3, #3
 800e6fe:	f043 0302 	orr.w	r3, r3, #2
 800e702:	81a3      	strh	r3, [r4, #12]
 800e704:	e7e3      	b.n	800e6ce <__smakebuf_r+0xc>
 800e706:	89a3      	ldrh	r3, [r4, #12]
 800e708:	6020      	str	r0, [r4, #0]
 800e70a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e70e:	81a3      	strh	r3, [r4, #12]
 800e710:	9b00      	ldr	r3, [sp, #0]
 800e712:	6120      	str	r0, [r4, #16]
 800e714:	6163      	str	r3, [r4, #20]
 800e716:	9b01      	ldr	r3, [sp, #4]
 800e718:	b15b      	cbz	r3, 800e732 <__smakebuf_r+0x70>
 800e71a:	4630      	mov	r0, r6
 800e71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e720:	f000 f8a8 	bl	800e874 <_isatty_r>
 800e724:	b128      	cbz	r0, 800e732 <__smakebuf_r+0x70>
 800e726:	89a3      	ldrh	r3, [r4, #12]
 800e728:	f023 0303 	bic.w	r3, r3, #3
 800e72c:	f043 0301 	orr.w	r3, r3, #1
 800e730:	81a3      	strh	r3, [r4, #12]
 800e732:	89a3      	ldrh	r3, [r4, #12]
 800e734:	431d      	orrs	r5, r3
 800e736:	81a5      	strh	r5, [r4, #12]
 800e738:	e7cf      	b.n	800e6da <__smakebuf_r+0x18>

0800e73a <__sccl>:
 800e73a:	b570      	push	{r4, r5, r6, lr}
 800e73c:	780b      	ldrb	r3, [r1, #0]
 800e73e:	4604      	mov	r4, r0
 800e740:	2b5e      	cmp	r3, #94	; 0x5e
 800e742:	bf0b      	itete	eq
 800e744:	784b      	ldrbeq	r3, [r1, #1]
 800e746:	1c4a      	addne	r2, r1, #1
 800e748:	1c8a      	addeq	r2, r1, #2
 800e74a:	2100      	movne	r1, #0
 800e74c:	bf08      	it	eq
 800e74e:	2101      	moveq	r1, #1
 800e750:	3801      	subs	r0, #1
 800e752:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e756:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e75a:	42a8      	cmp	r0, r5
 800e75c:	d1fb      	bne.n	800e756 <__sccl+0x1c>
 800e75e:	b90b      	cbnz	r3, 800e764 <__sccl+0x2a>
 800e760:	1e50      	subs	r0, r2, #1
 800e762:	bd70      	pop	{r4, r5, r6, pc}
 800e764:	f081 0101 	eor.w	r1, r1, #1
 800e768:	4610      	mov	r0, r2
 800e76a:	54e1      	strb	r1, [r4, r3]
 800e76c:	4602      	mov	r2, r0
 800e76e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e772:	2d2d      	cmp	r5, #45	; 0x2d
 800e774:	d005      	beq.n	800e782 <__sccl+0x48>
 800e776:	2d5d      	cmp	r5, #93	; 0x5d
 800e778:	d016      	beq.n	800e7a8 <__sccl+0x6e>
 800e77a:	2d00      	cmp	r5, #0
 800e77c:	d0f1      	beq.n	800e762 <__sccl+0x28>
 800e77e:	462b      	mov	r3, r5
 800e780:	e7f2      	b.n	800e768 <__sccl+0x2e>
 800e782:	7846      	ldrb	r6, [r0, #1]
 800e784:	2e5d      	cmp	r6, #93	; 0x5d
 800e786:	d0fa      	beq.n	800e77e <__sccl+0x44>
 800e788:	42b3      	cmp	r3, r6
 800e78a:	dcf8      	bgt.n	800e77e <__sccl+0x44>
 800e78c:	461a      	mov	r2, r3
 800e78e:	3002      	adds	r0, #2
 800e790:	3201      	adds	r2, #1
 800e792:	4296      	cmp	r6, r2
 800e794:	54a1      	strb	r1, [r4, r2]
 800e796:	dcfb      	bgt.n	800e790 <__sccl+0x56>
 800e798:	1af2      	subs	r2, r6, r3
 800e79a:	3a01      	subs	r2, #1
 800e79c:	42b3      	cmp	r3, r6
 800e79e:	bfa8      	it	ge
 800e7a0:	2200      	movge	r2, #0
 800e7a2:	1c5d      	adds	r5, r3, #1
 800e7a4:	18ab      	adds	r3, r5, r2
 800e7a6:	e7e1      	b.n	800e76c <__sccl+0x32>
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	e7da      	b.n	800e762 <__sccl+0x28>

0800e7ac <__submore>:
 800e7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b0:	460c      	mov	r4, r1
 800e7b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7b8:	4299      	cmp	r1, r3
 800e7ba:	d11b      	bne.n	800e7f4 <__submore+0x48>
 800e7bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e7c0:	f7fb f8e6 	bl	8009990 <_malloc_r>
 800e7c4:	b918      	cbnz	r0, 800e7ce <__submore+0x22>
 800e7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7d2:	63a3      	str	r3, [r4, #56]	; 0x38
 800e7d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e7d8:	6360      	str	r0, [r4, #52]	; 0x34
 800e7da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e7de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e7e2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e7e6:	7043      	strb	r3, [r0, #1]
 800e7e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e7ec:	7003      	strb	r3, [r0, #0]
 800e7ee:	6020      	str	r0, [r4, #0]
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	e7ea      	b.n	800e7ca <__submore+0x1e>
 800e7f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e7f6:	0077      	lsls	r7, r6, #1
 800e7f8:	463a      	mov	r2, r7
 800e7fa:	f7fb f95d 	bl	8009ab8 <_realloc_r>
 800e7fe:	4605      	mov	r5, r0
 800e800:	2800      	cmp	r0, #0
 800e802:	d0e0      	beq.n	800e7c6 <__submore+0x1a>
 800e804:	eb00 0806 	add.w	r8, r0, r6
 800e808:	4601      	mov	r1, r0
 800e80a:	4632      	mov	r2, r6
 800e80c:	4640      	mov	r0, r8
 800e80e:	f7fd f9e5 	bl	800bbdc <memcpy>
 800e812:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e816:	f8c4 8000 	str.w	r8, [r4]
 800e81a:	e7e9      	b.n	800e7f0 <__submore+0x44>

0800e81c <memmove>:
 800e81c:	4288      	cmp	r0, r1
 800e81e:	b510      	push	{r4, lr}
 800e820:	eb01 0402 	add.w	r4, r1, r2
 800e824:	d902      	bls.n	800e82c <memmove+0x10>
 800e826:	4284      	cmp	r4, r0
 800e828:	4623      	mov	r3, r4
 800e82a:	d807      	bhi.n	800e83c <memmove+0x20>
 800e82c:	1e43      	subs	r3, r0, #1
 800e82e:	42a1      	cmp	r1, r4
 800e830:	d008      	beq.n	800e844 <memmove+0x28>
 800e832:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e83a:	e7f8      	b.n	800e82e <memmove+0x12>
 800e83c:	4601      	mov	r1, r0
 800e83e:	4402      	add	r2, r0
 800e840:	428a      	cmp	r2, r1
 800e842:	d100      	bne.n	800e846 <memmove+0x2a>
 800e844:	bd10      	pop	{r4, pc}
 800e846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e84a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e84e:	e7f7      	b.n	800e840 <memmove+0x24>

0800e850 <_fstat_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	2300      	movs	r3, #0
 800e854:	4d06      	ldr	r5, [pc, #24]	; (800e870 <_fstat_r+0x20>)
 800e856:	4604      	mov	r4, r0
 800e858:	4608      	mov	r0, r1
 800e85a:	4611      	mov	r1, r2
 800e85c:	602b      	str	r3, [r5, #0]
 800e85e:	f7f7 fb25 	bl	8005eac <_fstat>
 800e862:	1c43      	adds	r3, r0, #1
 800e864:	d102      	bne.n	800e86c <_fstat_r+0x1c>
 800e866:	682b      	ldr	r3, [r5, #0]
 800e868:	b103      	cbz	r3, 800e86c <_fstat_r+0x1c>
 800e86a:	6023      	str	r3, [r4, #0]
 800e86c:	bd38      	pop	{r3, r4, r5, pc}
 800e86e:	bf00      	nop
 800e870:	20000ad0 	.word	0x20000ad0

0800e874 <_isatty_r>:
 800e874:	b538      	push	{r3, r4, r5, lr}
 800e876:	2300      	movs	r3, #0
 800e878:	4d05      	ldr	r5, [pc, #20]	; (800e890 <_isatty_r+0x1c>)
 800e87a:	4604      	mov	r4, r0
 800e87c:	4608      	mov	r0, r1
 800e87e:	602b      	str	r3, [r5, #0]
 800e880:	f7f7 fb23 	bl	8005eca <_isatty>
 800e884:	1c43      	adds	r3, r0, #1
 800e886:	d102      	bne.n	800e88e <_isatty_r+0x1a>
 800e888:	682b      	ldr	r3, [r5, #0]
 800e88a:	b103      	cbz	r3, 800e88e <_isatty_r+0x1a>
 800e88c:	6023      	str	r3, [r4, #0]
 800e88e:	bd38      	pop	{r3, r4, r5, pc}
 800e890:	20000ad0 	.word	0x20000ad0

0800e894 <__assert_func>:
 800e894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e896:	4614      	mov	r4, r2
 800e898:	461a      	mov	r2, r3
 800e89a:	4b09      	ldr	r3, [pc, #36]	; (800e8c0 <__assert_func+0x2c>)
 800e89c:	4605      	mov	r5, r0
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	68d8      	ldr	r0, [r3, #12]
 800e8a2:	b14c      	cbz	r4, 800e8b8 <__assert_func+0x24>
 800e8a4:	4b07      	ldr	r3, [pc, #28]	; (800e8c4 <__assert_func+0x30>)
 800e8a6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8aa:	9100      	str	r1, [sp, #0]
 800e8ac:	462b      	mov	r3, r5
 800e8ae:	4906      	ldr	r1, [pc, #24]	; (800e8c8 <__assert_func+0x34>)
 800e8b0:	f000 f896 	bl	800e9e0 <fiprintf>
 800e8b4:	f000 f8a6 	bl	800ea04 <abort>
 800e8b8:	4b04      	ldr	r3, [pc, #16]	; (800e8cc <__assert_func+0x38>)
 800e8ba:	461c      	mov	r4, r3
 800e8bc:	e7f3      	b.n	800e8a6 <__assert_func+0x12>
 800e8be:	bf00      	nop
 800e8c0:	20000224 	.word	0x20000224
 800e8c4:	0800f5d0 	.word	0x0800f5d0
 800e8c8:	0800f5dd 	.word	0x0800f5dd
 800e8cc:	0800f60b 	.word	0x0800f60b

0800e8d0 <_calloc_r>:
 800e8d0:	b570      	push	{r4, r5, r6, lr}
 800e8d2:	fba1 5402 	umull	r5, r4, r1, r2
 800e8d6:	b934      	cbnz	r4, 800e8e6 <_calloc_r+0x16>
 800e8d8:	4629      	mov	r1, r5
 800e8da:	f7fb f859 	bl	8009990 <_malloc_r>
 800e8de:	4606      	mov	r6, r0
 800e8e0:	b928      	cbnz	r0, 800e8ee <_calloc_r+0x1e>
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	bd70      	pop	{r4, r5, r6, pc}
 800e8e6:	220c      	movs	r2, #12
 800e8e8:	2600      	movs	r6, #0
 800e8ea:	6002      	str	r2, [r0, #0]
 800e8ec:	e7f9      	b.n	800e8e2 <_calloc_r+0x12>
 800e8ee:	462a      	mov	r2, r5
 800e8f0:	4621      	mov	r1, r4
 800e8f2:	f7fd f89b 	bl	800ba2c <memset>
 800e8f6:	e7f4      	b.n	800e8e2 <_calloc_r+0x12>

0800e8f8 <_strtoul_l.constprop.0>:
 800e8f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8fc:	4686      	mov	lr, r0
 800e8fe:	460d      	mov	r5, r1
 800e900:	4f35      	ldr	r7, [pc, #212]	; (800e9d8 <_strtoul_l.constprop.0+0xe0>)
 800e902:	4628      	mov	r0, r5
 800e904:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e908:	5d3e      	ldrb	r6, [r7, r4]
 800e90a:	f016 0608 	ands.w	r6, r6, #8
 800e90e:	d1f8      	bne.n	800e902 <_strtoul_l.constprop.0+0xa>
 800e910:	2c2d      	cmp	r4, #45	; 0x2d
 800e912:	d130      	bne.n	800e976 <_strtoul_l.constprop.0+0x7e>
 800e914:	2601      	movs	r6, #1
 800e916:	782c      	ldrb	r4, [r5, #0]
 800e918:	1c85      	adds	r5, r0, #2
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d057      	beq.n	800e9ce <_strtoul_l.constprop.0+0xd6>
 800e91e:	2b10      	cmp	r3, #16
 800e920:	d109      	bne.n	800e936 <_strtoul_l.constprop.0+0x3e>
 800e922:	2c30      	cmp	r4, #48	; 0x30
 800e924:	d107      	bne.n	800e936 <_strtoul_l.constprop.0+0x3e>
 800e926:	7828      	ldrb	r0, [r5, #0]
 800e928:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e92c:	2858      	cmp	r0, #88	; 0x58
 800e92e:	d149      	bne.n	800e9c4 <_strtoul_l.constprop.0+0xcc>
 800e930:	2310      	movs	r3, #16
 800e932:	786c      	ldrb	r4, [r5, #1]
 800e934:	3502      	adds	r5, #2
 800e936:	f04f 38ff 	mov.w	r8, #4294967295
 800e93a:	fbb8 f8f3 	udiv	r8, r8, r3
 800e93e:	2700      	movs	r7, #0
 800e940:	fb03 f908 	mul.w	r9, r3, r8
 800e944:	4638      	mov	r0, r7
 800e946:	ea6f 0909 	mvn.w	r9, r9
 800e94a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e94e:	f1bc 0f09 	cmp.w	ip, #9
 800e952:	d815      	bhi.n	800e980 <_strtoul_l.constprop.0+0x88>
 800e954:	4664      	mov	r4, ip
 800e956:	42a3      	cmp	r3, r4
 800e958:	dd23      	ble.n	800e9a2 <_strtoul_l.constprop.0+0xaa>
 800e95a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800e95e:	d007      	beq.n	800e970 <_strtoul_l.constprop.0+0x78>
 800e960:	4580      	cmp	r8, r0
 800e962:	d31b      	bcc.n	800e99c <_strtoul_l.constprop.0+0xa4>
 800e964:	d101      	bne.n	800e96a <_strtoul_l.constprop.0+0x72>
 800e966:	45a1      	cmp	r9, r4
 800e968:	db18      	blt.n	800e99c <_strtoul_l.constprop.0+0xa4>
 800e96a:	2701      	movs	r7, #1
 800e96c:	fb00 4003 	mla	r0, r0, r3, r4
 800e970:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e974:	e7e9      	b.n	800e94a <_strtoul_l.constprop.0+0x52>
 800e976:	2c2b      	cmp	r4, #43	; 0x2b
 800e978:	bf04      	itt	eq
 800e97a:	782c      	ldrbeq	r4, [r5, #0]
 800e97c:	1c85      	addeq	r5, r0, #2
 800e97e:	e7cc      	b.n	800e91a <_strtoul_l.constprop.0+0x22>
 800e980:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e984:	f1bc 0f19 	cmp.w	ip, #25
 800e988:	d801      	bhi.n	800e98e <_strtoul_l.constprop.0+0x96>
 800e98a:	3c37      	subs	r4, #55	; 0x37
 800e98c:	e7e3      	b.n	800e956 <_strtoul_l.constprop.0+0x5e>
 800e98e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e992:	f1bc 0f19 	cmp.w	ip, #25
 800e996:	d804      	bhi.n	800e9a2 <_strtoul_l.constprop.0+0xaa>
 800e998:	3c57      	subs	r4, #87	; 0x57
 800e99a:	e7dc      	b.n	800e956 <_strtoul_l.constprop.0+0x5e>
 800e99c:	f04f 37ff 	mov.w	r7, #4294967295
 800e9a0:	e7e6      	b.n	800e970 <_strtoul_l.constprop.0+0x78>
 800e9a2:	1c7b      	adds	r3, r7, #1
 800e9a4:	d106      	bne.n	800e9b4 <_strtoul_l.constprop.0+0xbc>
 800e9a6:	2322      	movs	r3, #34	; 0x22
 800e9a8:	4638      	mov	r0, r7
 800e9aa:	f8ce 3000 	str.w	r3, [lr]
 800e9ae:	b932      	cbnz	r2, 800e9be <_strtoul_l.constprop.0+0xc6>
 800e9b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9b4:	b106      	cbz	r6, 800e9b8 <_strtoul_l.constprop.0+0xc0>
 800e9b6:	4240      	negs	r0, r0
 800e9b8:	2a00      	cmp	r2, #0
 800e9ba:	d0f9      	beq.n	800e9b0 <_strtoul_l.constprop.0+0xb8>
 800e9bc:	b107      	cbz	r7, 800e9c0 <_strtoul_l.constprop.0+0xc8>
 800e9be:	1e69      	subs	r1, r5, #1
 800e9c0:	6011      	str	r1, [r2, #0]
 800e9c2:	e7f5      	b.n	800e9b0 <_strtoul_l.constprop.0+0xb8>
 800e9c4:	2430      	movs	r4, #48	; 0x30
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d1b5      	bne.n	800e936 <_strtoul_l.constprop.0+0x3e>
 800e9ca:	2308      	movs	r3, #8
 800e9cc:	e7b3      	b.n	800e936 <_strtoul_l.constprop.0+0x3e>
 800e9ce:	2c30      	cmp	r4, #48	; 0x30
 800e9d0:	d0a9      	beq.n	800e926 <_strtoul_l.constprop.0+0x2e>
 800e9d2:	230a      	movs	r3, #10
 800e9d4:	e7af      	b.n	800e936 <_strtoul_l.constprop.0+0x3e>
 800e9d6:	bf00      	nop
 800e9d8:	0800f21e 	.word	0x0800f21e

0800e9dc <_strtoul_r>:
 800e9dc:	f7ff bf8c 	b.w	800e8f8 <_strtoul_l.constprop.0>

0800e9e0 <fiprintf>:
 800e9e0:	b40e      	push	{r1, r2, r3}
 800e9e2:	b503      	push	{r0, r1, lr}
 800e9e4:	4601      	mov	r1, r0
 800e9e6:	ab03      	add	r3, sp, #12
 800e9e8:	4805      	ldr	r0, [pc, #20]	; (800ea00 <fiprintf+0x20>)
 800e9ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ee:	6800      	ldr	r0, [r0, #0]
 800e9f0:	9301      	str	r3, [sp, #4]
 800e9f2:	f7ff fb31 	bl	800e058 <_vfiprintf_r>
 800e9f6:	b002      	add	sp, #8
 800e9f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9fc:	b003      	add	sp, #12
 800e9fe:	4770      	bx	lr
 800ea00:	20000224 	.word	0x20000224

0800ea04 <abort>:
 800ea04:	2006      	movs	r0, #6
 800ea06:	b508      	push	{r3, lr}
 800ea08:	f000 f82c 	bl	800ea64 <raise>
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	f7f7 f9ff 	bl	8005e10 <_exit>

0800ea12 <_raise_r>:
 800ea12:	291f      	cmp	r1, #31
 800ea14:	b538      	push	{r3, r4, r5, lr}
 800ea16:	4604      	mov	r4, r0
 800ea18:	460d      	mov	r5, r1
 800ea1a:	d904      	bls.n	800ea26 <_raise_r+0x14>
 800ea1c:	2316      	movs	r3, #22
 800ea1e:	6003      	str	r3, [r0, #0]
 800ea20:	f04f 30ff 	mov.w	r0, #4294967295
 800ea24:	bd38      	pop	{r3, r4, r5, pc}
 800ea26:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ea28:	b112      	cbz	r2, 800ea30 <_raise_r+0x1e>
 800ea2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea2e:	b94b      	cbnz	r3, 800ea44 <_raise_r+0x32>
 800ea30:	4620      	mov	r0, r4
 800ea32:	f000 f831 	bl	800ea98 <_getpid_r>
 800ea36:	462a      	mov	r2, r5
 800ea38:	4601      	mov	r1, r0
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea40:	f000 b818 	b.w	800ea74 <_kill_r>
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d00a      	beq.n	800ea5e <_raise_r+0x4c>
 800ea48:	1c59      	adds	r1, r3, #1
 800ea4a:	d103      	bne.n	800ea54 <_raise_r+0x42>
 800ea4c:	2316      	movs	r3, #22
 800ea4e:	6003      	str	r3, [r0, #0]
 800ea50:	2001      	movs	r0, #1
 800ea52:	e7e7      	b.n	800ea24 <_raise_r+0x12>
 800ea54:	2400      	movs	r4, #0
 800ea56:	4628      	mov	r0, r5
 800ea58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea5c:	4798      	blx	r3
 800ea5e:	2000      	movs	r0, #0
 800ea60:	e7e0      	b.n	800ea24 <_raise_r+0x12>
	...

0800ea64 <raise>:
 800ea64:	4b02      	ldr	r3, [pc, #8]	; (800ea70 <raise+0xc>)
 800ea66:	4601      	mov	r1, r0
 800ea68:	6818      	ldr	r0, [r3, #0]
 800ea6a:	f7ff bfd2 	b.w	800ea12 <_raise_r>
 800ea6e:	bf00      	nop
 800ea70:	20000224 	.word	0x20000224

0800ea74 <_kill_r>:
 800ea74:	b538      	push	{r3, r4, r5, lr}
 800ea76:	2300      	movs	r3, #0
 800ea78:	4d06      	ldr	r5, [pc, #24]	; (800ea94 <_kill_r+0x20>)
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	4608      	mov	r0, r1
 800ea7e:	4611      	mov	r1, r2
 800ea80:	602b      	str	r3, [r5, #0]
 800ea82:	f7f7 f9b5 	bl	8005df0 <_kill>
 800ea86:	1c43      	adds	r3, r0, #1
 800ea88:	d102      	bne.n	800ea90 <_kill_r+0x1c>
 800ea8a:	682b      	ldr	r3, [r5, #0]
 800ea8c:	b103      	cbz	r3, 800ea90 <_kill_r+0x1c>
 800ea8e:	6023      	str	r3, [r4, #0]
 800ea90:	bd38      	pop	{r3, r4, r5, pc}
 800ea92:	bf00      	nop
 800ea94:	20000ad0 	.word	0x20000ad0

0800ea98 <_getpid_r>:
 800ea98:	f7f7 b9a3 	b.w	8005de2 <_getpid>

0800ea9c <_init>:
 800ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9e:	bf00      	nop
 800eaa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaa2:	bc08      	pop	{r3}
 800eaa4:	469e      	mov	lr, r3
 800eaa6:	4770      	bx	lr

0800eaa8 <_fini>:
 800eaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaaa:	bf00      	nop
 800eaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaae:	bc08      	pop	{r3}
 800eab0:	469e      	mov	lr, r3
 800eab2:	4770      	bx	lr
