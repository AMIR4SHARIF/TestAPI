
YuzGuard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007820  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08007930  08007930  00017930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d94  08007d94  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007d94  08007d94  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d94  08007d94  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001d4  08007f70  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08007f70  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de1e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224b  00000000  00000000  0002e05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  000302b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b20  00000000  00000000  00031100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cd8  00000000  00000000  00031c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011762  00000000  00000000  000348f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f4a7  00000000  00000000  0004605a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005020  00000000  00000000  000d5504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000da524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007918 	.word	0x08007918

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007918 	.word	0x08007918

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 fc92 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f838 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f000 f97a 	bl	8000edc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000be8:	f000 f918 	bl	8000e1c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000bec:	f000 f94c 	bl	8000e88 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000bf0:	f000 f88c 	bl	8000d0c <MX_ADC1_Init>
  MX_I2C2_Init();
 8000bf4:	f000 f8c8 	bl	8000d88 <MX_I2C2_Init>
  MX_RTC_Init();
 8000bf8:	f000 f8f4 	bl	8000de4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_CHECK_GPIO_Port, LED_CHECK_Pin, 1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c02:	4812      	ldr	r0, [pc, #72]	; (8000c4c <main+0x74>)
 8000c04:	f001 f97e 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0e:	4810      	ldr	r0, [pc, #64]	; (8000c50 <main+0x78>)
 8000c10:	f001 f978 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <main+0x78>)
 8000c1c:	f001 f972 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c26:	480a      	ldr	r0, [pc, #40]	; (8000c50 <main+0x78>)
 8000c28:	f001 f96c 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY_4_GPIO_Port, RELAY_4_Pin, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <main+0x78>)
 8000c34:	f001 f966 	bl	8001f04 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(LED_CHECK_GPIO_Port, LED_CHECK_Pin);
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <main+0x74>)
 8000c3e:	f001 f979 	bl	8001f34 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c46:	f000 fcbf 	bl	80015c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_CHECK_GPIO_Port, LED_CHECK_Pin);
 8000c4a:	e7f5      	b.n	8000c38 <main+0x60>
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	; 0x50
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5e:	2228      	movs	r2, #40	; 0x28
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f004 f935 	bl	8004ed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000c84:	2306      	movs	r3, #6
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c90:	2310      	movs	r3, #16
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c94:	2302      	movs	r3, #2
 8000c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c9c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 faae 	bl	8002208 <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000cb2:	f000 f9a5 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fd1a 	bl	800270c <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cde:	f000 f98f 	bl	8001000 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cea:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000cec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cf0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fe97 	bl	8002a28 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d00:	f000 f97e 	bl	8001000 <Error_Handler>
  }
}
 8000d04:	bf00      	nop
 8000d06:	3750      	adds	r7, #80	; 0x50
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d1e:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <MX_ADC1_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d36:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d4a:	f000 fc61 	bl	8001610 <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d54:	f000 f954 	bl	8001000 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d58:	2309      	movs	r3, #9
 8000d5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d6a:	f000 fd29 	bl	80017c0 <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d74:	f000 f944 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200001f0 	.word	0x200001f0
 8000d84:	40012400 	.word	0x40012400

08000d88 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000d8e:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <MX_I2C2_Init+0x54>)
 8000d90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_I2C2_Init+0x58>)
 8000d96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000daa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dc6:	f001 f8cf 	bl	8001f68 <HAL_I2C_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000dd0:	f000 f916 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000220 	.word	0x20000220
 8000ddc:	40005800 	.word	0x40005800
 8000de0:	00061a80 	.word	0x00061a80

08000de4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <MX_RTC_Init+0x30>)
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <MX_RTC_Init+0x34>)
 8000dec:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_RTC_Init+0x30>)
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <MX_RTC_Init+0x30>)
 8000df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_RTC_Init+0x30>)
 8000e00:	f001 ff7e 	bl	8002d00 <HAL_RTC_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000e0a:	f000 f8f9 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000274 	.word	0x20000274
 8000e18:	40002800 	.word	0x40002800

08000e1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <MX_SPI1_Init+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e50:	2208      	movs	r2, #8
 8000e52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e68:	220a      	movs	r2, #10
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e6e:	f002 f850 	bl	8002f12 <HAL_SPI_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e78:	f000 f8c2 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000288 	.word	0x20000288
 8000e84:	40013000 	.word	0x40013000

08000e88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_USART1_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ec0:	f002 f8ab 	bl	800301a <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f000 f899 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200002e0 	.word	0x200002e0
 8000ed8:	40013800 	.word	0x40013800

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef0:	4b3f      	ldr	r3, [pc, #252]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a3e      	ldr	r2, [pc, #248]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f08:	4b39      	ldr	r3, [pc, #228]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a38      	ldr	r2, [pc, #224]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000f0e:	f043 0320 	orr.w	r3, r3, #32
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0320 	and.w	r3, r3, #32
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a32      	ldr	r2, [pc, #200]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a2c      	ldr	r2, [pc, #176]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <MX_GPIO_Init+0x114>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CHECK_GPIO_Port, LED_CHECK_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f56:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <MX_GPIO_Init+0x118>)
 8000f58:	f000 ffd4 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_SELECT_Pin|SPI_RST_Pin|SPI_SELECT_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	211c      	movs	r1, #28
 8000f60:	4825      	ldr	r0, [pc, #148]	; (8000ff8 <MX_GPIO_Init+0x11c>)
 8000f62:	f000 ffcf 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin|RELAY_4_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f6c:	4823      	ldr	r0, [pc, #140]	; (8000ffc <MX_GPIO_Init+0x120>)
 8000f6e:	f000 ffc9 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_CHECK_Pin */
  GPIO_InitStruct.Pin = LED_CHECK_Pin;
 8000f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_CHECK_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <MX_GPIO_Init+0x118>)
 8000f8c:	f000 fe36 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_SELECT_Pin SPI_RST_Pin SPI_SELECT_Pin */
  GPIO_InitStruct.Pin = RFID_SELECT_Pin|SPI_RST_Pin|SPI_SELECT_Pin;
 8000f90:	231c      	movs	r3, #28
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <MX_GPIO_Init+0x11c>)
 8000fa8:	f000 fe28 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_1_Pin RELAY_2_Pin RELAY_3_Pin */
  GPIO_InitStruct.Pin = RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin;
 8000fac:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_GPIO_Init+0x120>)
 8000fc6:	f000 fe19 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_4_Pin */
  GPIO_InitStruct.Pin = RELAY_4_Pin;
 8000fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_4_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <MX_GPIO_Init+0x120>)
 8000fe4:	f000 fe0a 	bl	8001bfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40011000 	.word	0x40011000
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_MspInit+0x5c>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_MspInit+0x5c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6193      	str	r3, [r2, #24]
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_MspInit+0x5c>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x5c>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_MspInit+0x5c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_MspInit+0x5c>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_MspInit+0x60>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_MspInit+0x60>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000

08001070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a14      	ldr	r2, [pc, #80]	; (80010dc <HAL_ADC_MspInit+0x6c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d121      	bne.n	80010d4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <HAL_ADC_MspInit+0x70>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <HAL_ADC_MspInit+0x70>)
 8001096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_ADC_MspInit+0x70>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_ADC_MspInit+0x70>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <HAL_ADC_MspInit+0x70>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_ADC_MspInit+0x70>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010c0:	2302      	movs	r3, #2
 80010c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c4:	2303      	movs	r3, #3
 80010c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <HAL_ADC_MspInit+0x74>)
 80010d0:	f000 fd94 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40012400 	.word	0x40012400
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a16      	ldr	r2, [pc, #88]	; (800115c <HAL_I2C_MspInit+0x74>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d124      	bne.n	8001152 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_I2C_MspInit+0x78>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_I2C_MspInit+0x78>)
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_I2C_MspInit+0x78>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001120:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001124:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001126:	2312      	movs	r3, #18
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	4619      	mov	r1, r3
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <HAL_I2C_MspInit+0x7c>)
 8001136:	f000 fd61 	bl	8001bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_I2C_MspInit+0x78>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_I2C_MspInit+0x78>)
 8001140:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_I2C_MspInit+0x78>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40005800 	.word	0x40005800
 8001160:	40021000 	.word	0x40021000
 8001164:	40010c00 	.word	0x40010c00

08001168 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <HAL_RTC_MspInit+0x3c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d110      	bne.n	800119c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800117a:	f001 f839 	bl	80021f0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_RTC_MspInit+0x40>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <HAL_RTC_MspInit+0x40>)
 8001184:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_RTC_MspInit+0x40>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_RTC_MspInit+0x44>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40002800 	.word	0x40002800
 80011a8:	40021000 	.word	0x40021000
 80011ac:	4242043c 	.word	0x4242043c

080011b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <HAL_SPI_MspInit+0x88>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d12f      	bne.n	8001230 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_SPI_MspInit+0x8c>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <HAL_SPI_MspInit+0x8c>)
 80011d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_SPI_MspInit+0x8c>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_SPI_MspInit+0x8c>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <HAL_SPI_MspInit+0x8c>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_SPI_MspInit+0x8c>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001200:	23a0      	movs	r3, #160	; 0xa0
 8001202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <HAL_SPI_MspInit+0x90>)
 8001214:	f000 fcf2 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001218:	2340      	movs	r3, #64	; 0x40
 800121a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_SPI_MspInit+0x90>)
 800122c:	f000 fce6 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40013000 	.word	0x40013000
 800123c:	40021000 	.word	0x40021000
 8001240:	40010800 	.word	0x40010800

08001244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <HAL_UART_MspInit+0x8c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d131      	bne.n	80012c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_UART_MspInit+0x90>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <HAL_UART_MspInit+0x90>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_UART_MspInit+0x90>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_UART_MspInit+0x90>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <HAL_UART_MspInit+0x90>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_UART_MspInit+0x90>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <HAL_UART_MspInit+0x94>)
 80012aa:	f000 fca7 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_UART_MspInit+0x94>)
 80012c4:	f000 fc9a 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010800 	.word	0x40010800

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <NMI_Handler+0x4>

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001322:	f000 f935 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}

0800132a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  return 1;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <_kill>:

int _kill(int pid, int sig)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001342:	f003 fe3b 	bl	8004fbc <__errno>
 8001346:	4603      	mov	r3, r0
 8001348:	2216      	movs	r2, #22
 800134a:	601a      	str	r2, [r3, #0]
  return -1;
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_exit>:

void _exit (int status)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ffe7 	bl	8001338 <_kill>
  while (1) {}    /* Make sure we hang here */
 800136a:	e7fe      	b.n	800136a <_exit+0x12>

0800136c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	e00a      	b.n	8001394 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800137e:	f3af 8000 	nop.w
 8001382:	4601      	mov	r1, r0
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	60ba      	str	r2, [r7, #8]
 800138a:	b2ca      	uxtb	r2, r1
 800138c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf0      	blt.n	800137e <_read+0x12>
  }

  return len;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e009      	b.n	80013cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbf1      	blt.n	80013b8 <_write+0x12>
  }
  return len;
 80013d4:	687b      	ldr	r3, [r7, #4]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_close>:

int _close(int file)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001404:	605a      	str	r2, [r3, #4]
  return 0;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <_isatty>:

int _isatty(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001426:	b480      	push	{r7}
 8001428:	b085      	sub	sp, #20
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
	...

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f003 fda4 	bl	8004fbc <__errno>
 8001474:	4603      	mov	r3, r0
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20005000 	.word	0x20005000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	20000328 	.word	0x20000328
 80014a8:	20000480 	.word	0x20000480

080014ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b8:	f7ff fff8 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480b      	ldr	r0, [pc, #44]	; (80014ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014be:	490c      	ldr	r1, [pc, #48]	; (80014f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014d4:	4c09      	ldr	r4, [pc, #36]	; (80014fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f003 fd71 	bl	8004fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014e6:	f7ff fb77 	bl	8000bd8 <main>
  bx lr
 80014ea:	4770      	bx	lr
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014f4:	08007d9c 	.word	0x08007d9c
  ldr r2, =_sbss
 80014f8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80014fc:	2000047c 	.word	0x2000047c

08001500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC1_2_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_Init+0x28>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_Init+0x28>)
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 fb3d 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151a:	200f      	movs	r0, #15
 800151c:	f000 f808 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001520:	f7ff fd74 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40022000 	.word	0x40022000

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_InitTick+0x54>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x58>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fb47 	bl	8001be2 <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00e      	b.n	800157c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d80a      	bhi.n	800157a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f000 fb1d 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_InitTick+0x5c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	20000008 	.word	0x20000008
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_IncTick+0x1c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_IncTick+0x20>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a03      	ldr	r2, [pc, #12]	; (80015b0 <HAL_IncTick+0x20>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000008 	.word	0x20000008
 80015b0:	2000032c 	.word	0x2000032c

080015b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <HAL_GetTick+0x10>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	2000032c 	.word	0x2000032c

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff fff0 	bl	80015b4 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffe0 	bl	80015b4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008

08001610 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0be      	b.n	80017b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fd0e 	bl	8001070 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f9ab 	bl	80019b0 <ADC_ConversionStop_Disable>
 800165a:	4603      	mov	r3, r0
 800165c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 8099 	bne.w	800179e <HAL_ADC_Init+0x18e>
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 8095 	bne.w	800179e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800167c:	f023 0302 	bic.w	r3, r3, #2
 8001680:	f043 0202 	orr.w	r2, r3, #2
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001690:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7b1b      	ldrb	r3, [r3, #12]
 8001696:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001698:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	4313      	orrs	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a8:	d003      	beq.n	80016b2 <HAL_ADC_Init+0xa2>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d102      	bne.n	80016b8 <HAL_ADC_Init+0xa8>
 80016b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b6:	e000      	b.n	80016ba <HAL_ADC_Init+0xaa>
 80016b8:	2300      	movs	r3, #0
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7d1b      	ldrb	r3, [r3, #20]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d119      	bne.n	80016fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7b1b      	ldrb	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d109      	bne.n	80016e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	035a      	lsls	r2, r3, #13
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	e00b      	b.n	80016fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	f043 0220 	orr.w	r2, r3, #32
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <HAL_ADC_Init+0x1a8>)
 8001718:	4013      	ands	r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	68b9      	ldr	r1, [r7, #8]
 8001720:	430b      	orrs	r3, r1
 8001722:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800172c:	d003      	beq.n	8001736 <HAL_ADC_Init+0x126>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d104      	bne.n	8001740 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	3b01      	subs	r3, #1
 800173c:	051b      	lsls	r3, r3, #20
 800173e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	430a      	orrs	r2, r1
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_ADC_Init+0x1ac>)
 800175c:	4013      	ands	r3, r2
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	429a      	cmp	r2, r3
 8001762:	d10b      	bne.n	800177c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	f023 0303 	bic.w	r3, r3, #3
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800177a:	e018      	b.n	80017ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	f023 0312 	bic.w	r3, r3, #18
 8001784:	f043 0210 	orr.w	r2, r3, #16
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	f043 0201 	orr.w	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800179c:	e007      	b.n	80017ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	f043 0210 	orr.w	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	ffe1f7fd 	.word	0xffe1f7fd
 80017bc:	ff1f0efe 	.word	0xff1f0efe

080017c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x20>
 80017dc:	2302      	movs	r3, #2
 80017de:	e0dc      	b.n	800199a <HAL_ADC_ConfigChannel+0x1da>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b06      	cmp	r3, #6
 80017ee:	d81c      	bhi.n	800182a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	3b05      	subs	r3, #5
 8001802:	221f      	movs	r2, #31
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	4019      	ands	r1, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	3b05      	subs	r3, #5
 800181c:	fa00 f203 	lsl.w	r2, r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	635a      	str	r2, [r3, #52]	; 0x34
 8001828:	e03c      	b.n	80018a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d81c      	bhi.n	800186c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b23      	subs	r3, #35	; 0x23
 8001844:	221f      	movs	r2, #31
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	4019      	ands	r1, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	3b23      	subs	r3, #35	; 0x23
 800185e:	fa00 f203 	lsl.w	r2, r0, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
 800186a:	e01b      	b.n	80018a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	3b41      	subs	r3, #65	; 0x41
 800187e:	221f      	movs	r2, #31
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	4019      	ands	r1, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	3b41      	subs	r3, #65	; 0x41
 8001898:	fa00 f203 	lsl.w	r2, r0, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b09      	cmp	r3, #9
 80018aa:	d91c      	bls.n	80018e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68d9      	ldr	r1, [r3, #12]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	3b1e      	subs	r3, #30
 80018be:	2207      	movs	r2, #7
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4019      	ands	r1, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6898      	ldr	r0, [r3, #8]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	3b1e      	subs	r3, #30
 80018d8:	fa00 f203 	lsl.w	r2, r0, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	e019      	b.n	800191a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6919      	ldr	r1, [r3, #16]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	2207      	movs	r2, #7
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	4019      	ands	r1, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	6898      	ldr	r0, [r3, #8]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	fa00 f203 	lsl.w	r2, r0, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b10      	cmp	r3, #16
 8001920:	d003      	beq.n	800192a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001926:	2b11      	cmp	r3, #17
 8001928:	d132      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d125      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d126      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001950:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b10      	cmp	r3, #16
 8001958:	d11a      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a13      	ldr	r2, [pc, #76]	; (80019ac <HAL_ADC_ConfigChannel+0x1ec>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	0c9a      	lsrs	r2, r3, #18
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001970:	e002      	b.n	8001978 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	3b01      	subs	r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f9      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x1b2>
 800197e:	e007      	b.n	8001990 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f043 0220 	orr.w	r2, r3, #32
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	40012400 	.word	0x40012400
 80019a8:	20000000 	.word	0x20000000
 80019ac:	431bde83 	.word	0x431bde83

080019b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d12e      	bne.n	8001a28 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0201 	bic.w	r2, r2, #1
 80019d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019da:	f7ff fdeb 	bl	80015b4 <HAL_GetTick>
 80019de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019e0:	e01b      	b.n	8001a1a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019e2:	f7ff fde7 	bl	80015b4 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d914      	bls.n	8001a1a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d10d      	bne.n	8001a1a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	f043 0210 	orr.w	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f043 0201 	orr.w	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e007      	b.n	8001a2a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d0dc      	beq.n	80019e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff90 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff49 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff5e 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff90 	bl	8001aec <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5f 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffb0 	bl	8001b50 <SysTick_Config>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0e:	e169      	b.n	8001ee4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c10:	2201      	movs	r2, #1
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8158 	bne.w	8001ede <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a9a      	ldr	r2, [pc, #616]	; (8001e9c <HAL_GPIO_Init+0x2a0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d05e      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c38:	4a98      	ldr	r2, [pc, #608]	; (8001e9c <HAL_GPIO_Init+0x2a0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d875      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c3e:	4a98      	ldr	r2, [pc, #608]	; (8001ea0 <HAL_GPIO_Init+0x2a4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d058      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c44:	4a96      	ldr	r2, [pc, #600]	; (8001ea0 <HAL_GPIO_Init+0x2a4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d86f      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c4a:	4a96      	ldr	r2, [pc, #600]	; (8001ea4 <HAL_GPIO_Init+0x2a8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d052      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c50:	4a94      	ldr	r2, [pc, #592]	; (8001ea4 <HAL_GPIO_Init+0x2a8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d869      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c56:	4a94      	ldr	r2, [pc, #592]	; (8001ea8 <HAL_GPIO_Init+0x2ac>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d04c      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c5c:	4a92      	ldr	r2, [pc, #584]	; (8001ea8 <HAL_GPIO_Init+0x2ac>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d863      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c62:	4a92      	ldr	r2, [pc, #584]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d046      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c68:	4a90      	ldr	r2, [pc, #576]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d85d      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c6e:	2b12      	cmp	r3, #18
 8001c70:	d82a      	bhi.n	8001cc8 <HAL_GPIO_Init+0xcc>
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d859      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <HAL_GPIO_Init+0x80>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cd1 	.word	0x08001cd1
 8001c84:	08001ce3 	.word	0x08001ce3
 8001c88:	08001d25 	.word	0x08001d25
 8001c8c:	08001d2b 	.word	0x08001d2b
 8001c90:	08001d2b 	.word	0x08001d2b
 8001c94:	08001d2b 	.word	0x08001d2b
 8001c98:	08001d2b 	.word	0x08001d2b
 8001c9c:	08001d2b 	.word	0x08001d2b
 8001ca0:	08001d2b 	.word	0x08001d2b
 8001ca4:	08001d2b 	.word	0x08001d2b
 8001ca8:	08001d2b 	.word	0x08001d2b
 8001cac:	08001d2b 	.word	0x08001d2b
 8001cb0:	08001d2b 	.word	0x08001d2b
 8001cb4:	08001d2b 	.word	0x08001d2b
 8001cb8:	08001d2b 	.word	0x08001d2b
 8001cbc:	08001d2b 	.word	0x08001d2b
 8001cc0:	08001cd9 	.word	0x08001cd9
 8001cc4:	08001ced 	.word	0x08001ced
 8001cc8:	4a79      	ldr	r2, [pc, #484]	; (8001eb0 <HAL_GPIO_Init+0x2b4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cce:	e02c      	b.n	8001d2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e029      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e024      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	623b      	str	r3, [r7, #32]
          break;
 8001cea:	e01f      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	330c      	adds	r3, #12
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e01a      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	623b      	str	r3, [r7, #32]
          break;
 8001d02:	e013      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	611a      	str	r2, [r3, #16]
          break;
 8001d16:	e009      	b.n	8001d2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d18:	2308      	movs	r3, #8
 8001d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	615a      	str	r2, [r3, #20]
          break;
 8001d22:	e003      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
          break;
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          break;
 8001d2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	; 0xff
 8001d30:	d801      	bhi.n	8001d36 <HAL_GPIO_Init+0x13a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	e001      	b.n	8001d3a <HAL_GPIO_Init+0x13e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2bff      	cmp	r3, #255	; 0xff
 8001d40:	d802      	bhi.n	8001d48 <HAL_GPIO_Init+0x14c>
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x152>
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	3b08      	subs	r3, #8
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	210f      	movs	r1, #15
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	6a39      	ldr	r1, [r7, #32]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80b1 	beq.w	8001ede <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a4c      	ldr	r2, [pc, #304]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d94:	4a48      	ldr	r2, [pc, #288]	; (8001eb8 <HAL_GPIO_Init+0x2bc>)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <HAL_GPIO_Init+0x2c0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_GPIO_Init+0x1ec>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3f      	ldr	r2, [pc, #252]	; (8001ec0 <HAL_GPIO_Init+0x2c4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00d      	beq.n	8001de4 <HAL_GPIO_Init+0x1e8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a3e      	ldr	r2, [pc, #248]	; (8001ec4 <HAL_GPIO_Init+0x2c8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d007      	beq.n	8001de0 <HAL_GPIO_Init+0x1e4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	; (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d101      	bne.n	8001ddc <HAL_GPIO_Init+0x1e0>
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e006      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e004      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e002      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de8:	2300      	movs	r3, #0
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	f002 0203 	and.w	r2, r2, #3
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	4093      	lsls	r3, r2
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dfa:	492f      	ldr	r1, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x2bc>)
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	492c      	ldr	r1, [pc, #176]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4928      	ldr	r1, [pc, #160]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4922      	ldr	r1, [pc, #136]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	491e      	ldr	r1, [pc, #120]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4918      	ldr	r1, [pc, #96]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4914      	ldr	r1, [pc, #80]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d021      	beq.n	8001ed0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e021      	b.n	8001ede <HAL_GPIO_Init+0x2e2>
 8001e9a:	bf00      	nop
 8001e9c:	10320000 	.word	0x10320000
 8001ea0:	10310000 	.word	0x10310000
 8001ea4:	10220000 	.word	0x10220000
 8001ea8:	10210000 	.word	0x10210000
 8001eac:	10120000 	.word	0x10120000
 8001eb0:	10110000 	.word	0x10110000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40010800 	.word	0x40010800
 8001ec0:	40010c00 	.word	0x40010c00
 8001ec4:	40011000 	.word	0x40011000
 8001ec8:	40011400 	.word	0x40011400
 8001ecc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	4909      	ldr	r1, [pc, #36]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f47f ae8e 	bne.w	8001c10 <HAL_GPIO_Init+0x14>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	372c      	adds	r7, #44	; 0x2c
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f20:	e003      	b.n	8001f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	041a      	lsls	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	611a      	str	r2, [r3, #16]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	041a      	lsls	r2, r3, #16
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	43d9      	mvns	r1, r3
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	400b      	ands	r3, r1
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	611a      	str	r2, [r3, #16]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e12b      	b.n	80021d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d106      	bne.n	8001f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff f8aa 	bl	80010e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2224      	movs	r2, #36	; 0x24
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fcc:	f000 fce6 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8001fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a81      	ldr	r2, [pc, #516]	; (80021dc <HAL_I2C_Init+0x274>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d807      	bhi.n	8001fec <HAL_I2C_Init+0x84>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a80      	ldr	r2, [pc, #512]	; (80021e0 <HAL_I2C_Init+0x278>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	bf94      	ite	ls
 8001fe4:	2301      	movls	r3, #1
 8001fe6:	2300      	movhi	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	e006      	b.n	8001ffa <HAL_I2C_Init+0x92>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a7d      	ldr	r2, [pc, #500]	; (80021e4 <HAL_I2C_Init+0x27c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	bf94      	ite	ls
 8001ff4:	2301      	movls	r3, #1
 8001ff6:	2300      	movhi	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0e7      	b.n	80021d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a78      	ldr	r2, [pc, #480]	; (80021e8 <HAL_I2C_Init+0x280>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0c9b      	lsrs	r3, r3, #18
 800200c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	430a      	orrs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a6a      	ldr	r2, [pc, #424]	; (80021dc <HAL_I2C_Init+0x274>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d802      	bhi.n	800203c <HAL_I2C_Init+0xd4>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3301      	adds	r3, #1
 800203a:	e009      	b.n	8002050 <HAL_I2C_Init+0xe8>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	4a69      	ldr	r2, [pc, #420]	; (80021ec <HAL_I2C_Init+0x284>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	3301      	adds	r3, #1
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	430b      	orrs	r3, r1
 8002056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	495c      	ldr	r1, [pc, #368]	; (80021dc <HAL_I2C_Init+0x274>)
 800206c:	428b      	cmp	r3, r1
 800206e:	d819      	bhi.n	80020a4 <HAL_I2C_Init+0x13c>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1e59      	subs	r1, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fbb1 f3f3 	udiv	r3, r1, r3
 800207e:	1c59      	adds	r1, r3, #1
 8002080:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002084:	400b      	ands	r3, r1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_I2C_Init+0x138>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1e59      	subs	r1, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fbb1 f3f3 	udiv	r3, r1, r3
 8002098:	3301      	adds	r3, #1
 800209a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209e:	e051      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020a0:	2304      	movs	r3, #4
 80020a2:	e04f      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d111      	bne.n	80020d0 <HAL_I2C_Init+0x168>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e58      	subs	r0, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	440b      	add	r3, r1
 80020ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e012      	b.n	80020f6 <HAL_I2C_Init+0x18e>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	0099      	lsls	r1, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Init+0x196>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e022      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10e      	bne.n	8002124 <HAL_I2C_Init+0x1bc>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1e58      	subs	r0, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6859      	ldr	r1, [r3, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	440b      	add	r3, r1
 8002114:	fbb0 f3f3 	udiv	r3, r0, r3
 8002118:	3301      	adds	r3, #1
 800211a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002122:	e00f      	b.n	8002144 <HAL_I2C_Init+0x1dc>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	0099      	lsls	r1, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	6809      	ldr	r1, [r1, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6911      	ldr	r1, [r2, #16]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68d2      	ldr	r2, [r2, #12]
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	430b      	orrs	r3, r1
 8002186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	000186a0 	.word	0x000186a0
 80021e0:	001e847f 	.word	0x001e847f
 80021e4:	003d08ff 	.word	0x003d08ff
 80021e8:	431bde83 	.word	0x431bde83
 80021ec:	10624dd3 	.word	0x10624dd3

080021f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_PWR_EnableBkUpAccess+0x14>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	420e0020 	.word	0x420e0020

08002208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e272      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8087 	beq.w	8002336 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002228:	4b92      	ldr	r3, [pc, #584]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b04      	cmp	r3, #4
 8002232:	d00c      	beq.n	800224e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002234:	4b8f      	ldr	r3, [pc, #572]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b08      	cmp	r3, #8
 800223e:	d112      	bne.n	8002266 <HAL_RCC_OscConfig+0x5e>
 8002240:	4b8c      	ldr	r3, [pc, #560]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d10b      	bne.n	8002266 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224e:	4b89      	ldr	r3, [pc, #548]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d06c      	beq.n	8002334 <HAL_RCC_OscConfig+0x12c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d168      	bne.n	8002334 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e24c      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x76>
 8002270:	4b80      	ldr	r3, [pc, #512]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a7f      	ldr	r2, [pc, #508]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	e02e      	b.n	80022dc <HAL_RCC_OscConfig+0xd4>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x98>
 8002286:	4b7b      	ldr	r3, [pc, #492]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a7a      	ldr	r2, [pc, #488]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b78      	ldr	r3, [pc, #480]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a77      	ldr	r2, [pc, #476]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e01d      	b.n	80022dc <HAL_RCC_OscConfig+0xd4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0xbc>
 80022aa:	4b72      	ldr	r3, [pc, #456]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a71      	ldr	r2, [pc, #452]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b6f      	ldr	r3, [pc, #444]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6e      	ldr	r2, [pc, #440]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0xd4>
 80022c4:	4b6b      	ldr	r3, [pc, #428]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a6a      	ldr	r2, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b68      	ldr	r3, [pc, #416]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a67      	ldr	r2, [pc, #412]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff f966 	bl	80015b4 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff f962 	bl	80015b4 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e200      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0xe4>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff f952 	bl	80015b4 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff f94e 	bl	80015b4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1ec      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	4b53      	ldr	r3, [pc, #332]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x10c>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d063      	beq.n	800240a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002342:	4b4c      	ldr	r3, [pc, #304]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800234e:	4b49      	ldr	r3, [pc, #292]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b08      	cmp	r3, #8
 8002358:	d11c      	bne.n	8002394 <HAL_RCC_OscConfig+0x18c>
 800235a:	4b46      	ldr	r3, [pc, #280]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d116      	bne.n	8002394 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	4b43      	ldr	r3, [pc, #268]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_RCC_OscConfig+0x176>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d001      	beq.n	800237e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e1c0      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4939      	ldr	r1, [pc, #228]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	e03a      	b.n	800240a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800239c:	4b36      	ldr	r3, [pc, #216]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7ff f907 	bl	80015b4 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023aa:	f7ff f903 	bl	80015b4 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e1a1      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4927      	ldr	r1, [pc, #156]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <HAL_RCC_OscConfig+0x270>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7ff f8e6 	bl	80015b4 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ec:	f7ff f8e2 	bl	80015b4 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e180      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d03a      	beq.n	800248c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d019      	beq.n	8002452 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7ff f8c6 	bl	80015b4 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff f8c2 	bl	80015b4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e160      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_RCC_OscConfig+0x26c>)
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800244a:	2001      	movs	r0, #1
 800244c:	f000 face 	bl	80029ec <RCC_Delay>
 8002450:	e01c      	b.n	800248c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7ff f8ac 	bl	80015b4 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245e:	e00f      	b.n	8002480 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002460:	f7ff f8a8 	bl	80015b4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d908      	bls.n	8002480 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e146      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	42420000 	.word	0x42420000
 800247c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	4b92      	ldr	r3, [pc, #584]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e9      	bne.n	8002460 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80a6 	beq.w	80025e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249e:	4b8b      	ldr	r3, [pc, #556]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10d      	bne.n	80024c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b88      	ldr	r3, [pc, #544]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	4a87      	ldr	r2, [pc, #540]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	61d3      	str	r3, [r2, #28]
 80024b6:	4b85      	ldr	r3, [pc, #532]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	4b82      	ldr	r3, [pc, #520]	; (80026d0 <HAL_RCC_OscConfig+0x4c8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d118      	bne.n	8002504 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d2:	4b7f      	ldr	r3, [pc, #508]	; (80026d0 <HAL_RCC_OscConfig+0x4c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a7e      	ldr	r2, [pc, #504]	; (80026d0 <HAL_RCC_OscConfig+0x4c8>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024de:	f7ff f869 	bl	80015b4 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7ff f865 	bl	80015b4 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b64      	cmp	r3, #100	; 0x64
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e103      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	4b75      	ldr	r3, [pc, #468]	; (80026d0 <HAL_RCC_OscConfig+0x4c8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x312>
 800250c:	4b6f      	ldr	r3, [pc, #444]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4a6e      	ldr	r2, [pc, #440]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6213      	str	r3, [r2, #32]
 8002518:	e02d      	b.n	8002576 <HAL_RCC_OscConfig+0x36e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x334>
 8002522:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a69      	ldr	r2, [pc, #420]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6213      	str	r3, [r2, #32]
 800252e:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a66      	ldr	r2, [pc, #408]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	e01c      	b.n	8002576 <HAL_RCC_OscConfig+0x36e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d10c      	bne.n	800255e <HAL_RCC_OscConfig+0x356>
 8002544:	4b61      	ldr	r3, [pc, #388]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4a60      	ldr	r2, [pc, #384]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	6213      	str	r3, [r2, #32]
 8002550:	4b5e      	ldr	r3, [pc, #376]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a5d      	ldr	r2, [pc, #372]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6213      	str	r3, [r2, #32]
 800255c:	e00b      	b.n	8002576 <HAL_RCC_OscConfig+0x36e>
 800255e:	4b5b      	ldr	r3, [pc, #364]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a5a      	ldr	r2, [pc, #360]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6213      	str	r3, [r2, #32]
 800256a:	4b58      	ldr	r3, [pc, #352]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a57      	ldr	r2, [pc, #348]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d015      	beq.n	80025aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257e:	f7ff f819 	bl	80015b4 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7ff f815 	bl	80015b4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e0b1      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ee      	beq.n	8002586 <HAL_RCC_OscConfig+0x37e>
 80025a8:	e014      	b.n	80025d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7ff f803 	bl	80015b4 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe ffff 	bl	80015b4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e09b      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c8:	4b40      	ldr	r3, [pc, #256]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ee      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d105      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025da:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	4a3b      	ldr	r2, [pc, #236]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 8087 	beq.w	80026fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f0:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d061      	beq.n	80026c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d146      	bne.n	8002692 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002604:	4b33      	ldr	r3, [pc, #204]	; (80026d4 <HAL_RCC_OscConfig+0x4cc>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7fe ffd3 	bl	80015b4 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe ffcf 	bl	80015b4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e06d      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002624:	4b29      	ldr	r3, [pc, #164]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002638:	d108      	bne.n	800264c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4921      	ldr	r1, [pc, #132]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264c:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a19      	ldr	r1, [r3, #32]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	430b      	orrs	r3, r1
 800265e:	491b      	ldr	r1, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x4cc>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe ffa3 	bl	80015b4 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe ff9f 	bl	80015b4 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e03d      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x46a>
 8002690:	e035      	b.n	80026fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_RCC_OscConfig+0x4cc>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe ff8c 	bl	80015b4 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe ff88 	bl	80015b4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e026      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x498>
 80026be:	e01e      	b.n	80026fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e019      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40007000 	.word	0x40007000
 80026d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x500>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000

0800270c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0d0      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b6a      	ldr	r3, [pc, #424]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d910      	bls.n	8002750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b67      	ldr	r3, [pc, #412]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 0207 	bic.w	r2, r3, #7
 8002736:	4965      	ldr	r1, [pc, #404]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b63      	ldr	r3, [pc, #396]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0b8      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002768:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002772:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002780:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800278a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278c:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	494d      	ldr	r1, [pc, #308]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d040      	beq.n	800282c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d115      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e07f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e073      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e06b      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4936      	ldr	r1, [pc, #216]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027fc:	f7fe feda 	bl	80015b4 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fe fed6 	bl	80015b4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e053      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d210      	bcs.n	800285c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 0207 	bic.w	r2, r3, #7
 8002842:	4922      	ldr	r1, [pc, #136]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e032      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4916      	ldr	r1, [pc, #88]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	490e      	ldr	r1, [pc, #56]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800289a:	f000 f821 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	490a      	ldr	r1, [pc, #40]	; (80028d4 <HAL_RCC_ClockConfig+0x1c8>)
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	4a09      	ldr	r2, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1cc>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1d0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fe38 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40022000 	.word	0x40022000
 80028d0:	40021000 	.word	0x40021000
 80028d4:	08007930 	.word	0x08007930
 80028d8:	20000000 	.word	0x20000000
 80028dc:	20000004 	.word	0x20000004

080028e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	2300      	movs	r3, #0
 80028f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028fa:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <HAL_RCC_GetSysClockFreq+0x94>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b04      	cmp	r3, #4
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x30>
 800290a:	2b08      	cmp	r3, #8
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x36>
 800290e:	e027      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_RCC_GetSysClockFreq+0x98>)
 8002912:	613b      	str	r3, [r7, #16]
      break;
 8002914:	e027      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	0c9b      	lsrs	r3, r3, #18
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	4a17      	ldr	r2, [pc, #92]	; (800297c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002920:	5cd3      	ldrb	r3, [r2, r3]
 8002922:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d010      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_GetSysClockFreq+0x94>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	0c5b      	lsrs	r3, r3, #17
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	4a11      	ldr	r2, [pc, #68]	; (8002980 <HAL_RCC_GetSysClockFreq+0xa0>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <HAL_RCC_GetSysClockFreq+0x98>)
 8002942:	fb03 f202 	mul.w	r2, r3, r2
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	e004      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	613b      	str	r3, [r7, #16]
      break;
 800295e:	e002      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetSysClockFreq+0x98>)
 8002962:	613b      	str	r3, [r7, #16]
      break;
 8002964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002966:	693b      	ldr	r3, [r7, #16]
}
 8002968:	4618      	mov	r0, r3
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	007a1200 	.word	0x007a1200
 800297c:	08007948 	.word	0x08007948
 8002980:	08007958 	.word	0x08007958
 8002984:	003d0900 	.word	0x003d0900

08002988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800298c:	4b02      	ldr	r3, [pc, #8]	; (8002998 <HAL_RCC_GetHCLKFreq+0x10>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	20000000 	.word	0x20000000

0800299c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a0:	f7ff fff2 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4903      	ldr	r1, [pc, #12]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08007940 	.word	0x08007940

080029c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c8:	f7ff ffde 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	0adb      	lsrs	r3, r3, #11
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4903      	ldr	r1, [pc, #12]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	08007940 	.word	0x08007940

080029ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <RCC_Delay+0x34>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <RCC_Delay+0x38>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a08:	bf00      	nop
  }
  while (Delay --);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	60fa      	str	r2, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f9      	bne.n	8002a08 <RCC_Delay+0x1c>
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	20000000 	.word	0x20000000
 8002a24:	10624dd3 	.word	0x10624dd3

08002a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d07d      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a48:	4b4f      	ldr	r3, [pc, #316]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	4b4c      	ldr	r3, [pc, #304]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	4a4b      	ldr	r2, [pc, #300]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	61d3      	str	r3, [r2, #28]
 8002a60:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d118      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7c:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a42      	ldr	r2, [pc, #264]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a88:	f7fe fd94 	bl	80015b4 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7fe fd90 	bl	80015b4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e06d      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aae:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d02e      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d027      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002acc:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002adc:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ae2:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d014      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe fd5f 	bl	80015b4 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fd5b 	bl	80015b4 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e036      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ee      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4917      	ldr	r1, [pc, #92]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	490b      	ldr	r1, [pc, #44]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4904      	ldr	r1, [pc, #16]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	42420440 	.word	0x42420440

08002b94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	f200 808a 	bhi.w	8002cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d045      	beq.n	8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d075      	beq.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002bca:	e082      	b.n	8002cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002bcc:	4b46      	ldr	r3, [pc, #280]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002bd2:	4b45      	ldr	r3, [pc, #276]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d07b      	beq.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	0c9b      	lsrs	r3, r3, #18
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	4a41      	ldr	r2, [pc, #260]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002be8:	5cd3      	ldrb	r3, [r2, r3]
 8002bea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d015      	beq.n	8002c22 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bf6:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	0c5b      	lsrs	r3, r3, #17
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	4a3b      	ldr	r2, [pc, #236]	; (8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c10:	4a38      	ldr	r2, [pc, #224]	; (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	e004      	b.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4a34      	ldr	r2, [pc, #208]	; (8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c38:	d102      	bne.n	8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	61bb      	str	r3, [r7, #24]
      break;
 8002c3e:	e04a      	b.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	61bb      	str	r3, [r7, #24]
      break;
 8002c4e:	e042      	b.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c60:	d108      	bne.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	e01f      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c7e:	d109      	bne.n	8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002c8c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e00f      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c9e:	d11c      	bne.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d016      	beq.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002cac:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002cb0:	61bb      	str	r3, [r7, #24]
      break;
 8002cb2:	e012      	b.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002cb4:	e011      	b.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002cb6:	f7ff fe85 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0b9b      	lsrs	r3, r3, #14
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	61bb      	str	r3, [r7, #24]
      break;
 8002cd0:	e004      	b.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e002      	b.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cda:	bf00      	nop
    }
  }
  return (frequency);
 8002cdc:	69bb      	ldr	r3, [r7, #24]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	0800795c 	.word	0x0800795c
 8002cf0:	0800796c 	.word	0x0800796c
 8002cf4:	007a1200 	.word	0x007a1200
 8002cf8:	003d0900 	.word	0x003d0900
 8002cfc:	aaaaaaab 	.word	0xaaaaaaab

08002d00 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e07a      	b.n	8002e0c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	7c5b      	ldrb	r3, [r3, #17]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe fa1e 	bl	8001168 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f870 	bl	8002e18 <HAL_RTC_WaitForSynchro>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2204      	movs	r2, #4
 8002d42:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e061      	b.n	8002e0c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f892 	bl	8002e72 <RTC_EnterInitMode>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2204      	movs	r2, #4
 8002d58:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e056      	b.n	8002e0c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0207 	bic.w	r2, r2, #7
 8002d6c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002d76:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <HAL_RTC_Init+0x114>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a26      	ldr	r2, [pc, #152]	; (8002e14 <HAL_RTC_Init+0x114>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002d82:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_RTC_Init+0x114>)
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4921      	ldr	r1, [pc, #132]	; (8002e14 <HAL_RTC_Init+0x114>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d003      	beq.n	8002da6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e00e      	b.n	8002dc4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7ff fef4 	bl	8002b94 <HAL_RCCEx_GetPeriphCLKFreq>
 8002dac:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2204      	movs	r2, #4
 8002db8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e026      	b.n	8002e0c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	0c1a      	lsrs	r2, r3, #16
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f002 020f 	and.w	r2, r2, #15
 8002dd0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	b292      	uxth	r2, r2
 8002dda:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f870 	bl	8002ec2 <RTC_ExitInitMode>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2204      	movs	r2, #4
 8002dec:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00c      	b.n	8002e0c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40006c00 	.word	0x40006c00

08002e18 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e01d      	b.n	8002e6a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0208 	bic.w	r2, r2, #8
 8002e3c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002e3e:	f7fe fbb9 	bl	80015b4 <HAL_GetTick>
 8002e42:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002e44:	e009      	b.n	8002e5a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e46:	f7fe fbb5 	bl	80015b4 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e54:	d901      	bls.n	8002e5a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e007      	b.n	8002e6a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002e7e:	f7fe fb99 	bl	80015b4 <HAL_GetTick>
 8002e82:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e84:	e009      	b.n	8002e9a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e86:	f7fe fb95 	bl	80015b4 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e94:	d901      	bls.n	8002e9a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e00f      	b.n	8002eba <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ee      	beq.n	8002e86 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0210 	orr.w	r2, r2, #16
 8002eb6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0210 	bic.w	r2, r2, #16
 8002edc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002ede:	f7fe fb69 	bl	80015b4 <HAL_GetTick>
 8002ee2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ee4:	e009      	b.n	8002efa <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002ee6:	f7fe fb65 	bl	80015b4 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ef4:	d901      	bls.n	8002efa <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e007      	b.n	8002f0a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ee      	beq.n	8002ee6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e076      	b.n	8003012 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d108      	bne.n	8002f3e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f34:	d009      	beq.n	8002f4a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	61da      	str	r2, [r3, #28]
 8002f3c:	e005      	b.n	8002f4a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d106      	bne.n	8002f6a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fe f923 	bl	80011b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	ea42 0103 	orr.w	r1, r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	0c1a      	lsrs	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f002 0204 	and.w	r2, r2, #4
 8002ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e042      	b.n	80030b2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fe f8ff 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2224      	movs	r2, #36	; 0x24
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800305c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f82c 	bl	80030bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003072:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003082:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003092:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030f6:	f023 030c 	bic.w	r3, r3, #12
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	430b      	orrs	r3, r1
 8003102:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2c      	ldr	r2, [pc, #176]	; (80031d0 <UART_SetConfig+0x114>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d103      	bne.n	800312c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003124:	f7ff fc4e 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	e002      	b.n	8003132 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800312c:	f7ff fc36 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8003130:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	009a      	lsls	r2, r3, #2
 800313c:	441a      	add	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	4a22      	ldr	r2, [pc, #136]	; (80031d4 <UART_SetConfig+0x118>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	0119      	lsls	r1, r3, #4
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009a      	lsls	r2, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fbb2 f2f3 	udiv	r2, r2, r3
 8003168:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <UART_SetConfig+0x118>)
 800316a:	fba3 0302 	umull	r0, r3, r3, r2
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2064      	movs	r0, #100	; 0x64
 8003172:	fb00 f303 	mul.w	r3, r0, r3
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	3332      	adds	r3, #50	; 0x32
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <UART_SetConfig+0x118>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003188:	4419      	add	r1, r3
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <UART_SetConfig+0x118>)
 80031a2:	fba3 0302 	umull	r0, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2064      	movs	r0, #100	; 0x64
 80031aa:	fb00 f303 	mul.w	r3, r0, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	3332      	adds	r3, #50	; 0x32
 80031b4:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <UART_SetConfig+0x118>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	f003 020f 	and.w	r2, r3, #15
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	440a      	add	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40013800 	.word	0x40013800
 80031d4:	51eb851f 	.word	0x51eb851f

080031d8 <malloc>:
 80031d8:	4b02      	ldr	r3, [pc, #8]	; (80031e4 <malloc+0xc>)
 80031da:	4601      	mov	r1, r0
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	f000 b823 	b.w	8003228 <_malloc_r>
 80031e2:	bf00      	nop
 80031e4:	200001d0 	.word	0x200001d0

080031e8 <sbrk_aligned>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	4e0e      	ldr	r6, [pc, #56]	; (8003224 <sbrk_aligned+0x3c>)
 80031ec:	460c      	mov	r4, r1
 80031ee:	6831      	ldr	r1, [r6, #0]
 80031f0:	4605      	mov	r5, r0
 80031f2:	b911      	cbnz	r1, 80031fa <sbrk_aligned+0x12>
 80031f4:	f001 fec0 	bl	8004f78 <_sbrk_r>
 80031f8:	6030      	str	r0, [r6, #0]
 80031fa:	4621      	mov	r1, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	f001 febb 	bl	8004f78 <_sbrk_r>
 8003202:	1c43      	adds	r3, r0, #1
 8003204:	d00a      	beq.n	800321c <sbrk_aligned+0x34>
 8003206:	1cc4      	adds	r4, r0, #3
 8003208:	f024 0403 	bic.w	r4, r4, #3
 800320c:	42a0      	cmp	r0, r4
 800320e:	d007      	beq.n	8003220 <sbrk_aligned+0x38>
 8003210:	1a21      	subs	r1, r4, r0
 8003212:	4628      	mov	r0, r5
 8003214:	f001 feb0 	bl	8004f78 <_sbrk_r>
 8003218:	3001      	adds	r0, #1
 800321a:	d101      	bne.n	8003220 <sbrk_aligned+0x38>
 800321c:	f04f 34ff 	mov.w	r4, #4294967295
 8003220:	4620      	mov	r0, r4
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	20000334 	.word	0x20000334

08003228 <_malloc_r>:
 8003228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800322c:	1ccd      	adds	r5, r1, #3
 800322e:	f025 0503 	bic.w	r5, r5, #3
 8003232:	3508      	adds	r5, #8
 8003234:	2d0c      	cmp	r5, #12
 8003236:	bf38      	it	cc
 8003238:	250c      	movcc	r5, #12
 800323a:	2d00      	cmp	r5, #0
 800323c:	4607      	mov	r7, r0
 800323e:	db01      	blt.n	8003244 <_malloc_r+0x1c>
 8003240:	42a9      	cmp	r1, r5
 8003242:	d905      	bls.n	8003250 <_malloc_r+0x28>
 8003244:	230c      	movs	r3, #12
 8003246:	2600      	movs	r6, #0
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	4630      	mov	r0, r6
 800324c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003250:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003324 <_malloc_r+0xfc>
 8003254:	f000 f868 	bl	8003328 <__malloc_lock>
 8003258:	f8d8 3000 	ldr.w	r3, [r8]
 800325c:	461c      	mov	r4, r3
 800325e:	bb5c      	cbnz	r4, 80032b8 <_malloc_r+0x90>
 8003260:	4629      	mov	r1, r5
 8003262:	4638      	mov	r0, r7
 8003264:	f7ff ffc0 	bl	80031e8 <sbrk_aligned>
 8003268:	1c43      	adds	r3, r0, #1
 800326a:	4604      	mov	r4, r0
 800326c:	d155      	bne.n	800331a <_malloc_r+0xf2>
 800326e:	f8d8 4000 	ldr.w	r4, [r8]
 8003272:	4626      	mov	r6, r4
 8003274:	2e00      	cmp	r6, #0
 8003276:	d145      	bne.n	8003304 <_malloc_r+0xdc>
 8003278:	2c00      	cmp	r4, #0
 800327a:	d048      	beq.n	800330e <_malloc_r+0xe6>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	4631      	mov	r1, r6
 8003280:	4638      	mov	r0, r7
 8003282:	eb04 0903 	add.w	r9, r4, r3
 8003286:	f001 fe77 	bl	8004f78 <_sbrk_r>
 800328a:	4581      	cmp	r9, r0
 800328c:	d13f      	bne.n	800330e <_malloc_r+0xe6>
 800328e:	6821      	ldr	r1, [r4, #0]
 8003290:	4638      	mov	r0, r7
 8003292:	1a6d      	subs	r5, r5, r1
 8003294:	4629      	mov	r1, r5
 8003296:	f7ff ffa7 	bl	80031e8 <sbrk_aligned>
 800329a:	3001      	adds	r0, #1
 800329c:	d037      	beq.n	800330e <_malloc_r+0xe6>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	442b      	add	r3, r5
 80032a2:	6023      	str	r3, [r4, #0]
 80032a4:	f8d8 3000 	ldr.w	r3, [r8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d038      	beq.n	800331e <_malloc_r+0xf6>
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	42a2      	cmp	r2, r4
 80032b0:	d12b      	bne.n	800330a <_malloc_r+0xe2>
 80032b2:	2200      	movs	r2, #0
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	e00f      	b.n	80032d8 <_malloc_r+0xb0>
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	1b52      	subs	r2, r2, r5
 80032bc:	d41f      	bmi.n	80032fe <_malloc_r+0xd6>
 80032be:	2a0b      	cmp	r2, #11
 80032c0:	d917      	bls.n	80032f2 <_malloc_r+0xca>
 80032c2:	1961      	adds	r1, r4, r5
 80032c4:	42a3      	cmp	r3, r4
 80032c6:	6025      	str	r5, [r4, #0]
 80032c8:	bf18      	it	ne
 80032ca:	6059      	strne	r1, [r3, #4]
 80032cc:	6863      	ldr	r3, [r4, #4]
 80032ce:	bf08      	it	eq
 80032d0:	f8c8 1000 	streq.w	r1, [r8]
 80032d4:	5162      	str	r2, [r4, r5]
 80032d6:	604b      	str	r3, [r1, #4]
 80032d8:	4638      	mov	r0, r7
 80032da:	f104 060b 	add.w	r6, r4, #11
 80032de:	f000 f829 	bl	8003334 <__malloc_unlock>
 80032e2:	f026 0607 	bic.w	r6, r6, #7
 80032e6:	1d23      	adds	r3, r4, #4
 80032e8:	1af2      	subs	r2, r6, r3
 80032ea:	d0ae      	beq.n	800324a <_malloc_r+0x22>
 80032ec:	1b9b      	subs	r3, r3, r6
 80032ee:	50a3      	str	r3, [r4, r2]
 80032f0:	e7ab      	b.n	800324a <_malloc_r+0x22>
 80032f2:	42a3      	cmp	r3, r4
 80032f4:	6862      	ldr	r2, [r4, #4]
 80032f6:	d1dd      	bne.n	80032b4 <_malloc_r+0x8c>
 80032f8:	f8c8 2000 	str.w	r2, [r8]
 80032fc:	e7ec      	b.n	80032d8 <_malloc_r+0xb0>
 80032fe:	4623      	mov	r3, r4
 8003300:	6864      	ldr	r4, [r4, #4]
 8003302:	e7ac      	b.n	800325e <_malloc_r+0x36>
 8003304:	4634      	mov	r4, r6
 8003306:	6876      	ldr	r6, [r6, #4]
 8003308:	e7b4      	b.n	8003274 <_malloc_r+0x4c>
 800330a:	4613      	mov	r3, r2
 800330c:	e7cc      	b.n	80032a8 <_malloc_r+0x80>
 800330e:	230c      	movs	r3, #12
 8003310:	4638      	mov	r0, r7
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	f000 f80e 	bl	8003334 <__malloc_unlock>
 8003318:	e797      	b.n	800324a <_malloc_r+0x22>
 800331a:	6025      	str	r5, [r4, #0]
 800331c:	e7dc      	b.n	80032d8 <_malloc_r+0xb0>
 800331e:	605b      	str	r3, [r3, #4]
 8003320:	deff      	udf	#255	; 0xff
 8003322:	bf00      	nop
 8003324:	20000330 	.word	0x20000330

08003328 <__malloc_lock>:
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <__malloc_lock+0x8>)
 800332a:	f001 be71 	b.w	8005010 <__retarget_lock_acquire_recursive>
 800332e:	bf00      	nop
 8003330:	20000478 	.word	0x20000478

08003334 <__malloc_unlock>:
 8003334:	4801      	ldr	r0, [pc, #4]	; (800333c <__malloc_unlock+0x8>)
 8003336:	f001 be6c 	b.w	8005012 <__retarget_lock_release_recursive>
 800333a:	bf00      	nop
 800333c:	20000478 	.word	0x20000478

08003340 <_realloc_r>:
 8003340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003344:	4680      	mov	r8, r0
 8003346:	4614      	mov	r4, r2
 8003348:	460e      	mov	r6, r1
 800334a:	b921      	cbnz	r1, 8003356 <_realloc_r+0x16>
 800334c:	4611      	mov	r1, r2
 800334e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003352:	f7ff bf69 	b.w	8003228 <_malloc_r>
 8003356:	b92a      	cbnz	r2, 8003364 <_realloc_r+0x24>
 8003358:	f002 fcf2 	bl	8005d40 <_free_r>
 800335c:	4625      	mov	r5, r4
 800335e:	4628      	mov	r0, r5
 8003360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003364:	f003 fd3c 	bl	8006de0 <_malloc_usable_size_r>
 8003368:	4284      	cmp	r4, r0
 800336a:	4607      	mov	r7, r0
 800336c:	d802      	bhi.n	8003374 <_realloc_r+0x34>
 800336e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003372:	d812      	bhi.n	800339a <_realloc_r+0x5a>
 8003374:	4621      	mov	r1, r4
 8003376:	4640      	mov	r0, r8
 8003378:	f7ff ff56 	bl	8003228 <_malloc_r>
 800337c:	4605      	mov	r5, r0
 800337e:	2800      	cmp	r0, #0
 8003380:	d0ed      	beq.n	800335e <_realloc_r+0x1e>
 8003382:	42bc      	cmp	r4, r7
 8003384:	4622      	mov	r2, r4
 8003386:	4631      	mov	r1, r6
 8003388:	bf28      	it	cs
 800338a:	463a      	movcs	r2, r7
 800338c:	f001 fe50 	bl	8005030 <memcpy>
 8003390:	4631      	mov	r1, r6
 8003392:	4640      	mov	r0, r8
 8003394:	f002 fcd4 	bl	8005d40 <_free_r>
 8003398:	e7e1      	b.n	800335e <_realloc_r+0x1e>
 800339a:	4635      	mov	r5, r6
 800339c:	e7df      	b.n	800335e <_realloc_r+0x1e>

0800339e <sulp>:
 800339e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a2:	460f      	mov	r7, r1
 80033a4:	4690      	mov	r8, r2
 80033a6:	f003 fbeb 	bl	8006b80 <__ulp>
 80033aa:	4604      	mov	r4, r0
 80033ac:	460d      	mov	r5, r1
 80033ae:	f1b8 0f00 	cmp.w	r8, #0
 80033b2:	d011      	beq.n	80033d8 <sulp+0x3a>
 80033b4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80033b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80033bc:	2b00      	cmp	r3, #0
 80033be:	dd0b      	ble.n	80033d8 <sulp+0x3a>
 80033c0:	2400      	movs	r4, #0
 80033c2:	051b      	lsls	r3, r3, #20
 80033c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80033c8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80033cc:	4622      	mov	r2, r4
 80033ce:	462b      	mov	r3, r5
 80033d0:	f7fd f882 	bl	80004d8 <__aeabi_dmul>
 80033d4:	4604      	mov	r4, r0
 80033d6:	460d      	mov	r5, r1
 80033d8:	4620      	mov	r0, r4
 80033da:	4629      	mov	r1, r5
 80033dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080033e0 <_strtod_l>:
 80033e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e4:	b09f      	sub	sp, #124	; 0x7c
 80033e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80033e8:	2200      	movs	r2, #0
 80033ea:	4604      	mov	r4, r0
 80033ec:	921a      	str	r2, [sp, #104]	; 0x68
 80033ee:	460d      	mov	r5, r1
 80033f0:	f04f 0800 	mov.w	r8, #0
 80033f4:	f04f 0900 	mov.w	r9, #0
 80033f8:	460a      	mov	r2, r1
 80033fa:	9219      	str	r2, [sp, #100]	; 0x64
 80033fc:	7811      	ldrb	r1, [r2, #0]
 80033fe:	292b      	cmp	r1, #43	; 0x2b
 8003400:	d04a      	beq.n	8003498 <_strtod_l+0xb8>
 8003402:	d838      	bhi.n	8003476 <_strtod_l+0x96>
 8003404:	290d      	cmp	r1, #13
 8003406:	d832      	bhi.n	800346e <_strtod_l+0x8e>
 8003408:	2908      	cmp	r1, #8
 800340a:	d832      	bhi.n	8003472 <_strtod_l+0x92>
 800340c:	2900      	cmp	r1, #0
 800340e:	d03b      	beq.n	8003488 <_strtod_l+0xa8>
 8003410:	2200      	movs	r2, #0
 8003412:	920e      	str	r2, [sp, #56]	; 0x38
 8003414:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003416:	7832      	ldrb	r2, [r6, #0]
 8003418:	2a30      	cmp	r2, #48	; 0x30
 800341a:	f040 80b2 	bne.w	8003582 <_strtod_l+0x1a2>
 800341e:	7872      	ldrb	r2, [r6, #1]
 8003420:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003424:	2a58      	cmp	r2, #88	; 0x58
 8003426:	d16e      	bne.n	8003506 <_strtod_l+0x126>
 8003428:	9302      	str	r3, [sp, #8]
 800342a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800342c:	4620      	mov	r0, r4
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	ab1a      	add	r3, sp, #104	; 0x68
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4a8c      	ldr	r2, [pc, #560]	; (8003668 <_strtod_l+0x288>)
 8003436:	ab1b      	add	r3, sp, #108	; 0x6c
 8003438:	a919      	add	r1, sp, #100	; 0x64
 800343a:	f002 fd31 	bl	8005ea0 <__gethex>
 800343e:	f010 070f 	ands.w	r7, r0, #15
 8003442:	4605      	mov	r5, r0
 8003444:	d005      	beq.n	8003452 <_strtod_l+0x72>
 8003446:	2f06      	cmp	r7, #6
 8003448:	d128      	bne.n	800349c <_strtod_l+0xbc>
 800344a:	2300      	movs	r3, #0
 800344c:	3601      	adds	r6, #1
 800344e:	9619      	str	r6, [sp, #100]	; 0x64
 8003450:	930e      	str	r3, [sp, #56]	; 0x38
 8003452:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 85a0 	bne.w	8003f9a <_strtod_l+0xbba>
 800345a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800345c:	b1cb      	cbz	r3, 8003492 <_strtod_l+0xb2>
 800345e:	4642      	mov	r2, r8
 8003460:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	b01f      	add	sp, #124	; 0x7c
 800346a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800346e:	2920      	cmp	r1, #32
 8003470:	d1ce      	bne.n	8003410 <_strtod_l+0x30>
 8003472:	3201      	adds	r2, #1
 8003474:	e7c1      	b.n	80033fa <_strtod_l+0x1a>
 8003476:	292d      	cmp	r1, #45	; 0x2d
 8003478:	d1ca      	bne.n	8003410 <_strtod_l+0x30>
 800347a:	2101      	movs	r1, #1
 800347c:	910e      	str	r1, [sp, #56]	; 0x38
 800347e:	1c51      	adds	r1, r2, #1
 8003480:	9119      	str	r1, [sp, #100]	; 0x64
 8003482:	7852      	ldrb	r2, [r2, #1]
 8003484:	2a00      	cmp	r2, #0
 8003486:	d1c5      	bne.n	8003414 <_strtod_l+0x34>
 8003488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800348a:	9519      	str	r5, [sp, #100]	; 0x64
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 8582 	bne.w	8003f96 <_strtod_l+0xbb6>
 8003492:	4642      	mov	r2, r8
 8003494:	464b      	mov	r3, r9
 8003496:	e7e5      	b.n	8003464 <_strtod_l+0x84>
 8003498:	2100      	movs	r1, #0
 800349a:	e7ef      	b.n	800347c <_strtod_l+0x9c>
 800349c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800349e:	b13a      	cbz	r2, 80034b0 <_strtod_l+0xd0>
 80034a0:	2135      	movs	r1, #53	; 0x35
 80034a2:	a81c      	add	r0, sp, #112	; 0x70
 80034a4:	f003 fc58 	bl	8006d58 <__copybits>
 80034a8:	4620      	mov	r0, r4
 80034aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80034ac:	f003 f83c 	bl	8006528 <_Bfree>
 80034b0:	3f01      	subs	r7, #1
 80034b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80034b4:	2f04      	cmp	r7, #4
 80034b6:	d806      	bhi.n	80034c6 <_strtod_l+0xe6>
 80034b8:	e8df f007 	tbb	[pc, r7]
 80034bc:	201d0314 	.word	0x201d0314
 80034c0:	14          	.byte	0x14
 80034c1:	00          	.byte	0x00
 80034c2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80034c6:	05e9      	lsls	r1, r5, #23
 80034c8:	bf48      	it	mi
 80034ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80034ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80034d2:	0d1b      	lsrs	r3, r3, #20
 80034d4:	051b      	lsls	r3, r3, #20
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1bb      	bne.n	8003452 <_strtod_l+0x72>
 80034da:	f001 fd6f 	bl	8004fbc <__errno>
 80034de:	2322      	movs	r3, #34	; 0x22
 80034e0:	6003      	str	r3, [r0, #0]
 80034e2:	e7b6      	b.n	8003452 <_strtod_l+0x72>
 80034e4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80034e8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80034ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80034f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80034f4:	e7e7      	b.n	80034c6 <_strtod_l+0xe6>
 80034f6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800366c <_strtod_l+0x28c>
 80034fa:	e7e4      	b.n	80034c6 <_strtod_l+0xe6>
 80034fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003500:	f04f 38ff 	mov.w	r8, #4294967295
 8003504:	e7df      	b.n	80034c6 <_strtod_l+0xe6>
 8003506:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	9219      	str	r2, [sp, #100]	; 0x64
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	2b30      	cmp	r3, #48	; 0x30
 8003510:	d0f9      	beq.n	8003506 <_strtod_l+0x126>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d09d      	beq.n	8003452 <_strtod_l+0x72>
 8003516:	2301      	movs	r3, #1
 8003518:	f04f 0a00 	mov.w	sl, #0
 800351c:	220a      	movs	r2, #10
 800351e:	46d3      	mov	fp, sl
 8003520:	9305      	str	r3, [sp, #20]
 8003522:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003524:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8003528:	930b      	str	r3, [sp, #44]	; 0x2c
 800352a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800352c:	7806      	ldrb	r6, [r0, #0]
 800352e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003532:	b2d9      	uxtb	r1, r3
 8003534:	2909      	cmp	r1, #9
 8003536:	d926      	bls.n	8003586 <_strtod_l+0x1a6>
 8003538:	2201      	movs	r2, #1
 800353a:	494d      	ldr	r1, [pc, #308]	; (8003670 <_strtod_l+0x290>)
 800353c:	f001 fcd1 	bl	8004ee2 <strncmp>
 8003540:	2800      	cmp	r0, #0
 8003542:	d030      	beq.n	80035a6 <_strtod_l+0x1c6>
 8003544:	2000      	movs	r0, #0
 8003546:	4632      	mov	r2, r6
 8003548:	4603      	mov	r3, r0
 800354a:	465e      	mov	r6, fp
 800354c:	9008      	str	r0, [sp, #32]
 800354e:	2a65      	cmp	r2, #101	; 0x65
 8003550:	d001      	beq.n	8003556 <_strtod_l+0x176>
 8003552:	2a45      	cmp	r2, #69	; 0x45
 8003554:	d113      	bne.n	800357e <_strtod_l+0x19e>
 8003556:	b91e      	cbnz	r6, 8003560 <_strtod_l+0x180>
 8003558:	9a05      	ldr	r2, [sp, #20]
 800355a:	4302      	orrs	r2, r0
 800355c:	d094      	beq.n	8003488 <_strtod_l+0xa8>
 800355e:	2600      	movs	r6, #0
 8003560:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003562:	1c6a      	adds	r2, r5, #1
 8003564:	9219      	str	r2, [sp, #100]	; 0x64
 8003566:	786a      	ldrb	r2, [r5, #1]
 8003568:	2a2b      	cmp	r2, #43	; 0x2b
 800356a:	d074      	beq.n	8003656 <_strtod_l+0x276>
 800356c:	2a2d      	cmp	r2, #45	; 0x2d
 800356e:	d078      	beq.n	8003662 <_strtod_l+0x282>
 8003570:	f04f 0c00 	mov.w	ip, #0
 8003574:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003578:	2909      	cmp	r1, #9
 800357a:	d97f      	bls.n	800367c <_strtod_l+0x29c>
 800357c:	9519      	str	r5, [sp, #100]	; 0x64
 800357e:	2700      	movs	r7, #0
 8003580:	e09e      	b.n	80036c0 <_strtod_l+0x2e0>
 8003582:	2300      	movs	r3, #0
 8003584:	e7c8      	b.n	8003518 <_strtod_l+0x138>
 8003586:	f1bb 0f08 	cmp.w	fp, #8
 800358a:	bfd8      	it	le
 800358c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800358e:	f100 0001 	add.w	r0, r0, #1
 8003592:	bfd6      	itet	le
 8003594:	fb02 3301 	mlale	r3, r2, r1, r3
 8003598:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800359c:	930a      	strle	r3, [sp, #40]	; 0x28
 800359e:	f10b 0b01 	add.w	fp, fp, #1
 80035a2:	9019      	str	r0, [sp, #100]	; 0x64
 80035a4:	e7c1      	b.n	800352a <_strtod_l+0x14a>
 80035a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	9219      	str	r2, [sp, #100]	; 0x64
 80035ac:	785a      	ldrb	r2, [r3, #1]
 80035ae:	f1bb 0f00 	cmp.w	fp, #0
 80035b2:	d037      	beq.n	8003624 <_strtod_l+0x244>
 80035b4:	465e      	mov	r6, fp
 80035b6:	9008      	str	r0, [sp, #32]
 80035b8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80035bc:	2b09      	cmp	r3, #9
 80035be:	d912      	bls.n	80035e6 <_strtod_l+0x206>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e7c4      	b.n	800354e <_strtod_l+0x16e>
 80035c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80035c6:	3001      	adds	r0, #1
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	9219      	str	r2, [sp, #100]	; 0x64
 80035cc:	785a      	ldrb	r2, [r3, #1]
 80035ce:	2a30      	cmp	r2, #48	; 0x30
 80035d0:	d0f8      	beq.n	80035c4 <_strtod_l+0x1e4>
 80035d2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	f200 84e4 	bhi.w	8003fa4 <_strtod_l+0xbc4>
 80035dc:	9008      	str	r0, [sp, #32]
 80035de:	2000      	movs	r0, #0
 80035e0:	4606      	mov	r6, r0
 80035e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80035e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80035e6:	3a30      	subs	r2, #48	; 0x30
 80035e8:	f100 0301 	add.w	r3, r0, #1
 80035ec:	d014      	beq.n	8003618 <_strtod_l+0x238>
 80035ee:	9908      	ldr	r1, [sp, #32]
 80035f0:	eb00 0c06 	add.w	ip, r0, r6
 80035f4:	4419      	add	r1, r3
 80035f6:	9108      	str	r1, [sp, #32]
 80035f8:	4633      	mov	r3, r6
 80035fa:	210a      	movs	r1, #10
 80035fc:	4563      	cmp	r3, ip
 80035fe:	d113      	bne.n	8003628 <_strtod_l+0x248>
 8003600:	1833      	adds	r3, r6, r0
 8003602:	2b08      	cmp	r3, #8
 8003604:	f106 0601 	add.w	r6, r6, #1
 8003608:	4406      	add	r6, r0
 800360a:	dc1a      	bgt.n	8003642 <_strtod_l+0x262>
 800360c:	230a      	movs	r3, #10
 800360e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003610:	fb03 2301 	mla	r3, r3, r1, r2
 8003614:	930a      	str	r3, [sp, #40]	; 0x28
 8003616:	2300      	movs	r3, #0
 8003618:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800361a:	4618      	mov	r0, r3
 800361c:	1c51      	adds	r1, r2, #1
 800361e:	9119      	str	r1, [sp, #100]	; 0x64
 8003620:	7852      	ldrb	r2, [r2, #1]
 8003622:	e7c9      	b.n	80035b8 <_strtod_l+0x1d8>
 8003624:	4658      	mov	r0, fp
 8003626:	e7d2      	b.n	80035ce <_strtod_l+0x1ee>
 8003628:	2b08      	cmp	r3, #8
 800362a:	f103 0301 	add.w	r3, r3, #1
 800362e:	dc03      	bgt.n	8003638 <_strtod_l+0x258>
 8003630:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003632:	434f      	muls	r7, r1
 8003634:	970a      	str	r7, [sp, #40]	; 0x28
 8003636:	e7e1      	b.n	80035fc <_strtod_l+0x21c>
 8003638:	2b10      	cmp	r3, #16
 800363a:	bfd8      	it	le
 800363c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8003640:	e7dc      	b.n	80035fc <_strtod_l+0x21c>
 8003642:	2e10      	cmp	r6, #16
 8003644:	bfdc      	itt	le
 8003646:	230a      	movle	r3, #10
 8003648:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800364c:	e7e3      	b.n	8003616 <_strtod_l+0x236>
 800364e:	2300      	movs	r3, #0
 8003650:	9308      	str	r3, [sp, #32]
 8003652:	2301      	movs	r3, #1
 8003654:	e780      	b.n	8003558 <_strtod_l+0x178>
 8003656:	f04f 0c00 	mov.w	ip, #0
 800365a:	1caa      	adds	r2, r5, #2
 800365c:	9219      	str	r2, [sp, #100]	; 0x64
 800365e:	78aa      	ldrb	r2, [r5, #2]
 8003660:	e788      	b.n	8003574 <_strtod_l+0x194>
 8003662:	f04f 0c01 	mov.w	ip, #1
 8003666:	e7f8      	b.n	800365a <_strtod_l+0x27a>
 8003668:	08007970 	.word	0x08007970
 800366c:	7ff00000 	.word	0x7ff00000
 8003670:	0800796e 	.word	0x0800796e
 8003674:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003676:	1c51      	adds	r1, r2, #1
 8003678:	9119      	str	r1, [sp, #100]	; 0x64
 800367a:	7852      	ldrb	r2, [r2, #1]
 800367c:	2a30      	cmp	r2, #48	; 0x30
 800367e:	d0f9      	beq.n	8003674 <_strtod_l+0x294>
 8003680:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003684:	2908      	cmp	r1, #8
 8003686:	f63f af7a 	bhi.w	800357e <_strtod_l+0x19e>
 800368a:	3a30      	subs	r2, #48	; 0x30
 800368c:	9209      	str	r2, [sp, #36]	; 0x24
 800368e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003690:	920c      	str	r2, [sp, #48]	; 0x30
 8003692:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003694:	1c57      	adds	r7, r2, #1
 8003696:	9719      	str	r7, [sp, #100]	; 0x64
 8003698:	7852      	ldrb	r2, [r2, #1]
 800369a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800369e:	f1be 0f09 	cmp.w	lr, #9
 80036a2:	d938      	bls.n	8003716 <_strtod_l+0x336>
 80036a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036a6:	1a7f      	subs	r7, r7, r1
 80036a8:	2f08      	cmp	r7, #8
 80036aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80036ae:	dc03      	bgt.n	80036b8 <_strtod_l+0x2d8>
 80036b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80036b2:	428f      	cmp	r7, r1
 80036b4:	bfa8      	it	ge
 80036b6:	460f      	movge	r7, r1
 80036b8:	f1bc 0f00 	cmp.w	ip, #0
 80036bc:	d000      	beq.n	80036c0 <_strtod_l+0x2e0>
 80036be:	427f      	negs	r7, r7
 80036c0:	2e00      	cmp	r6, #0
 80036c2:	d14f      	bne.n	8003764 <_strtod_l+0x384>
 80036c4:	9905      	ldr	r1, [sp, #20]
 80036c6:	4301      	orrs	r1, r0
 80036c8:	f47f aec3 	bne.w	8003452 <_strtod_l+0x72>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f aedb 	bne.w	8003488 <_strtod_l+0xa8>
 80036d2:	2a69      	cmp	r2, #105	; 0x69
 80036d4:	d029      	beq.n	800372a <_strtod_l+0x34a>
 80036d6:	dc26      	bgt.n	8003726 <_strtod_l+0x346>
 80036d8:	2a49      	cmp	r2, #73	; 0x49
 80036da:	d026      	beq.n	800372a <_strtod_l+0x34a>
 80036dc:	2a4e      	cmp	r2, #78	; 0x4e
 80036de:	f47f aed3 	bne.w	8003488 <_strtod_l+0xa8>
 80036e2:	499a      	ldr	r1, [pc, #616]	; (800394c <_strtod_l+0x56c>)
 80036e4:	a819      	add	r0, sp, #100	; 0x64
 80036e6:	f002 fe1d 	bl	8006324 <__match>
 80036ea:	2800      	cmp	r0, #0
 80036ec:	f43f aecc 	beq.w	8003488 <_strtod_l+0xa8>
 80036f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b28      	cmp	r3, #40	; 0x28
 80036f6:	d12f      	bne.n	8003758 <_strtod_l+0x378>
 80036f8:	4995      	ldr	r1, [pc, #596]	; (8003950 <_strtod_l+0x570>)
 80036fa:	aa1c      	add	r2, sp, #112	; 0x70
 80036fc:	a819      	add	r0, sp, #100	; 0x64
 80036fe:	f002 fe25 	bl	800634c <__hexnan>
 8003702:	2805      	cmp	r0, #5
 8003704:	d128      	bne.n	8003758 <_strtod_l+0x378>
 8003706:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003708:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800370c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003710:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003714:	e69d      	b.n	8003452 <_strtod_l+0x72>
 8003716:	210a      	movs	r1, #10
 8003718:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800371a:	fb01 2107 	mla	r1, r1, r7, r2
 800371e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003722:	9209      	str	r2, [sp, #36]	; 0x24
 8003724:	e7b5      	b.n	8003692 <_strtod_l+0x2b2>
 8003726:	2a6e      	cmp	r2, #110	; 0x6e
 8003728:	e7d9      	b.n	80036de <_strtod_l+0x2fe>
 800372a:	498a      	ldr	r1, [pc, #552]	; (8003954 <_strtod_l+0x574>)
 800372c:	a819      	add	r0, sp, #100	; 0x64
 800372e:	f002 fdf9 	bl	8006324 <__match>
 8003732:	2800      	cmp	r0, #0
 8003734:	f43f aea8 	beq.w	8003488 <_strtod_l+0xa8>
 8003738:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800373a:	4987      	ldr	r1, [pc, #540]	; (8003958 <_strtod_l+0x578>)
 800373c:	3b01      	subs	r3, #1
 800373e:	a819      	add	r0, sp, #100	; 0x64
 8003740:	9319      	str	r3, [sp, #100]	; 0x64
 8003742:	f002 fdef 	bl	8006324 <__match>
 8003746:	b910      	cbnz	r0, 800374e <_strtod_l+0x36e>
 8003748:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800374a:	3301      	adds	r3, #1
 800374c:	9319      	str	r3, [sp, #100]	; 0x64
 800374e:	f04f 0800 	mov.w	r8, #0
 8003752:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800395c <_strtod_l+0x57c>
 8003756:	e67c      	b.n	8003452 <_strtod_l+0x72>
 8003758:	4881      	ldr	r0, [pc, #516]	; (8003960 <_strtod_l+0x580>)
 800375a:	f001 fc77 	bl	800504c <nan>
 800375e:	4680      	mov	r8, r0
 8003760:	4689      	mov	r9, r1
 8003762:	e676      	b.n	8003452 <_strtod_l+0x72>
 8003764:	9b08      	ldr	r3, [sp, #32]
 8003766:	f1bb 0f00 	cmp.w	fp, #0
 800376a:	bf08      	it	eq
 800376c:	46b3      	moveq	fp, r6
 800376e:	1afb      	subs	r3, r7, r3
 8003770:	2e10      	cmp	r6, #16
 8003772:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003774:	4635      	mov	r5, r6
 8003776:	9309      	str	r3, [sp, #36]	; 0x24
 8003778:	bfa8      	it	ge
 800377a:	2510      	movge	r5, #16
 800377c:	f7fc fe32 	bl	80003e4 <__aeabi_ui2d>
 8003780:	2e09      	cmp	r6, #9
 8003782:	4680      	mov	r8, r0
 8003784:	4689      	mov	r9, r1
 8003786:	dd13      	ble.n	80037b0 <_strtod_l+0x3d0>
 8003788:	4b76      	ldr	r3, [pc, #472]	; (8003964 <_strtod_l+0x584>)
 800378a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800378e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003792:	f7fc fea1 	bl	80004d8 <__aeabi_dmul>
 8003796:	4680      	mov	r8, r0
 8003798:	4650      	mov	r0, sl
 800379a:	4689      	mov	r9, r1
 800379c:	f7fc fe22 	bl	80003e4 <__aeabi_ui2d>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4640      	mov	r0, r8
 80037a6:	4649      	mov	r1, r9
 80037a8:	f7fc fce0 	bl	800016c <__adddf3>
 80037ac:	4680      	mov	r8, r0
 80037ae:	4689      	mov	r9, r1
 80037b0:	2e0f      	cmp	r6, #15
 80037b2:	dc36      	bgt.n	8003822 <_strtod_l+0x442>
 80037b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f43f ae4b 	beq.w	8003452 <_strtod_l+0x72>
 80037bc:	dd22      	ble.n	8003804 <_strtod_l+0x424>
 80037be:	2b16      	cmp	r3, #22
 80037c0:	dc09      	bgt.n	80037d6 <_strtod_l+0x3f6>
 80037c2:	4968      	ldr	r1, [pc, #416]	; (8003964 <_strtod_l+0x584>)
 80037c4:	4642      	mov	r2, r8
 80037c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80037ca:	464b      	mov	r3, r9
 80037cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037d0:	f7fc fe82 	bl	80004d8 <__aeabi_dmul>
 80037d4:	e7c3      	b.n	800375e <_strtod_l+0x37e>
 80037d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037d8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80037dc:	4293      	cmp	r3, r2
 80037de:	db20      	blt.n	8003822 <_strtod_l+0x442>
 80037e0:	4c60      	ldr	r4, [pc, #384]	; (8003964 <_strtod_l+0x584>)
 80037e2:	f1c6 060f 	rsb	r6, r6, #15
 80037e6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80037ea:	4642      	mov	r2, r8
 80037ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037f0:	464b      	mov	r3, r9
 80037f2:	f7fc fe71 	bl	80004d8 <__aeabi_dmul>
 80037f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037f8:	1b9e      	subs	r6, r3, r6
 80037fa:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80037fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003802:	e7e5      	b.n	80037d0 <_strtod_l+0x3f0>
 8003804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003806:	3316      	adds	r3, #22
 8003808:	db0b      	blt.n	8003822 <_strtod_l+0x442>
 800380a:	9b08      	ldr	r3, [sp, #32]
 800380c:	4640      	mov	r0, r8
 800380e:	1bdf      	subs	r7, r3, r7
 8003810:	4b54      	ldr	r3, [pc, #336]	; (8003964 <_strtod_l+0x584>)
 8003812:	4649      	mov	r1, r9
 8003814:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800381c:	f7fc ff86 	bl	800072c <__aeabi_ddiv>
 8003820:	e79d      	b.n	800375e <_strtod_l+0x37e>
 8003822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003824:	1b75      	subs	r5, r6, r5
 8003826:	441d      	add	r5, r3
 8003828:	2d00      	cmp	r5, #0
 800382a:	dd70      	ble.n	800390e <_strtod_l+0x52e>
 800382c:	f015 030f 	ands.w	r3, r5, #15
 8003830:	d00a      	beq.n	8003848 <_strtod_l+0x468>
 8003832:	494c      	ldr	r1, [pc, #304]	; (8003964 <_strtod_l+0x584>)
 8003834:	4642      	mov	r2, r8
 8003836:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800383a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800383e:	464b      	mov	r3, r9
 8003840:	f7fc fe4a 	bl	80004d8 <__aeabi_dmul>
 8003844:	4680      	mov	r8, r0
 8003846:	4689      	mov	r9, r1
 8003848:	f035 050f 	bics.w	r5, r5, #15
 800384c:	d04d      	beq.n	80038ea <_strtod_l+0x50a>
 800384e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8003852:	dd22      	ble.n	800389a <_strtod_l+0x4ba>
 8003854:	2600      	movs	r6, #0
 8003856:	46b3      	mov	fp, r6
 8003858:	960b      	str	r6, [sp, #44]	; 0x2c
 800385a:	9608      	str	r6, [sp, #32]
 800385c:	2322      	movs	r3, #34	; 0x22
 800385e:	f04f 0800 	mov.w	r8, #0
 8003862:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800395c <_strtod_l+0x57c>
 8003866:	6023      	str	r3, [r4, #0]
 8003868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	f43f adf1 	beq.w	8003452 <_strtod_l+0x72>
 8003870:	4620      	mov	r0, r4
 8003872:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003874:	f002 fe58 	bl	8006528 <_Bfree>
 8003878:	4620      	mov	r0, r4
 800387a:	9908      	ldr	r1, [sp, #32]
 800387c:	f002 fe54 	bl	8006528 <_Bfree>
 8003880:	4659      	mov	r1, fp
 8003882:	4620      	mov	r0, r4
 8003884:	f002 fe50 	bl	8006528 <_Bfree>
 8003888:	4620      	mov	r0, r4
 800388a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800388c:	f002 fe4c 	bl	8006528 <_Bfree>
 8003890:	4631      	mov	r1, r6
 8003892:	4620      	mov	r0, r4
 8003894:	f002 fe48 	bl	8006528 <_Bfree>
 8003898:	e5db      	b.n	8003452 <_strtod_l+0x72>
 800389a:	4b33      	ldr	r3, [pc, #204]	; (8003968 <_strtod_l+0x588>)
 800389c:	4640      	mov	r0, r8
 800389e:	9305      	str	r3, [sp, #20]
 80038a0:	2300      	movs	r3, #0
 80038a2:	4649      	mov	r1, r9
 80038a4:	469a      	mov	sl, r3
 80038a6:	112d      	asrs	r5, r5, #4
 80038a8:	2d01      	cmp	r5, #1
 80038aa:	dc21      	bgt.n	80038f0 <_strtod_l+0x510>
 80038ac:	b10b      	cbz	r3, 80038b2 <_strtod_l+0x4d2>
 80038ae:	4680      	mov	r8, r0
 80038b0:	4689      	mov	r9, r1
 80038b2:	492d      	ldr	r1, [pc, #180]	; (8003968 <_strtod_l+0x588>)
 80038b4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80038b8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80038bc:	4642      	mov	r2, r8
 80038be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038c2:	464b      	mov	r3, r9
 80038c4:	f7fc fe08 	bl	80004d8 <__aeabi_dmul>
 80038c8:	4b24      	ldr	r3, [pc, #144]	; (800395c <_strtod_l+0x57c>)
 80038ca:	460a      	mov	r2, r1
 80038cc:	400b      	ands	r3, r1
 80038ce:	4927      	ldr	r1, [pc, #156]	; (800396c <_strtod_l+0x58c>)
 80038d0:	4680      	mov	r8, r0
 80038d2:	428b      	cmp	r3, r1
 80038d4:	d8be      	bhi.n	8003854 <_strtod_l+0x474>
 80038d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80038da:	428b      	cmp	r3, r1
 80038dc:	bf86      	itte	hi
 80038de:	f04f 38ff 	movhi.w	r8, #4294967295
 80038e2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8003970 <_strtod_l+0x590>
 80038e6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80038ea:	2300      	movs	r3, #0
 80038ec:	9305      	str	r3, [sp, #20]
 80038ee:	e07b      	b.n	80039e8 <_strtod_l+0x608>
 80038f0:	07ea      	lsls	r2, r5, #31
 80038f2:	d505      	bpl.n	8003900 <_strtod_l+0x520>
 80038f4:	9b05      	ldr	r3, [sp, #20]
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f7fc fded 	bl	80004d8 <__aeabi_dmul>
 80038fe:	2301      	movs	r3, #1
 8003900:	9a05      	ldr	r2, [sp, #20]
 8003902:	f10a 0a01 	add.w	sl, sl, #1
 8003906:	3208      	adds	r2, #8
 8003908:	106d      	asrs	r5, r5, #1
 800390a:	9205      	str	r2, [sp, #20]
 800390c:	e7cc      	b.n	80038a8 <_strtod_l+0x4c8>
 800390e:	d0ec      	beq.n	80038ea <_strtod_l+0x50a>
 8003910:	426d      	negs	r5, r5
 8003912:	f015 020f 	ands.w	r2, r5, #15
 8003916:	d00a      	beq.n	800392e <_strtod_l+0x54e>
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <_strtod_l+0x584>)
 800391a:	4640      	mov	r0, r8
 800391c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003920:	4649      	mov	r1, r9
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f7fc ff01 	bl	800072c <__aeabi_ddiv>
 800392a:	4680      	mov	r8, r0
 800392c:	4689      	mov	r9, r1
 800392e:	112d      	asrs	r5, r5, #4
 8003930:	d0db      	beq.n	80038ea <_strtod_l+0x50a>
 8003932:	2d1f      	cmp	r5, #31
 8003934:	dd1e      	ble.n	8003974 <_strtod_l+0x594>
 8003936:	2600      	movs	r6, #0
 8003938:	46b3      	mov	fp, r6
 800393a:	960b      	str	r6, [sp, #44]	; 0x2c
 800393c:	9608      	str	r6, [sp, #32]
 800393e:	2322      	movs	r3, #34	; 0x22
 8003940:	f04f 0800 	mov.w	r8, #0
 8003944:	f04f 0900 	mov.w	r9, #0
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	e78d      	b.n	8003868 <_strtod_l+0x488>
 800394c:	08007ace 	.word	0x08007ace
 8003950:	08007984 	.word	0x08007984
 8003954:	08007ac6 	.word	0x08007ac6
 8003958:	08007b05 	.word	0x08007b05
 800395c:	7ff00000 	.word	0x7ff00000
 8003960:	08007d90 	.word	0x08007d90
 8003964:	08007c70 	.word	0x08007c70
 8003968:	08007c48 	.word	0x08007c48
 800396c:	7ca00000 	.word	0x7ca00000
 8003970:	7fefffff 	.word	0x7fefffff
 8003974:	f015 0310 	ands.w	r3, r5, #16
 8003978:	bf18      	it	ne
 800397a:	236a      	movne	r3, #106	; 0x6a
 800397c:	4640      	mov	r0, r8
 800397e:	9305      	str	r3, [sp, #20]
 8003980:	4649      	mov	r1, r9
 8003982:	2300      	movs	r3, #0
 8003984:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8003c50 <_strtod_l+0x870>
 8003988:	07ea      	lsls	r2, r5, #31
 800398a:	d504      	bpl.n	8003996 <_strtod_l+0x5b6>
 800398c:	e9da 2300 	ldrd	r2, r3, [sl]
 8003990:	f7fc fda2 	bl	80004d8 <__aeabi_dmul>
 8003994:	2301      	movs	r3, #1
 8003996:	106d      	asrs	r5, r5, #1
 8003998:	f10a 0a08 	add.w	sl, sl, #8
 800399c:	d1f4      	bne.n	8003988 <_strtod_l+0x5a8>
 800399e:	b10b      	cbz	r3, 80039a4 <_strtod_l+0x5c4>
 80039a0:	4680      	mov	r8, r0
 80039a2:	4689      	mov	r9, r1
 80039a4:	9b05      	ldr	r3, [sp, #20]
 80039a6:	b1bb      	cbz	r3, 80039d8 <_strtod_l+0x5f8>
 80039a8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80039ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	4649      	mov	r1, r9
 80039b4:	dd10      	ble.n	80039d8 <_strtod_l+0x5f8>
 80039b6:	2b1f      	cmp	r3, #31
 80039b8:	f340 8128 	ble.w	8003c0c <_strtod_l+0x82c>
 80039bc:	2b34      	cmp	r3, #52	; 0x34
 80039be:	bfd8      	it	le
 80039c0:	f04f 33ff 	movle.w	r3, #4294967295
 80039c4:	f04f 0800 	mov.w	r8, #0
 80039c8:	bfcf      	iteee	gt
 80039ca:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80039ce:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80039d2:	4093      	lslle	r3, r2
 80039d4:	ea03 0901 	andle.w	r9, r3, r1
 80039d8:	2200      	movs	r2, #0
 80039da:	2300      	movs	r3, #0
 80039dc:	4640      	mov	r0, r8
 80039de:	4649      	mov	r1, r9
 80039e0:	f7fc ffe2 	bl	80009a8 <__aeabi_dcmpeq>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d1a6      	bne.n	8003936 <_strtod_l+0x556>
 80039e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039ea:	465a      	mov	r2, fp
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	4620      	mov	r0, r4
 80039f0:	4633      	mov	r3, r6
 80039f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039f4:	f002 fe00 	bl	80065f8 <__s2b>
 80039f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80039fa:	2800      	cmp	r0, #0
 80039fc:	f43f af2a 	beq.w	8003854 <_strtod_l+0x474>
 8003a00:	2600      	movs	r6, #0
 8003a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a04:	9b08      	ldr	r3, [sp, #32]
 8003a06:	2a00      	cmp	r2, #0
 8003a08:	eba3 0307 	sub.w	r3, r3, r7
 8003a0c:	bfa8      	it	ge
 8003a0e:	2300      	movge	r3, #0
 8003a10:	46b3      	mov	fp, r6
 8003a12:	9312      	str	r3, [sp, #72]	; 0x48
 8003a14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003a18:	9316      	str	r3, [sp, #88]	; 0x58
 8003a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	f002 fd42 	bl	80064a8 <_Balloc>
 8003a24:	9008      	str	r0, [sp, #32]
 8003a26:	2800      	cmp	r0, #0
 8003a28:	f43f af18 	beq.w	800385c <_strtod_l+0x47c>
 8003a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a2e:	300c      	adds	r0, #12
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	f103 010c 	add.w	r1, r3, #12
 8003a36:	3202      	adds	r2, #2
 8003a38:	0092      	lsls	r2, r2, #2
 8003a3a:	f001 faf9 	bl	8005030 <memcpy>
 8003a3e:	ab1c      	add	r3, sp, #112	; 0x70
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	ab1b      	add	r3, sp, #108	; 0x6c
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	4642      	mov	r2, r8
 8003a48:	464b      	mov	r3, r9
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8003a50:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8003a54:	f003 f8fc 	bl	8006c50 <__d2b>
 8003a58:	901a      	str	r0, [sp, #104]	; 0x68
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	f43f aefe 	beq.w	800385c <_strtod_l+0x47c>
 8003a60:	2101      	movs	r1, #1
 8003a62:	4620      	mov	r0, r4
 8003a64:	f002 fe60 	bl	8006728 <__i2b>
 8003a68:	4683      	mov	fp, r0
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	f43f aef6 	beq.w	800385c <_strtod_l+0x47c>
 8003a70:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8003a72:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	bfab      	itete	ge
 8003a78:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8003a7a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003a7c:	eb07 0a03 	addge.w	sl, r7, r3
 8003a80:	1bdd      	sublt	r5, r3, r7
 8003a82:	9b05      	ldr	r3, [sp, #20]
 8003a84:	bfa8      	it	ge
 8003a86:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8003a88:	eba7 0703 	sub.w	r7, r7, r3
 8003a8c:	4417      	add	r7, r2
 8003a8e:	4b71      	ldr	r3, [pc, #452]	; (8003c54 <_strtod_l+0x874>)
 8003a90:	f107 37ff 	add.w	r7, r7, #4294967295
 8003a94:	bfb8      	it	lt
 8003a96:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8003a9a:	429f      	cmp	r7, r3
 8003a9c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003aa0:	f280 80c7 	bge.w	8003c32 <_strtod_l+0x852>
 8003aa4:	1bdb      	subs	r3, r3, r7
 8003aa6:	2b1f      	cmp	r3, #31
 8003aa8:	f04f 0101 	mov.w	r1, #1
 8003aac:	eba2 0203 	sub.w	r2, r2, r3
 8003ab0:	f300 80b3 	bgt.w	8003c1a <_strtod_l+0x83a>
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	9313      	str	r3, [sp, #76]	; 0x4c
 8003aba:	2300      	movs	r3, #0
 8003abc:	9310      	str	r3, [sp, #64]	; 0x40
 8003abe:	eb0a 0702 	add.w	r7, sl, r2
 8003ac2:	9b05      	ldr	r3, [sp, #20]
 8003ac4:	45ba      	cmp	sl, r7
 8003ac6:	4415      	add	r5, r2
 8003ac8:	441d      	add	r5, r3
 8003aca:	4653      	mov	r3, sl
 8003acc:	bfa8      	it	ge
 8003ace:	463b      	movge	r3, r7
 8003ad0:	42ab      	cmp	r3, r5
 8003ad2:	bfa8      	it	ge
 8003ad4:	462b      	movge	r3, r5
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bfc2      	ittt	gt
 8003ada:	1aff      	subgt	r7, r7, r3
 8003adc:	1aed      	subgt	r5, r5, r3
 8003ade:	ebaa 0a03 	subgt.w	sl, sl, r3
 8003ae2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	dd17      	ble.n	8003b18 <_strtod_l+0x738>
 8003ae8:	4659      	mov	r1, fp
 8003aea:	461a      	mov	r2, r3
 8003aec:	4620      	mov	r0, r4
 8003aee:	f002 fed9 	bl	80068a4 <__pow5mult>
 8003af2:	4683      	mov	fp, r0
 8003af4:	2800      	cmp	r0, #0
 8003af6:	f43f aeb1 	beq.w	800385c <_strtod_l+0x47c>
 8003afa:	4601      	mov	r1, r0
 8003afc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003afe:	4620      	mov	r0, r4
 8003b00:	f002 fe28 	bl	8006754 <__multiply>
 8003b04:	900a      	str	r0, [sp, #40]	; 0x28
 8003b06:	2800      	cmp	r0, #0
 8003b08:	f43f aea8 	beq.w	800385c <_strtod_l+0x47c>
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003b10:	f002 fd0a 	bl	8006528 <_Bfree>
 8003b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b16:	931a      	str	r3, [sp, #104]	; 0x68
 8003b18:	2f00      	cmp	r7, #0
 8003b1a:	f300 808f 	bgt.w	8003c3c <_strtod_l+0x85c>
 8003b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	dd08      	ble.n	8003b36 <_strtod_l+0x756>
 8003b24:	4620      	mov	r0, r4
 8003b26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b28:	9908      	ldr	r1, [sp, #32]
 8003b2a:	f002 febb 	bl	80068a4 <__pow5mult>
 8003b2e:	9008      	str	r0, [sp, #32]
 8003b30:	2800      	cmp	r0, #0
 8003b32:	f43f ae93 	beq.w	800385c <_strtod_l+0x47c>
 8003b36:	2d00      	cmp	r5, #0
 8003b38:	dd08      	ble.n	8003b4c <_strtod_l+0x76c>
 8003b3a:	462a      	mov	r2, r5
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	9908      	ldr	r1, [sp, #32]
 8003b40:	f002 ff0a 	bl	8006958 <__lshift>
 8003b44:	9008      	str	r0, [sp, #32]
 8003b46:	2800      	cmp	r0, #0
 8003b48:	f43f ae88 	beq.w	800385c <_strtod_l+0x47c>
 8003b4c:	f1ba 0f00 	cmp.w	sl, #0
 8003b50:	dd08      	ble.n	8003b64 <_strtod_l+0x784>
 8003b52:	4659      	mov	r1, fp
 8003b54:	4652      	mov	r2, sl
 8003b56:	4620      	mov	r0, r4
 8003b58:	f002 fefe 	bl	8006958 <__lshift>
 8003b5c:	4683      	mov	fp, r0
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	f43f ae7c 	beq.w	800385c <_strtod_l+0x47c>
 8003b64:	4620      	mov	r0, r4
 8003b66:	9a08      	ldr	r2, [sp, #32]
 8003b68:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003b6a:	f002 ff7d 	bl	8006a68 <__mdiff>
 8003b6e:	4606      	mov	r6, r0
 8003b70:	2800      	cmp	r0, #0
 8003b72:	f43f ae73 	beq.w	800385c <_strtod_l+0x47c>
 8003b76:	2500      	movs	r5, #0
 8003b78:	68c3      	ldr	r3, [r0, #12]
 8003b7a:	4659      	mov	r1, fp
 8003b7c:	60c5      	str	r5, [r0, #12]
 8003b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8003b80:	f002 ff56 	bl	8006a30 <__mcmp>
 8003b84:	42a8      	cmp	r0, r5
 8003b86:	da6b      	bge.n	8003c60 <_strtod_l+0x880>
 8003b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b8a:	ea53 0308 	orrs.w	r3, r3, r8
 8003b8e:	f040 808f 	bne.w	8003cb0 <_strtod_l+0x8d0>
 8003b92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 808a 	bne.w	8003cb0 <_strtod_l+0x8d0>
 8003b9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ba0:	0d1b      	lsrs	r3, r3, #20
 8003ba2:	051b      	lsls	r3, r3, #20
 8003ba4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003ba8:	f240 8082 	bls.w	8003cb0 <_strtod_l+0x8d0>
 8003bac:	6973      	ldr	r3, [r6, #20]
 8003bae:	b913      	cbnz	r3, 8003bb6 <_strtod_l+0x7d6>
 8003bb0:	6933      	ldr	r3, [r6, #16]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	dd7c      	ble.n	8003cb0 <_strtod_l+0x8d0>
 8003bb6:	4631      	mov	r1, r6
 8003bb8:	2201      	movs	r2, #1
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f002 fecc 	bl	8006958 <__lshift>
 8003bc0:	4659      	mov	r1, fp
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	f002 ff34 	bl	8006a30 <__mcmp>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	dd71      	ble.n	8003cb0 <_strtod_l+0x8d0>
 8003bcc:	9905      	ldr	r1, [sp, #20]
 8003bce:	464b      	mov	r3, r9
 8003bd0:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <_strtod_l+0x878>)
 8003bd2:	2900      	cmp	r1, #0
 8003bd4:	f000 808d 	beq.w	8003cf2 <_strtod_l+0x912>
 8003bd8:	ea02 0109 	and.w	r1, r2, r9
 8003bdc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003be0:	f300 8087 	bgt.w	8003cf2 <_strtod_l+0x912>
 8003be4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003be8:	f77f aea9 	ble.w	800393e <_strtod_l+0x55e>
 8003bec:	4640      	mov	r0, r8
 8003bee:	4649      	mov	r1, r9
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <_strtod_l+0x87c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f7fc fc70 	bl	80004d8 <__aeabi_dmul>
 8003bf8:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <_strtod_l+0x878>)
 8003bfa:	4680      	mov	r8, r0
 8003bfc:	400b      	ands	r3, r1
 8003bfe:	4689      	mov	r9, r1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f47f ae35 	bne.w	8003870 <_strtod_l+0x490>
 8003c06:	2322      	movs	r3, #34	; 0x22
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	e631      	b.n	8003870 <_strtod_l+0x490>
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	ea03 0808 	and.w	r8, r3, r8
 8003c18:	e6de      	b.n	80039d8 <_strtod_l+0x5f8>
 8003c1a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8003c1e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8003c22:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8003c26:	37e2      	adds	r7, #226	; 0xe2
 8003c28:	fa01 f307 	lsl.w	r3, r1, r7
 8003c2c:	9310      	str	r3, [sp, #64]	; 0x40
 8003c2e:	9113      	str	r1, [sp, #76]	; 0x4c
 8003c30:	e745      	b.n	8003abe <_strtod_l+0x6de>
 8003c32:	2300      	movs	r3, #0
 8003c34:	9310      	str	r3, [sp, #64]	; 0x40
 8003c36:	2301      	movs	r3, #1
 8003c38:	9313      	str	r3, [sp, #76]	; 0x4c
 8003c3a:	e740      	b.n	8003abe <_strtod_l+0x6de>
 8003c3c:	463a      	mov	r2, r7
 8003c3e:	4620      	mov	r0, r4
 8003c40:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003c42:	f002 fe89 	bl	8006958 <__lshift>
 8003c46:	901a      	str	r0, [sp, #104]	; 0x68
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	f47f af68 	bne.w	8003b1e <_strtod_l+0x73e>
 8003c4e:	e605      	b.n	800385c <_strtod_l+0x47c>
 8003c50:	08007998 	.word	0x08007998
 8003c54:	fffffc02 	.word	0xfffffc02
 8003c58:	7ff00000 	.word	0x7ff00000
 8003c5c:	39500000 	.word	0x39500000
 8003c60:	46ca      	mov	sl, r9
 8003c62:	d165      	bne.n	8003d30 <_strtod_l+0x950>
 8003c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003c6a:	b352      	cbz	r2, 8003cc2 <_strtod_l+0x8e2>
 8003c6c:	4a9e      	ldr	r2, [pc, #632]	; (8003ee8 <_strtod_l+0xb08>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d12a      	bne.n	8003cc8 <_strtod_l+0x8e8>
 8003c72:	9b05      	ldr	r3, [sp, #20]
 8003c74:	4641      	mov	r1, r8
 8003c76:	b1fb      	cbz	r3, 8003cb8 <_strtod_l+0x8d8>
 8003c78:	4b9c      	ldr	r3, [pc, #624]	; (8003eec <_strtod_l+0xb0c>)
 8003c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7e:	ea09 0303 	and.w	r3, r9, r3
 8003c82:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003c86:	d81a      	bhi.n	8003cbe <_strtod_l+0x8de>
 8003c88:	0d1b      	lsrs	r3, r3, #20
 8003c8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	4299      	cmp	r1, r3
 8003c94:	d118      	bne.n	8003cc8 <_strtod_l+0x8e8>
 8003c96:	4b96      	ldr	r3, [pc, #600]	; (8003ef0 <_strtod_l+0xb10>)
 8003c98:	459a      	cmp	sl, r3
 8003c9a:	d102      	bne.n	8003ca2 <_strtod_l+0x8c2>
 8003c9c:	3101      	adds	r1, #1
 8003c9e:	f43f addd 	beq.w	800385c <_strtod_l+0x47c>
 8003ca2:	f04f 0800 	mov.w	r8, #0
 8003ca6:	4b91      	ldr	r3, [pc, #580]	; (8003eec <_strtod_l+0xb0c>)
 8003ca8:	ea0a 0303 	and.w	r3, sl, r3
 8003cac:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8003cb0:	9b05      	ldr	r3, [sp, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d19a      	bne.n	8003bec <_strtod_l+0x80c>
 8003cb6:	e5db      	b.n	8003870 <_strtod_l+0x490>
 8003cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbc:	e7e9      	b.n	8003c92 <_strtod_l+0x8b2>
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	e7e7      	b.n	8003c92 <_strtod_l+0x8b2>
 8003cc2:	ea53 0308 	orrs.w	r3, r3, r8
 8003cc6:	d081      	beq.n	8003bcc <_strtod_l+0x7ec>
 8003cc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003cca:	b1e3      	cbz	r3, 8003d06 <_strtod_l+0x926>
 8003ccc:	ea13 0f0a 	tst.w	r3, sl
 8003cd0:	d0ee      	beq.n	8003cb0 <_strtod_l+0x8d0>
 8003cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cd4:	4640      	mov	r0, r8
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	9a05      	ldr	r2, [sp, #20]
 8003cda:	b1c3      	cbz	r3, 8003d0e <_strtod_l+0x92e>
 8003cdc:	f7ff fb5f 	bl	800339e <sulp>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ce6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003ce8:	f7fc fa40 	bl	800016c <__adddf3>
 8003cec:	4680      	mov	r8, r0
 8003cee:	4689      	mov	r9, r1
 8003cf0:	e7de      	b.n	8003cb0 <_strtod_l+0x8d0>
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003cf8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8003cfc:	f04f 38ff 	mov.w	r8, #4294967295
 8003d00:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8003d04:	e7d4      	b.n	8003cb0 <_strtod_l+0x8d0>
 8003d06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d08:	ea13 0f08 	tst.w	r3, r8
 8003d0c:	e7e0      	b.n	8003cd0 <_strtod_l+0x8f0>
 8003d0e:	f7ff fb46 	bl	800339e <sulp>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003d1a:	f7fc fa25 	bl	8000168 <__aeabi_dsub>
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2300      	movs	r3, #0
 8003d22:	4680      	mov	r8, r0
 8003d24:	4689      	mov	r9, r1
 8003d26:	f7fc fe3f 	bl	80009a8 <__aeabi_dcmpeq>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d0c0      	beq.n	8003cb0 <_strtod_l+0x8d0>
 8003d2e:	e606      	b.n	800393e <_strtod_l+0x55e>
 8003d30:	4659      	mov	r1, fp
 8003d32:	4630      	mov	r0, r6
 8003d34:	f002 ffe2 	bl	8006cfc <__ratio>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003d40:	2200      	movs	r2, #0
 8003d42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d46:	f7fc fe43 	bl	80009d0 <__aeabi_dcmple>
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d06f      	beq.n	8003e2e <_strtod_l+0xa4e>
 8003d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d17c      	bne.n	8003e4e <_strtod_l+0xa6e>
 8003d54:	f1b8 0f00 	cmp.w	r8, #0
 8003d58:	d159      	bne.n	8003e0e <_strtod_l+0xa2e>
 8003d5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d17b      	bne.n	8003e5a <_strtod_l+0xa7a>
 8003d62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d66:	2200      	movs	r2, #0
 8003d68:	4b62      	ldr	r3, [pc, #392]	; (8003ef4 <_strtod_l+0xb14>)
 8003d6a:	f7fc fe27 	bl	80009bc <__aeabi_dcmplt>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d15a      	bne.n	8003e28 <_strtod_l+0xa48>
 8003d72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d76:	2200      	movs	r2, #0
 8003d78:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <_strtod_l+0xb18>)
 8003d7a:	f7fc fbad 	bl	80004d8 <__aeabi_dmul>
 8003d7e:	4605      	mov	r5, r0
 8003d80:	460f      	mov	r7, r1
 8003d82:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8003d86:	9506      	str	r5, [sp, #24]
 8003d88:	9307      	str	r3, [sp, #28]
 8003d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003d92:	4b56      	ldr	r3, [pc, #344]	; (8003eec <_strtod_l+0xb0c>)
 8003d94:	4a55      	ldr	r2, [pc, #340]	; (8003eec <_strtod_l+0xb0c>)
 8003d96:	ea0a 0303 	and.w	r3, sl, r3
 8003d9a:	9313      	str	r3, [sp, #76]	; 0x4c
 8003d9c:	4b57      	ldr	r3, [pc, #348]	; (8003efc <_strtod_l+0xb1c>)
 8003d9e:	ea0a 0202 	and.w	r2, sl, r2
 8003da2:	429a      	cmp	r2, r3
 8003da4:	f040 80b0 	bne.w	8003f08 <_strtod_l+0xb28>
 8003da8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8003dac:	4640      	mov	r0, r8
 8003dae:	4649      	mov	r1, r9
 8003db0:	f002 fee6 	bl	8006b80 <__ulp>
 8003db4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003db8:	f7fc fb8e 	bl	80004d8 <__aeabi_dmul>
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	f7fc f9d4 	bl	800016c <__adddf3>
 8003dc4:	f8df a124 	ldr.w	sl, [pc, #292]	; 8003eec <_strtod_l+0xb0c>
 8003dc8:	4a4d      	ldr	r2, [pc, #308]	; (8003f00 <_strtod_l+0xb20>)
 8003dca:	ea01 0a0a 	and.w	sl, r1, sl
 8003dce:	4592      	cmp	sl, r2
 8003dd0:	4680      	mov	r8, r0
 8003dd2:	d948      	bls.n	8003e66 <_strtod_l+0xa86>
 8003dd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003dd6:	4b46      	ldr	r3, [pc, #280]	; (8003ef0 <_strtod_l+0xb10>)
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d103      	bne.n	8003de4 <_strtod_l+0xa04>
 8003ddc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003dde:	3301      	adds	r3, #1
 8003de0:	f43f ad3c 	beq.w	800385c <_strtod_l+0x47c>
 8003de4:	f04f 38ff 	mov.w	r8, #4294967295
 8003de8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8003ef0 <_strtod_l+0xb10>
 8003dec:	4620      	mov	r0, r4
 8003dee:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003df0:	f002 fb9a 	bl	8006528 <_Bfree>
 8003df4:	4620      	mov	r0, r4
 8003df6:	9908      	ldr	r1, [sp, #32]
 8003df8:	f002 fb96 	bl	8006528 <_Bfree>
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f002 fb92 	bl	8006528 <_Bfree>
 8003e04:	4631      	mov	r1, r6
 8003e06:	4620      	mov	r0, r4
 8003e08:	f002 fb8e 	bl	8006528 <_Bfree>
 8003e0c:	e605      	b.n	8003a1a <_strtod_l+0x63a>
 8003e0e:	f1b8 0f01 	cmp.w	r8, #1
 8003e12:	d103      	bne.n	8003e1c <_strtod_l+0xa3c>
 8003e14:	f1b9 0f00 	cmp.w	r9, #0
 8003e18:	f43f ad91 	beq.w	800393e <_strtod_l+0x55e>
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4b39      	ldr	r3, [pc, #228]	; (8003f04 <_strtod_l+0xb24>)
 8003e20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003e22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e26:	e016      	b.n	8003e56 <_strtod_l+0xa76>
 8003e28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003e2a:	4f33      	ldr	r7, [pc, #204]	; (8003ef8 <_strtod_l+0xb18>)
 8003e2c:	e7a9      	b.n	8003d82 <_strtod_l+0x9a2>
 8003e2e:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <_strtod_l+0xb18>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e36:	f7fc fb4f 	bl	80004d8 <__aeabi_dmul>
 8003e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e3c:	4605      	mov	r5, r0
 8003e3e:	460f      	mov	r7, r1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d09e      	beq.n	8003d82 <_strtod_l+0x9a2>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e4c:	e79d      	b.n	8003d8a <_strtod_l+0x9aa>
 8003e4e:	2200      	movs	r2, #0
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <_strtod_l+0xb14>)
 8003e52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e56:	4f27      	ldr	r7, [pc, #156]	; (8003ef4 <_strtod_l+0xb14>)
 8003e58:	e797      	b.n	8003d8a <_strtod_l+0x9aa>
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <_strtod_l+0xb24>)
 8003e5e:	4645      	mov	r5, r8
 8003e60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e64:	e7f7      	b.n	8003e56 <_strtod_l+0xa76>
 8003e66:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8003e6a:	9b05      	ldr	r3, [sp, #20]
 8003e6c:	46ca      	mov	sl, r9
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1bc      	bne.n	8003dec <_strtod_l+0xa0c>
 8003e72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003e78:	0d1b      	lsrs	r3, r3, #20
 8003e7a:	051b      	lsls	r3, r3, #20
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d1b5      	bne.n	8003dec <_strtod_l+0xa0c>
 8003e80:	4628      	mov	r0, r5
 8003e82:	4639      	mov	r1, r7
 8003e84:	f7fc fe70 	bl	8000b68 <__aeabi_d2lz>
 8003e88:	f7fc faf8 	bl	800047c <__aeabi_l2d>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4628      	mov	r0, r5
 8003e92:	4639      	mov	r1, r7
 8003e94:	f7fc f968 	bl	8000168 <__aeabi_dsub>
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8003ea0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ea6:	ea4a 0a08 	orr.w	sl, sl, r8
 8003eaa:	ea5a 0a03 	orrs.w	sl, sl, r3
 8003eae:	d06c      	beq.n	8003f8a <_strtod_l+0xbaa>
 8003eb0:	a309      	add	r3, pc, #36	; (adr r3, 8003ed8 <_strtod_l+0xaf8>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f7fc fd81 	bl	80009bc <__aeabi_dcmplt>
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	f47f acd8 	bne.w	8003870 <_strtod_l+0x490>
 8003ec0:	a307      	add	r3, pc, #28	; (adr r3, 8003ee0 <_strtod_l+0xb00>)
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003eca:	f7fc fd95 	bl	80009f8 <__aeabi_dcmpgt>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d08c      	beq.n	8003dec <_strtod_l+0xa0c>
 8003ed2:	e4cd      	b.n	8003870 <_strtod_l+0x490>
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	94a03595 	.word	0x94a03595
 8003edc:	3fdfffff 	.word	0x3fdfffff
 8003ee0:	35afe535 	.word	0x35afe535
 8003ee4:	3fe00000 	.word	0x3fe00000
 8003ee8:	000fffff 	.word	0x000fffff
 8003eec:	7ff00000 	.word	0x7ff00000
 8003ef0:	7fefffff 	.word	0x7fefffff
 8003ef4:	3ff00000 	.word	0x3ff00000
 8003ef8:	3fe00000 	.word	0x3fe00000
 8003efc:	7fe00000 	.word	0x7fe00000
 8003f00:	7c9fffff 	.word	0x7c9fffff
 8003f04:	bff00000 	.word	0xbff00000
 8003f08:	9b05      	ldr	r3, [sp, #20]
 8003f0a:	b333      	cbz	r3, 8003f5a <_strtod_l+0xb7a>
 8003f0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003f12:	d822      	bhi.n	8003f5a <_strtod_l+0xb7a>
 8003f14:	a328      	add	r3, pc, #160	; (adr r3, 8003fb8 <_strtod_l+0xbd8>)
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	4639      	mov	r1, r7
 8003f1e:	f7fc fd57 	bl	80009d0 <__aeabi_dcmple>
 8003f22:	b1a0      	cbz	r0, 8003f4e <_strtod_l+0xb6e>
 8003f24:	4639      	mov	r1, r7
 8003f26:	4628      	mov	r0, r5
 8003f28:	f7fc fdae 	bl	8000a88 <__aeabi_d2uiz>
 8003f2c:	2801      	cmp	r0, #1
 8003f2e:	bf38      	it	cc
 8003f30:	2001      	movcc	r0, #1
 8003f32:	f7fc fa57 	bl	80003e4 <__aeabi_ui2d>
 8003f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f38:	4605      	mov	r5, r0
 8003f3a:	460f      	mov	r7, r1
 8003f3c:	bb03      	cbnz	r3, 8003f80 <_strtod_l+0xba0>
 8003f3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f42:	9014      	str	r0, [sp, #80]	; 0x50
 8003f44:	9315      	str	r3, [sp, #84]	; 0x54
 8003f46:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003f4a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003f4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003f52:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	9311      	str	r3, [sp, #68]	; 0x44
 8003f5a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003f5e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8003f62:	f002 fe0d 	bl	8006b80 <__ulp>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	f7fc fab3 	bl	80004d8 <__aeabi_dmul>
 8003f72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f76:	f7fc f8f9 	bl	800016c <__adddf3>
 8003f7a:	4680      	mov	r8, r0
 8003f7c:	4689      	mov	r9, r1
 8003f7e:	e774      	b.n	8003e6a <_strtod_l+0xa8a>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003f88:	e7dd      	b.n	8003f46 <_strtod_l+0xb66>
 8003f8a:	a30d      	add	r3, pc, #52	; (adr r3, 8003fc0 <_strtod_l+0xbe0>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f7fc fd14 	bl	80009bc <__aeabi_dcmplt>
 8003f94:	e79b      	b.n	8003ece <_strtod_l+0xaee>
 8003f96:	2300      	movs	r3, #0
 8003f98:	930e      	str	r3, [sp, #56]	; 0x38
 8003f9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	f7ff ba5b 	b.w	800345a <_strtod_l+0x7a>
 8003fa4:	2a65      	cmp	r2, #101	; 0x65
 8003fa6:	f43f ab52 	beq.w	800364e <_strtod_l+0x26e>
 8003faa:	2a45      	cmp	r2, #69	; 0x45
 8003fac:	f43f ab4f 	beq.w	800364e <_strtod_l+0x26e>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f7ff bb87 	b.w	80036c4 <_strtod_l+0x2e4>
 8003fb6:	bf00      	nop
 8003fb8:	ffc00000 	.word	0xffc00000
 8003fbc:	41dfffff 	.word	0x41dfffff
 8003fc0:	94a03595 	.word	0x94a03595
 8003fc4:	3fcfffff 	.word	0x3fcfffff

08003fc8 <_strtod_r>:
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <_strtod_r+0x8>)
 8003fca:	f7ff ba09 	b.w	80033e0 <_strtod_l>
 8003fce:	bf00      	nop
 8003fd0:	20000018 	.word	0x20000018

08003fd4 <__cvt>:
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fda:	461f      	mov	r7, r3
 8003fdc:	bfbb      	ittet	lt
 8003fde:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003fe2:	461f      	movlt	r7, r3
 8003fe4:	2300      	movge	r3, #0
 8003fe6:	232d      	movlt	r3, #45	; 0x2d
 8003fe8:	b088      	sub	sp, #32
 8003fea:	4614      	mov	r4, r2
 8003fec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003fee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003ff0:	7013      	strb	r3, [r2, #0]
 8003ff2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003ff4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003ff8:	f023 0820 	bic.w	r8, r3, #32
 8003ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004000:	d005      	beq.n	800400e <__cvt+0x3a>
 8004002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004006:	d100      	bne.n	800400a <__cvt+0x36>
 8004008:	3501      	adds	r5, #1
 800400a:	2302      	movs	r3, #2
 800400c:	e000      	b.n	8004010 <__cvt+0x3c>
 800400e:	2303      	movs	r3, #3
 8004010:	aa07      	add	r2, sp, #28
 8004012:	9204      	str	r2, [sp, #16]
 8004014:	aa06      	add	r2, sp, #24
 8004016:	e9cd a202 	strd	sl, r2, [sp, #8]
 800401a:	e9cd 3500 	strd	r3, r5, [sp]
 800401e:	4622      	mov	r2, r4
 8004020:	463b      	mov	r3, r7
 8004022:	f001 f8a9 	bl	8005178 <_dtoa_r>
 8004026:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800402a:	4606      	mov	r6, r0
 800402c:	d102      	bne.n	8004034 <__cvt+0x60>
 800402e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004030:	07db      	lsls	r3, r3, #31
 8004032:	d522      	bpl.n	800407a <__cvt+0xa6>
 8004034:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004038:	eb06 0905 	add.w	r9, r6, r5
 800403c:	d110      	bne.n	8004060 <__cvt+0x8c>
 800403e:	7833      	ldrb	r3, [r6, #0]
 8004040:	2b30      	cmp	r3, #48	; 0x30
 8004042:	d10a      	bne.n	800405a <__cvt+0x86>
 8004044:	2200      	movs	r2, #0
 8004046:	2300      	movs	r3, #0
 8004048:	4620      	mov	r0, r4
 800404a:	4639      	mov	r1, r7
 800404c:	f7fc fcac 	bl	80009a8 <__aeabi_dcmpeq>
 8004050:	b918      	cbnz	r0, 800405a <__cvt+0x86>
 8004052:	f1c5 0501 	rsb	r5, r5, #1
 8004056:	f8ca 5000 	str.w	r5, [sl]
 800405a:	f8da 3000 	ldr.w	r3, [sl]
 800405e:	4499      	add	r9, r3
 8004060:	2200      	movs	r2, #0
 8004062:	2300      	movs	r3, #0
 8004064:	4620      	mov	r0, r4
 8004066:	4639      	mov	r1, r7
 8004068:	f7fc fc9e 	bl	80009a8 <__aeabi_dcmpeq>
 800406c:	b108      	cbz	r0, 8004072 <__cvt+0x9e>
 800406e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004072:	2230      	movs	r2, #48	; 0x30
 8004074:	9b07      	ldr	r3, [sp, #28]
 8004076:	454b      	cmp	r3, r9
 8004078:	d307      	bcc.n	800408a <__cvt+0xb6>
 800407a:	4630      	mov	r0, r6
 800407c:	9b07      	ldr	r3, [sp, #28]
 800407e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004080:	1b9b      	subs	r3, r3, r6
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	b008      	add	sp, #32
 8004086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408a:	1c59      	adds	r1, r3, #1
 800408c:	9107      	str	r1, [sp, #28]
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	e7f0      	b.n	8004074 <__cvt+0xa0>

08004092 <__exponent>:
 8004092:	4603      	mov	r3, r0
 8004094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004096:	2900      	cmp	r1, #0
 8004098:	f803 2b02 	strb.w	r2, [r3], #2
 800409c:	bfb6      	itet	lt
 800409e:	222d      	movlt	r2, #45	; 0x2d
 80040a0:	222b      	movge	r2, #43	; 0x2b
 80040a2:	4249      	neglt	r1, r1
 80040a4:	2909      	cmp	r1, #9
 80040a6:	7042      	strb	r2, [r0, #1]
 80040a8:	dd2a      	ble.n	8004100 <__exponent+0x6e>
 80040aa:	f10d 0207 	add.w	r2, sp, #7
 80040ae:	4617      	mov	r7, r2
 80040b0:	260a      	movs	r6, #10
 80040b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80040b6:	4694      	mov	ip, r2
 80040b8:	fb06 1415 	mls	r4, r6, r5, r1
 80040bc:	3430      	adds	r4, #48	; 0x30
 80040be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80040c2:	460c      	mov	r4, r1
 80040c4:	2c63      	cmp	r4, #99	; 0x63
 80040c6:	4629      	mov	r1, r5
 80040c8:	f102 32ff 	add.w	r2, r2, #4294967295
 80040cc:	dcf1      	bgt.n	80040b2 <__exponent+0x20>
 80040ce:	3130      	adds	r1, #48	; 0x30
 80040d0:	f1ac 0402 	sub.w	r4, ip, #2
 80040d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80040d8:	4622      	mov	r2, r4
 80040da:	1c41      	adds	r1, r0, #1
 80040dc:	42ba      	cmp	r2, r7
 80040de:	d30a      	bcc.n	80040f6 <__exponent+0x64>
 80040e0:	f10d 0209 	add.w	r2, sp, #9
 80040e4:	eba2 020c 	sub.w	r2, r2, ip
 80040e8:	42bc      	cmp	r4, r7
 80040ea:	bf88      	it	hi
 80040ec:	2200      	movhi	r2, #0
 80040ee:	4413      	add	r3, r2
 80040f0:	1a18      	subs	r0, r3, r0
 80040f2:	b003      	add	sp, #12
 80040f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80040fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80040fe:	e7ed      	b.n	80040dc <__exponent+0x4a>
 8004100:	2330      	movs	r3, #48	; 0x30
 8004102:	3130      	adds	r1, #48	; 0x30
 8004104:	7083      	strb	r3, [r0, #2]
 8004106:	70c1      	strb	r1, [r0, #3]
 8004108:	1d03      	adds	r3, r0, #4
 800410a:	e7f1      	b.n	80040f0 <__exponent+0x5e>

0800410c <_printf_float>:
 800410c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004110:	b091      	sub	sp, #68	; 0x44
 8004112:	460c      	mov	r4, r1
 8004114:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004118:	4616      	mov	r6, r2
 800411a:	461f      	mov	r7, r3
 800411c:	4605      	mov	r5, r0
 800411e:	f000 fef3 	bl	8004f08 <_localeconv_r>
 8004122:	6803      	ldr	r3, [r0, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	9309      	str	r3, [sp, #36]	; 0x24
 8004128:	f7fc f812 	bl	8000150 <strlen>
 800412c:	2300      	movs	r3, #0
 800412e:	930e      	str	r3, [sp, #56]	; 0x38
 8004130:	f8d8 3000 	ldr.w	r3, [r8]
 8004134:	900a      	str	r0, [sp, #40]	; 0x28
 8004136:	3307      	adds	r3, #7
 8004138:	f023 0307 	bic.w	r3, r3, #7
 800413c:	f103 0208 	add.w	r2, r3, #8
 8004140:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004144:	f8d4 b000 	ldr.w	fp, [r4]
 8004148:	f8c8 2000 	str.w	r2, [r8]
 800414c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004150:	4652      	mov	r2, sl
 8004152:	4643      	mov	r3, r8
 8004154:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004158:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800415c:	930b      	str	r3, [sp, #44]	; 0x2c
 800415e:	f04f 32ff 	mov.w	r2, #4294967295
 8004162:	4650      	mov	r0, sl
 8004164:	4b9c      	ldr	r3, [pc, #624]	; (80043d8 <_printf_float+0x2cc>)
 8004166:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004168:	f7fc fc50 	bl	8000a0c <__aeabi_dcmpun>
 800416c:	bb70      	cbnz	r0, 80041cc <_printf_float+0xc0>
 800416e:	f04f 32ff 	mov.w	r2, #4294967295
 8004172:	4650      	mov	r0, sl
 8004174:	4b98      	ldr	r3, [pc, #608]	; (80043d8 <_printf_float+0x2cc>)
 8004176:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004178:	f7fc fc2a 	bl	80009d0 <__aeabi_dcmple>
 800417c:	bb30      	cbnz	r0, 80041cc <_printf_float+0xc0>
 800417e:	2200      	movs	r2, #0
 8004180:	2300      	movs	r3, #0
 8004182:	4650      	mov	r0, sl
 8004184:	4641      	mov	r1, r8
 8004186:	f7fc fc19 	bl	80009bc <__aeabi_dcmplt>
 800418a:	b110      	cbz	r0, 8004192 <_printf_float+0x86>
 800418c:	232d      	movs	r3, #45	; 0x2d
 800418e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004192:	4a92      	ldr	r2, [pc, #584]	; (80043dc <_printf_float+0x2d0>)
 8004194:	4b92      	ldr	r3, [pc, #584]	; (80043e0 <_printf_float+0x2d4>)
 8004196:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800419a:	bf94      	ite	ls
 800419c:	4690      	movls	r8, r2
 800419e:	4698      	movhi	r8, r3
 80041a0:	2303      	movs	r3, #3
 80041a2:	f04f 0a00 	mov.w	sl, #0
 80041a6:	6123      	str	r3, [r4, #16]
 80041a8:	f02b 0304 	bic.w	r3, fp, #4
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	4633      	mov	r3, r6
 80041b0:	4621      	mov	r1, r4
 80041b2:	4628      	mov	r0, r5
 80041b4:	9700      	str	r7, [sp, #0]
 80041b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80041b8:	f000 f9d6 	bl	8004568 <_printf_common>
 80041bc:	3001      	adds	r0, #1
 80041be:	f040 8090 	bne.w	80042e2 <_printf_float+0x1d6>
 80041c2:	f04f 30ff 	mov.w	r0, #4294967295
 80041c6:	b011      	add	sp, #68	; 0x44
 80041c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041cc:	4652      	mov	r2, sl
 80041ce:	4643      	mov	r3, r8
 80041d0:	4650      	mov	r0, sl
 80041d2:	4641      	mov	r1, r8
 80041d4:	f7fc fc1a 	bl	8000a0c <__aeabi_dcmpun>
 80041d8:	b148      	cbz	r0, 80041ee <_printf_float+0xe2>
 80041da:	f1b8 0f00 	cmp.w	r8, #0
 80041de:	bfb8      	it	lt
 80041e0:	232d      	movlt	r3, #45	; 0x2d
 80041e2:	4a80      	ldr	r2, [pc, #512]	; (80043e4 <_printf_float+0x2d8>)
 80041e4:	bfb8      	it	lt
 80041e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041ea:	4b7f      	ldr	r3, [pc, #508]	; (80043e8 <_printf_float+0x2dc>)
 80041ec:	e7d3      	b.n	8004196 <_printf_float+0x8a>
 80041ee:	6863      	ldr	r3, [r4, #4]
 80041f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	d142      	bne.n	800427e <_printf_float+0x172>
 80041f8:	2306      	movs	r3, #6
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	9206      	str	r2, [sp, #24]
 8004200:	aa0e      	add	r2, sp, #56	; 0x38
 8004202:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004206:	aa0d      	add	r2, sp, #52	; 0x34
 8004208:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800420c:	9203      	str	r2, [sp, #12]
 800420e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004212:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	6863      	ldr	r3, [r4, #4]
 800421a:	4652      	mov	r2, sl
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	4628      	mov	r0, r5
 8004220:	4643      	mov	r3, r8
 8004222:	910b      	str	r1, [sp, #44]	; 0x2c
 8004224:	f7ff fed6 	bl	8003fd4 <__cvt>
 8004228:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800422a:	4680      	mov	r8, r0
 800422c:	2947      	cmp	r1, #71	; 0x47
 800422e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004230:	d108      	bne.n	8004244 <_printf_float+0x138>
 8004232:	1cc8      	adds	r0, r1, #3
 8004234:	db02      	blt.n	800423c <_printf_float+0x130>
 8004236:	6863      	ldr	r3, [r4, #4]
 8004238:	4299      	cmp	r1, r3
 800423a:	dd40      	ble.n	80042be <_printf_float+0x1b2>
 800423c:	f1a9 0902 	sub.w	r9, r9, #2
 8004240:	fa5f f989 	uxtb.w	r9, r9
 8004244:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004248:	d81f      	bhi.n	800428a <_printf_float+0x17e>
 800424a:	464a      	mov	r2, r9
 800424c:	3901      	subs	r1, #1
 800424e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004252:	910d      	str	r1, [sp, #52]	; 0x34
 8004254:	f7ff ff1d 	bl	8004092 <__exponent>
 8004258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800425a:	4682      	mov	sl, r0
 800425c:	1813      	adds	r3, r2, r0
 800425e:	2a01      	cmp	r2, #1
 8004260:	6123      	str	r3, [r4, #16]
 8004262:	dc02      	bgt.n	800426a <_printf_float+0x15e>
 8004264:	6822      	ldr	r2, [r4, #0]
 8004266:	07d2      	lsls	r2, r2, #31
 8004268:	d501      	bpl.n	800426e <_printf_float+0x162>
 800426a:	3301      	adds	r3, #1
 800426c:	6123      	str	r3, [r4, #16]
 800426e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004272:	2b00      	cmp	r3, #0
 8004274:	d09b      	beq.n	80041ae <_printf_float+0xa2>
 8004276:	232d      	movs	r3, #45	; 0x2d
 8004278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800427c:	e797      	b.n	80041ae <_printf_float+0xa2>
 800427e:	2947      	cmp	r1, #71	; 0x47
 8004280:	d1bc      	bne.n	80041fc <_printf_float+0xf0>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ba      	bne.n	80041fc <_printf_float+0xf0>
 8004286:	2301      	movs	r3, #1
 8004288:	e7b7      	b.n	80041fa <_printf_float+0xee>
 800428a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800428e:	d118      	bne.n	80042c2 <_printf_float+0x1b6>
 8004290:	2900      	cmp	r1, #0
 8004292:	6863      	ldr	r3, [r4, #4]
 8004294:	dd0b      	ble.n	80042ae <_printf_float+0x1a2>
 8004296:	6121      	str	r1, [r4, #16]
 8004298:	b913      	cbnz	r3, 80042a0 <_printf_float+0x194>
 800429a:	6822      	ldr	r2, [r4, #0]
 800429c:	07d0      	lsls	r0, r2, #31
 800429e:	d502      	bpl.n	80042a6 <_printf_float+0x19a>
 80042a0:	3301      	adds	r3, #1
 80042a2:	440b      	add	r3, r1
 80042a4:	6123      	str	r3, [r4, #16]
 80042a6:	f04f 0a00 	mov.w	sl, #0
 80042aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80042ac:	e7df      	b.n	800426e <_printf_float+0x162>
 80042ae:	b913      	cbnz	r3, 80042b6 <_printf_float+0x1aa>
 80042b0:	6822      	ldr	r2, [r4, #0]
 80042b2:	07d2      	lsls	r2, r2, #31
 80042b4:	d501      	bpl.n	80042ba <_printf_float+0x1ae>
 80042b6:	3302      	adds	r3, #2
 80042b8:	e7f4      	b.n	80042a4 <_printf_float+0x198>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e7f2      	b.n	80042a4 <_printf_float+0x198>
 80042be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80042c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042c4:	4299      	cmp	r1, r3
 80042c6:	db05      	blt.n	80042d4 <_printf_float+0x1c8>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	6121      	str	r1, [r4, #16]
 80042cc:	07d8      	lsls	r0, r3, #31
 80042ce:	d5ea      	bpl.n	80042a6 <_printf_float+0x19a>
 80042d0:	1c4b      	adds	r3, r1, #1
 80042d2:	e7e7      	b.n	80042a4 <_printf_float+0x198>
 80042d4:	2900      	cmp	r1, #0
 80042d6:	bfcc      	ite	gt
 80042d8:	2201      	movgt	r2, #1
 80042da:	f1c1 0202 	rsble	r2, r1, #2
 80042de:	4413      	add	r3, r2
 80042e0:	e7e0      	b.n	80042a4 <_printf_float+0x198>
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	055a      	lsls	r2, r3, #21
 80042e6:	d407      	bmi.n	80042f8 <_printf_float+0x1ec>
 80042e8:	6923      	ldr	r3, [r4, #16]
 80042ea:	4642      	mov	r2, r8
 80042ec:	4631      	mov	r1, r6
 80042ee:	4628      	mov	r0, r5
 80042f0:	47b8      	blx	r7
 80042f2:	3001      	adds	r0, #1
 80042f4:	d12b      	bne.n	800434e <_printf_float+0x242>
 80042f6:	e764      	b.n	80041c2 <_printf_float+0xb6>
 80042f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80042fc:	f240 80dd 	bls.w	80044ba <_printf_float+0x3ae>
 8004300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004304:	2200      	movs	r2, #0
 8004306:	2300      	movs	r3, #0
 8004308:	f7fc fb4e 	bl	80009a8 <__aeabi_dcmpeq>
 800430c:	2800      	cmp	r0, #0
 800430e:	d033      	beq.n	8004378 <_printf_float+0x26c>
 8004310:	2301      	movs	r3, #1
 8004312:	4631      	mov	r1, r6
 8004314:	4628      	mov	r0, r5
 8004316:	4a35      	ldr	r2, [pc, #212]	; (80043ec <_printf_float+0x2e0>)
 8004318:	47b8      	blx	r7
 800431a:	3001      	adds	r0, #1
 800431c:	f43f af51 	beq.w	80041c2 <_printf_float+0xb6>
 8004320:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004324:	429a      	cmp	r2, r3
 8004326:	db02      	blt.n	800432e <_printf_float+0x222>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	07d8      	lsls	r0, r3, #31
 800432c:	d50f      	bpl.n	800434e <_printf_float+0x242>
 800432e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004332:	4631      	mov	r1, r6
 8004334:	4628      	mov	r0, r5
 8004336:	47b8      	blx	r7
 8004338:	3001      	adds	r0, #1
 800433a:	f43f af42 	beq.w	80041c2 <_printf_float+0xb6>
 800433e:	f04f 0800 	mov.w	r8, #0
 8004342:	f104 091a 	add.w	r9, r4, #26
 8004346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004348:	3b01      	subs	r3, #1
 800434a:	4543      	cmp	r3, r8
 800434c:	dc09      	bgt.n	8004362 <_printf_float+0x256>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	079b      	lsls	r3, r3, #30
 8004352:	f100 8104 	bmi.w	800455e <_printf_float+0x452>
 8004356:	68e0      	ldr	r0, [r4, #12]
 8004358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800435a:	4298      	cmp	r0, r3
 800435c:	bfb8      	it	lt
 800435e:	4618      	movlt	r0, r3
 8004360:	e731      	b.n	80041c6 <_printf_float+0xba>
 8004362:	2301      	movs	r3, #1
 8004364:	464a      	mov	r2, r9
 8004366:	4631      	mov	r1, r6
 8004368:	4628      	mov	r0, r5
 800436a:	47b8      	blx	r7
 800436c:	3001      	adds	r0, #1
 800436e:	f43f af28 	beq.w	80041c2 <_printf_float+0xb6>
 8004372:	f108 0801 	add.w	r8, r8, #1
 8004376:	e7e6      	b.n	8004346 <_printf_float+0x23a>
 8004378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800437a:	2b00      	cmp	r3, #0
 800437c:	dc38      	bgt.n	80043f0 <_printf_float+0x2e4>
 800437e:	2301      	movs	r3, #1
 8004380:	4631      	mov	r1, r6
 8004382:	4628      	mov	r0, r5
 8004384:	4a19      	ldr	r2, [pc, #100]	; (80043ec <_printf_float+0x2e0>)
 8004386:	47b8      	blx	r7
 8004388:	3001      	adds	r0, #1
 800438a:	f43f af1a 	beq.w	80041c2 <_printf_float+0xb6>
 800438e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004392:	4313      	orrs	r3, r2
 8004394:	d102      	bne.n	800439c <_printf_float+0x290>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	07d9      	lsls	r1, r3, #31
 800439a:	d5d8      	bpl.n	800434e <_printf_float+0x242>
 800439c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043a0:	4631      	mov	r1, r6
 80043a2:	4628      	mov	r0, r5
 80043a4:	47b8      	blx	r7
 80043a6:	3001      	adds	r0, #1
 80043a8:	f43f af0b 	beq.w	80041c2 <_printf_float+0xb6>
 80043ac:	f04f 0900 	mov.w	r9, #0
 80043b0:	f104 0a1a 	add.w	sl, r4, #26
 80043b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043b6:	425b      	negs	r3, r3
 80043b8:	454b      	cmp	r3, r9
 80043ba:	dc01      	bgt.n	80043c0 <_printf_float+0x2b4>
 80043bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043be:	e794      	b.n	80042ea <_printf_float+0x1de>
 80043c0:	2301      	movs	r3, #1
 80043c2:	4652      	mov	r2, sl
 80043c4:	4631      	mov	r1, r6
 80043c6:	4628      	mov	r0, r5
 80043c8:	47b8      	blx	r7
 80043ca:	3001      	adds	r0, #1
 80043cc:	f43f aef9 	beq.w	80041c2 <_printf_float+0xb6>
 80043d0:	f109 0901 	add.w	r9, r9, #1
 80043d4:	e7ee      	b.n	80043b4 <_printf_float+0x2a8>
 80043d6:	bf00      	nop
 80043d8:	7fefffff 	.word	0x7fefffff
 80043dc:	08007ac1 	.word	0x08007ac1
 80043e0:	08007ac5 	.word	0x08007ac5
 80043e4:	08007ac9 	.word	0x08007ac9
 80043e8:	08007acd 	.word	0x08007acd
 80043ec:	08007ad1 	.word	0x08007ad1
 80043f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043f4:	429a      	cmp	r2, r3
 80043f6:	bfa8      	it	ge
 80043f8:	461a      	movge	r2, r3
 80043fa:	2a00      	cmp	r2, #0
 80043fc:	4691      	mov	r9, r2
 80043fe:	dc37      	bgt.n	8004470 <_printf_float+0x364>
 8004400:	f04f 0b00 	mov.w	fp, #0
 8004404:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004408:	f104 021a 	add.w	r2, r4, #26
 800440c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004410:	ebaa 0309 	sub.w	r3, sl, r9
 8004414:	455b      	cmp	r3, fp
 8004416:	dc33      	bgt.n	8004480 <_printf_float+0x374>
 8004418:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800441c:	429a      	cmp	r2, r3
 800441e:	db3b      	blt.n	8004498 <_printf_float+0x38c>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	07da      	lsls	r2, r3, #31
 8004424:	d438      	bmi.n	8004498 <_printf_float+0x38c>
 8004426:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800442a:	eba2 0903 	sub.w	r9, r2, r3
 800442e:	eba2 020a 	sub.w	r2, r2, sl
 8004432:	4591      	cmp	r9, r2
 8004434:	bfa8      	it	ge
 8004436:	4691      	movge	r9, r2
 8004438:	f1b9 0f00 	cmp.w	r9, #0
 800443c:	dc34      	bgt.n	80044a8 <_printf_float+0x39c>
 800443e:	f04f 0800 	mov.w	r8, #0
 8004442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004446:	f104 0a1a 	add.w	sl, r4, #26
 800444a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	eba3 0309 	sub.w	r3, r3, r9
 8004454:	4543      	cmp	r3, r8
 8004456:	f77f af7a 	ble.w	800434e <_printf_float+0x242>
 800445a:	2301      	movs	r3, #1
 800445c:	4652      	mov	r2, sl
 800445e:	4631      	mov	r1, r6
 8004460:	4628      	mov	r0, r5
 8004462:	47b8      	blx	r7
 8004464:	3001      	adds	r0, #1
 8004466:	f43f aeac 	beq.w	80041c2 <_printf_float+0xb6>
 800446a:	f108 0801 	add.w	r8, r8, #1
 800446e:	e7ec      	b.n	800444a <_printf_float+0x33e>
 8004470:	4613      	mov	r3, r2
 8004472:	4631      	mov	r1, r6
 8004474:	4642      	mov	r2, r8
 8004476:	4628      	mov	r0, r5
 8004478:	47b8      	blx	r7
 800447a:	3001      	adds	r0, #1
 800447c:	d1c0      	bne.n	8004400 <_printf_float+0x2f4>
 800447e:	e6a0      	b.n	80041c2 <_printf_float+0xb6>
 8004480:	2301      	movs	r3, #1
 8004482:	4631      	mov	r1, r6
 8004484:	4628      	mov	r0, r5
 8004486:	920b      	str	r2, [sp, #44]	; 0x2c
 8004488:	47b8      	blx	r7
 800448a:	3001      	adds	r0, #1
 800448c:	f43f ae99 	beq.w	80041c2 <_printf_float+0xb6>
 8004490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004492:	f10b 0b01 	add.w	fp, fp, #1
 8004496:	e7b9      	b.n	800440c <_printf_float+0x300>
 8004498:	4631      	mov	r1, r6
 800449a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800449e:	4628      	mov	r0, r5
 80044a0:	47b8      	blx	r7
 80044a2:	3001      	adds	r0, #1
 80044a4:	d1bf      	bne.n	8004426 <_printf_float+0x31a>
 80044a6:	e68c      	b.n	80041c2 <_printf_float+0xb6>
 80044a8:	464b      	mov	r3, r9
 80044aa:	4631      	mov	r1, r6
 80044ac:	4628      	mov	r0, r5
 80044ae:	eb08 020a 	add.w	r2, r8, sl
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	d1c2      	bne.n	800443e <_printf_float+0x332>
 80044b8:	e683      	b.n	80041c2 <_printf_float+0xb6>
 80044ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044bc:	2a01      	cmp	r2, #1
 80044be:	dc01      	bgt.n	80044c4 <_printf_float+0x3b8>
 80044c0:	07db      	lsls	r3, r3, #31
 80044c2:	d539      	bpl.n	8004538 <_printf_float+0x42c>
 80044c4:	2301      	movs	r3, #1
 80044c6:	4642      	mov	r2, r8
 80044c8:	4631      	mov	r1, r6
 80044ca:	4628      	mov	r0, r5
 80044cc:	47b8      	blx	r7
 80044ce:	3001      	adds	r0, #1
 80044d0:	f43f ae77 	beq.w	80041c2 <_printf_float+0xb6>
 80044d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044d8:	4631      	mov	r1, r6
 80044da:	4628      	mov	r0, r5
 80044dc:	47b8      	blx	r7
 80044de:	3001      	adds	r0, #1
 80044e0:	f43f ae6f 	beq.w	80041c2 <_printf_float+0xb6>
 80044e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044e8:	2200      	movs	r2, #0
 80044ea:	2300      	movs	r3, #0
 80044ec:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80044f0:	f7fc fa5a 	bl	80009a8 <__aeabi_dcmpeq>
 80044f4:	b9d8      	cbnz	r0, 800452e <_printf_float+0x422>
 80044f6:	f109 33ff 	add.w	r3, r9, #4294967295
 80044fa:	f108 0201 	add.w	r2, r8, #1
 80044fe:	4631      	mov	r1, r6
 8004500:	4628      	mov	r0, r5
 8004502:	47b8      	blx	r7
 8004504:	3001      	adds	r0, #1
 8004506:	d10e      	bne.n	8004526 <_printf_float+0x41a>
 8004508:	e65b      	b.n	80041c2 <_printf_float+0xb6>
 800450a:	2301      	movs	r3, #1
 800450c:	464a      	mov	r2, r9
 800450e:	4631      	mov	r1, r6
 8004510:	4628      	mov	r0, r5
 8004512:	47b8      	blx	r7
 8004514:	3001      	adds	r0, #1
 8004516:	f43f ae54 	beq.w	80041c2 <_printf_float+0xb6>
 800451a:	f108 0801 	add.w	r8, r8, #1
 800451e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004520:	3b01      	subs	r3, #1
 8004522:	4543      	cmp	r3, r8
 8004524:	dcf1      	bgt.n	800450a <_printf_float+0x3fe>
 8004526:	4653      	mov	r3, sl
 8004528:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800452c:	e6de      	b.n	80042ec <_printf_float+0x1e0>
 800452e:	f04f 0800 	mov.w	r8, #0
 8004532:	f104 091a 	add.w	r9, r4, #26
 8004536:	e7f2      	b.n	800451e <_printf_float+0x412>
 8004538:	2301      	movs	r3, #1
 800453a:	4642      	mov	r2, r8
 800453c:	e7df      	b.n	80044fe <_printf_float+0x3f2>
 800453e:	2301      	movs	r3, #1
 8004540:	464a      	mov	r2, r9
 8004542:	4631      	mov	r1, r6
 8004544:	4628      	mov	r0, r5
 8004546:	47b8      	blx	r7
 8004548:	3001      	adds	r0, #1
 800454a:	f43f ae3a 	beq.w	80041c2 <_printf_float+0xb6>
 800454e:	f108 0801 	add.w	r8, r8, #1
 8004552:	68e3      	ldr	r3, [r4, #12]
 8004554:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004556:	1a5b      	subs	r3, r3, r1
 8004558:	4543      	cmp	r3, r8
 800455a:	dcf0      	bgt.n	800453e <_printf_float+0x432>
 800455c:	e6fb      	b.n	8004356 <_printf_float+0x24a>
 800455e:	f04f 0800 	mov.w	r8, #0
 8004562:	f104 0919 	add.w	r9, r4, #25
 8004566:	e7f4      	b.n	8004552 <_printf_float+0x446>

08004568 <_printf_common>:
 8004568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800456c:	4616      	mov	r6, r2
 800456e:	4699      	mov	r9, r3
 8004570:	688a      	ldr	r2, [r1, #8]
 8004572:	690b      	ldr	r3, [r1, #16]
 8004574:	4607      	mov	r7, r0
 8004576:	4293      	cmp	r3, r2
 8004578:	bfb8      	it	lt
 800457a:	4613      	movlt	r3, r2
 800457c:	6033      	str	r3, [r6, #0]
 800457e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004582:	460c      	mov	r4, r1
 8004584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004588:	b10a      	cbz	r2, 800458e <_printf_common+0x26>
 800458a:	3301      	adds	r3, #1
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	0699      	lsls	r1, r3, #26
 8004592:	bf42      	ittt	mi
 8004594:	6833      	ldrmi	r3, [r6, #0]
 8004596:	3302      	addmi	r3, #2
 8004598:	6033      	strmi	r3, [r6, #0]
 800459a:	6825      	ldr	r5, [r4, #0]
 800459c:	f015 0506 	ands.w	r5, r5, #6
 80045a0:	d106      	bne.n	80045b0 <_printf_common+0x48>
 80045a2:	f104 0a19 	add.w	sl, r4, #25
 80045a6:	68e3      	ldr	r3, [r4, #12]
 80045a8:	6832      	ldr	r2, [r6, #0]
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	42ab      	cmp	r3, r5
 80045ae:	dc2b      	bgt.n	8004608 <_printf_common+0xa0>
 80045b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045b4:	1e13      	subs	r3, r2, #0
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	bf18      	it	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	0692      	lsls	r2, r2, #26
 80045be:	d430      	bmi.n	8004622 <_printf_common+0xba>
 80045c0:	4649      	mov	r1, r9
 80045c2:	4638      	mov	r0, r7
 80045c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045c8:	47c0      	blx	r8
 80045ca:	3001      	adds	r0, #1
 80045cc:	d023      	beq.n	8004616 <_printf_common+0xae>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	6922      	ldr	r2, [r4, #16]
 80045d2:	f003 0306 	and.w	r3, r3, #6
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	bf14      	ite	ne
 80045da:	2500      	movne	r5, #0
 80045dc:	6833      	ldreq	r3, [r6, #0]
 80045de:	f04f 0600 	mov.w	r6, #0
 80045e2:	bf08      	it	eq
 80045e4:	68e5      	ldreq	r5, [r4, #12]
 80045e6:	f104 041a 	add.w	r4, r4, #26
 80045ea:	bf08      	it	eq
 80045ec:	1aed      	subeq	r5, r5, r3
 80045ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80045f2:	bf08      	it	eq
 80045f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f8:	4293      	cmp	r3, r2
 80045fa:	bfc4      	itt	gt
 80045fc:	1a9b      	subgt	r3, r3, r2
 80045fe:	18ed      	addgt	r5, r5, r3
 8004600:	42b5      	cmp	r5, r6
 8004602:	d11a      	bne.n	800463a <_printf_common+0xd2>
 8004604:	2000      	movs	r0, #0
 8004606:	e008      	b.n	800461a <_printf_common+0xb2>
 8004608:	2301      	movs	r3, #1
 800460a:	4652      	mov	r2, sl
 800460c:	4649      	mov	r1, r9
 800460e:	4638      	mov	r0, r7
 8004610:	47c0      	blx	r8
 8004612:	3001      	adds	r0, #1
 8004614:	d103      	bne.n	800461e <_printf_common+0xb6>
 8004616:	f04f 30ff 	mov.w	r0, #4294967295
 800461a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461e:	3501      	adds	r5, #1
 8004620:	e7c1      	b.n	80045a6 <_printf_common+0x3e>
 8004622:	2030      	movs	r0, #48	; 0x30
 8004624:	18e1      	adds	r1, r4, r3
 8004626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004630:	4422      	add	r2, r4
 8004632:	3302      	adds	r3, #2
 8004634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004638:	e7c2      	b.n	80045c0 <_printf_common+0x58>
 800463a:	2301      	movs	r3, #1
 800463c:	4622      	mov	r2, r4
 800463e:	4649      	mov	r1, r9
 8004640:	4638      	mov	r0, r7
 8004642:	47c0      	blx	r8
 8004644:	3001      	adds	r0, #1
 8004646:	d0e6      	beq.n	8004616 <_printf_common+0xae>
 8004648:	3601      	adds	r6, #1
 800464a:	e7d9      	b.n	8004600 <_printf_common+0x98>

0800464c <_printf_i>:
 800464c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004650:	7e0f      	ldrb	r7, [r1, #24]
 8004652:	4691      	mov	r9, r2
 8004654:	2f78      	cmp	r7, #120	; 0x78
 8004656:	4680      	mov	r8, r0
 8004658:	460c      	mov	r4, r1
 800465a:	469a      	mov	sl, r3
 800465c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800465e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004662:	d807      	bhi.n	8004674 <_printf_i+0x28>
 8004664:	2f62      	cmp	r7, #98	; 0x62
 8004666:	d80a      	bhi.n	800467e <_printf_i+0x32>
 8004668:	2f00      	cmp	r7, #0
 800466a:	f000 80d5 	beq.w	8004818 <_printf_i+0x1cc>
 800466e:	2f58      	cmp	r7, #88	; 0x58
 8004670:	f000 80c1 	beq.w	80047f6 <_printf_i+0x1aa>
 8004674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800467c:	e03a      	b.n	80046f4 <_printf_i+0xa8>
 800467e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004682:	2b15      	cmp	r3, #21
 8004684:	d8f6      	bhi.n	8004674 <_printf_i+0x28>
 8004686:	a101      	add	r1, pc, #4	; (adr r1, 800468c <_printf_i+0x40>)
 8004688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046f9 	.word	0x080046f9
 8004694:	08004675 	.word	0x08004675
 8004698:	08004675 	.word	0x08004675
 800469c:	08004675 	.word	0x08004675
 80046a0:	08004675 	.word	0x08004675
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004675 	.word	0x08004675
 80046ac:	08004675 	.word	0x08004675
 80046b0:	08004675 	.word	0x08004675
 80046b4:	08004675 	.word	0x08004675
 80046b8:	080047ff 	.word	0x080047ff
 80046bc:	08004725 	.word	0x08004725
 80046c0:	080047b9 	.word	0x080047b9
 80046c4:	08004675 	.word	0x08004675
 80046c8:	08004675 	.word	0x08004675
 80046cc:	08004821 	.word	0x08004821
 80046d0:	08004675 	.word	0x08004675
 80046d4:	08004725 	.word	0x08004725
 80046d8:	08004675 	.word	0x08004675
 80046dc:	08004675 	.word	0x08004675
 80046e0:	080047c1 	.word	0x080047c1
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	1d1a      	adds	r2, r3, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	602a      	str	r2, [r5, #0]
 80046ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0a0      	b.n	800483a <_printf_i+0x1ee>
 80046f8:	6820      	ldr	r0, [r4, #0]
 80046fa:	682b      	ldr	r3, [r5, #0]
 80046fc:	0607      	lsls	r7, r0, #24
 80046fe:	f103 0104 	add.w	r1, r3, #4
 8004702:	6029      	str	r1, [r5, #0]
 8004704:	d501      	bpl.n	800470a <_printf_i+0xbe>
 8004706:	681e      	ldr	r6, [r3, #0]
 8004708:	e003      	b.n	8004712 <_printf_i+0xc6>
 800470a:	0646      	lsls	r6, r0, #25
 800470c:	d5fb      	bpl.n	8004706 <_printf_i+0xba>
 800470e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004712:	2e00      	cmp	r6, #0
 8004714:	da03      	bge.n	800471e <_printf_i+0xd2>
 8004716:	232d      	movs	r3, #45	; 0x2d
 8004718:	4276      	negs	r6, r6
 800471a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800471e:	230a      	movs	r3, #10
 8004720:	4859      	ldr	r0, [pc, #356]	; (8004888 <_printf_i+0x23c>)
 8004722:	e012      	b.n	800474a <_printf_i+0xfe>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	1d19      	adds	r1, r3, #4
 800472a:	6029      	str	r1, [r5, #0]
 800472c:	0605      	lsls	r5, r0, #24
 800472e:	d501      	bpl.n	8004734 <_printf_i+0xe8>
 8004730:	681e      	ldr	r6, [r3, #0]
 8004732:	e002      	b.n	800473a <_printf_i+0xee>
 8004734:	0641      	lsls	r1, r0, #25
 8004736:	d5fb      	bpl.n	8004730 <_printf_i+0xe4>
 8004738:	881e      	ldrh	r6, [r3, #0]
 800473a:	2f6f      	cmp	r7, #111	; 0x6f
 800473c:	bf0c      	ite	eq
 800473e:	2308      	moveq	r3, #8
 8004740:	230a      	movne	r3, #10
 8004742:	4851      	ldr	r0, [pc, #324]	; (8004888 <_printf_i+0x23c>)
 8004744:	2100      	movs	r1, #0
 8004746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800474a:	6865      	ldr	r5, [r4, #4]
 800474c:	2d00      	cmp	r5, #0
 800474e:	bfa8      	it	ge
 8004750:	6821      	ldrge	r1, [r4, #0]
 8004752:	60a5      	str	r5, [r4, #8]
 8004754:	bfa4      	itt	ge
 8004756:	f021 0104 	bicge.w	r1, r1, #4
 800475a:	6021      	strge	r1, [r4, #0]
 800475c:	b90e      	cbnz	r6, 8004762 <_printf_i+0x116>
 800475e:	2d00      	cmp	r5, #0
 8004760:	d04b      	beq.n	80047fa <_printf_i+0x1ae>
 8004762:	4615      	mov	r5, r2
 8004764:	fbb6 f1f3 	udiv	r1, r6, r3
 8004768:	fb03 6711 	mls	r7, r3, r1, r6
 800476c:	5dc7      	ldrb	r7, [r0, r7]
 800476e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004772:	4637      	mov	r7, r6
 8004774:	42bb      	cmp	r3, r7
 8004776:	460e      	mov	r6, r1
 8004778:	d9f4      	bls.n	8004764 <_printf_i+0x118>
 800477a:	2b08      	cmp	r3, #8
 800477c:	d10b      	bne.n	8004796 <_printf_i+0x14a>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	07de      	lsls	r6, r3, #31
 8004782:	d508      	bpl.n	8004796 <_printf_i+0x14a>
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	6861      	ldr	r1, [r4, #4]
 8004788:	4299      	cmp	r1, r3
 800478a:	bfde      	ittt	le
 800478c:	2330      	movle	r3, #48	; 0x30
 800478e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004792:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004796:	1b52      	subs	r2, r2, r5
 8004798:	6122      	str	r2, [r4, #16]
 800479a:	464b      	mov	r3, r9
 800479c:	4621      	mov	r1, r4
 800479e:	4640      	mov	r0, r8
 80047a0:	f8cd a000 	str.w	sl, [sp]
 80047a4:	aa03      	add	r2, sp, #12
 80047a6:	f7ff fedf 	bl	8004568 <_printf_common>
 80047aa:	3001      	adds	r0, #1
 80047ac:	d14a      	bne.n	8004844 <_printf_i+0x1f8>
 80047ae:	f04f 30ff 	mov.w	r0, #4294967295
 80047b2:	b004      	add	sp, #16
 80047b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	f043 0320 	orr.w	r3, r3, #32
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	2778      	movs	r7, #120	; 0x78
 80047c2:	4832      	ldr	r0, [pc, #200]	; (800488c <_printf_i+0x240>)
 80047c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	6829      	ldr	r1, [r5, #0]
 80047cc:	061f      	lsls	r7, r3, #24
 80047ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80047d2:	d402      	bmi.n	80047da <_printf_i+0x18e>
 80047d4:	065f      	lsls	r7, r3, #25
 80047d6:	bf48      	it	mi
 80047d8:	b2b6      	uxthmi	r6, r6
 80047da:	07df      	lsls	r7, r3, #31
 80047dc:	bf48      	it	mi
 80047de:	f043 0320 	orrmi.w	r3, r3, #32
 80047e2:	6029      	str	r1, [r5, #0]
 80047e4:	bf48      	it	mi
 80047e6:	6023      	strmi	r3, [r4, #0]
 80047e8:	b91e      	cbnz	r6, 80047f2 <_printf_i+0x1a6>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	f023 0320 	bic.w	r3, r3, #32
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	2310      	movs	r3, #16
 80047f4:	e7a6      	b.n	8004744 <_printf_i+0xf8>
 80047f6:	4824      	ldr	r0, [pc, #144]	; (8004888 <_printf_i+0x23c>)
 80047f8:	e7e4      	b.n	80047c4 <_printf_i+0x178>
 80047fa:	4615      	mov	r5, r2
 80047fc:	e7bd      	b.n	800477a <_printf_i+0x12e>
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	6826      	ldr	r6, [r4, #0]
 8004802:	1d18      	adds	r0, r3, #4
 8004804:	6961      	ldr	r1, [r4, #20]
 8004806:	6028      	str	r0, [r5, #0]
 8004808:	0635      	lsls	r5, r6, #24
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	d501      	bpl.n	8004812 <_printf_i+0x1c6>
 800480e:	6019      	str	r1, [r3, #0]
 8004810:	e002      	b.n	8004818 <_printf_i+0x1cc>
 8004812:	0670      	lsls	r0, r6, #25
 8004814:	d5fb      	bpl.n	800480e <_printf_i+0x1c2>
 8004816:	8019      	strh	r1, [r3, #0]
 8004818:	2300      	movs	r3, #0
 800481a:	4615      	mov	r5, r2
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	e7bc      	b.n	800479a <_printf_i+0x14e>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	2100      	movs	r1, #0
 8004824:	1d1a      	adds	r2, r3, #4
 8004826:	602a      	str	r2, [r5, #0]
 8004828:	681d      	ldr	r5, [r3, #0]
 800482a:	6862      	ldr	r2, [r4, #4]
 800482c:	4628      	mov	r0, r5
 800482e:	f000 fbf1 	bl	8005014 <memchr>
 8004832:	b108      	cbz	r0, 8004838 <_printf_i+0x1ec>
 8004834:	1b40      	subs	r0, r0, r5
 8004836:	6060      	str	r0, [r4, #4]
 8004838:	6863      	ldr	r3, [r4, #4]
 800483a:	6123      	str	r3, [r4, #16]
 800483c:	2300      	movs	r3, #0
 800483e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004842:	e7aa      	b.n	800479a <_printf_i+0x14e>
 8004844:	462a      	mov	r2, r5
 8004846:	4649      	mov	r1, r9
 8004848:	4640      	mov	r0, r8
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	47d0      	blx	sl
 800484e:	3001      	adds	r0, #1
 8004850:	d0ad      	beq.n	80047ae <_printf_i+0x162>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	079b      	lsls	r3, r3, #30
 8004856:	d413      	bmi.n	8004880 <_printf_i+0x234>
 8004858:	68e0      	ldr	r0, [r4, #12]
 800485a:	9b03      	ldr	r3, [sp, #12]
 800485c:	4298      	cmp	r0, r3
 800485e:	bfb8      	it	lt
 8004860:	4618      	movlt	r0, r3
 8004862:	e7a6      	b.n	80047b2 <_printf_i+0x166>
 8004864:	2301      	movs	r3, #1
 8004866:	4632      	mov	r2, r6
 8004868:	4649      	mov	r1, r9
 800486a:	4640      	mov	r0, r8
 800486c:	47d0      	blx	sl
 800486e:	3001      	adds	r0, #1
 8004870:	d09d      	beq.n	80047ae <_printf_i+0x162>
 8004872:	3501      	adds	r5, #1
 8004874:	68e3      	ldr	r3, [r4, #12]
 8004876:	9903      	ldr	r1, [sp, #12]
 8004878:	1a5b      	subs	r3, r3, r1
 800487a:	42ab      	cmp	r3, r5
 800487c:	dcf2      	bgt.n	8004864 <_printf_i+0x218>
 800487e:	e7eb      	b.n	8004858 <_printf_i+0x20c>
 8004880:	2500      	movs	r5, #0
 8004882:	f104 0619 	add.w	r6, r4, #25
 8004886:	e7f5      	b.n	8004874 <_printf_i+0x228>
 8004888:	08007ad3 	.word	0x08007ad3
 800488c:	08007ae4 	.word	0x08007ae4

08004890 <_scanf_float>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	b087      	sub	sp, #28
 8004896:	9303      	str	r3, [sp, #12]
 8004898:	688b      	ldr	r3, [r1, #8]
 800489a:	4617      	mov	r7, r2
 800489c:	1e5a      	subs	r2, r3, #1
 800489e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80048a2:	bf85      	ittet	hi
 80048a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80048a8:	195b      	addhi	r3, r3, r5
 80048aa:	2300      	movls	r3, #0
 80048ac:	9302      	strhi	r3, [sp, #8]
 80048ae:	bf88      	it	hi
 80048b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80048b4:	468b      	mov	fp, r1
 80048b6:	f04f 0500 	mov.w	r5, #0
 80048ba:	bf8c      	ite	hi
 80048bc:	608b      	strhi	r3, [r1, #8]
 80048be:	9302      	strls	r3, [sp, #8]
 80048c0:	680b      	ldr	r3, [r1, #0]
 80048c2:	4680      	mov	r8, r0
 80048c4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80048c8:	f84b 3b1c 	str.w	r3, [fp], #28
 80048cc:	460c      	mov	r4, r1
 80048ce:	465e      	mov	r6, fp
 80048d0:	46aa      	mov	sl, r5
 80048d2:	46a9      	mov	r9, r5
 80048d4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80048d8:	9501      	str	r5, [sp, #4]
 80048da:	68a2      	ldr	r2, [r4, #8]
 80048dc:	b152      	cbz	r2, 80048f4 <_scanf_float+0x64>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b4e      	cmp	r3, #78	; 0x4e
 80048e4:	d864      	bhi.n	80049b0 <_scanf_float+0x120>
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d83c      	bhi.n	8004964 <_scanf_float+0xd4>
 80048ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80048ee:	b2c8      	uxtb	r0, r1
 80048f0:	280e      	cmp	r0, #14
 80048f2:	d93a      	bls.n	800496a <_scanf_float+0xda>
 80048f4:	f1b9 0f00 	cmp.w	r9, #0
 80048f8:	d003      	beq.n	8004902 <_scanf_float+0x72>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004906:	f1ba 0f01 	cmp.w	sl, #1
 800490a:	f200 8113 	bhi.w	8004b34 <_scanf_float+0x2a4>
 800490e:	455e      	cmp	r6, fp
 8004910:	f200 8105 	bhi.w	8004b1e <_scanf_float+0x28e>
 8004914:	2501      	movs	r5, #1
 8004916:	4628      	mov	r0, r5
 8004918:	b007      	add	sp, #28
 800491a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004922:	2a0d      	cmp	r2, #13
 8004924:	d8e6      	bhi.n	80048f4 <_scanf_float+0x64>
 8004926:	a101      	add	r1, pc, #4	; (adr r1, 800492c <_scanf_float+0x9c>)
 8004928:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800492c:	08004a6b 	.word	0x08004a6b
 8004930:	080048f5 	.word	0x080048f5
 8004934:	080048f5 	.word	0x080048f5
 8004938:	080048f5 	.word	0x080048f5
 800493c:	08004acb 	.word	0x08004acb
 8004940:	08004aa3 	.word	0x08004aa3
 8004944:	080048f5 	.word	0x080048f5
 8004948:	080048f5 	.word	0x080048f5
 800494c:	08004a79 	.word	0x08004a79
 8004950:	080048f5 	.word	0x080048f5
 8004954:	080048f5 	.word	0x080048f5
 8004958:	080048f5 	.word	0x080048f5
 800495c:	080048f5 	.word	0x080048f5
 8004960:	08004a31 	.word	0x08004a31
 8004964:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004968:	e7db      	b.n	8004922 <_scanf_float+0x92>
 800496a:	290e      	cmp	r1, #14
 800496c:	d8c2      	bhi.n	80048f4 <_scanf_float+0x64>
 800496e:	a001      	add	r0, pc, #4	; (adr r0, 8004974 <_scanf_float+0xe4>)
 8004970:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004974:	08004a23 	.word	0x08004a23
 8004978:	080048f5 	.word	0x080048f5
 800497c:	08004a23 	.word	0x08004a23
 8004980:	08004ab7 	.word	0x08004ab7
 8004984:	080048f5 	.word	0x080048f5
 8004988:	080049d1 	.word	0x080049d1
 800498c:	08004a0d 	.word	0x08004a0d
 8004990:	08004a0d 	.word	0x08004a0d
 8004994:	08004a0d 	.word	0x08004a0d
 8004998:	08004a0d 	.word	0x08004a0d
 800499c:	08004a0d 	.word	0x08004a0d
 80049a0:	08004a0d 	.word	0x08004a0d
 80049a4:	08004a0d 	.word	0x08004a0d
 80049a8:	08004a0d 	.word	0x08004a0d
 80049ac:	08004a0d 	.word	0x08004a0d
 80049b0:	2b6e      	cmp	r3, #110	; 0x6e
 80049b2:	d809      	bhi.n	80049c8 <_scanf_float+0x138>
 80049b4:	2b60      	cmp	r3, #96	; 0x60
 80049b6:	d8b2      	bhi.n	800491e <_scanf_float+0x8e>
 80049b8:	2b54      	cmp	r3, #84	; 0x54
 80049ba:	d077      	beq.n	8004aac <_scanf_float+0x21c>
 80049bc:	2b59      	cmp	r3, #89	; 0x59
 80049be:	d199      	bne.n	80048f4 <_scanf_float+0x64>
 80049c0:	2d07      	cmp	r5, #7
 80049c2:	d197      	bne.n	80048f4 <_scanf_float+0x64>
 80049c4:	2508      	movs	r5, #8
 80049c6:	e029      	b.n	8004a1c <_scanf_float+0x18c>
 80049c8:	2b74      	cmp	r3, #116	; 0x74
 80049ca:	d06f      	beq.n	8004aac <_scanf_float+0x21c>
 80049cc:	2b79      	cmp	r3, #121	; 0x79
 80049ce:	e7f6      	b.n	80049be <_scanf_float+0x12e>
 80049d0:	6821      	ldr	r1, [r4, #0]
 80049d2:	05c8      	lsls	r0, r1, #23
 80049d4:	d51a      	bpl.n	8004a0c <_scanf_float+0x17c>
 80049d6:	9b02      	ldr	r3, [sp, #8]
 80049d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80049dc:	6021      	str	r1, [r4, #0]
 80049de:	f109 0901 	add.w	r9, r9, #1
 80049e2:	b11b      	cbz	r3, 80049ec <_scanf_float+0x15c>
 80049e4:	3b01      	subs	r3, #1
 80049e6:	3201      	adds	r2, #1
 80049e8:	9302      	str	r3, [sp, #8]
 80049ea:	60a2      	str	r2, [r4, #8]
 80049ec:	68a3      	ldr	r3, [r4, #8]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	60a3      	str	r3, [r4, #8]
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	3301      	adds	r3, #1
 80049f6:	6123      	str	r3, [r4, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	607b      	str	r3, [r7, #4]
 8004a00:	f340 8084 	ble.w	8004b0c <_scanf_float+0x27c>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	e766      	b.n	80048da <_scanf_float+0x4a>
 8004a0c:	eb1a 0f05 	cmn.w	sl, r5
 8004a10:	f47f af70 	bne.w	80048f4 <_scanf_float+0x64>
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004a1a:	6022      	str	r2, [r4, #0]
 8004a1c:	f806 3b01 	strb.w	r3, [r6], #1
 8004a20:	e7e4      	b.n	80049ec <_scanf_float+0x15c>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	0610      	lsls	r0, r2, #24
 8004a26:	f57f af65 	bpl.w	80048f4 <_scanf_float+0x64>
 8004a2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a2e:	e7f4      	b.n	8004a1a <_scanf_float+0x18a>
 8004a30:	f1ba 0f00 	cmp.w	sl, #0
 8004a34:	d10e      	bne.n	8004a54 <_scanf_float+0x1c4>
 8004a36:	f1b9 0f00 	cmp.w	r9, #0
 8004a3a:	d10e      	bne.n	8004a5a <_scanf_float+0x1ca>
 8004a3c:	6822      	ldr	r2, [r4, #0]
 8004a3e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004a42:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004a46:	d108      	bne.n	8004a5a <_scanf_float+0x1ca>
 8004a48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a4c:	f04f 0a01 	mov.w	sl, #1
 8004a50:	6022      	str	r2, [r4, #0]
 8004a52:	e7e3      	b.n	8004a1c <_scanf_float+0x18c>
 8004a54:	f1ba 0f02 	cmp.w	sl, #2
 8004a58:	d055      	beq.n	8004b06 <_scanf_float+0x276>
 8004a5a:	2d01      	cmp	r5, #1
 8004a5c:	d002      	beq.n	8004a64 <_scanf_float+0x1d4>
 8004a5e:	2d04      	cmp	r5, #4
 8004a60:	f47f af48 	bne.w	80048f4 <_scanf_float+0x64>
 8004a64:	3501      	adds	r5, #1
 8004a66:	b2ed      	uxtb	r5, r5
 8004a68:	e7d8      	b.n	8004a1c <_scanf_float+0x18c>
 8004a6a:	f1ba 0f01 	cmp.w	sl, #1
 8004a6e:	f47f af41 	bne.w	80048f4 <_scanf_float+0x64>
 8004a72:	f04f 0a02 	mov.w	sl, #2
 8004a76:	e7d1      	b.n	8004a1c <_scanf_float+0x18c>
 8004a78:	b97d      	cbnz	r5, 8004a9a <_scanf_float+0x20a>
 8004a7a:	f1b9 0f00 	cmp.w	r9, #0
 8004a7e:	f47f af3c 	bne.w	80048fa <_scanf_float+0x6a>
 8004a82:	6822      	ldr	r2, [r4, #0]
 8004a84:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004a88:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004a8c:	f47f af39 	bne.w	8004902 <_scanf_float+0x72>
 8004a90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a94:	2501      	movs	r5, #1
 8004a96:	6022      	str	r2, [r4, #0]
 8004a98:	e7c0      	b.n	8004a1c <_scanf_float+0x18c>
 8004a9a:	2d03      	cmp	r5, #3
 8004a9c:	d0e2      	beq.n	8004a64 <_scanf_float+0x1d4>
 8004a9e:	2d05      	cmp	r5, #5
 8004aa0:	e7de      	b.n	8004a60 <_scanf_float+0x1d0>
 8004aa2:	2d02      	cmp	r5, #2
 8004aa4:	f47f af26 	bne.w	80048f4 <_scanf_float+0x64>
 8004aa8:	2503      	movs	r5, #3
 8004aaa:	e7b7      	b.n	8004a1c <_scanf_float+0x18c>
 8004aac:	2d06      	cmp	r5, #6
 8004aae:	f47f af21 	bne.w	80048f4 <_scanf_float+0x64>
 8004ab2:	2507      	movs	r5, #7
 8004ab4:	e7b2      	b.n	8004a1c <_scanf_float+0x18c>
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	0591      	lsls	r1, r2, #22
 8004aba:	f57f af1b 	bpl.w	80048f4 <_scanf_float+0x64>
 8004abe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004ac2:	6022      	str	r2, [r4, #0]
 8004ac4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ac8:	e7a8      	b.n	8004a1c <_scanf_float+0x18c>
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004ad0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004ad4:	d006      	beq.n	8004ae4 <_scanf_float+0x254>
 8004ad6:	0550      	lsls	r0, r2, #21
 8004ad8:	f57f af0c 	bpl.w	80048f4 <_scanf_float+0x64>
 8004adc:	f1b9 0f00 	cmp.w	r9, #0
 8004ae0:	f43f af0f 	beq.w	8004902 <_scanf_float+0x72>
 8004ae4:	0591      	lsls	r1, r2, #22
 8004ae6:	bf58      	it	pl
 8004ae8:	9901      	ldrpl	r1, [sp, #4]
 8004aea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004aee:	bf58      	it	pl
 8004af0:	eba9 0101 	subpl.w	r1, r9, r1
 8004af4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004af8:	f04f 0900 	mov.w	r9, #0
 8004afc:	bf58      	it	pl
 8004afe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b02:	6022      	str	r2, [r4, #0]
 8004b04:	e78a      	b.n	8004a1c <_scanf_float+0x18c>
 8004b06:	f04f 0a03 	mov.w	sl, #3
 8004b0a:	e787      	b.n	8004a1c <_scanf_float+0x18c>
 8004b0c:	4639      	mov	r1, r7
 8004b0e:	4640      	mov	r0, r8
 8004b10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b14:	4798      	blx	r3
 8004b16:	2800      	cmp	r0, #0
 8004b18:	f43f aedf 	beq.w	80048da <_scanf_float+0x4a>
 8004b1c:	e6ea      	b.n	80048f4 <_scanf_float+0x64>
 8004b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b22:	463a      	mov	r2, r7
 8004b24:	4640      	mov	r0, r8
 8004b26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b2a:	4798      	blx	r3
 8004b2c:	6923      	ldr	r3, [r4, #16]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	6123      	str	r3, [r4, #16]
 8004b32:	e6ec      	b.n	800490e <_scanf_float+0x7e>
 8004b34:	1e6b      	subs	r3, r5, #1
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d825      	bhi.n	8004b86 <_scanf_float+0x2f6>
 8004b3a:	2d02      	cmp	r5, #2
 8004b3c:	d836      	bhi.n	8004bac <_scanf_float+0x31c>
 8004b3e:	455e      	cmp	r6, fp
 8004b40:	f67f aee8 	bls.w	8004914 <_scanf_float+0x84>
 8004b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b48:	463a      	mov	r2, r7
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b50:	4798      	blx	r3
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	e7f1      	b.n	8004b3e <_scanf_float+0x2ae>
 8004b5a:	9802      	ldr	r0, [sp, #8]
 8004b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004b64:	463a      	mov	r2, r7
 8004b66:	9002      	str	r0, [sp, #8]
 8004b68:	4640      	mov	r0, r8
 8004b6a:	4798      	blx	r3
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	6123      	str	r3, [r4, #16]
 8004b72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b76:	fa5f fa8a 	uxtb.w	sl, sl
 8004b7a:	f1ba 0f02 	cmp.w	sl, #2
 8004b7e:	d1ec      	bne.n	8004b5a <_scanf_float+0x2ca>
 8004b80:	3d03      	subs	r5, #3
 8004b82:	b2ed      	uxtb	r5, r5
 8004b84:	1b76      	subs	r6, r6, r5
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	05da      	lsls	r2, r3, #23
 8004b8a:	d52f      	bpl.n	8004bec <_scanf_float+0x35c>
 8004b8c:	055b      	lsls	r3, r3, #21
 8004b8e:	d510      	bpl.n	8004bb2 <_scanf_float+0x322>
 8004b90:	455e      	cmp	r6, fp
 8004b92:	f67f aebf 	bls.w	8004914 <_scanf_float+0x84>
 8004b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b9a:	463a      	mov	r2, r7
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ba2:	4798      	blx	r3
 8004ba4:	6923      	ldr	r3, [r4, #16]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	6123      	str	r3, [r4, #16]
 8004baa:	e7f1      	b.n	8004b90 <_scanf_float+0x300>
 8004bac:	46aa      	mov	sl, r5
 8004bae:	9602      	str	r6, [sp, #8]
 8004bb0:	e7df      	b.n	8004b72 <_scanf_float+0x2e2>
 8004bb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	2965      	cmp	r1, #101	; 0x65
 8004bba:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bbe:	f106 35ff 	add.w	r5, r6, #4294967295
 8004bc2:	6123      	str	r3, [r4, #16]
 8004bc4:	d00c      	beq.n	8004be0 <_scanf_float+0x350>
 8004bc6:	2945      	cmp	r1, #69	; 0x45
 8004bc8:	d00a      	beq.n	8004be0 <_scanf_float+0x350>
 8004bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bce:	463a      	mov	r2, r7
 8004bd0:	4640      	mov	r0, r8
 8004bd2:	4798      	blx	r3
 8004bd4:	6923      	ldr	r3, [r4, #16]
 8004bd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	1eb5      	subs	r5, r6, #2
 8004bde:	6123      	str	r3, [r4, #16]
 8004be0:	463a      	mov	r2, r7
 8004be2:	4640      	mov	r0, r8
 8004be4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004be8:	4798      	blx	r3
 8004bea:	462e      	mov	r6, r5
 8004bec:	6825      	ldr	r5, [r4, #0]
 8004bee:	f015 0510 	ands.w	r5, r5, #16
 8004bf2:	d155      	bne.n	8004ca0 <_scanf_float+0x410>
 8004bf4:	7035      	strb	r5, [r6, #0]
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c00:	d11d      	bne.n	8004c3e <_scanf_float+0x3ae>
 8004c02:	9b01      	ldr	r3, [sp, #4]
 8004c04:	454b      	cmp	r3, r9
 8004c06:	eba3 0209 	sub.w	r2, r3, r9
 8004c0a:	d125      	bne.n	8004c58 <_scanf_float+0x3c8>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4659      	mov	r1, fp
 8004c10:	4640      	mov	r0, r8
 8004c12:	f7ff f9d9 	bl	8003fc8 <_strtod_r>
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	f8d4 c000 	ldr.w	ip, [r4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f01c 0f02 	tst.w	ip, #2
 8004c22:	4606      	mov	r6, r0
 8004c24:	460f      	mov	r7, r1
 8004c26:	f103 0204 	add.w	r2, r3, #4
 8004c2a:	d020      	beq.n	8004c6e <_scanf_float+0x3de>
 8004c2c:	9903      	ldr	r1, [sp, #12]
 8004c2e:	600a      	str	r2, [r1, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	e9c3 6700 	strd	r6, r7, [r3]
 8004c36:	68e3      	ldr	r3, [r4, #12]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60e3      	str	r3, [r4, #12]
 8004c3c:	e66b      	b.n	8004916 <_scanf_float+0x86>
 8004c3e:	9b04      	ldr	r3, [sp, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0e3      	beq.n	8004c0c <_scanf_float+0x37c>
 8004c44:	9905      	ldr	r1, [sp, #20]
 8004c46:	230a      	movs	r3, #10
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	3101      	adds	r1, #1
 8004c4e:	f002 f94d 	bl	8006eec <_strtol_r>
 8004c52:	9b04      	ldr	r3, [sp, #16]
 8004c54:	9e05      	ldr	r6, [sp, #20]
 8004c56:	1ac2      	subs	r2, r0, r3
 8004c58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004c5c:	429e      	cmp	r6, r3
 8004c5e:	bf28      	it	cs
 8004c60:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004c64:	4630      	mov	r0, r6
 8004c66:	490f      	ldr	r1, [pc, #60]	; (8004ca4 <_scanf_float+0x414>)
 8004c68:	f000 f8d0 	bl	8004e0c <siprintf>
 8004c6c:	e7ce      	b.n	8004c0c <_scanf_float+0x37c>
 8004c6e:	f01c 0f04 	tst.w	ip, #4
 8004c72:	d1db      	bne.n	8004c2c <_scanf_float+0x39c>
 8004c74:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004c78:	f8cc 2000 	str.w	r2, [ip]
 8004c7c:	f8d3 8000 	ldr.w	r8, [r3]
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	f7fb fec2 	bl	8000a0c <__aeabi_dcmpun>
 8004c88:	b128      	cbz	r0, 8004c96 <_scanf_float+0x406>
 8004c8a:	4807      	ldr	r0, [pc, #28]	; (8004ca8 <_scanf_float+0x418>)
 8004c8c:	f000 f9e4 	bl	8005058 <nanf>
 8004c90:	f8c8 0000 	str.w	r0, [r8]
 8004c94:	e7cf      	b.n	8004c36 <_scanf_float+0x3a6>
 8004c96:	4630      	mov	r0, r6
 8004c98:	4639      	mov	r1, r7
 8004c9a:	f7fb ff15 	bl	8000ac8 <__aeabi_d2f>
 8004c9e:	e7f7      	b.n	8004c90 <_scanf_float+0x400>
 8004ca0:	2500      	movs	r5, #0
 8004ca2:	e638      	b.n	8004916 <_scanf_float+0x86>
 8004ca4:	08007af5 	.word	0x08007af5
 8004ca8:	08007d90 	.word	0x08007d90

08004cac <std>:
 8004cac:	2300      	movs	r3, #0
 8004cae:	b510      	push	{r4, lr}
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8004cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cba:	6083      	str	r3, [r0, #8]
 8004cbc:	8181      	strh	r1, [r0, #12]
 8004cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8004cc0:	81c2      	strh	r2, [r0, #14]
 8004cc2:	6183      	str	r3, [r0, #24]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	2208      	movs	r2, #8
 8004cc8:	305c      	adds	r0, #92	; 0x5c
 8004cca:	f000 f902 	bl	8004ed2 <memset>
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <std+0x38>)
 8004cd0:	6224      	str	r4, [r4, #32]
 8004cd2:	6263      	str	r3, [r4, #36]	; 0x24
 8004cd4:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <std+0x3c>)
 8004cd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <std+0x40>)
 8004cda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cdc:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <std+0x44>)
 8004cde:	6323      	str	r3, [r4, #48]	; 0x30
 8004ce0:	bd10      	pop	{r4, pc}
 8004ce2:	bf00      	nop
 8004ce4:	08004e4d 	.word	0x08004e4d
 8004ce8:	08004e6f 	.word	0x08004e6f
 8004cec:	08004ea7 	.word	0x08004ea7
 8004cf0:	08004ecb 	.word	0x08004ecb

08004cf4 <stdio_exit_handler>:
 8004cf4:	4a02      	ldr	r2, [pc, #8]	; (8004d00 <stdio_exit_handler+0xc>)
 8004cf6:	4903      	ldr	r1, [pc, #12]	; (8004d04 <stdio_exit_handler+0x10>)
 8004cf8:	4803      	ldr	r0, [pc, #12]	; (8004d08 <stdio_exit_handler+0x14>)
 8004cfa:	f000 b869 	b.w	8004dd0 <_fwalk_sglue>
 8004cfe:	bf00      	nop
 8004d00:	2000000c 	.word	0x2000000c
 8004d04:	080072c1 	.word	0x080072c1
 8004d08:	20000184 	.word	0x20000184

08004d0c <cleanup_stdio>:
 8004d0c:	6841      	ldr	r1, [r0, #4]
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <cleanup_stdio+0x34>)
 8004d10:	b510      	push	{r4, lr}
 8004d12:	4299      	cmp	r1, r3
 8004d14:	4604      	mov	r4, r0
 8004d16:	d001      	beq.n	8004d1c <cleanup_stdio+0x10>
 8004d18:	f002 fad2 	bl	80072c0 <_fflush_r>
 8004d1c:	68a1      	ldr	r1, [r4, #8]
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <cleanup_stdio+0x38>)
 8004d20:	4299      	cmp	r1, r3
 8004d22:	d002      	beq.n	8004d2a <cleanup_stdio+0x1e>
 8004d24:	4620      	mov	r0, r4
 8004d26:	f002 facb 	bl	80072c0 <_fflush_r>
 8004d2a:	68e1      	ldr	r1, [r4, #12]
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <cleanup_stdio+0x3c>)
 8004d2e:	4299      	cmp	r1, r3
 8004d30:	d004      	beq.n	8004d3c <cleanup_stdio+0x30>
 8004d32:	4620      	mov	r0, r4
 8004d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d38:	f002 bac2 	b.w	80072c0 <_fflush_r>
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000338 	.word	0x20000338
 8004d44:	200003a0 	.word	0x200003a0
 8004d48:	20000408 	.word	0x20000408

08004d4c <global_stdio_init.part.0>:
 8004d4c:	b510      	push	{r4, lr}
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <global_stdio_init.part.0+0x30>)
 8004d50:	4c0b      	ldr	r4, [pc, #44]	; (8004d80 <global_stdio_init.part.0+0x34>)
 8004d52:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <global_stdio_init.part.0+0x38>)
 8004d54:	4620      	mov	r0, r4
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	2104      	movs	r1, #4
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f7ff ffa6 	bl	8004cac <std>
 8004d60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d64:	2201      	movs	r2, #1
 8004d66:	2109      	movs	r1, #9
 8004d68:	f7ff ffa0 	bl	8004cac <std>
 8004d6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d70:	2202      	movs	r2, #2
 8004d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d76:	2112      	movs	r1, #18
 8004d78:	f7ff bf98 	b.w	8004cac <std>
 8004d7c:	20000470 	.word	0x20000470
 8004d80:	20000338 	.word	0x20000338
 8004d84:	08004cf5 	.word	0x08004cf5

08004d88 <__sfp_lock_acquire>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__sfp_lock_acquire+0x8>)
 8004d8a:	f000 b941 	b.w	8005010 <__retarget_lock_acquire_recursive>
 8004d8e:	bf00      	nop
 8004d90:	20000479 	.word	0x20000479

08004d94 <__sfp_lock_release>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__sfp_lock_release+0x8>)
 8004d96:	f000 b93c 	b.w	8005012 <__retarget_lock_release_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	20000479 	.word	0x20000479

08004da0 <__sinit>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	4604      	mov	r4, r0
 8004da4:	f7ff fff0 	bl	8004d88 <__sfp_lock_acquire>
 8004da8:	6a23      	ldr	r3, [r4, #32]
 8004daa:	b11b      	cbz	r3, 8004db4 <__sinit+0x14>
 8004dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db0:	f7ff bff0 	b.w	8004d94 <__sfp_lock_release>
 8004db4:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <__sinit+0x28>)
 8004db6:	6223      	str	r3, [r4, #32]
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <__sinit+0x2c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f5      	bne.n	8004dac <__sinit+0xc>
 8004dc0:	f7ff ffc4 	bl	8004d4c <global_stdio_init.part.0>
 8004dc4:	e7f2      	b.n	8004dac <__sinit+0xc>
 8004dc6:	bf00      	nop
 8004dc8:	08004d0d 	.word	0x08004d0d
 8004dcc:	20000470 	.word	0x20000470

08004dd0 <_fwalk_sglue>:
 8004dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd4:	4607      	mov	r7, r0
 8004dd6:	4688      	mov	r8, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	2600      	movs	r6, #0
 8004ddc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004de0:	f1b9 0901 	subs.w	r9, r9, #1
 8004de4:	d505      	bpl.n	8004df2 <_fwalk_sglue+0x22>
 8004de6:	6824      	ldr	r4, [r4, #0]
 8004de8:	2c00      	cmp	r4, #0
 8004dea:	d1f7      	bne.n	8004ddc <_fwalk_sglue+0xc>
 8004dec:	4630      	mov	r0, r6
 8004dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004df2:	89ab      	ldrh	r3, [r5, #12]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d907      	bls.n	8004e08 <_fwalk_sglue+0x38>
 8004df8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	d003      	beq.n	8004e08 <_fwalk_sglue+0x38>
 8004e00:	4629      	mov	r1, r5
 8004e02:	4638      	mov	r0, r7
 8004e04:	47c0      	blx	r8
 8004e06:	4306      	orrs	r6, r0
 8004e08:	3568      	adds	r5, #104	; 0x68
 8004e0a:	e7e9      	b.n	8004de0 <_fwalk_sglue+0x10>

08004e0c <siprintf>:
 8004e0c:	b40e      	push	{r1, r2, r3}
 8004e0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e12:	b500      	push	{lr}
 8004e14:	b09c      	sub	sp, #112	; 0x70
 8004e16:	ab1d      	add	r3, sp, #116	; 0x74
 8004e18:	9002      	str	r0, [sp, #8]
 8004e1a:	9006      	str	r0, [sp, #24]
 8004e1c:	9107      	str	r1, [sp, #28]
 8004e1e:	9104      	str	r1, [sp, #16]
 8004e20:	4808      	ldr	r0, [pc, #32]	; (8004e44 <siprintf+0x38>)
 8004e22:	4909      	ldr	r1, [pc, #36]	; (8004e48 <siprintf+0x3c>)
 8004e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e28:	9105      	str	r1, [sp, #20]
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	a902      	add	r1, sp, #8
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	f002 f8c6 	bl	8006fc0 <_svfiprintf_r>
 8004e34:	2200      	movs	r2, #0
 8004e36:	9b02      	ldr	r3, [sp, #8]
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	b01c      	add	sp, #112	; 0x70
 8004e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e40:	b003      	add	sp, #12
 8004e42:	4770      	bx	lr
 8004e44:	200001d0 	.word	0x200001d0
 8004e48:	ffff0208 	.word	0xffff0208

08004e4c <__sread>:
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	460c      	mov	r4, r1
 8004e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e54:	f000 f87e 	bl	8004f54 <_read_r>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	bfab      	itete	ge
 8004e5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e60:	181b      	addge	r3, r3, r0
 8004e62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e66:	bfac      	ite	ge
 8004e68:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e6a:	81a3      	strhlt	r3, [r4, #12]
 8004e6c:	bd10      	pop	{r4, pc}

08004e6e <__swrite>:
 8004e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e72:	461f      	mov	r7, r3
 8004e74:	898b      	ldrh	r3, [r1, #12]
 8004e76:	4605      	mov	r5, r0
 8004e78:	05db      	lsls	r3, r3, #23
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	4616      	mov	r6, r2
 8004e7e:	d505      	bpl.n	8004e8c <__swrite+0x1e>
 8004e80:	2302      	movs	r3, #2
 8004e82:	2200      	movs	r2, #0
 8004e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e88:	f000 f852 	bl	8004f30 <_lseek_r>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	4632      	mov	r2, r6
 8004e90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e94:	81a3      	strh	r3, [r4, #12]
 8004e96:	4628      	mov	r0, r5
 8004e98:	463b      	mov	r3, r7
 8004e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea2:	f000 b879 	b.w	8004f98 <_write_r>

08004ea6 <__sseek>:
 8004ea6:	b510      	push	{r4, lr}
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eae:	f000 f83f 	bl	8004f30 <_lseek_r>
 8004eb2:	1c43      	adds	r3, r0, #1
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	bf15      	itete	ne
 8004eb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ec2:	81a3      	strheq	r3, [r4, #12]
 8004ec4:	bf18      	it	ne
 8004ec6:	81a3      	strhne	r3, [r4, #12]
 8004ec8:	bd10      	pop	{r4, pc}

08004eca <__sclose>:
 8004eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ece:	f000 b81f 	b.w	8004f10 <_close_r>

08004ed2 <memset>:
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4402      	add	r2, r0
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d100      	bne.n	8004edc <memset+0xa>
 8004eda:	4770      	bx	lr
 8004edc:	f803 1b01 	strb.w	r1, [r3], #1
 8004ee0:	e7f9      	b.n	8004ed6 <memset+0x4>

08004ee2 <strncmp>:
 8004ee2:	b510      	push	{r4, lr}
 8004ee4:	b16a      	cbz	r2, 8004f02 <strncmp+0x20>
 8004ee6:	3901      	subs	r1, #1
 8004ee8:	1884      	adds	r4, r0, r2
 8004eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d103      	bne.n	8004efe <strncmp+0x1c>
 8004ef6:	42a0      	cmp	r0, r4
 8004ef8:	d001      	beq.n	8004efe <strncmp+0x1c>
 8004efa:	2a00      	cmp	r2, #0
 8004efc:	d1f5      	bne.n	8004eea <strncmp+0x8>
 8004efe:	1ad0      	subs	r0, r2, r3
 8004f00:	bd10      	pop	{r4, pc}
 8004f02:	4610      	mov	r0, r2
 8004f04:	e7fc      	b.n	8004f00 <strncmp+0x1e>
	...

08004f08 <_localeconv_r>:
 8004f08:	4800      	ldr	r0, [pc, #0]	; (8004f0c <_localeconv_r+0x4>)
 8004f0a:	4770      	bx	lr
 8004f0c:	20000108 	.word	0x20000108

08004f10 <_close_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	2300      	movs	r3, #0
 8004f14:	4d05      	ldr	r5, [pc, #20]	; (8004f2c <_close_r+0x1c>)
 8004f16:	4604      	mov	r4, r0
 8004f18:	4608      	mov	r0, r1
 8004f1a:	602b      	str	r3, [r5, #0]
 8004f1c:	f7fc fa5f 	bl	80013de <_close>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d102      	bne.n	8004f2a <_close_r+0x1a>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	b103      	cbz	r3, 8004f2a <_close_r+0x1a>
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	20000474 	.word	0x20000474

08004f30 <_lseek_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4604      	mov	r4, r0
 8004f34:	4608      	mov	r0, r1
 8004f36:	4611      	mov	r1, r2
 8004f38:	2200      	movs	r2, #0
 8004f3a:	4d05      	ldr	r5, [pc, #20]	; (8004f50 <_lseek_r+0x20>)
 8004f3c:	602a      	str	r2, [r5, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f7fc fa71 	bl	8001426 <_lseek>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d102      	bne.n	8004f4e <_lseek_r+0x1e>
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	b103      	cbz	r3, 8004f4e <_lseek_r+0x1e>
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	20000474 	.word	0x20000474

08004f54 <_read_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	4604      	mov	r4, r0
 8004f58:	4608      	mov	r0, r1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	4d05      	ldr	r5, [pc, #20]	; (8004f74 <_read_r+0x20>)
 8004f60:	602a      	str	r2, [r5, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f7fc fa02 	bl	800136c <_read>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_read_r+0x1e>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_read_r+0x1e>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	20000474 	.word	0x20000474

08004f78 <_sbrk_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	4d05      	ldr	r5, [pc, #20]	; (8004f94 <_sbrk_r+0x1c>)
 8004f7e:	4604      	mov	r4, r0
 8004f80:	4608      	mov	r0, r1
 8004f82:	602b      	str	r3, [r5, #0]
 8004f84:	f7fc fa5c 	bl	8001440 <_sbrk>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_sbrk_r+0x1a>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_sbrk_r+0x1a>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	20000474 	.word	0x20000474

08004f98 <_write_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	4d05      	ldr	r5, [pc, #20]	; (8004fb8 <_write_r+0x20>)
 8004fa4:	602a      	str	r2, [r5, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f7fc f9fd 	bl	80013a6 <_write>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_write_r+0x1e>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_write_r+0x1e>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	20000474 	.word	0x20000474

08004fbc <__errno>:
 8004fbc:	4b01      	ldr	r3, [pc, #4]	; (8004fc4 <__errno+0x8>)
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	200001d0 	.word	0x200001d0

08004fc8 <__libc_init_array>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	2600      	movs	r6, #0
 8004fcc:	4d0c      	ldr	r5, [pc, #48]	; (8005000 <__libc_init_array+0x38>)
 8004fce:	4c0d      	ldr	r4, [pc, #52]	; (8005004 <__libc_init_array+0x3c>)
 8004fd0:	1b64      	subs	r4, r4, r5
 8004fd2:	10a4      	asrs	r4, r4, #2
 8004fd4:	42a6      	cmp	r6, r4
 8004fd6:	d109      	bne.n	8004fec <__libc_init_array+0x24>
 8004fd8:	f002 fc9e 	bl	8007918 <_init>
 8004fdc:	2600      	movs	r6, #0
 8004fde:	4d0a      	ldr	r5, [pc, #40]	; (8005008 <__libc_init_array+0x40>)
 8004fe0:	4c0a      	ldr	r4, [pc, #40]	; (800500c <__libc_init_array+0x44>)
 8004fe2:	1b64      	subs	r4, r4, r5
 8004fe4:	10a4      	asrs	r4, r4, #2
 8004fe6:	42a6      	cmp	r6, r4
 8004fe8:	d105      	bne.n	8004ff6 <__libc_init_array+0x2e>
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff0:	4798      	blx	r3
 8004ff2:	3601      	adds	r6, #1
 8004ff4:	e7ee      	b.n	8004fd4 <__libc_init_array+0xc>
 8004ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffa:	4798      	blx	r3
 8004ffc:	3601      	adds	r6, #1
 8004ffe:	e7f2      	b.n	8004fe6 <__libc_init_array+0x1e>
 8005000:	08007d94 	.word	0x08007d94
 8005004:	08007d94 	.word	0x08007d94
 8005008:	08007d94 	.word	0x08007d94
 800500c:	08007d98 	.word	0x08007d98

08005010 <__retarget_lock_acquire_recursive>:
 8005010:	4770      	bx	lr

08005012 <__retarget_lock_release_recursive>:
 8005012:	4770      	bx	lr

08005014 <memchr>:
 8005014:	4603      	mov	r3, r0
 8005016:	b510      	push	{r4, lr}
 8005018:	b2c9      	uxtb	r1, r1
 800501a:	4402      	add	r2, r0
 800501c:	4293      	cmp	r3, r2
 800501e:	4618      	mov	r0, r3
 8005020:	d101      	bne.n	8005026 <memchr+0x12>
 8005022:	2000      	movs	r0, #0
 8005024:	e003      	b.n	800502e <memchr+0x1a>
 8005026:	7804      	ldrb	r4, [r0, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	428c      	cmp	r4, r1
 800502c:	d1f6      	bne.n	800501c <memchr+0x8>
 800502e:	bd10      	pop	{r4, pc}

08005030 <memcpy>:
 8005030:	440a      	add	r2, r1
 8005032:	4291      	cmp	r1, r2
 8005034:	f100 33ff 	add.w	r3, r0, #4294967295
 8005038:	d100      	bne.n	800503c <memcpy+0xc>
 800503a:	4770      	bx	lr
 800503c:	b510      	push	{r4, lr}
 800503e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005042:	4291      	cmp	r1, r2
 8005044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005048:	d1f9      	bne.n	800503e <memcpy+0xe>
 800504a:	bd10      	pop	{r4, pc}

0800504c <nan>:
 800504c:	2000      	movs	r0, #0
 800504e:	4901      	ldr	r1, [pc, #4]	; (8005054 <nan+0x8>)
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	7ff80000 	.word	0x7ff80000

08005058 <nanf>:
 8005058:	4800      	ldr	r0, [pc, #0]	; (800505c <nanf+0x4>)
 800505a:	4770      	bx	lr
 800505c:	7fc00000 	.word	0x7fc00000

08005060 <quorem>:
 8005060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005064:	6903      	ldr	r3, [r0, #16]
 8005066:	690c      	ldr	r4, [r1, #16]
 8005068:	4607      	mov	r7, r0
 800506a:	42a3      	cmp	r3, r4
 800506c:	db7f      	blt.n	800516e <quorem+0x10e>
 800506e:	3c01      	subs	r4, #1
 8005070:	f100 0514 	add.w	r5, r0, #20
 8005074:	f101 0814 	add.w	r8, r1, #20
 8005078:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800507c:	9301      	str	r3, [sp, #4]
 800507e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005082:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005086:	3301      	adds	r3, #1
 8005088:	429a      	cmp	r2, r3
 800508a:	fbb2 f6f3 	udiv	r6, r2, r3
 800508e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005092:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005096:	d331      	bcc.n	80050fc <quorem+0x9c>
 8005098:	f04f 0e00 	mov.w	lr, #0
 800509c:	4640      	mov	r0, r8
 800509e:	46ac      	mov	ip, r5
 80050a0:	46f2      	mov	sl, lr
 80050a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80050a6:	b293      	uxth	r3, r2
 80050a8:	fb06 e303 	mla	r3, r6, r3, lr
 80050ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050b0:	0c1a      	lsrs	r2, r3, #16
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	fb06 220e 	mla	r2, r6, lr, r2
 80050b8:	ebaa 0303 	sub.w	r3, sl, r3
 80050bc:	f8dc a000 	ldr.w	sl, [ip]
 80050c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050c4:	fa1f fa8a 	uxth.w	sl, sl
 80050c8:	4453      	add	r3, sl
 80050ca:	f8dc a000 	ldr.w	sl, [ip]
 80050ce:	b292      	uxth	r2, r2
 80050d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050d8:	b29b      	uxth	r3, r3
 80050da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050de:	4581      	cmp	r9, r0
 80050e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050e4:	f84c 3b04 	str.w	r3, [ip], #4
 80050e8:	d2db      	bcs.n	80050a2 <quorem+0x42>
 80050ea:	f855 300b 	ldr.w	r3, [r5, fp]
 80050ee:	b92b      	cbnz	r3, 80050fc <quorem+0x9c>
 80050f0:	9b01      	ldr	r3, [sp, #4]
 80050f2:	3b04      	subs	r3, #4
 80050f4:	429d      	cmp	r5, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	d32d      	bcc.n	8005156 <quorem+0xf6>
 80050fa:	613c      	str	r4, [r7, #16]
 80050fc:	4638      	mov	r0, r7
 80050fe:	f001 fc97 	bl	8006a30 <__mcmp>
 8005102:	2800      	cmp	r0, #0
 8005104:	db23      	blt.n	800514e <quorem+0xee>
 8005106:	4629      	mov	r1, r5
 8005108:	2000      	movs	r0, #0
 800510a:	3601      	adds	r6, #1
 800510c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005110:	f8d1 c000 	ldr.w	ip, [r1]
 8005114:	b293      	uxth	r3, r2
 8005116:	1ac3      	subs	r3, r0, r3
 8005118:	0c12      	lsrs	r2, r2, #16
 800511a:	fa1f f08c 	uxth.w	r0, ip
 800511e:	4403      	add	r3, r0
 8005120:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005128:	b29b      	uxth	r3, r3
 800512a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800512e:	45c1      	cmp	r9, r8
 8005130:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005134:	f841 3b04 	str.w	r3, [r1], #4
 8005138:	d2e8      	bcs.n	800510c <quorem+0xac>
 800513a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800513e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005142:	b922      	cbnz	r2, 800514e <quorem+0xee>
 8005144:	3b04      	subs	r3, #4
 8005146:	429d      	cmp	r5, r3
 8005148:	461a      	mov	r2, r3
 800514a:	d30a      	bcc.n	8005162 <quorem+0x102>
 800514c:	613c      	str	r4, [r7, #16]
 800514e:	4630      	mov	r0, r6
 8005150:	b003      	add	sp, #12
 8005152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	3b04      	subs	r3, #4
 800515a:	2a00      	cmp	r2, #0
 800515c:	d1cd      	bne.n	80050fa <quorem+0x9a>
 800515e:	3c01      	subs	r4, #1
 8005160:	e7c8      	b.n	80050f4 <quorem+0x94>
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	3b04      	subs	r3, #4
 8005166:	2a00      	cmp	r2, #0
 8005168:	d1f0      	bne.n	800514c <quorem+0xec>
 800516a:	3c01      	subs	r4, #1
 800516c:	e7eb      	b.n	8005146 <quorem+0xe6>
 800516e:	2000      	movs	r0, #0
 8005170:	e7ee      	b.n	8005150 <quorem+0xf0>
 8005172:	0000      	movs	r0, r0
 8005174:	0000      	movs	r0, r0
	...

08005178 <_dtoa_r>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	4616      	mov	r6, r2
 800517e:	461f      	mov	r7, r3
 8005180:	69c4      	ldr	r4, [r0, #28]
 8005182:	b099      	sub	sp, #100	; 0x64
 8005184:	4605      	mov	r5, r0
 8005186:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800518a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800518e:	b974      	cbnz	r4, 80051ae <_dtoa_r+0x36>
 8005190:	2010      	movs	r0, #16
 8005192:	f7fe f821 	bl	80031d8 <malloc>
 8005196:	4602      	mov	r2, r0
 8005198:	61e8      	str	r0, [r5, #28]
 800519a:	b920      	cbnz	r0, 80051a6 <_dtoa_r+0x2e>
 800519c:	21ef      	movs	r1, #239	; 0xef
 800519e:	4bac      	ldr	r3, [pc, #688]	; (8005450 <_dtoa_r+0x2d8>)
 80051a0:	48ac      	ldr	r0, [pc, #688]	; (8005454 <_dtoa_r+0x2dc>)
 80051a2:	f002 f8cf 	bl	8007344 <__assert_func>
 80051a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051aa:	6004      	str	r4, [r0, #0]
 80051ac:	60c4      	str	r4, [r0, #12]
 80051ae:	69eb      	ldr	r3, [r5, #28]
 80051b0:	6819      	ldr	r1, [r3, #0]
 80051b2:	b151      	cbz	r1, 80051ca <_dtoa_r+0x52>
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	2301      	movs	r3, #1
 80051b8:	4093      	lsls	r3, r2
 80051ba:	604a      	str	r2, [r1, #4]
 80051bc:	608b      	str	r3, [r1, #8]
 80051be:	4628      	mov	r0, r5
 80051c0:	f001 f9b2 	bl	8006528 <_Bfree>
 80051c4:	2200      	movs	r2, #0
 80051c6:	69eb      	ldr	r3, [r5, #28]
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	1e3b      	subs	r3, r7, #0
 80051cc:	bfaf      	iteee	ge
 80051ce:	2300      	movge	r3, #0
 80051d0:	2201      	movlt	r2, #1
 80051d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051d6:	9305      	strlt	r3, [sp, #20]
 80051d8:	bfa8      	it	ge
 80051da:	f8c8 3000 	strge.w	r3, [r8]
 80051de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80051e2:	4b9d      	ldr	r3, [pc, #628]	; (8005458 <_dtoa_r+0x2e0>)
 80051e4:	bfb8      	it	lt
 80051e6:	f8c8 2000 	strlt.w	r2, [r8]
 80051ea:	ea33 0309 	bics.w	r3, r3, r9
 80051ee:	d119      	bne.n	8005224 <_dtoa_r+0xac>
 80051f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80051f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051fc:	4333      	orrs	r3, r6
 80051fe:	f000 8589 	beq.w	8005d14 <_dtoa_r+0xb9c>
 8005202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005204:	b953      	cbnz	r3, 800521c <_dtoa_r+0xa4>
 8005206:	4b95      	ldr	r3, [pc, #596]	; (800545c <_dtoa_r+0x2e4>)
 8005208:	e023      	b.n	8005252 <_dtoa_r+0xda>
 800520a:	4b95      	ldr	r3, [pc, #596]	; (8005460 <_dtoa_r+0x2e8>)
 800520c:	9303      	str	r3, [sp, #12]
 800520e:	3308      	adds	r3, #8
 8005210:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	9803      	ldr	r0, [sp, #12]
 8005216:	b019      	add	sp, #100	; 0x64
 8005218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521c:	4b8f      	ldr	r3, [pc, #572]	; (800545c <_dtoa_r+0x2e4>)
 800521e:	9303      	str	r3, [sp, #12]
 8005220:	3303      	adds	r3, #3
 8005222:	e7f5      	b.n	8005210 <_dtoa_r+0x98>
 8005224:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005228:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800522c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005230:	2200      	movs	r2, #0
 8005232:	2300      	movs	r3, #0
 8005234:	f7fb fbb8 	bl	80009a8 <__aeabi_dcmpeq>
 8005238:	4680      	mov	r8, r0
 800523a:	b160      	cbz	r0, 8005256 <_dtoa_r+0xde>
 800523c:	2301      	movs	r3, #1
 800523e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8562 	beq.w	8005d0e <_dtoa_r+0xb96>
 800524a:	4b86      	ldr	r3, [pc, #536]	; (8005464 <_dtoa_r+0x2ec>)
 800524c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	3b01      	subs	r3, #1
 8005252:	9303      	str	r3, [sp, #12]
 8005254:	e7de      	b.n	8005214 <_dtoa_r+0x9c>
 8005256:	ab16      	add	r3, sp, #88	; 0x58
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	ab17      	add	r3, sp, #92	; 0x5c
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	4628      	mov	r0, r5
 8005260:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005264:	f001 fcf4 	bl	8006c50 <__d2b>
 8005268:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800526c:	4682      	mov	sl, r0
 800526e:	2c00      	cmp	r4, #0
 8005270:	d07e      	beq.n	8005370 <_dtoa_r+0x1f8>
 8005272:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005278:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800527c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005280:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005284:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005288:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800528c:	4619      	mov	r1, r3
 800528e:	2200      	movs	r2, #0
 8005290:	4b75      	ldr	r3, [pc, #468]	; (8005468 <_dtoa_r+0x2f0>)
 8005292:	f7fa ff69 	bl	8000168 <__aeabi_dsub>
 8005296:	a368      	add	r3, pc, #416	; (adr r3, 8005438 <_dtoa_r+0x2c0>)
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	f7fb f91c 	bl	80004d8 <__aeabi_dmul>
 80052a0:	a367      	add	r3, pc, #412	; (adr r3, 8005440 <_dtoa_r+0x2c8>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	f7fa ff61 	bl	800016c <__adddf3>
 80052aa:	4606      	mov	r6, r0
 80052ac:	4620      	mov	r0, r4
 80052ae:	460f      	mov	r7, r1
 80052b0:	f7fb f8a8 	bl	8000404 <__aeabi_i2d>
 80052b4:	a364      	add	r3, pc, #400	; (adr r3, 8005448 <_dtoa_r+0x2d0>)
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f7fb f90d 	bl	80004d8 <__aeabi_dmul>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4630      	mov	r0, r6
 80052c4:	4639      	mov	r1, r7
 80052c6:	f7fa ff51 	bl	800016c <__adddf3>
 80052ca:	4606      	mov	r6, r0
 80052cc:	460f      	mov	r7, r1
 80052ce:	f7fb fbb3 	bl	8000a38 <__aeabi_d2iz>
 80052d2:	2200      	movs	r2, #0
 80052d4:	4683      	mov	fp, r0
 80052d6:	2300      	movs	r3, #0
 80052d8:	4630      	mov	r0, r6
 80052da:	4639      	mov	r1, r7
 80052dc:	f7fb fb6e 	bl	80009bc <__aeabi_dcmplt>
 80052e0:	b148      	cbz	r0, 80052f6 <_dtoa_r+0x17e>
 80052e2:	4658      	mov	r0, fp
 80052e4:	f7fb f88e 	bl	8000404 <__aeabi_i2d>
 80052e8:	4632      	mov	r2, r6
 80052ea:	463b      	mov	r3, r7
 80052ec:	f7fb fb5c 	bl	80009a8 <__aeabi_dcmpeq>
 80052f0:	b908      	cbnz	r0, 80052f6 <_dtoa_r+0x17e>
 80052f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052f6:	f1bb 0f16 	cmp.w	fp, #22
 80052fa:	d857      	bhi.n	80053ac <_dtoa_r+0x234>
 80052fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005300:	4b5a      	ldr	r3, [pc, #360]	; (800546c <_dtoa_r+0x2f4>)
 8005302:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f7fb fb57 	bl	80009bc <__aeabi_dcmplt>
 800530e:	2800      	cmp	r0, #0
 8005310:	d04e      	beq.n	80053b0 <_dtoa_r+0x238>
 8005312:	2300      	movs	r3, #0
 8005314:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005318:	930f      	str	r3, [sp, #60]	; 0x3c
 800531a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800531c:	1b1b      	subs	r3, r3, r4
 800531e:	1e5a      	subs	r2, r3, #1
 8005320:	bf46      	itte	mi
 8005322:	f1c3 0901 	rsbmi	r9, r3, #1
 8005326:	2300      	movmi	r3, #0
 8005328:	f04f 0900 	movpl.w	r9, #0
 800532c:	9209      	str	r2, [sp, #36]	; 0x24
 800532e:	bf48      	it	mi
 8005330:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005332:	f1bb 0f00 	cmp.w	fp, #0
 8005336:	db3d      	blt.n	80053b4 <_dtoa_r+0x23c>
 8005338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800533a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800533e:	445b      	add	r3, fp
 8005340:	9309      	str	r3, [sp, #36]	; 0x24
 8005342:	2300      	movs	r3, #0
 8005344:	930a      	str	r3, [sp, #40]	; 0x28
 8005346:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005348:	2b09      	cmp	r3, #9
 800534a:	d867      	bhi.n	800541c <_dtoa_r+0x2a4>
 800534c:	2b05      	cmp	r3, #5
 800534e:	bfc4      	itt	gt
 8005350:	3b04      	subgt	r3, #4
 8005352:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005356:	bfc8      	it	gt
 8005358:	2400      	movgt	r4, #0
 800535a:	f1a3 0302 	sub.w	r3, r3, #2
 800535e:	bfd8      	it	le
 8005360:	2401      	movle	r4, #1
 8005362:	2b03      	cmp	r3, #3
 8005364:	f200 8086 	bhi.w	8005474 <_dtoa_r+0x2fc>
 8005368:	e8df f003 	tbb	[pc, r3]
 800536c:	5637392c 	.word	0x5637392c
 8005370:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005374:	441c      	add	r4, r3
 8005376:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800537a:	2b20      	cmp	r3, #32
 800537c:	bfc1      	itttt	gt
 800537e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005382:	fa09 f903 	lslgt.w	r9, r9, r3
 8005386:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800538a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800538e:	bfd6      	itet	le
 8005390:	f1c3 0320 	rsble	r3, r3, #32
 8005394:	ea49 0003 	orrgt.w	r0, r9, r3
 8005398:	fa06 f003 	lslle.w	r0, r6, r3
 800539c:	f7fb f822 	bl	80003e4 <__aeabi_ui2d>
 80053a0:	2201      	movs	r2, #1
 80053a2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80053a6:	3c01      	subs	r4, #1
 80053a8:	9213      	str	r2, [sp, #76]	; 0x4c
 80053aa:	e76f      	b.n	800528c <_dtoa_r+0x114>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e7b3      	b.n	8005318 <_dtoa_r+0x1a0>
 80053b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80053b2:	e7b2      	b.n	800531a <_dtoa_r+0x1a2>
 80053b4:	f1cb 0300 	rsb	r3, fp, #0
 80053b8:	930a      	str	r3, [sp, #40]	; 0x28
 80053ba:	2300      	movs	r3, #0
 80053bc:	eba9 090b 	sub.w	r9, r9, fp
 80053c0:	930e      	str	r3, [sp, #56]	; 0x38
 80053c2:	e7c0      	b.n	8005346 <_dtoa_r+0x1ce>
 80053c4:	2300      	movs	r3, #0
 80053c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	dc55      	bgt.n	800547a <_dtoa_r+0x302>
 80053ce:	2301      	movs	r3, #1
 80053d0:	461a      	mov	r2, r3
 80053d2:	9306      	str	r3, [sp, #24]
 80053d4:	9308      	str	r3, [sp, #32]
 80053d6:	9223      	str	r2, [sp, #140]	; 0x8c
 80053d8:	e00b      	b.n	80053f2 <_dtoa_r+0x27a>
 80053da:	2301      	movs	r3, #1
 80053dc:	e7f3      	b.n	80053c6 <_dtoa_r+0x24e>
 80053de:	2300      	movs	r3, #0
 80053e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80053e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053e4:	445b      	add	r3, fp
 80053e6:	9306      	str	r3, [sp, #24]
 80053e8:	3301      	adds	r3, #1
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	9308      	str	r3, [sp, #32]
 80053ee:	bfb8      	it	lt
 80053f0:	2301      	movlt	r3, #1
 80053f2:	2100      	movs	r1, #0
 80053f4:	2204      	movs	r2, #4
 80053f6:	69e8      	ldr	r0, [r5, #28]
 80053f8:	f102 0614 	add.w	r6, r2, #20
 80053fc:	429e      	cmp	r6, r3
 80053fe:	d940      	bls.n	8005482 <_dtoa_r+0x30a>
 8005400:	6041      	str	r1, [r0, #4]
 8005402:	4628      	mov	r0, r5
 8005404:	f001 f850 	bl	80064a8 <_Balloc>
 8005408:	9003      	str	r0, [sp, #12]
 800540a:	2800      	cmp	r0, #0
 800540c:	d13c      	bne.n	8005488 <_dtoa_r+0x310>
 800540e:	4602      	mov	r2, r0
 8005410:	f240 11af 	movw	r1, #431	; 0x1af
 8005414:	4b16      	ldr	r3, [pc, #88]	; (8005470 <_dtoa_r+0x2f8>)
 8005416:	e6c3      	b.n	80051a0 <_dtoa_r+0x28>
 8005418:	2301      	movs	r3, #1
 800541a:	e7e1      	b.n	80053e0 <_dtoa_r+0x268>
 800541c:	2401      	movs	r4, #1
 800541e:	2300      	movs	r3, #0
 8005420:	940b      	str	r4, [sp, #44]	; 0x2c
 8005422:	9322      	str	r3, [sp, #136]	; 0x88
 8005424:	f04f 33ff 	mov.w	r3, #4294967295
 8005428:	2200      	movs	r2, #0
 800542a:	9306      	str	r3, [sp, #24]
 800542c:	9308      	str	r3, [sp, #32]
 800542e:	2312      	movs	r3, #18
 8005430:	e7d1      	b.n	80053d6 <_dtoa_r+0x25e>
 8005432:	bf00      	nop
 8005434:	f3af 8000 	nop.w
 8005438:	636f4361 	.word	0x636f4361
 800543c:	3fd287a7 	.word	0x3fd287a7
 8005440:	8b60c8b3 	.word	0x8b60c8b3
 8005444:	3fc68a28 	.word	0x3fc68a28
 8005448:	509f79fb 	.word	0x509f79fb
 800544c:	3fd34413 	.word	0x3fd34413
 8005450:	08007b0f 	.word	0x08007b0f
 8005454:	08007b26 	.word	0x08007b26
 8005458:	7ff00000 	.word	0x7ff00000
 800545c:	08007b0b 	.word	0x08007b0b
 8005460:	08007b02 	.word	0x08007b02
 8005464:	08007ad2 	.word	0x08007ad2
 8005468:	3ff80000 	.word	0x3ff80000
 800546c:	08007c70 	.word	0x08007c70
 8005470:	08007b7e 	.word	0x08007b7e
 8005474:	2301      	movs	r3, #1
 8005476:	930b      	str	r3, [sp, #44]	; 0x2c
 8005478:	e7d4      	b.n	8005424 <_dtoa_r+0x2ac>
 800547a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800547c:	9306      	str	r3, [sp, #24]
 800547e:	9308      	str	r3, [sp, #32]
 8005480:	e7b7      	b.n	80053f2 <_dtoa_r+0x27a>
 8005482:	3101      	adds	r1, #1
 8005484:	0052      	lsls	r2, r2, #1
 8005486:	e7b7      	b.n	80053f8 <_dtoa_r+0x280>
 8005488:	69eb      	ldr	r3, [r5, #28]
 800548a:	9a03      	ldr	r2, [sp, #12]
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	9b08      	ldr	r3, [sp, #32]
 8005490:	2b0e      	cmp	r3, #14
 8005492:	f200 80a8 	bhi.w	80055e6 <_dtoa_r+0x46e>
 8005496:	2c00      	cmp	r4, #0
 8005498:	f000 80a5 	beq.w	80055e6 <_dtoa_r+0x46e>
 800549c:	f1bb 0f00 	cmp.w	fp, #0
 80054a0:	dd34      	ble.n	800550c <_dtoa_r+0x394>
 80054a2:	4b9a      	ldr	r3, [pc, #616]	; (800570c <_dtoa_r+0x594>)
 80054a4:	f00b 020f 	and.w	r2, fp, #15
 80054a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80054b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054b4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80054b8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80054bc:	d016      	beq.n	80054ec <_dtoa_r+0x374>
 80054be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054c2:	4b93      	ldr	r3, [pc, #588]	; (8005710 <_dtoa_r+0x598>)
 80054c4:	2703      	movs	r7, #3
 80054c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054ca:	f7fb f92f 	bl	800072c <__aeabi_ddiv>
 80054ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054d2:	f004 040f 	and.w	r4, r4, #15
 80054d6:	4e8e      	ldr	r6, [pc, #568]	; (8005710 <_dtoa_r+0x598>)
 80054d8:	b954      	cbnz	r4, 80054f0 <_dtoa_r+0x378>
 80054da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054e2:	f7fb f923 	bl	800072c <__aeabi_ddiv>
 80054e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054ea:	e029      	b.n	8005540 <_dtoa_r+0x3c8>
 80054ec:	2702      	movs	r7, #2
 80054ee:	e7f2      	b.n	80054d6 <_dtoa_r+0x35e>
 80054f0:	07e1      	lsls	r1, r4, #31
 80054f2:	d508      	bpl.n	8005506 <_dtoa_r+0x38e>
 80054f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054fc:	f7fa ffec 	bl	80004d8 <__aeabi_dmul>
 8005500:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005504:	3701      	adds	r7, #1
 8005506:	1064      	asrs	r4, r4, #1
 8005508:	3608      	adds	r6, #8
 800550a:	e7e5      	b.n	80054d8 <_dtoa_r+0x360>
 800550c:	f000 80a5 	beq.w	800565a <_dtoa_r+0x4e2>
 8005510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005514:	f1cb 0400 	rsb	r4, fp, #0
 8005518:	4b7c      	ldr	r3, [pc, #496]	; (800570c <_dtoa_r+0x594>)
 800551a:	f004 020f 	and.w	r2, r4, #15
 800551e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f7fa ffd7 	bl	80004d8 <__aeabi_dmul>
 800552a:	2702      	movs	r7, #2
 800552c:	2300      	movs	r3, #0
 800552e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005532:	4e77      	ldr	r6, [pc, #476]	; (8005710 <_dtoa_r+0x598>)
 8005534:	1124      	asrs	r4, r4, #4
 8005536:	2c00      	cmp	r4, #0
 8005538:	f040 8084 	bne.w	8005644 <_dtoa_r+0x4cc>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1d2      	bne.n	80054e6 <_dtoa_r+0x36e>
 8005540:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005544:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8087 	beq.w	800565e <_dtoa_r+0x4e6>
 8005550:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005554:	2200      	movs	r2, #0
 8005556:	4b6f      	ldr	r3, [pc, #444]	; (8005714 <_dtoa_r+0x59c>)
 8005558:	f7fb fa30 	bl	80009bc <__aeabi_dcmplt>
 800555c:	2800      	cmp	r0, #0
 800555e:	d07e      	beq.n	800565e <_dtoa_r+0x4e6>
 8005560:	9b08      	ldr	r3, [sp, #32]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d07b      	beq.n	800565e <_dtoa_r+0x4e6>
 8005566:	9b06      	ldr	r3, [sp, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	dd38      	ble.n	80055de <_dtoa_r+0x466>
 800556c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005570:	2200      	movs	r2, #0
 8005572:	4b69      	ldr	r3, [pc, #420]	; (8005718 <_dtoa_r+0x5a0>)
 8005574:	f7fa ffb0 	bl	80004d8 <__aeabi_dmul>
 8005578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800557c:	9c06      	ldr	r4, [sp, #24]
 800557e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005582:	3701      	adds	r7, #1
 8005584:	4638      	mov	r0, r7
 8005586:	f7fa ff3d 	bl	8000404 <__aeabi_i2d>
 800558a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800558e:	f7fa ffa3 	bl	80004d8 <__aeabi_dmul>
 8005592:	2200      	movs	r2, #0
 8005594:	4b61      	ldr	r3, [pc, #388]	; (800571c <_dtoa_r+0x5a4>)
 8005596:	f7fa fde9 	bl	800016c <__adddf3>
 800559a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800559e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055a2:	9611      	str	r6, [sp, #68]	; 0x44
 80055a4:	2c00      	cmp	r4, #0
 80055a6:	d15d      	bne.n	8005664 <_dtoa_r+0x4ec>
 80055a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055ac:	2200      	movs	r2, #0
 80055ae:	4b5c      	ldr	r3, [pc, #368]	; (8005720 <_dtoa_r+0x5a8>)
 80055b0:	f7fa fdda 	bl	8000168 <__aeabi_dsub>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055bc:	4633      	mov	r3, r6
 80055be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055c0:	f7fb fa1a 	bl	80009f8 <__aeabi_dcmpgt>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	f040 8295 	bne.w	8005af4 <_dtoa_r+0x97c>
 80055ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80055d4:	f7fb f9f2 	bl	80009bc <__aeabi_dcmplt>
 80055d8:	2800      	cmp	r0, #0
 80055da:	f040 8289 	bne.w	8005af0 <_dtoa_r+0x978>
 80055de:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80055e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f2c0 8151 	blt.w	8005890 <_dtoa_r+0x718>
 80055ee:	f1bb 0f0e 	cmp.w	fp, #14
 80055f2:	f300 814d 	bgt.w	8005890 <_dtoa_r+0x718>
 80055f6:	4b45      	ldr	r3, [pc, #276]	; (800570c <_dtoa_r+0x594>)
 80055f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80055fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005600:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005604:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005606:	2b00      	cmp	r3, #0
 8005608:	f280 80da 	bge.w	80057c0 <_dtoa_r+0x648>
 800560c:	9b08      	ldr	r3, [sp, #32]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f300 80d6 	bgt.w	80057c0 <_dtoa_r+0x648>
 8005614:	f040 826b 	bne.w	8005aee <_dtoa_r+0x976>
 8005618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800561c:	2200      	movs	r2, #0
 800561e:	4b40      	ldr	r3, [pc, #256]	; (8005720 <_dtoa_r+0x5a8>)
 8005620:	f7fa ff5a 	bl	80004d8 <__aeabi_dmul>
 8005624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005628:	f7fb f9dc 	bl	80009e4 <__aeabi_dcmpge>
 800562c:	9c08      	ldr	r4, [sp, #32]
 800562e:	4626      	mov	r6, r4
 8005630:	2800      	cmp	r0, #0
 8005632:	f040 8241 	bne.w	8005ab8 <_dtoa_r+0x940>
 8005636:	2331      	movs	r3, #49	; 0x31
 8005638:	9f03      	ldr	r7, [sp, #12]
 800563a:	f10b 0b01 	add.w	fp, fp, #1
 800563e:	f807 3b01 	strb.w	r3, [r7], #1
 8005642:	e23d      	b.n	8005ac0 <_dtoa_r+0x948>
 8005644:	07e2      	lsls	r2, r4, #31
 8005646:	d505      	bpl.n	8005654 <_dtoa_r+0x4dc>
 8005648:	e9d6 2300 	ldrd	r2, r3, [r6]
 800564c:	f7fa ff44 	bl	80004d8 <__aeabi_dmul>
 8005650:	2301      	movs	r3, #1
 8005652:	3701      	adds	r7, #1
 8005654:	1064      	asrs	r4, r4, #1
 8005656:	3608      	adds	r6, #8
 8005658:	e76d      	b.n	8005536 <_dtoa_r+0x3be>
 800565a:	2702      	movs	r7, #2
 800565c:	e770      	b.n	8005540 <_dtoa_r+0x3c8>
 800565e:	46d8      	mov	r8, fp
 8005660:	9c08      	ldr	r4, [sp, #32]
 8005662:	e78f      	b.n	8005584 <_dtoa_r+0x40c>
 8005664:	9903      	ldr	r1, [sp, #12]
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <_dtoa_r+0x594>)
 8005668:	4421      	add	r1, r4
 800566a:	9112      	str	r1, [sp, #72]	; 0x48
 800566c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800566e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005672:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005676:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800567a:	2900      	cmp	r1, #0
 800567c:	d054      	beq.n	8005728 <_dtoa_r+0x5b0>
 800567e:	2000      	movs	r0, #0
 8005680:	4928      	ldr	r1, [pc, #160]	; (8005724 <_dtoa_r+0x5ac>)
 8005682:	f7fb f853 	bl	800072c <__aeabi_ddiv>
 8005686:	463b      	mov	r3, r7
 8005688:	4632      	mov	r2, r6
 800568a:	f7fa fd6d 	bl	8000168 <__aeabi_dsub>
 800568e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005692:	9f03      	ldr	r7, [sp, #12]
 8005694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005698:	f7fb f9ce 	bl	8000a38 <__aeabi_d2iz>
 800569c:	4604      	mov	r4, r0
 800569e:	f7fa feb1 	bl	8000404 <__aeabi_i2d>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056aa:	f7fa fd5d 	bl	8000168 <__aeabi_dsub>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	3430      	adds	r4, #48	; 0x30
 80056b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056bc:	f807 4b01 	strb.w	r4, [r7], #1
 80056c0:	f7fb f97c 	bl	80009bc <__aeabi_dcmplt>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d173      	bne.n	80057b0 <_dtoa_r+0x638>
 80056c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056cc:	2000      	movs	r0, #0
 80056ce:	4911      	ldr	r1, [pc, #68]	; (8005714 <_dtoa_r+0x59c>)
 80056d0:	f7fa fd4a 	bl	8000168 <__aeabi_dsub>
 80056d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056d8:	f7fb f970 	bl	80009bc <__aeabi_dcmplt>
 80056dc:	2800      	cmp	r0, #0
 80056de:	f040 80b6 	bne.w	800584e <_dtoa_r+0x6d6>
 80056e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056e4:	429f      	cmp	r7, r3
 80056e6:	f43f af7a 	beq.w	80055de <_dtoa_r+0x466>
 80056ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056ee:	2200      	movs	r2, #0
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <_dtoa_r+0x5a0>)
 80056f2:	f7fa fef1 	bl	80004d8 <__aeabi_dmul>
 80056f6:	2200      	movs	r2, #0
 80056f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <_dtoa_r+0x5a0>)
 8005702:	f7fa fee9 	bl	80004d8 <__aeabi_dmul>
 8005706:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800570a:	e7c3      	b.n	8005694 <_dtoa_r+0x51c>
 800570c:	08007c70 	.word	0x08007c70
 8005710:	08007c48 	.word	0x08007c48
 8005714:	3ff00000 	.word	0x3ff00000
 8005718:	40240000 	.word	0x40240000
 800571c:	401c0000 	.word	0x401c0000
 8005720:	40140000 	.word	0x40140000
 8005724:	3fe00000 	.word	0x3fe00000
 8005728:	4630      	mov	r0, r6
 800572a:	4639      	mov	r1, r7
 800572c:	f7fa fed4 	bl	80004d8 <__aeabi_dmul>
 8005730:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005732:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005736:	9c03      	ldr	r4, [sp, #12]
 8005738:	9314      	str	r3, [sp, #80]	; 0x50
 800573a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800573e:	f7fb f97b 	bl	8000a38 <__aeabi_d2iz>
 8005742:	9015      	str	r0, [sp, #84]	; 0x54
 8005744:	f7fa fe5e 	bl	8000404 <__aeabi_i2d>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005750:	f7fa fd0a 	bl	8000168 <__aeabi_dsub>
 8005754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005756:	4606      	mov	r6, r0
 8005758:	3330      	adds	r3, #48	; 0x30
 800575a:	f804 3b01 	strb.w	r3, [r4], #1
 800575e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005760:	460f      	mov	r7, r1
 8005762:	429c      	cmp	r4, r3
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	d124      	bne.n	80057b4 <_dtoa_r+0x63c>
 800576a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800576e:	4baf      	ldr	r3, [pc, #700]	; (8005a2c <_dtoa_r+0x8b4>)
 8005770:	f7fa fcfc 	bl	800016c <__adddf3>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4630      	mov	r0, r6
 800577a:	4639      	mov	r1, r7
 800577c:	f7fb f93c 	bl	80009f8 <__aeabi_dcmpgt>
 8005780:	2800      	cmp	r0, #0
 8005782:	d163      	bne.n	800584c <_dtoa_r+0x6d4>
 8005784:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005788:	2000      	movs	r0, #0
 800578a:	49a8      	ldr	r1, [pc, #672]	; (8005a2c <_dtoa_r+0x8b4>)
 800578c:	f7fa fcec 	bl	8000168 <__aeabi_dsub>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4630      	mov	r0, r6
 8005796:	4639      	mov	r1, r7
 8005798:	f7fb f910 	bl	80009bc <__aeabi_dcmplt>
 800579c:	2800      	cmp	r0, #0
 800579e:	f43f af1e 	beq.w	80055de <_dtoa_r+0x466>
 80057a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80057a4:	1e7b      	subs	r3, r7, #1
 80057a6:	9314      	str	r3, [sp, #80]	; 0x50
 80057a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80057ac:	2b30      	cmp	r3, #48	; 0x30
 80057ae:	d0f8      	beq.n	80057a2 <_dtoa_r+0x62a>
 80057b0:	46c3      	mov	fp, r8
 80057b2:	e03b      	b.n	800582c <_dtoa_r+0x6b4>
 80057b4:	4b9e      	ldr	r3, [pc, #632]	; (8005a30 <_dtoa_r+0x8b8>)
 80057b6:	f7fa fe8f 	bl	80004d8 <__aeabi_dmul>
 80057ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057be:	e7bc      	b.n	800573a <_dtoa_r+0x5c2>
 80057c0:	9f03      	ldr	r7, [sp, #12]
 80057c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80057c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057ca:	4640      	mov	r0, r8
 80057cc:	4649      	mov	r1, r9
 80057ce:	f7fa ffad 	bl	800072c <__aeabi_ddiv>
 80057d2:	f7fb f931 	bl	8000a38 <__aeabi_d2iz>
 80057d6:	4604      	mov	r4, r0
 80057d8:	f7fa fe14 	bl	8000404 <__aeabi_i2d>
 80057dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057e0:	f7fa fe7a 	bl	80004d8 <__aeabi_dmul>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4640      	mov	r0, r8
 80057ea:	4649      	mov	r1, r9
 80057ec:	f7fa fcbc 	bl	8000168 <__aeabi_dsub>
 80057f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80057f4:	f807 6b01 	strb.w	r6, [r7], #1
 80057f8:	9e03      	ldr	r6, [sp, #12]
 80057fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80057fe:	1bbe      	subs	r6, r7, r6
 8005800:	45b4      	cmp	ip, r6
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	d136      	bne.n	8005876 <_dtoa_r+0x6fe>
 8005808:	f7fa fcb0 	bl	800016c <__adddf3>
 800580c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005810:	4680      	mov	r8, r0
 8005812:	4689      	mov	r9, r1
 8005814:	f7fb f8f0 	bl	80009f8 <__aeabi_dcmpgt>
 8005818:	bb58      	cbnz	r0, 8005872 <_dtoa_r+0x6fa>
 800581a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800581e:	4640      	mov	r0, r8
 8005820:	4649      	mov	r1, r9
 8005822:	f7fb f8c1 	bl	80009a8 <__aeabi_dcmpeq>
 8005826:	b108      	cbz	r0, 800582c <_dtoa_r+0x6b4>
 8005828:	07e3      	lsls	r3, r4, #31
 800582a:	d422      	bmi.n	8005872 <_dtoa_r+0x6fa>
 800582c:	4651      	mov	r1, sl
 800582e:	4628      	mov	r0, r5
 8005830:	f000 fe7a 	bl	8006528 <_Bfree>
 8005834:	2300      	movs	r3, #0
 8005836:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005838:	703b      	strb	r3, [r7, #0]
 800583a:	f10b 0301 	add.w	r3, fp, #1
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005842:	2b00      	cmp	r3, #0
 8005844:	f43f ace6 	beq.w	8005214 <_dtoa_r+0x9c>
 8005848:	601f      	str	r7, [r3, #0]
 800584a:	e4e3      	b.n	8005214 <_dtoa_r+0x9c>
 800584c:	4627      	mov	r7, r4
 800584e:	463b      	mov	r3, r7
 8005850:	461f      	mov	r7, r3
 8005852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005856:	2a39      	cmp	r2, #57	; 0x39
 8005858:	d107      	bne.n	800586a <_dtoa_r+0x6f2>
 800585a:	9a03      	ldr	r2, [sp, #12]
 800585c:	429a      	cmp	r2, r3
 800585e:	d1f7      	bne.n	8005850 <_dtoa_r+0x6d8>
 8005860:	2230      	movs	r2, #48	; 0x30
 8005862:	9903      	ldr	r1, [sp, #12]
 8005864:	f108 0801 	add.w	r8, r8, #1
 8005868:	700a      	strb	r2, [r1, #0]
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	3201      	adds	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e79e      	b.n	80057b0 <_dtoa_r+0x638>
 8005872:	46d8      	mov	r8, fp
 8005874:	e7eb      	b.n	800584e <_dtoa_r+0x6d6>
 8005876:	2200      	movs	r2, #0
 8005878:	4b6d      	ldr	r3, [pc, #436]	; (8005a30 <_dtoa_r+0x8b8>)
 800587a:	f7fa fe2d 	bl	80004d8 <__aeabi_dmul>
 800587e:	2200      	movs	r2, #0
 8005880:	2300      	movs	r3, #0
 8005882:	4680      	mov	r8, r0
 8005884:	4689      	mov	r9, r1
 8005886:	f7fb f88f 	bl	80009a8 <__aeabi_dcmpeq>
 800588a:	2800      	cmp	r0, #0
 800588c:	d09b      	beq.n	80057c6 <_dtoa_r+0x64e>
 800588e:	e7cd      	b.n	800582c <_dtoa_r+0x6b4>
 8005890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005892:	2a00      	cmp	r2, #0
 8005894:	f000 80c4 	beq.w	8005a20 <_dtoa_r+0x8a8>
 8005898:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800589a:	2a01      	cmp	r2, #1
 800589c:	f300 80a8 	bgt.w	80059f0 <_dtoa_r+0x878>
 80058a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	f000 80a0 	beq.w	80059e8 <_dtoa_r+0x870>
 80058a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058ac:	464f      	mov	r7, r9
 80058ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058b2:	2101      	movs	r1, #1
 80058b4:	441a      	add	r2, r3
 80058b6:	4628      	mov	r0, r5
 80058b8:	4499      	add	r9, r3
 80058ba:	9209      	str	r2, [sp, #36]	; 0x24
 80058bc:	f000 ff34 	bl	8006728 <__i2b>
 80058c0:	4606      	mov	r6, r0
 80058c2:	b15f      	cbz	r7, 80058dc <_dtoa_r+0x764>
 80058c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	dd08      	ble.n	80058dc <_dtoa_r+0x764>
 80058ca:	42bb      	cmp	r3, r7
 80058cc:	bfa8      	it	ge
 80058ce:	463b      	movge	r3, r7
 80058d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058d2:	eba9 0903 	sub.w	r9, r9, r3
 80058d6:	1aff      	subs	r7, r7, r3
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	9309      	str	r3, [sp, #36]	; 0x24
 80058dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058de:	b1f3      	cbz	r3, 800591e <_dtoa_r+0x7a6>
 80058e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80a0 	beq.w	8005a28 <_dtoa_r+0x8b0>
 80058e8:	2c00      	cmp	r4, #0
 80058ea:	dd10      	ble.n	800590e <_dtoa_r+0x796>
 80058ec:	4631      	mov	r1, r6
 80058ee:	4622      	mov	r2, r4
 80058f0:	4628      	mov	r0, r5
 80058f2:	f000 ffd7 	bl	80068a4 <__pow5mult>
 80058f6:	4652      	mov	r2, sl
 80058f8:	4601      	mov	r1, r0
 80058fa:	4606      	mov	r6, r0
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 ff29 	bl	8006754 <__multiply>
 8005902:	4680      	mov	r8, r0
 8005904:	4651      	mov	r1, sl
 8005906:	4628      	mov	r0, r5
 8005908:	f000 fe0e 	bl	8006528 <_Bfree>
 800590c:	46c2      	mov	sl, r8
 800590e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005910:	1b1a      	subs	r2, r3, r4
 8005912:	d004      	beq.n	800591e <_dtoa_r+0x7a6>
 8005914:	4651      	mov	r1, sl
 8005916:	4628      	mov	r0, r5
 8005918:	f000 ffc4 	bl	80068a4 <__pow5mult>
 800591c:	4682      	mov	sl, r0
 800591e:	2101      	movs	r1, #1
 8005920:	4628      	mov	r0, r5
 8005922:	f000 ff01 	bl	8006728 <__i2b>
 8005926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005928:	4604      	mov	r4, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	f340 8082 	ble.w	8005a34 <_dtoa_r+0x8bc>
 8005930:	461a      	mov	r2, r3
 8005932:	4601      	mov	r1, r0
 8005934:	4628      	mov	r0, r5
 8005936:	f000 ffb5 	bl	80068a4 <__pow5mult>
 800593a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800593c:	4604      	mov	r4, r0
 800593e:	2b01      	cmp	r3, #1
 8005940:	dd7b      	ble.n	8005a3a <_dtoa_r+0x8c2>
 8005942:	f04f 0800 	mov.w	r8, #0
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800594c:	6918      	ldr	r0, [r3, #16]
 800594e:	f000 fe9d 	bl	800668c <__hi0bits>
 8005952:	f1c0 0020 	rsb	r0, r0, #32
 8005956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005958:	4418      	add	r0, r3
 800595a:	f010 001f 	ands.w	r0, r0, #31
 800595e:	f000 8092 	beq.w	8005a86 <_dtoa_r+0x90e>
 8005962:	f1c0 0320 	rsb	r3, r0, #32
 8005966:	2b04      	cmp	r3, #4
 8005968:	f340 8085 	ble.w	8005a76 <_dtoa_r+0x8fe>
 800596c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800596e:	f1c0 001c 	rsb	r0, r0, #28
 8005972:	4403      	add	r3, r0
 8005974:	4481      	add	r9, r0
 8005976:	4407      	add	r7, r0
 8005978:	9309      	str	r3, [sp, #36]	; 0x24
 800597a:	f1b9 0f00 	cmp.w	r9, #0
 800597e:	dd05      	ble.n	800598c <_dtoa_r+0x814>
 8005980:	4651      	mov	r1, sl
 8005982:	464a      	mov	r2, r9
 8005984:	4628      	mov	r0, r5
 8005986:	f000 ffe7 	bl	8006958 <__lshift>
 800598a:	4682      	mov	sl, r0
 800598c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	dd05      	ble.n	800599e <_dtoa_r+0x826>
 8005992:	4621      	mov	r1, r4
 8005994:	461a      	mov	r2, r3
 8005996:	4628      	mov	r0, r5
 8005998:	f000 ffde 	bl	8006958 <__lshift>
 800599c:	4604      	mov	r4, r0
 800599e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d072      	beq.n	8005a8a <_dtoa_r+0x912>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4650      	mov	r0, sl
 80059a8:	f001 f842 	bl	8006a30 <__mcmp>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	da6c      	bge.n	8005a8a <_dtoa_r+0x912>
 80059b0:	2300      	movs	r3, #0
 80059b2:	4651      	mov	r1, sl
 80059b4:	220a      	movs	r2, #10
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 fdd8 	bl	800656c <__multadd>
 80059bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059be:	4682      	mov	sl, r0
 80059c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 81ac 	beq.w	8005d22 <_dtoa_r+0xbaa>
 80059ca:	2300      	movs	r3, #0
 80059cc:	4631      	mov	r1, r6
 80059ce:	220a      	movs	r2, #10
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 fdcb 	bl	800656c <__multadd>
 80059d6:	9b06      	ldr	r3, [sp, #24]
 80059d8:	4606      	mov	r6, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f300 8093 	bgt.w	8005b06 <_dtoa_r+0x98e>
 80059e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	dc59      	bgt.n	8005a9a <_dtoa_r+0x922>
 80059e6:	e08e      	b.n	8005b06 <_dtoa_r+0x98e>
 80059e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059ee:	e75d      	b.n	80058ac <_dtoa_r+0x734>
 80059f0:	9b08      	ldr	r3, [sp, #32]
 80059f2:	1e5c      	subs	r4, r3, #1
 80059f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f6:	42a3      	cmp	r3, r4
 80059f8:	bfbf      	itttt	lt
 80059fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80059fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80059fe:	1ae3      	sublt	r3, r4, r3
 8005a00:	18d2      	addlt	r2, r2, r3
 8005a02:	bfa8      	it	ge
 8005a04:	1b1c      	subge	r4, r3, r4
 8005a06:	9b08      	ldr	r3, [sp, #32]
 8005a08:	bfbe      	ittt	lt
 8005a0a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005a0c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005a0e:	2400      	movlt	r4, #0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bfb5      	itete	lt
 8005a14:	eba9 0703 	sublt.w	r7, r9, r3
 8005a18:	464f      	movge	r7, r9
 8005a1a:	2300      	movlt	r3, #0
 8005a1c:	9b08      	ldrge	r3, [sp, #32]
 8005a1e:	e747      	b.n	80058b0 <_dtoa_r+0x738>
 8005a20:	464f      	mov	r7, r9
 8005a22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a26:	e74c      	b.n	80058c2 <_dtoa_r+0x74a>
 8005a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a2a:	e773      	b.n	8005914 <_dtoa_r+0x79c>
 8005a2c:	3fe00000 	.word	0x3fe00000
 8005a30:	40240000 	.word	0x40240000
 8005a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	dc18      	bgt.n	8005a6c <_dtoa_r+0x8f4>
 8005a3a:	9b04      	ldr	r3, [sp, #16]
 8005a3c:	b9b3      	cbnz	r3, 8005a6c <_dtoa_r+0x8f4>
 8005a3e:	9b05      	ldr	r3, [sp, #20]
 8005a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a44:	b993      	cbnz	r3, 8005a6c <_dtoa_r+0x8f4>
 8005a46:	9b05      	ldr	r3, [sp, #20]
 8005a48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a4c:	0d1b      	lsrs	r3, r3, #20
 8005a4e:	051b      	lsls	r3, r3, #20
 8005a50:	b17b      	cbz	r3, 8005a72 <_dtoa_r+0x8fa>
 8005a52:	f04f 0801 	mov.w	r8, #1
 8005a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a58:	f109 0901 	add.w	r9, r9, #1
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f47f af6f 	bne.w	8005946 <_dtoa_r+0x7ce>
 8005a68:	2001      	movs	r0, #1
 8005a6a:	e774      	b.n	8005956 <_dtoa_r+0x7de>
 8005a6c:	f04f 0800 	mov.w	r8, #0
 8005a70:	e7f6      	b.n	8005a60 <_dtoa_r+0x8e8>
 8005a72:	4698      	mov	r8, r3
 8005a74:	e7f4      	b.n	8005a60 <_dtoa_r+0x8e8>
 8005a76:	d080      	beq.n	800597a <_dtoa_r+0x802>
 8005a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a7a:	331c      	adds	r3, #28
 8005a7c:	441a      	add	r2, r3
 8005a7e:	4499      	add	r9, r3
 8005a80:	441f      	add	r7, r3
 8005a82:	9209      	str	r2, [sp, #36]	; 0x24
 8005a84:	e779      	b.n	800597a <_dtoa_r+0x802>
 8005a86:	4603      	mov	r3, r0
 8005a88:	e7f6      	b.n	8005a78 <_dtoa_r+0x900>
 8005a8a:	9b08      	ldr	r3, [sp, #32]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dc34      	bgt.n	8005afa <_dtoa_r+0x982>
 8005a90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	dd31      	ble.n	8005afa <_dtoa_r+0x982>
 8005a96:	9b08      	ldr	r3, [sp, #32]
 8005a98:	9306      	str	r3, [sp, #24]
 8005a9a:	9b06      	ldr	r3, [sp, #24]
 8005a9c:	b963      	cbnz	r3, 8005ab8 <_dtoa_r+0x940>
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	2205      	movs	r2, #5
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 fd62 	bl	800656c <__multadd>
 8005aa8:	4601      	mov	r1, r0
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4650      	mov	r0, sl
 8005aae:	f000 ffbf 	bl	8006a30 <__mcmp>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f73f adbf 	bgt.w	8005636 <_dtoa_r+0x4be>
 8005ab8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005aba:	9f03      	ldr	r7, [sp, #12]
 8005abc:	ea6f 0b03 	mvn.w	fp, r3
 8005ac0:	f04f 0800 	mov.w	r8, #0
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 fd2e 	bl	8006528 <_Bfree>
 8005acc:	2e00      	cmp	r6, #0
 8005ace:	f43f aead 	beq.w	800582c <_dtoa_r+0x6b4>
 8005ad2:	f1b8 0f00 	cmp.w	r8, #0
 8005ad6:	d005      	beq.n	8005ae4 <_dtoa_r+0x96c>
 8005ad8:	45b0      	cmp	r8, r6
 8005ada:	d003      	beq.n	8005ae4 <_dtoa_r+0x96c>
 8005adc:	4641      	mov	r1, r8
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 fd22 	bl	8006528 <_Bfree>
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 fd1e 	bl	8006528 <_Bfree>
 8005aec:	e69e      	b.n	800582c <_dtoa_r+0x6b4>
 8005aee:	2400      	movs	r4, #0
 8005af0:	4626      	mov	r6, r4
 8005af2:	e7e1      	b.n	8005ab8 <_dtoa_r+0x940>
 8005af4:	46c3      	mov	fp, r8
 8005af6:	4626      	mov	r6, r4
 8005af8:	e59d      	b.n	8005636 <_dtoa_r+0x4be>
 8005afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80c8 	beq.w	8005c92 <_dtoa_r+0xb1a>
 8005b02:	9b08      	ldr	r3, [sp, #32]
 8005b04:	9306      	str	r3, [sp, #24]
 8005b06:	2f00      	cmp	r7, #0
 8005b08:	dd05      	ble.n	8005b16 <_dtoa_r+0x99e>
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	463a      	mov	r2, r7
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 ff22 	bl	8006958 <__lshift>
 8005b14:	4606      	mov	r6, r0
 8005b16:	f1b8 0f00 	cmp.w	r8, #0
 8005b1a:	d05b      	beq.n	8005bd4 <_dtoa_r+0xa5c>
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	6871      	ldr	r1, [r6, #4]
 8005b20:	f000 fcc2 	bl	80064a8 <_Balloc>
 8005b24:	4607      	mov	r7, r0
 8005b26:	b928      	cbnz	r0, 8005b34 <_dtoa_r+0x9bc>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005b2e:	4b81      	ldr	r3, [pc, #516]	; (8005d34 <_dtoa_r+0xbbc>)
 8005b30:	f7ff bb36 	b.w	80051a0 <_dtoa_r+0x28>
 8005b34:	6932      	ldr	r2, [r6, #16]
 8005b36:	f106 010c 	add.w	r1, r6, #12
 8005b3a:	3202      	adds	r2, #2
 8005b3c:	0092      	lsls	r2, r2, #2
 8005b3e:	300c      	adds	r0, #12
 8005b40:	f7ff fa76 	bl	8005030 <memcpy>
 8005b44:	2201      	movs	r2, #1
 8005b46:	4639      	mov	r1, r7
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 ff05 	bl	8006958 <__lshift>
 8005b4e:	46b0      	mov	r8, r6
 8005b50:	4606      	mov	r6, r0
 8005b52:	9b03      	ldr	r3, [sp, #12]
 8005b54:	9a03      	ldr	r2, [sp, #12]
 8005b56:	3301      	adds	r3, #1
 8005b58:	9308      	str	r3, [sp, #32]
 8005b5a:	9b06      	ldr	r3, [sp, #24]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b60:	9b04      	ldr	r3, [sp, #16]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	930a      	str	r3, [sp, #40]	; 0x28
 8005b68:	9b08      	ldr	r3, [sp, #32]
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	4650      	mov	r0, sl
 8005b70:	9304      	str	r3, [sp, #16]
 8005b72:	f7ff fa75 	bl	8005060 <quorem>
 8005b76:	4641      	mov	r1, r8
 8005b78:	9006      	str	r0, [sp, #24]
 8005b7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b7e:	4650      	mov	r0, sl
 8005b80:	f000 ff56 	bl	8006a30 <__mcmp>
 8005b84:	4632      	mov	r2, r6
 8005b86:	9009      	str	r0, [sp, #36]	; 0x24
 8005b88:	4621      	mov	r1, r4
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	f000 ff6c 	bl	8006a68 <__mdiff>
 8005b90:	68c2      	ldr	r2, [r0, #12]
 8005b92:	4607      	mov	r7, r0
 8005b94:	bb02      	cbnz	r2, 8005bd8 <_dtoa_r+0xa60>
 8005b96:	4601      	mov	r1, r0
 8005b98:	4650      	mov	r0, sl
 8005b9a:	f000 ff49 	bl	8006a30 <__mcmp>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	920c      	str	r2, [sp, #48]	; 0x30
 8005ba6:	f000 fcbf 	bl	8006528 <_Bfree>
 8005baa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bae:	9f08      	ldr	r7, [sp, #32]
 8005bb0:	ea43 0102 	orr.w	r1, r3, r2
 8005bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb6:	4319      	orrs	r1, r3
 8005bb8:	d110      	bne.n	8005bdc <_dtoa_r+0xa64>
 8005bba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bbe:	d029      	beq.n	8005c14 <_dtoa_r+0xa9c>
 8005bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	dd02      	ble.n	8005bcc <_dtoa_r+0xa54>
 8005bc6:	9b06      	ldr	r3, [sp, #24]
 8005bc8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005bcc:	9b04      	ldr	r3, [sp, #16]
 8005bce:	f883 9000 	strb.w	r9, [r3]
 8005bd2:	e777      	b.n	8005ac4 <_dtoa_r+0x94c>
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	e7ba      	b.n	8005b4e <_dtoa_r+0x9d6>
 8005bd8:	2201      	movs	r2, #1
 8005bda:	e7e1      	b.n	8005ba0 <_dtoa_r+0xa28>
 8005bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	db04      	blt.n	8005bec <_dtoa_r+0xa74>
 8005be2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005be4:	430b      	orrs	r3, r1
 8005be6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005be8:	430b      	orrs	r3, r1
 8005bea:	d120      	bne.n	8005c2e <_dtoa_r+0xab6>
 8005bec:	2a00      	cmp	r2, #0
 8005bee:	dded      	ble.n	8005bcc <_dtoa_r+0xa54>
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f000 feaf 	bl	8006958 <__lshift>
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4682      	mov	sl, r0
 8005bfe:	f000 ff17 	bl	8006a30 <__mcmp>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	dc03      	bgt.n	8005c0e <_dtoa_r+0xa96>
 8005c06:	d1e1      	bne.n	8005bcc <_dtoa_r+0xa54>
 8005c08:	f019 0f01 	tst.w	r9, #1
 8005c0c:	d0de      	beq.n	8005bcc <_dtoa_r+0xa54>
 8005c0e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c12:	d1d8      	bne.n	8005bc6 <_dtoa_r+0xa4e>
 8005c14:	2339      	movs	r3, #57	; 0x39
 8005c16:	9a04      	ldr	r2, [sp, #16]
 8005c18:	7013      	strb	r3, [r2, #0]
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	461f      	mov	r7, r3
 8005c1e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	2a39      	cmp	r2, #57	; 0x39
 8005c26:	d06b      	beq.n	8005d00 <_dtoa_r+0xb88>
 8005c28:	3201      	adds	r2, #1
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	e74a      	b.n	8005ac4 <_dtoa_r+0x94c>
 8005c2e:	2a00      	cmp	r2, #0
 8005c30:	dd07      	ble.n	8005c42 <_dtoa_r+0xaca>
 8005c32:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c36:	d0ed      	beq.n	8005c14 <_dtoa_r+0xa9c>
 8005c38:	9a04      	ldr	r2, [sp, #16]
 8005c3a:	f109 0301 	add.w	r3, r9, #1
 8005c3e:	7013      	strb	r3, [r2, #0]
 8005c40:	e740      	b.n	8005ac4 <_dtoa_r+0x94c>
 8005c42:	9b08      	ldr	r3, [sp, #32]
 8005c44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c46:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d042      	beq.n	8005cd4 <_dtoa_r+0xb5c>
 8005c4e:	4651      	mov	r1, sl
 8005c50:	2300      	movs	r3, #0
 8005c52:	220a      	movs	r2, #10
 8005c54:	4628      	mov	r0, r5
 8005c56:	f000 fc89 	bl	800656c <__multadd>
 8005c5a:	45b0      	cmp	r8, r6
 8005c5c:	4682      	mov	sl, r0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	f04f 020a 	mov.w	r2, #10
 8005c66:	4641      	mov	r1, r8
 8005c68:	4628      	mov	r0, r5
 8005c6a:	d107      	bne.n	8005c7c <_dtoa_r+0xb04>
 8005c6c:	f000 fc7e 	bl	800656c <__multadd>
 8005c70:	4680      	mov	r8, r0
 8005c72:	4606      	mov	r6, r0
 8005c74:	9b08      	ldr	r3, [sp, #32]
 8005c76:	3301      	adds	r3, #1
 8005c78:	9308      	str	r3, [sp, #32]
 8005c7a:	e775      	b.n	8005b68 <_dtoa_r+0x9f0>
 8005c7c:	f000 fc76 	bl	800656c <__multadd>
 8005c80:	4631      	mov	r1, r6
 8005c82:	4680      	mov	r8, r0
 8005c84:	2300      	movs	r3, #0
 8005c86:	220a      	movs	r2, #10
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 fc6f 	bl	800656c <__multadd>
 8005c8e:	4606      	mov	r6, r0
 8005c90:	e7f0      	b.n	8005c74 <_dtoa_r+0xafc>
 8005c92:	9b08      	ldr	r3, [sp, #32]
 8005c94:	9306      	str	r3, [sp, #24]
 8005c96:	9f03      	ldr	r7, [sp, #12]
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	f7ff f9e0 	bl	8005060 <quorem>
 8005ca0:	9b03      	ldr	r3, [sp, #12]
 8005ca2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ca6:	f807 9b01 	strb.w	r9, [r7], #1
 8005caa:	1afa      	subs	r2, r7, r3
 8005cac:	9b06      	ldr	r3, [sp, #24]
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	dd07      	ble.n	8005cc2 <_dtoa_r+0xb4a>
 8005cb2:	4651      	mov	r1, sl
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	220a      	movs	r2, #10
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f000 fc57 	bl	800656c <__multadd>
 8005cbe:	4682      	mov	sl, r0
 8005cc0:	e7ea      	b.n	8005c98 <_dtoa_r+0xb20>
 8005cc2:	9b06      	ldr	r3, [sp, #24]
 8005cc4:	f04f 0800 	mov.w	r8, #0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bfcc      	ite	gt
 8005ccc:	461f      	movgt	r7, r3
 8005cce:	2701      	movle	r7, #1
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	441f      	add	r7, r3
 8005cd4:	4651      	mov	r1, sl
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f000 fe3d 	bl	8006958 <__lshift>
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4682      	mov	sl, r0
 8005ce2:	f000 fea5 	bl	8006a30 <__mcmp>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	dc97      	bgt.n	8005c1a <_dtoa_r+0xaa2>
 8005cea:	d102      	bne.n	8005cf2 <_dtoa_r+0xb7a>
 8005cec:	f019 0f01 	tst.w	r9, #1
 8005cf0:	d193      	bne.n	8005c1a <_dtoa_r+0xaa2>
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	461f      	mov	r7, r3
 8005cf6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cfa:	2a30      	cmp	r2, #48	; 0x30
 8005cfc:	d0fa      	beq.n	8005cf4 <_dtoa_r+0xb7c>
 8005cfe:	e6e1      	b.n	8005ac4 <_dtoa_r+0x94c>
 8005d00:	9a03      	ldr	r2, [sp, #12]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d18a      	bne.n	8005c1c <_dtoa_r+0xaa4>
 8005d06:	2331      	movs	r3, #49	; 0x31
 8005d08:	f10b 0b01 	add.w	fp, fp, #1
 8005d0c:	e797      	b.n	8005c3e <_dtoa_r+0xac6>
 8005d0e:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <_dtoa_r+0xbc0>)
 8005d10:	f7ff ba9f 	b.w	8005252 <_dtoa_r+0xda>
 8005d14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f47f aa77 	bne.w	800520a <_dtoa_r+0x92>
 8005d1c:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <_dtoa_r+0xbc4>)
 8005d1e:	f7ff ba98 	b.w	8005252 <_dtoa_r+0xda>
 8005d22:	9b06      	ldr	r3, [sp, #24]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	dcb6      	bgt.n	8005c96 <_dtoa_r+0xb1e>
 8005d28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	f73f aeb5 	bgt.w	8005a9a <_dtoa_r+0x922>
 8005d30:	e7b1      	b.n	8005c96 <_dtoa_r+0xb1e>
 8005d32:	bf00      	nop
 8005d34:	08007b7e 	.word	0x08007b7e
 8005d38:	08007ad1 	.word	0x08007ad1
 8005d3c:	08007b02 	.word	0x08007b02

08005d40 <_free_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4605      	mov	r5, r0
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d040      	beq.n	8005dca <_free_r+0x8a>
 8005d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d4c:	1f0c      	subs	r4, r1, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bfb8      	it	lt
 8005d52:	18e4      	addlt	r4, r4, r3
 8005d54:	f7fd fae8 	bl	8003328 <__malloc_lock>
 8005d58:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <_free_r+0x8c>)
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	b933      	cbnz	r3, 8005d6c <_free_r+0x2c>
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6014      	str	r4, [r2, #0]
 8005d62:	4628      	mov	r0, r5
 8005d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d68:	f7fd bae4 	b.w	8003334 <__malloc_unlock>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d908      	bls.n	8005d82 <_free_r+0x42>
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	1821      	adds	r1, r4, r0
 8005d74:	428b      	cmp	r3, r1
 8005d76:	bf01      	itttt	eq
 8005d78:	6819      	ldreq	r1, [r3, #0]
 8005d7a:	685b      	ldreq	r3, [r3, #4]
 8005d7c:	1809      	addeq	r1, r1, r0
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	e7ed      	b.n	8005d5e <_free_r+0x1e>
 8005d82:	461a      	mov	r2, r3
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b10b      	cbz	r3, 8005d8c <_free_r+0x4c>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d9fa      	bls.n	8005d82 <_free_r+0x42>
 8005d8c:	6811      	ldr	r1, [r2, #0]
 8005d8e:	1850      	adds	r0, r2, r1
 8005d90:	42a0      	cmp	r0, r4
 8005d92:	d10b      	bne.n	8005dac <_free_r+0x6c>
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	4401      	add	r1, r0
 8005d98:	1850      	adds	r0, r2, r1
 8005d9a:	4283      	cmp	r3, r0
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	d1e0      	bne.n	8005d62 <_free_r+0x22>
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	4408      	add	r0, r1
 8005da6:	6010      	str	r0, [r2, #0]
 8005da8:	6053      	str	r3, [r2, #4]
 8005daa:	e7da      	b.n	8005d62 <_free_r+0x22>
 8005dac:	d902      	bls.n	8005db4 <_free_r+0x74>
 8005dae:	230c      	movs	r3, #12
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	e7d6      	b.n	8005d62 <_free_r+0x22>
 8005db4:	6820      	ldr	r0, [r4, #0]
 8005db6:	1821      	adds	r1, r4, r0
 8005db8:	428b      	cmp	r3, r1
 8005dba:	bf01      	itttt	eq
 8005dbc:	6819      	ldreq	r1, [r3, #0]
 8005dbe:	685b      	ldreq	r3, [r3, #4]
 8005dc0:	1809      	addeq	r1, r1, r0
 8005dc2:	6021      	streq	r1, [r4, #0]
 8005dc4:	6063      	str	r3, [r4, #4]
 8005dc6:	6054      	str	r4, [r2, #4]
 8005dc8:	e7cb      	b.n	8005d62 <_free_r+0x22>
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20000330 	.word	0x20000330

08005dd0 <rshift>:
 8005dd0:	6903      	ldr	r3, [r0, #16]
 8005dd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005dda:	f100 0414 	add.w	r4, r0, #20
 8005dde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005de2:	dd46      	ble.n	8005e72 <rshift+0xa2>
 8005de4:	f011 011f 	ands.w	r1, r1, #31
 8005de8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005dec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005df0:	d10c      	bne.n	8005e0c <rshift+0x3c>
 8005df2:	4629      	mov	r1, r5
 8005df4:	f100 0710 	add.w	r7, r0, #16
 8005df8:	42b1      	cmp	r1, r6
 8005dfa:	d335      	bcc.n	8005e68 <rshift+0x98>
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	1eea      	subs	r2, r5, #3
 8005e02:	4296      	cmp	r6, r2
 8005e04:	bf38      	it	cc
 8005e06:	2300      	movcc	r3, #0
 8005e08:	4423      	add	r3, r4
 8005e0a:	e015      	b.n	8005e38 <rshift+0x68>
 8005e0c:	46a1      	mov	r9, r4
 8005e0e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005e12:	f1c1 0820 	rsb	r8, r1, #32
 8005e16:	40cf      	lsrs	r7, r1
 8005e18:	f105 0e04 	add.w	lr, r5, #4
 8005e1c:	4576      	cmp	r6, lr
 8005e1e:	46f4      	mov	ip, lr
 8005e20:	d816      	bhi.n	8005e50 <rshift+0x80>
 8005e22:	1a9a      	subs	r2, r3, r2
 8005e24:	0092      	lsls	r2, r2, #2
 8005e26:	3a04      	subs	r2, #4
 8005e28:	3501      	adds	r5, #1
 8005e2a:	42ae      	cmp	r6, r5
 8005e2c:	bf38      	it	cc
 8005e2e:	2200      	movcc	r2, #0
 8005e30:	18a3      	adds	r3, r4, r2
 8005e32:	50a7      	str	r7, [r4, r2]
 8005e34:	b107      	cbz	r7, 8005e38 <rshift+0x68>
 8005e36:	3304      	adds	r3, #4
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	eba3 0204 	sub.w	r2, r3, r4
 8005e3e:	bf08      	it	eq
 8005e40:	2300      	moveq	r3, #0
 8005e42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005e46:	6102      	str	r2, [r0, #16]
 8005e48:	bf08      	it	eq
 8005e4a:	6143      	streq	r3, [r0, #20]
 8005e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e50:	f8dc c000 	ldr.w	ip, [ip]
 8005e54:	fa0c fc08 	lsl.w	ip, ip, r8
 8005e58:	ea4c 0707 	orr.w	r7, ip, r7
 8005e5c:	f849 7b04 	str.w	r7, [r9], #4
 8005e60:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005e64:	40cf      	lsrs	r7, r1
 8005e66:	e7d9      	b.n	8005e1c <rshift+0x4c>
 8005e68:	f851 cb04 	ldr.w	ip, [r1], #4
 8005e6c:	f847 cf04 	str.w	ip, [r7, #4]!
 8005e70:	e7c2      	b.n	8005df8 <rshift+0x28>
 8005e72:	4623      	mov	r3, r4
 8005e74:	e7e0      	b.n	8005e38 <rshift+0x68>

08005e76 <__hexdig_fun>:
 8005e76:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005e7a:	2b09      	cmp	r3, #9
 8005e7c:	d802      	bhi.n	8005e84 <__hexdig_fun+0xe>
 8005e7e:	3820      	subs	r0, #32
 8005e80:	b2c0      	uxtb	r0, r0
 8005e82:	4770      	bx	lr
 8005e84:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005e88:	2b05      	cmp	r3, #5
 8005e8a:	d801      	bhi.n	8005e90 <__hexdig_fun+0x1a>
 8005e8c:	3847      	subs	r0, #71	; 0x47
 8005e8e:	e7f7      	b.n	8005e80 <__hexdig_fun+0xa>
 8005e90:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005e94:	2b05      	cmp	r3, #5
 8005e96:	d801      	bhi.n	8005e9c <__hexdig_fun+0x26>
 8005e98:	3827      	subs	r0, #39	; 0x27
 8005e9a:	e7f1      	b.n	8005e80 <__hexdig_fun+0xa>
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	4770      	bx	lr

08005ea0 <__gethex>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	4681      	mov	r9, r0
 8005ea6:	468a      	mov	sl, r1
 8005ea8:	4617      	mov	r7, r2
 8005eaa:	680a      	ldr	r2, [r1, #0]
 8005eac:	b085      	sub	sp, #20
 8005eae:	f102 0b02 	add.w	fp, r2, #2
 8005eb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005eb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005eba:	9302      	str	r3, [sp, #8]
 8005ebc:	32fe      	adds	r2, #254	; 0xfe
 8005ebe:	eb02 030b 	add.w	r3, r2, fp
 8005ec2:	46d8      	mov	r8, fp
 8005ec4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	2830      	cmp	r0, #48	; 0x30
 8005ecc:	d0f7      	beq.n	8005ebe <__gethex+0x1e>
 8005ece:	f7ff ffd2 	bl	8005e76 <__hexdig_fun>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d138      	bne.n	8005f4a <__gethex+0xaa>
 8005ed8:	2201      	movs	r2, #1
 8005eda:	4640      	mov	r0, r8
 8005edc:	49a7      	ldr	r1, [pc, #668]	; (800617c <__gethex+0x2dc>)
 8005ede:	f7ff f800 	bl	8004ee2 <strncmp>
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d169      	bne.n	8005fbc <__gethex+0x11c>
 8005ee8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8005eec:	465d      	mov	r5, fp
 8005eee:	f7ff ffc2 	bl	8005e76 <__hexdig_fun>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d064      	beq.n	8005fc0 <__gethex+0x120>
 8005ef6:	465a      	mov	r2, fp
 8005ef8:	7810      	ldrb	r0, [r2, #0]
 8005efa:	4690      	mov	r8, r2
 8005efc:	2830      	cmp	r0, #48	; 0x30
 8005efe:	f102 0201 	add.w	r2, r2, #1
 8005f02:	d0f9      	beq.n	8005ef8 <__gethex+0x58>
 8005f04:	f7ff ffb7 	bl	8005e76 <__hexdig_fun>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	fab0 f480 	clz	r4, r0
 8005f0e:	465e      	mov	r6, fp
 8005f10:	0964      	lsrs	r4, r4, #5
 8005f12:	9301      	str	r3, [sp, #4]
 8005f14:	4642      	mov	r2, r8
 8005f16:	4615      	mov	r5, r2
 8005f18:	7828      	ldrb	r0, [r5, #0]
 8005f1a:	3201      	adds	r2, #1
 8005f1c:	f7ff ffab 	bl	8005e76 <__hexdig_fun>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d1f8      	bne.n	8005f16 <__gethex+0x76>
 8005f24:	2201      	movs	r2, #1
 8005f26:	4628      	mov	r0, r5
 8005f28:	4994      	ldr	r1, [pc, #592]	; (800617c <__gethex+0x2dc>)
 8005f2a:	f7fe ffda 	bl	8004ee2 <strncmp>
 8005f2e:	b978      	cbnz	r0, 8005f50 <__gethex+0xb0>
 8005f30:	b946      	cbnz	r6, 8005f44 <__gethex+0xa4>
 8005f32:	1c6e      	adds	r6, r5, #1
 8005f34:	4632      	mov	r2, r6
 8005f36:	4615      	mov	r5, r2
 8005f38:	7828      	ldrb	r0, [r5, #0]
 8005f3a:	3201      	adds	r2, #1
 8005f3c:	f7ff ff9b 	bl	8005e76 <__hexdig_fun>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d1f8      	bne.n	8005f36 <__gethex+0x96>
 8005f44:	1b73      	subs	r3, r6, r5
 8005f46:	009e      	lsls	r6, r3, #2
 8005f48:	e004      	b.n	8005f54 <__gethex+0xb4>
 8005f4a:	2400      	movs	r4, #0
 8005f4c:	4626      	mov	r6, r4
 8005f4e:	e7e1      	b.n	8005f14 <__gethex+0x74>
 8005f50:	2e00      	cmp	r6, #0
 8005f52:	d1f7      	bne.n	8005f44 <__gethex+0xa4>
 8005f54:	782b      	ldrb	r3, [r5, #0]
 8005f56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f5a:	2b50      	cmp	r3, #80	; 0x50
 8005f5c:	d13d      	bne.n	8005fda <__gethex+0x13a>
 8005f5e:	786b      	ldrb	r3, [r5, #1]
 8005f60:	2b2b      	cmp	r3, #43	; 0x2b
 8005f62:	d02f      	beq.n	8005fc4 <__gethex+0x124>
 8005f64:	2b2d      	cmp	r3, #45	; 0x2d
 8005f66:	d031      	beq.n	8005fcc <__gethex+0x12c>
 8005f68:	f04f 0b00 	mov.w	fp, #0
 8005f6c:	1c69      	adds	r1, r5, #1
 8005f6e:	7808      	ldrb	r0, [r1, #0]
 8005f70:	f7ff ff81 	bl	8005e76 <__hexdig_fun>
 8005f74:	1e42      	subs	r2, r0, #1
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	2a18      	cmp	r2, #24
 8005f7a:	d82e      	bhi.n	8005fda <__gethex+0x13a>
 8005f7c:	f1a0 0210 	sub.w	r2, r0, #16
 8005f80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005f84:	f7ff ff77 	bl	8005e76 <__hexdig_fun>
 8005f88:	f100 3cff 	add.w	ip, r0, #4294967295
 8005f8c:	fa5f fc8c 	uxtb.w	ip, ip
 8005f90:	f1bc 0f18 	cmp.w	ip, #24
 8005f94:	d91d      	bls.n	8005fd2 <__gethex+0x132>
 8005f96:	f1bb 0f00 	cmp.w	fp, #0
 8005f9a:	d000      	beq.n	8005f9e <__gethex+0xfe>
 8005f9c:	4252      	negs	r2, r2
 8005f9e:	4416      	add	r6, r2
 8005fa0:	f8ca 1000 	str.w	r1, [sl]
 8005fa4:	b1dc      	cbz	r4, 8005fde <__gethex+0x13e>
 8005fa6:	9b01      	ldr	r3, [sp, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	bf14      	ite	ne
 8005fac:	f04f 0800 	movne.w	r8, #0
 8005fb0:	f04f 0806 	moveq.w	r8, #6
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	b005      	add	sp, #20
 8005fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	4645      	mov	r5, r8
 8005fbe:	4626      	mov	r6, r4
 8005fc0:	2401      	movs	r4, #1
 8005fc2:	e7c7      	b.n	8005f54 <__gethex+0xb4>
 8005fc4:	f04f 0b00 	mov.w	fp, #0
 8005fc8:	1ca9      	adds	r1, r5, #2
 8005fca:	e7d0      	b.n	8005f6e <__gethex+0xce>
 8005fcc:	f04f 0b01 	mov.w	fp, #1
 8005fd0:	e7fa      	b.n	8005fc8 <__gethex+0x128>
 8005fd2:	230a      	movs	r3, #10
 8005fd4:	fb03 0002 	mla	r0, r3, r2, r0
 8005fd8:	e7d0      	b.n	8005f7c <__gethex+0xdc>
 8005fda:	4629      	mov	r1, r5
 8005fdc:	e7e0      	b.n	8005fa0 <__gethex+0x100>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	eba5 0308 	sub.w	r3, r5, r8
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	2b07      	cmp	r3, #7
 8005fe8:	dc0a      	bgt.n	8006000 <__gethex+0x160>
 8005fea:	4648      	mov	r0, r9
 8005fec:	f000 fa5c 	bl	80064a8 <_Balloc>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	b940      	cbnz	r0, 8006006 <__gethex+0x166>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	21e4      	movs	r1, #228	; 0xe4
 8005ff8:	4b61      	ldr	r3, [pc, #388]	; (8006180 <__gethex+0x2e0>)
 8005ffa:	4862      	ldr	r0, [pc, #392]	; (8006184 <__gethex+0x2e4>)
 8005ffc:	f001 f9a2 	bl	8007344 <__assert_func>
 8006000:	3101      	adds	r1, #1
 8006002:	105b      	asrs	r3, r3, #1
 8006004:	e7ef      	b.n	8005fe6 <__gethex+0x146>
 8006006:	2300      	movs	r3, #0
 8006008:	469b      	mov	fp, r3
 800600a:	f100 0a14 	add.w	sl, r0, #20
 800600e:	f8cd a004 	str.w	sl, [sp, #4]
 8006012:	45a8      	cmp	r8, r5
 8006014:	d344      	bcc.n	80060a0 <__gethex+0x200>
 8006016:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800601a:	4658      	mov	r0, fp
 800601c:	f848 bb04 	str.w	fp, [r8], #4
 8006020:	eba8 080a 	sub.w	r8, r8, sl
 8006024:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8006028:	6122      	str	r2, [r4, #16]
 800602a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800602e:	f000 fb2d 	bl	800668c <__hi0bits>
 8006032:	683d      	ldr	r5, [r7, #0]
 8006034:	eba8 0800 	sub.w	r8, r8, r0
 8006038:	45a8      	cmp	r8, r5
 800603a:	dd59      	ble.n	80060f0 <__gethex+0x250>
 800603c:	eba8 0805 	sub.w	r8, r8, r5
 8006040:	4641      	mov	r1, r8
 8006042:	4620      	mov	r0, r4
 8006044:	f000 feab 	bl	8006d9e <__any_on>
 8006048:	4683      	mov	fp, r0
 800604a:	b1b8      	cbz	r0, 800607c <__gethex+0x1dc>
 800604c:	f04f 0b01 	mov.w	fp, #1
 8006050:	f108 33ff 	add.w	r3, r8, #4294967295
 8006054:	1159      	asrs	r1, r3, #5
 8006056:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800605a:	f003 021f 	and.w	r2, r3, #31
 800605e:	fa0b f202 	lsl.w	r2, fp, r2
 8006062:	420a      	tst	r2, r1
 8006064:	d00a      	beq.n	800607c <__gethex+0x1dc>
 8006066:	455b      	cmp	r3, fp
 8006068:	dd06      	ble.n	8006078 <__gethex+0x1d8>
 800606a:	4620      	mov	r0, r4
 800606c:	f1a8 0102 	sub.w	r1, r8, #2
 8006070:	f000 fe95 	bl	8006d9e <__any_on>
 8006074:	2800      	cmp	r0, #0
 8006076:	d138      	bne.n	80060ea <__gethex+0x24a>
 8006078:	f04f 0b02 	mov.w	fp, #2
 800607c:	4641      	mov	r1, r8
 800607e:	4620      	mov	r0, r4
 8006080:	f7ff fea6 	bl	8005dd0 <rshift>
 8006084:	4446      	add	r6, r8
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	42b3      	cmp	r3, r6
 800608a:	da41      	bge.n	8006110 <__gethex+0x270>
 800608c:	4621      	mov	r1, r4
 800608e:	4648      	mov	r0, r9
 8006090:	f000 fa4a 	bl	8006528 <_Bfree>
 8006094:	2300      	movs	r3, #0
 8006096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006098:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	e789      	b.n	8005fb4 <__gethex+0x114>
 80060a0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80060a4:	2a2e      	cmp	r2, #46	; 0x2e
 80060a6:	d014      	beq.n	80060d2 <__gethex+0x232>
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d106      	bne.n	80060ba <__gethex+0x21a>
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	f843 bb04 	str.w	fp, [r3], #4
 80060b2:	f04f 0b00 	mov.w	fp, #0
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	465b      	mov	r3, fp
 80060ba:	7828      	ldrb	r0, [r5, #0]
 80060bc:	9303      	str	r3, [sp, #12]
 80060be:	f7ff feda 	bl	8005e76 <__hexdig_fun>
 80060c2:	9b03      	ldr	r3, [sp, #12]
 80060c4:	f000 000f 	and.w	r0, r0, #15
 80060c8:	4098      	lsls	r0, r3
 80060ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80060ce:	3304      	adds	r3, #4
 80060d0:	e79f      	b.n	8006012 <__gethex+0x172>
 80060d2:	45a8      	cmp	r8, r5
 80060d4:	d8e8      	bhi.n	80060a8 <__gethex+0x208>
 80060d6:	2201      	movs	r2, #1
 80060d8:	4628      	mov	r0, r5
 80060da:	4928      	ldr	r1, [pc, #160]	; (800617c <__gethex+0x2dc>)
 80060dc:	9303      	str	r3, [sp, #12]
 80060de:	f7fe ff00 	bl	8004ee2 <strncmp>
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d1df      	bne.n	80060a8 <__gethex+0x208>
 80060e8:	e793      	b.n	8006012 <__gethex+0x172>
 80060ea:	f04f 0b03 	mov.w	fp, #3
 80060ee:	e7c5      	b.n	800607c <__gethex+0x1dc>
 80060f0:	da0b      	bge.n	800610a <__gethex+0x26a>
 80060f2:	eba5 0808 	sub.w	r8, r5, r8
 80060f6:	4621      	mov	r1, r4
 80060f8:	4642      	mov	r2, r8
 80060fa:	4648      	mov	r0, r9
 80060fc:	f000 fc2c 	bl	8006958 <__lshift>
 8006100:	4604      	mov	r4, r0
 8006102:	eba6 0608 	sub.w	r6, r6, r8
 8006106:	f100 0a14 	add.w	sl, r0, #20
 800610a:	f04f 0b00 	mov.w	fp, #0
 800610e:	e7ba      	b.n	8006086 <__gethex+0x1e6>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	42b3      	cmp	r3, r6
 8006114:	dd74      	ble.n	8006200 <__gethex+0x360>
 8006116:	1b9e      	subs	r6, r3, r6
 8006118:	42b5      	cmp	r5, r6
 800611a:	dc35      	bgt.n	8006188 <__gethex+0x2e8>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d023      	beq.n	800616a <__gethex+0x2ca>
 8006122:	2b03      	cmp	r3, #3
 8006124:	d025      	beq.n	8006172 <__gethex+0x2d2>
 8006126:	2b01      	cmp	r3, #1
 8006128:	d115      	bne.n	8006156 <__gethex+0x2b6>
 800612a:	42b5      	cmp	r5, r6
 800612c:	d113      	bne.n	8006156 <__gethex+0x2b6>
 800612e:	2d01      	cmp	r5, #1
 8006130:	d10b      	bne.n	800614a <__gethex+0x2aa>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	9a02      	ldr	r2, [sp, #8]
 8006136:	f04f 0862 	mov.w	r8, #98	; 0x62
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	2301      	movs	r3, #1
 800613e:	6123      	str	r3, [r4, #16]
 8006140:	f8ca 3000 	str.w	r3, [sl]
 8006144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006146:	601c      	str	r4, [r3, #0]
 8006148:	e734      	b.n	8005fb4 <__gethex+0x114>
 800614a:	4620      	mov	r0, r4
 800614c:	1e69      	subs	r1, r5, #1
 800614e:	f000 fe26 	bl	8006d9e <__any_on>
 8006152:	2800      	cmp	r0, #0
 8006154:	d1ed      	bne.n	8006132 <__gethex+0x292>
 8006156:	4621      	mov	r1, r4
 8006158:	4648      	mov	r0, r9
 800615a:	f000 f9e5 	bl	8006528 <_Bfree>
 800615e:	2300      	movs	r3, #0
 8006160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006162:	f04f 0850 	mov.w	r8, #80	; 0x50
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	e724      	b.n	8005fb4 <__gethex+0x114>
 800616a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1f2      	bne.n	8006156 <__gethex+0x2b6>
 8006170:	e7df      	b.n	8006132 <__gethex+0x292>
 8006172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1dc      	bne.n	8006132 <__gethex+0x292>
 8006178:	e7ed      	b.n	8006156 <__gethex+0x2b6>
 800617a:	bf00      	nop
 800617c:	0800796e 	.word	0x0800796e
 8006180:	08007b7e 	.word	0x08007b7e
 8006184:	08007b8f 	.word	0x08007b8f
 8006188:	f106 38ff 	add.w	r8, r6, #4294967295
 800618c:	f1bb 0f00 	cmp.w	fp, #0
 8006190:	d133      	bne.n	80061fa <__gethex+0x35a>
 8006192:	f1b8 0f00 	cmp.w	r8, #0
 8006196:	d004      	beq.n	80061a2 <__gethex+0x302>
 8006198:	4641      	mov	r1, r8
 800619a:	4620      	mov	r0, r4
 800619c:	f000 fdff 	bl	8006d9e <__any_on>
 80061a0:	4683      	mov	fp, r0
 80061a2:	2301      	movs	r3, #1
 80061a4:	ea4f 1268 	mov.w	r2, r8, asr #5
 80061a8:	f008 081f 	and.w	r8, r8, #31
 80061ac:	fa03 f308 	lsl.w	r3, r3, r8
 80061b0:	f04f 0802 	mov.w	r8, #2
 80061b4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80061b8:	4631      	mov	r1, r6
 80061ba:	4213      	tst	r3, r2
 80061bc:	4620      	mov	r0, r4
 80061be:	bf18      	it	ne
 80061c0:	f04b 0b02 	orrne.w	fp, fp, #2
 80061c4:	1bad      	subs	r5, r5, r6
 80061c6:	f7ff fe03 	bl	8005dd0 <rshift>
 80061ca:	687e      	ldr	r6, [r7, #4]
 80061cc:	f1bb 0f00 	cmp.w	fp, #0
 80061d0:	d04a      	beq.n	8006268 <__gethex+0x3c8>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d016      	beq.n	8006206 <__gethex+0x366>
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d018      	beq.n	800620e <__gethex+0x36e>
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d109      	bne.n	80061f4 <__gethex+0x354>
 80061e0:	f01b 0f02 	tst.w	fp, #2
 80061e4:	d006      	beq.n	80061f4 <__gethex+0x354>
 80061e6:	f8da 3000 	ldr.w	r3, [sl]
 80061ea:	ea4b 0b03 	orr.w	fp, fp, r3
 80061ee:	f01b 0f01 	tst.w	fp, #1
 80061f2:	d10f      	bne.n	8006214 <__gethex+0x374>
 80061f4:	f048 0810 	orr.w	r8, r8, #16
 80061f8:	e036      	b.n	8006268 <__gethex+0x3c8>
 80061fa:	f04f 0b01 	mov.w	fp, #1
 80061fe:	e7d0      	b.n	80061a2 <__gethex+0x302>
 8006200:	f04f 0801 	mov.w	r8, #1
 8006204:	e7e2      	b.n	80061cc <__gethex+0x32c>
 8006206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006208:	f1c3 0301 	rsb	r3, r3, #1
 800620c:	930f      	str	r3, [sp, #60]	; 0x3c
 800620e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0ef      	beq.n	80061f4 <__gethex+0x354>
 8006214:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006218:	f104 0214 	add.w	r2, r4, #20
 800621c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	2300      	movs	r3, #0
 8006224:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8006228:	4694      	mov	ip, r2
 800622a:	f852 1b04 	ldr.w	r1, [r2], #4
 800622e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006232:	d01e      	beq.n	8006272 <__gethex+0x3d2>
 8006234:	3101      	adds	r1, #1
 8006236:	f8cc 1000 	str.w	r1, [ip]
 800623a:	f1b8 0f02 	cmp.w	r8, #2
 800623e:	f104 0214 	add.w	r2, r4, #20
 8006242:	d13d      	bne.n	80062c0 <__gethex+0x420>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	3b01      	subs	r3, #1
 8006248:	42ab      	cmp	r3, r5
 800624a:	d10b      	bne.n	8006264 <__gethex+0x3c4>
 800624c:	2301      	movs	r3, #1
 800624e:	1169      	asrs	r1, r5, #5
 8006250:	f005 051f 	and.w	r5, r5, #31
 8006254:	fa03 f505 	lsl.w	r5, r3, r5
 8006258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800625c:	421d      	tst	r5, r3
 800625e:	bf18      	it	ne
 8006260:	f04f 0801 	movne.w	r8, #1
 8006264:	f048 0820 	orr.w	r8, r8, #32
 8006268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800626a:	601c      	str	r4, [r3, #0]
 800626c:	9b02      	ldr	r3, [sp, #8]
 800626e:	601e      	str	r6, [r3, #0]
 8006270:	e6a0      	b.n	8005fb4 <__gethex+0x114>
 8006272:	4290      	cmp	r0, r2
 8006274:	f842 3c04 	str.w	r3, [r2, #-4]
 8006278:	d8d6      	bhi.n	8006228 <__gethex+0x388>
 800627a:	68a2      	ldr	r2, [r4, #8]
 800627c:	4593      	cmp	fp, r2
 800627e:	db17      	blt.n	80062b0 <__gethex+0x410>
 8006280:	6861      	ldr	r1, [r4, #4]
 8006282:	4648      	mov	r0, r9
 8006284:	3101      	adds	r1, #1
 8006286:	f000 f90f 	bl	80064a8 <_Balloc>
 800628a:	4682      	mov	sl, r0
 800628c:	b918      	cbnz	r0, 8006296 <__gethex+0x3f6>
 800628e:	4602      	mov	r2, r0
 8006290:	2184      	movs	r1, #132	; 0x84
 8006292:	4b1a      	ldr	r3, [pc, #104]	; (80062fc <__gethex+0x45c>)
 8006294:	e6b1      	b.n	8005ffa <__gethex+0x15a>
 8006296:	6922      	ldr	r2, [r4, #16]
 8006298:	f104 010c 	add.w	r1, r4, #12
 800629c:	3202      	adds	r2, #2
 800629e:	0092      	lsls	r2, r2, #2
 80062a0:	300c      	adds	r0, #12
 80062a2:	f7fe fec5 	bl	8005030 <memcpy>
 80062a6:	4621      	mov	r1, r4
 80062a8:	4648      	mov	r0, r9
 80062aa:	f000 f93d 	bl	8006528 <_Bfree>
 80062ae:	4654      	mov	r4, sl
 80062b0:	6922      	ldr	r2, [r4, #16]
 80062b2:	1c51      	adds	r1, r2, #1
 80062b4:	6121      	str	r1, [r4, #16]
 80062b6:	2101      	movs	r1, #1
 80062b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80062bc:	6151      	str	r1, [r2, #20]
 80062be:	e7bc      	b.n	800623a <__gethex+0x39a>
 80062c0:	6921      	ldr	r1, [r4, #16]
 80062c2:	4559      	cmp	r1, fp
 80062c4:	dd0b      	ble.n	80062de <__gethex+0x43e>
 80062c6:	2101      	movs	r1, #1
 80062c8:	4620      	mov	r0, r4
 80062ca:	f7ff fd81 	bl	8005dd0 <rshift>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	3601      	adds	r6, #1
 80062d2:	42b3      	cmp	r3, r6
 80062d4:	f6ff aeda 	blt.w	800608c <__gethex+0x1ec>
 80062d8:	f04f 0801 	mov.w	r8, #1
 80062dc:	e7c2      	b.n	8006264 <__gethex+0x3c4>
 80062de:	f015 051f 	ands.w	r5, r5, #31
 80062e2:	d0f9      	beq.n	80062d8 <__gethex+0x438>
 80062e4:	9b01      	ldr	r3, [sp, #4]
 80062e6:	f1c5 0520 	rsb	r5, r5, #32
 80062ea:	441a      	add	r2, r3
 80062ec:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80062f0:	f000 f9cc 	bl	800668c <__hi0bits>
 80062f4:	42a8      	cmp	r0, r5
 80062f6:	dbe6      	blt.n	80062c6 <__gethex+0x426>
 80062f8:	e7ee      	b.n	80062d8 <__gethex+0x438>
 80062fa:	bf00      	nop
 80062fc:	08007b7e 	.word	0x08007b7e

08006300 <L_shift>:
 8006300:	f1c2 0208 	rsb	r2, r2, #8
 8006304:	0092      	lsls	r2, r2, #2
 8006306:	b570      	push	{r4, r5, r6, lr}
 8006308:	f1c2 0620 	rsb	r6, r2, #32
 800630c:	6843      	ldr	r3, [r0, #4]
 800630e:	6804      	ldr	r4, [r0, #0]
 8006310:	fa03 f506 	lsl.w	r5, r3, r6
 8006314:	432c      	orrs	r4, r5
 8006316:	40d3      	lsrs	r3, r2
 8006318:	6004      	str	r4, [r0, #0]
 800631a:	f840 3f04 	str.w	r3, [r0, #4]!
 800631e:	4288      	cmp	r0, r1
 8006320:	d3f4      	bcc.n	800630c <L_shift+0xc>
 8006322:	bd70      	pop	{r4, r5, r6, pc}

08006324 <__match>:
 8006324:	b530      	push	{r4, r5, lr}
 8006326:	6803      	ldr	r3, [r0, #0]
 8006328:	3301      	adds	r3, #1
 800632a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800632e:	b914      	cbnz	r4, 8006336 <__match+0x12>
 8006330:	6003      	str	r3, [r0, #0]
 8006332:	2001      	movs	r0, #1
 8006334:	bd30      	pop	{r4, r5, pc}
 8006336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800633a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800633e:	2d19      	cmp	r5, #25
 8006340:	bf98      	it	ls
 8006342:	3220      	addls	r2, #32
 8006344:	42a2      	cmp	r2, r4
 8006346:	d0f0      	beq.n	800632a <__match+0x6>
 8006348:	2000      	movs	r0, #0
 800634a:	e7f3      	b.n	8006334 <__match+0x10>

0800634c <__hexnan>:
 800634c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006350:	2500      	movs	r5, #0
 8006352:	680b      	ldr	r3, [r1, #0]
 8006354:	4682      	mov	sl, r0
 8006356:	115e      	asrs	r6, r3, #5
 8006358:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800635c:	f013 031f 	ands.w	r3, r3, #31
 8006360:	bf18      	it	ne
 8006362:	3604      	addne	r6, #4
 8006364:	1f37      	subs	r7, r6, #4
 8006366:	4690      	mov	r8, r2
 8006368:	46b9      	mov	r9, r7
 800636a:	463c      	mov	r4, r7
 800636c:	46ab      	mov	fp, r5
 800636e:	b087      	sub	sp, #28
 8006370:	6801      	ldr	r1, [r0, #0]
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	f846 5c04 	str.w	r5, [r6, #-4]
 8006378:	9502      	str	r5, [sp, #8]
 800637a:	784a      	ldrb	r2, [r1, #1]
 800637c:	1c4b      	adds	r3, r1, #1
 800637e:	9303      	str	r3, [sp, #12]
 8006380:	b342      	cbz	r2, 80063d4 <__hexnan+0x88>
 8006382:	4610      	mov	r0, r2
 8006384:	9105      	str	r1, [sp, #20]
 8006386:	9204      	str	r2, [sp, #16]
 8006388:	f7ff fd75 	bl	8005e76 <__hexdig_fun>
 800638c:	2800      	cmp	r0, #0
 800638e:	d14f      	bne.n	8006430 <__hexnan+0xe4>
 8006390:	9a04      	ldr	r2, [sp, #16]
 8006392:	9905      	ldr	r1, [sp, #20]
 8006394:	2a20      	cmp	r2, #32
 8006396:	d818      	bhi.n	80063ca <__hexnan+0x7e>
 8006398:	9b02      	ldr	r3, [sp, #8]
 800639a:	459b      	cmp	fp, r3
 800639c:	dd13      	ble.n	80063c6 <__hexnan+0x7a>
 800639e:	454c      	cmp	r4, r9
 80063a0:	d206      	bcs.n	80063b0 <__hexnan+0x64>
 80063a2:	2d07      	cmp	r5, #7
 80063a4:	dc04      	bgt.n	80063b0 <__hexnan+0x64>
 80063a6:	462a      	mov	r2, r5
 80063a8:	4649      	mov	r1, r9
 80063aa:	4620      	mov	r0, r4
 80063ac:	f7ff ffa8 	bl	8006300 <L_shift>
 80063b0:	4544      	cmp	r4, r8
 80063b2:	d950      	bls.n	8006456 <__hexnan+0x10a>
 80063b4:	2300      	movs	r3, #0
 80063b6:	f1a4 0904 	sub.w	r9, r4, #4
 80063ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80063be:	461d      	mov	r5, r3
 80063c0:	464c      	mov	r4, r9
 80063c2:	f8cd b008 	str.w	fp, [sp, #8]
 80063c6:	9903      	ldr	r1, [sp, #12]
 80063c8:	e7d7      	b.n	800637a <__hexnan+0x2e>
 80063ca:	2a29      	cmp	r2, #41	; 0x29
 80063cc:	d155      	bne.n	800647a <__hexnan+0x12e>
 80063ce:	3102      	adds	r1, #2
 80063d0:	f8ca 1000 	str.w	r1, [sl]
 80063d4:	f1bb 0f00 	cmp.w	fp, #0
 80063d8:	d04f      	beq.n	800647a <__hexnan+0x12e>
 80063da:	454c      	cmp	r4, r9
 80063dc:	d206      	bcs.n	80063ec <__hexnan+0xa0>
 80063de:	2d07      	cmp	r5, #7
 80063e0:	dc04      	bgt.n	80063ec <__hexnan+0xa0>
 80063e2:	462a      	mov	r2, r5
 80063e4:	4649      	mov	r1, r9
 80063e6:	4620      	mov	r0, r4
 80063e8:	f7ff ff8a 	bl	8006300 <L_shift>
 80063ec:	4544      	cmp	r4, r8
 80063ee:	d934      	bls.n	800645a <__hexnan+0x10e>
 80063f0:	4623      	mov	r3, r4
 80063f2:	f1a8 0204 	sub.w	r2, r8, #4
 80063f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80063fa:	429f      	cmp	r7, r3
 80063fc:	f842 1f04 	str.w	r1, [r2, #4]!
 8006400:	d2f9      	bcs.n	80063f6 <__hexnan+0xaa>
 8006402:	1b3b      	subs	r3, r7, r4
 8006404:	f023 0303 	bic.w	r3, r3, #3
 8006408:	3304      	adds	r3, #4
 800640a:	3e03      	subs	r6, #3
 800640c:	3401      	adds	r4, #1
 800640e:	42a6      	cmp	r6, r4
 8006410:	bf38      	it	cc
 8006412:	2304      	movcc	r3, #4
 8006414:	2200      	movs	r2, #0
 8006416:	4443      	add	r3, r8
 8006418:	f843 2b04 	str.w	r2, [r3], #4
 800641c:	429f      	cmp	r7, r3
 800641e:	d2fb      	bcs.n	8006418 <__hexnan+0xcc>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	b91b      	cbnz	r3, 800642c <__hexnan+0xe0>
 8006424:	4547      	cmp	r7, r8
 8006426:	d126      	bne.n	8006476 <__hexnan+0x12a>
 8006428:	2301      	movs	r3, #1
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	2005      	movs	r0, #5
 800642e:	e025      	b.n	800647c <__hexnan+0x130>
 8006430:	3501      	adds	r5, #1
 8006432:	2d08      	cmp	r5, #8
 8006434:	f10b 0b01 	add.w	fp, fp, #1
 8006438:	dd06      	ble.n	8006448 <__hexnan+0xfc>
 800643a:	4544      	cmp	r4, r8
 800643c:	d9c3      	bls.n	80063c6 <__hexnan+0x7a>
 800643e:	2300      	movs	r3, #0
 8006440:	2501      	movs	r5, #1
 8006442:	f844 3c04 	str.w	r3, [r4, #-4]
 8006446:	3c04      	subs	r4, #4
 8006448:	6822      	ldr	r2, [r4, #0]
 800644a:	f000 000f 	and.w	r0, r0, #15
 800644e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006452:	6020      	str	r0, [r4, #0]
 8006454:	e7b7      	b.n	80063c6 <__hexnan+0x7a>
 8006456:	2508      	movs	r5, #8
 8006458:	e7b5      	b.n	80063c6 <__hexnan+0x7a>
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0df      	beq.n	8006420 <__hexnan+0xd4>
 8006460:	f04f 32ff 	mov.w	r2, #4294967295
 8006464:	f1c3 0320 	rsb	r3, r3, #32
 8006468:	40da      	lsrs	r2, r3
 800646a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800646e:	4013      	ands	r3, r2
 8006470:	f846 3c04 	str.w	r3, [r6, #-4]
 8006474:	e7d4      	b.n	8006420 <__hexnan+0xd4>
 8006476:	3f04      	subs	r7, #4
 8006478:	e7d2      	b.n	8006420 <__hexnan+0xd4>
 800647a:	2004      	movs	r0, #4
 800647c:	b007      	add	sp, #28
 800647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006482 <__ascii_mbtowc>:
 8006482:	b082      	sub	sp, #8
 8006484:	b901      	cbnz	r1, 8006488 <__ascii_mbtowc+0x6>
 8006486:	a901      	add	r1, sp, #4
 8006488:	b142      	cbz	r2, 800649c <__ascii_mbtowc+0x1a>
 800648a:	b14b      	cbz	r3, 80064a0 <__ascii_mbtowc+0x1e>
 800648c:	7813      	ldrb	r3, [r2, #0]
 800648e:	600b      	str	r3, [r1, #0]
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	1e10      	subs	r0, r2, #0
 8006494:	bf18      	it	ne
 8006496:	2001      	movne	r0, #1
 8006498:	b002      	add	sp, #8
 800649a:	4770      	bx	lr
 800649c:	4610      	mov	r0, r2
 800649e:	e7fb      	b.n	8006498 <__ascii_mbtowc+0x16>
 80064a0:	f06f 0001 	mvn.w	r0, #1
 80064a4:	e7f8      	b.n	8006498 <__ascii_mbtowc+0x16>
	...

080064a8 <_Balloc>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	69c6      	ldr	r6, [r0, #28]
 80064ac:	4604      	mov	r4, r0
 80064ae:	460d      	mov	r5, r1
 80064b0:	b976      	cbnz	r6, 80064d0 <_Balloc+0x28>
 80064b2:	2010      	movs	r0, #16
 80064b4:	f7fc fe90 	bl	80031d8 <malloc>
 80064b8:	4602      	mov	r2, r0
 80064ba:	61e0      	str	r0, [r4, #28]
 80064bc:	b920      	cbnz	r0, 80064c8 <_Balloc+0x20>
 80064be:	216b      	movs	r1, #107	; 0x6b
 80064c0:	4b17      	ldr	r3, [pc, #92]	; (8006520 <_Balloc+0x78>)
 80064c2:	4818      	ldr	r0, [pc, #96]	; (8006524 <_Balloc+0x7c>)
 80064c4:	f000 ff3e 	bl	8007344 <__assert_func>
 80064c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064cc:	6006      	str	r6, [r0, #0]
 80064ce:	60c6      	str	r6, [r0, #12]
 80064d0:	69e6      	ldr	r6, [r4, #28]
 80064d2:	68f3      	ldr	r3, [r6, #12]
 80064d4:	b183      	cbz	r3, 80064f8 <_Balloc+0x50>
 80064d6:	69e3      	ldr	r3, [r4, #28]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064de:	b9b8      	cbnz	r0, 8006510 <_Balloc+0x68>
 80064e0:	2101      	movs	r1, #1
 80064e2:	fa01 f605 	lsl.w	r6, r1, r5
 80064e6:	1d72      	adds	r2, r6, #5
 80064e8:	4620      	mov	r0, r4
 80064ea:	0092      	lsls	r2, r2, #2
 80064ec:	f000 ff48 	bl	8007380 <_calloc_r>
 80064f0:	b160      	cbz	r0, 800650c <_Balloc+0x64>
 80064f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064f6:	e00e      	b.n	8006516 <_Balloc+0x6e>
 80064f8:	2221      	movs	r2, #33	; 0x21
 80064fa:	2104      	movs	r1, #4
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 ff3f 	bl	8007380 <_calloc_r>
 8006502:	69e3      	ldr	r3, [r4, #28]
 8006504:	60f0      	str	r0, [r6, #12]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e4      	bne.n	80064d6 <_Balloc+0x2e>
 800650c:	2000      	movs	r0, #0
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	6802      	ldr	r2, [r0, #0]
 8006512:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006516:	2300      	movs	r3, #0
 8006518:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800651c:	e7f7      	b.n	800650e <_Balloc+0x66>
 800651e:	bf00      	nop
 8006520:	08007b0f 	.word	0x08007b0f
 8006524:	08007bef 	.word	0x08007bef

08006528 <_Bfree>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	69c6      	ldr	r6, [r0, #28]
 800652c:	4605      	mov	r5, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b976      	cbnz	r6, 8006550 <_Bfree+0x28>
 8006532:	2010      	movs	r0, #16
 8006534:	f7fc fe50 	bl	80031d8 <malloc>
 8006538:	4602      	mov	r2, r0
 800653a:	61e8      	str	r0, [r5, #28]
 800653c:	b920      	cbnz	r0, 8006548 <_Bfree+0x20>
 800653e:	218f      	movs	r1, #143	; 0x8f
 8006540:	4b08      	ldr	r3, [pc, #32]	; (8006564 <_Bfree+0x3c>)
 8006542:	4809      	ldr	r0, [pc, #36]	; (8006568 <_Bfree+0x40>)
 8006544:	f000 fefe 	bl	8007344 <__assert_func>
 8006548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800654c:	6006      	str	r6, [r0, #0]
 800654e:	60c6      	str	r6, [r0, #12]
 8006550:	b13c      	cbz	r4, 8006562 <_Bfree+0x3a>
 8006552:	69eb      	ldr	r3, [r5, #28]
 8006554:	6862      	ldr	r2, [r4, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800655c:	6021      	str	r1, [r4, #0]
 800655e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006562:	bd70      	pop	{r4, r5, r6, pc}
 8006564:	08007b0f 	.word	0x08007b0f
 8006568:	08007bef 	.word	0x08007bef

0800656c <__multadd>:
 800656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006570:	4607      	mov	r7, r0
 8006572:	460c      	mov	r4, r1
 8006574:	461e      	mov	r6, r3
 8006576:	2000      	movs	r0, #0
 8006578:	690d      	ldr	r5, [r1, #16]
 800657a:	f101 0c14 	add.w	ip, r1, #20
 800657e:	f8dc 3000 	ldr.w	r3, [ip]
 8006582:	3001      	adds	r0, #1
 8006584:	b299      	uxth	r1, r3
 8006586:	fb02 6101 	mla	r1, r2, r1, r6
 800658a:	0c1e      	lsrs	r6, r3, #16
 800658c:	0c0b      	lsrs	r3, r1, #16
 800658e:	fb02 3306 	mla	r3, r2, r6, r3
 8006592:	b289      	uxth	r1, r1
 8006594:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006598:	4285      	cmp	r5, r0
 800659a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800659e:	f84c 1b04 	str.w	r1, [ip], #4
 80065a2:	dcec      	bgt.n	800657e <__multadd+0x12>
 80065a4:	b30e      	cbz	r6, 80065ea <__multadd+0x7e>
 80065a6:	68a3      	ldr	r3, [r4, #8]
 80065a8:	42ab      	cmp	r3, r5
 80065aa:	dc19      	bgt.n	80065e0 <__multadd+0x74>
 80065ac:	6861      	ldr	r1, [r4, #4]
 80065ae:	4638      	mov	r0, r7
 80065b0:	3101      	adds	r1, #1
 80065b2:	f7ff ff79 	bl	80064a8 <_Balloc>
 80065b6:	4680      	mov	r8, r0
 80065b8:	b928      	cbnz	r0, 80065c6 <__multadd+0x5a>
 80065ba:	4602      	mov	r2, r0
 80065bc:	21ba      	movs	r1, #186	; 0xba
 80065be:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <__multadd+0x84>)
 80065c0:	480c      	ldr	r0, [pc, #48]	; (80065f4 <__multadd+0x88>)
 80065c2:	f000 febf 	bl	8007344 <__assert_func>
 80065c6:	6922      	ldr	r2, [r4, #16]
 80065c8:	f104 010c 	add.w	r1, r4, #12
 80065cc:	3202      	adds	r2, #2
 80065ce:	0092      	lsls	r2, r2, #2
 80065d0:	300c      	adds	r0, #12
 80065d2:	f7fe fd2d 	bl	8005030 <memcpy>
 80065d6:	4621      	mov	r1, r4
 80065d8:	4638      	mov	r0, r7
 80065da:	f7ff ffa5 	bl	8006528 <_Bfree>
 80065de:	4644      	mov	r4, r8
 80065e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065e4:	3501      	adds	r5, #1
 80065e6:	615e      	str	r6, [r3, #20]
 80065e8:	6125      	str	r5, [r4, #16]
 80065ea:	4620      	mov	r0, r4
 80065ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f0:	08007b7e 	.word	0x08007b7e
 80065f4:	08007bef 	.word	0x08007bef

080065f8 <__s2b>:
 80065f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065fc:	4615      	mov	r5, r2
 80065fe:	2209      	movs	r2, #9
 8006600:	461f      	mov	r7, r3
 8006602:	3308      	adds	r3, #8
 8006604:	460c      	mov	r4, r1
 8006606:	fb93 f3f2 	sdiv	r3, r3, r2
 800660a:	4606      	mov	r6, r0
 800660c:	2201      	movs	r2, #1
 800660e:	2100      	movs	r1, #0
 8006610:	429a      	cmp	r2, r3
 8006612:	db09      	blt.n	8006628 <__s2b+0x30>
 8006614:	4630      	mov	r0, r6
 8006616:	f7ff ff47 	bl	80064a8 <_Balloc>
 800661a:	b940      	cbnz	r0, 800662e <__s2b+0x36>
 800661c:	4602      	mov	r2, r0
 800661e:	21d3      	movs	r1, #211	; 0xd3
 8006620:	4b18      	ldr	r3, [pc, #96]	; (8006684 <__s2b+0x8c>)
 8006622:	4819      	ldr	r0, [pc, #100]	; (8006688 <__s2b+0x90>)
 8006624:	f000 fe8e 	bl	8007344 <__assert_func>
 8006628:	0052      	lsls	r2, r2, #1
 800662a:	3101      	adds	r1, #1
 800662c:	e7f0      	b.n	8006610 <__s2b+0x18>
 800662e:	9b08      	ldr	r3, [sp, #32]
 8006630:	2d09      	cmp	r5, #9
 8006632:	6143      	str	r3, [r0, #20]
 8006634:	f04f 0301 	mov.w	r3, #1
 8006638:	6103      	str	r3, [r0, #16]
 800663a:	dd16      	ble.n	800666a <__s2b+0x72>
 800663c:	f104 0909 	add.w	r9, r4, #9
 8006640:	46c8      	mov	r8, r9
 8006642:	442c      	add	r4, r5
 8006644:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006648:	4601      	mov	r1, r0
 800664a:	220a      	movs	r2, #10
 800664c:	4630      	mov	r0, r6
 800664e:	3b30      	subs	r3, #48	; 0x30
 8006650:	f7ff ff8c 	bl	800656c <__multadd>
 8006654:	45a0      	cmp	r8, r4
 8006656:	d1f5      	bne.n	8006644 <__s2b+0x4c>
 8006658:	f1a5 0408 	sub.w	r4, r5, #8
 800665c:	444c      	add	r4, r9
 800665e:	1b2d      	subs	r5, r5, r4
 8006660:	1963      	adds	r3, r4, r5
 8006662:	42bb      	cmp	r3, r7
 8006664:	db04      	blt.n	8006670 <__s2b+0x78>
 8006666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666a:	2509      	movs	r5, #9
 800666c:	340a      	adds	r4, #10
 800666e:	e7f6      	b.n	800665e <__s2b+0x66>
 8006670:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006674:	4601      	mov	r1, r0
 8006676:	220a      	movs	r2, #10
 8006678:	4630      	mov	r0, r6
 800667a:	3b30      	subs	r3, #48	; 0x30
 800667c:	f7ff ff76 	bl	800656c <__multadd>
 8006680:	e7ee      	b.n	8006660 <__s2b+0x68>
 8006682:	bf00      	nop
 8006684:	08007b7e 	.word	0x08007b7e
 8006688:	08007bef 	.word	0x08007bef

0800668c <__hi0bits>:
 800668c:	0c02      	lsrs	r2, r0, #16
 800668e:	0412      	lsls	r2, r2, #16
 8006690:	4603      	mov	r3, r0
 8006692:	b9ca      	cbnz	r2, 80066c8 <__hi0bits+0x3c>
 8006694:	0403      	lsls	r3, r0, #16
 8006696:	2010      	movs	r0, #16
 8006698:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800669c:	bf04      	itt	eq
 800669e:	021b      	lsleq	r3, r3, #8
 80066a0:	3008      	addeq	r0, #8
 80066a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066a6:	bf04      	itt	eq
 80066a8:	011b      	lsleq	r3, r3, #4
 80066aa:	3004      	addeq	r0, #4
 80066ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066b0:	bf04      	itt	eq
 80066b2:	009b      	lsleq	r3, r3, #2
 80066b4:	3002      	addeq	r0, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	db05      	blt.n	80066c6 <__hi0bits+0x3a>
 80066ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80066be:	f100 0001 	add.w	r0, r0, #1
 80066c2:	bf08      	it	eq
 80066c4:	2020      	moveq	r0, #32
 80066c6:	4770      	bx	lr
 80066c8:	2000      	movs	r0, #0
 80066ca:	e7e5      	b.n	8006698 <__hi0bits+0xc>

080066cc <__lo0bits>:
 80066cc:	6803      	ldr	r3, [r0, #0]
 80066ce:	4602      	mov	r2, r0
 80066d0:	f013 0007 	ands.w	r0, r3, #7
 80066d4:	d00b      	beq.n	80066ee <__lo0bits+0x22>
 80066d6:	07d9      	lsls	r1, r3, #31
 80066d8:	d421      	bmi.n	800671e <__lo0bits+0x52>
 80066da:	0798      	lsls	r0, r3, #30
 80066dc:	bf49      	itett	mi
 80066de:	085b      	lsrmi	r3, r3, #1
 80066e0:	089b      	lsrpl	r3, r3, #2
 80066e2:	2001      	movmi	r0, #1
 80066e4:	6013      	strmi	r3, [r2, #0]
 80066e6:	bf5c      	itt	pl
 80066e8:	2002      	movpl	r0, #2
 80066ea:	6013      	strpl	r3, [r2, #0]
 80066ec:	4770      	bx	lr
 80066ee:	b299      	uxth	r1, r3
 80066f0:	b909      	cbnz	r1, 80066f6 <__lo0bits+0x2a>
 80066f2:	2010      	movs	r0, #16
 80066f4:	0c1b      	lsrs	r3, r3, #16
 80066f6:	b2d9      	uxtb	r1, r3
 80066f8:	b909      	cbnz	r1, 80066fe <__lo0bits+0x32>
 80066fa:	3008      	adds	r0, #8
 80066fc:	0a1b      	lsrs	r3, r3, #8
 80066fe:	0719      	lsls	r1, r3, #28
 8006700:	bf04      	itt	eq
 8006702:	091b      	lsreq	r3, r3, #4
 8006704:	3004      	addeq	r0, #4
 8006706:	0799      	lsls	r1, r3, #30
 8006708:	bf04      	itt	eq
 800670a:	089b      	lsreq	r3, r3, #2
 800670c:	3002      	addeq	r0, #2
 800670e:	07d9      	lsls	r1, r3, #31
 8006710:	d403      	bmi.n	800671a <__lo0bits+0x4e>
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	f100 0001 	add.w	r0, r0, #1
 8006718:	d003      	beq.n	8006722 <__lo0bits+0x56>
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	4770      	bx	lr
 800671e:	2000      	movs	r0, #0
 8006720:	4770      	bx	lr
 8006722:	2020      	movs	r0, #32
 8006724:	4770      	bx	lr
	...

08006728 <__i2b>:
 8006728:	b510      	push	{r4, lr}
 800672a:	460c      	mov	r4, r1
 800672c:	2101      	movs	r1, #1
 800672e:	f7ff febb 	bl	80064a8 <_Balloc>
 8006732:	4602      	mov	r2, r0
 8006734:	b928      	cbnz	r0, 8006742 <__i2b+0x1a>
 8006736:	f240 1145 	movw	r1, #325	; 0x145
 800673a:	4b04      	ldr	r3, [pc, #16]	; (800674c <__i2b+0x24>)
 800673c:	4804      	ldr	r0, [pc, #16]	; (8006750 <__i2b+0x28>)
 800673e:	f000 fe01 	bl	8007344 <__assert_func>
 8006742:	2301      	movs	r3, #1
 8006744:	6144      	str	r4, [r0, #20]
 8006746:	6103      	str	r3, [r0, #16]
 8006748:	bd10      	pop	{r4, pc}
 800674a:	bf00      	nop
 800674c:	08007b7e 	.word	0x08007b7e
 8006750:	08007bef 	.word	0x08007bef

08006754 <__multiply>:
 8006754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	4691      	mov	r9, r2
 800675a:	690a      	ldr	r2, [r1, #16]
 800675c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006760:	460c      	mov	r4, r1
 8006762:	429a      	cmp	r2, r3
 8006764:	bfbe      	ittt	lt
 8006766:	460b      	movlt	r3, r1
 8006768:	464c      	movlt	r4, r9
 800676a:	4699      	movlt	r9, r3
 800676c:	6927      	ldr	r7, [r4, #16]
 800676e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006772:	68a3      	ldr	r3, [r4, #8]
 8006774:	6861      	ldr	r1, [r4, #4]
 8006776:	eb07 060a 	add.w	r6, r7, sl
 800677a:	42b3      	cmp	r3, r6
 800677c:	b085      	sub	sp, #20
 800677e:	bfb8      	it	lt
 8006780:	3101      	addlt	r1, #1
 8006782:	f7ff fe91 	bl	80064a8 <_Balloc>
 8006786:	b930      	cbnz	r0, 8006796 <__multiply+0x42>
 8006788:	4602      	mov	r2, r0
 800678a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800678e:	4b43      	ldr	r3, [pc, #268]	; (800689c <__multiply+0x148>)
 8006790:	4843      	ldr	r0, [pc, #268]	; (80068a0 <__multiply+0x14c>)
 8006792:	f000 fdd7 	bl	8007344 <__assert_func>
 8006796:	f100 0514 	add.w	r5, r0, #20
 800679a:	462b      	mov	r3, r5
 800679c:	2200      	movs	r2, #0
 800679e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067a2:	4543      	cmp	r3, r8
 80067a4:	d321      	bcc.n	80067ea <__multiply+0x96>
 80067a6:	f104 0314 	add.w	r3, r4, #20
 80067aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80067ae:	f109 0314 	add.w	r3, r9, #20
 80067b2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80067b6:	9202      	str	r2, [sp, #8]
 80067b8:	1b3a      	subs	r2, r7, r4
 80067ba:	3a15      	subs	r2, #21
 80067bc:	f022 0203 	bic.w	r2, r2, #3
 80067c0:	3204      	adds	r2, #4
 80067c2:	f104 0115 	add.w	r1, r4, #21
 80067c6:	428f      	cmp	r7, r1
 80067c8:	bf38      	it	cc
 80067ca:	2204      	movcc	r2, #4
 80067cc:	9201      	str	r2, [sp, #4]
 80067ce:	9a02      	ldr	r2, [sp, #8]
 80067d0:	9303      	str	r3, [sp, #12]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d80c      	bhi.n	80067f0 <__multiply+0x9c>
 80067d6:	2e00      	cmp	r6, #0
 80067d8:	dd03      	ble.n	80067e2 <__multiply+0x8e>
 80067da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d05a      	beq.n	8006898 <__multiply+0x144>
 80067e2:	6106      	str	r6, [r0, #16]
 80067e4:	b005      	add	sp, #20
 80067e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ea:	f843 2b04 	str.w	r2, [r3], #4
 80067ee:	e7d8      	b.n	80067a2 <__multiply+0x4e>
 80067f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80067f4:	f1ba 0f00 	cmp.w	sl, #0
 80067f8:	d023      	beq.n	8006842 <__multiply+0xee>
 80067fa:	46a9      	mov	r9, r5
 80067fc:	f04f 0c00 	mov.w	ip, #0
 8006800:	f104 0e14 	add.w	lr, r4, #20
 8006804:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006808:	f8d9 1000 	ldr.w	r1, [r9]
 800680c:	fa1f fb82 	uxth.w	fp, r2
 8006810:	b289      	uxth	r1, r1
 8006812:	fb0a 110b 	mla	r1, sl, fp, r1
 8006816:	4461      	add	r1, ip
 8006818:	f8d9 c000 	ldr.w	ip, [r9]
 800681c:	0c12      	lsrs	r2, r2, #16
 800681e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006822:	fb0a c202 	mla	r2, sl, r2, ip
 8006826:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800682a:	b289      	uxth	r1, r1
 800682c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006830:	4577      	cmp	r7, lr
 8006832:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006836:	f849 1b04 	str.w	r1, [r9], #4
 800683a:	d8e3      	bhi.n	8006804 <__multiply+0xb0>
 800683c:	9a01      	ldr	r2, [sp, #4]
 800683e:	f845 c002 	str.w	ip, [r5, r2]
 8006842:	9a03      	ldr	r2, [sp, #12]
 8006844:	3304      	adds	r3, #4
 8006846:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800684a:	f1b9 0f00 	cmp.w	r9, #0
 800684e:	d021      	beq.n	8006894 <__multiply+0x140>
 8006850:	46ae      	mov	lr, r5
 8006852:	f04f 0a00 	mov.w	sl, #0
 8006856:	6829      	ldr	r1, [r5, #0]
 8006858:	f104 0c14 	add.w	ip, r4, #20
 800685c:	f8bc b000 	ldrh.w	fp, [ip]
 8006860:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006864:	b289      	uxth	r1, r1
 8006866:	fb09 220b 	mla	r2, r9, fp, r2
 800686a:	4452      	add	r2, sl
 800686c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006870:	f84e 1b04 	str.w	r1, [lr], #4
 8006874:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006878:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800687c:	f8be 1000 	ldrh.w	r1, [lr]
 8006880:	4567      	cmp	r7, ip
 8006882:	fb09 110a 	mla	r1, r9, sl, r1
 8006886:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800688a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800688e:	d8e5      	bhi.n	800685c <__multiply+0x108>
 8006890:	9a01      	ldr	r2, [sp, #4]
 8006892:	50a9      	str	r1, [r5, r2]
 8006894:	3504      	adds	r5, #4
 8006896:	e79a      	b.n	80067ce <__multiply+0x7a>
 8006898:	3e01      	subs	r6, #1
 800689a:	e79c      	b.n	80067d6 <__multiply+0x82>
 800689c:	08007b7e 	.word	0x08007b7e
 80068a0:	08007bef 	.word	0x08007bef

080068a4 <__pow5mult>:
 80068a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a8:	4615      	mov	r5, r2
 80068aa:	f012 0203 	ands.w	r2, r2, #3
 80068ae:	4606      	mov	r6, r0
 80068b0:	460f      	mov	r7, r1
 80068b2:	d007      	beq.n	80068c4 <__pow5mult+0x20>
 80068b4:	4c25      	ldr	r4, [pc, #148]	; (800694c <__pow5mult+0xa8>)
 80068b6:	3a01      	subs	r2, #1
 80068b8:	2300      	movs	r3, #0
 80068ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068be:	f7ff fe55 	bl	800656c <__multadd>
 80068c2:	4607      	mov	r7, r0
 80068c4:	10ad      	asrs	r5, r5, #2
 80068c6:	d03d      	beq.n	8006944 <__pow5mult+0xa0>
 80068c8:	69f4      	ldr	r4, [r6, #28]
 80068ca:	b97c      	cbnz	r4, 80068ec <__pow5mult+0x48>
 80068cc:	2010      	movs	r0, #16
 80068ce:	f7fc fc83 	bl	80031d8 <malloc>
 80068d2:	4602      	mov	r2, r0
 80068d4:	61f0      	str	r0, [r6, #28]
 80068d6:	b928      	cbnz	r0, 80068e4 <__pow5mult+0x40>
 80068d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80068dc:	4b1c      	ldr	r3, [pc, #112]	; (8006950 <__pow5mult+0xac>)
 80068de:	481d      	ldr	r0, [pc, #116]	; (8006954 <__pow5mult+0xb0>)
 80068e0:	f000 fd30 	bl	8007344 <__assert_func>
 80068e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068e8:	6004      	str	r4, [r0, #0]
 80068ea:	60c4      	str	r4, [r0, #12]
 80068ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80068f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068f4:	b94c      	cbnz	r4, 800690a <__pow5mult+0x66>
 80068f6:	f240 2171 	movw	r1, #625	; 0x271
 80068fa:	4630      	mov	r0, r6
 80068fc:	f7ff ff14 	bl	8006728 <__i2b>
 8006900:	2300      	movs	r3, #0
 8006902:	4604      	mov	r4, r0
 8006904:	f8c8 0008 	str.w	r0, [r8, #8]
 8006908:	6003      	str	r3, [r0, #0]
 800690a:	f04f 0900 	mov.w	r9, #0
 800690e:	07eb      	lsls	r3, r5, #31
 8006910:	d50a      	bpl.n	8006928 <__pow5mult+0x84>
 8006912:	4639      	mov	r1, r7
 8006914:	4622      	mov	r2, r4
 8006916:	4630      	mov	r0, r6
 8006918:	f7ff ff1c 	bl	8006754 <__multiply>
 800691c:	4680      	mov	r8, r0
 800691e:	4639      	mov	r1, r7
 8006920:	4630      	mov	r0, r6
 8006922:	f7ff fe01 	bl	8006528 <_Bfree>
 8006926:	4647      	mov	r7, r8
 8006928:	106d      	asrs	r5, r5, #1
 800692a:	d00b      	beq.n	8006944 <__pow5mult+0xa0>
 800692c:	6820      	ldr	r0, [r4, #0]
 800692e:	b938      	cbnz	r0, 8006940 <__pow5mult+0x9c>
 8006930:	4622      	mov	r2, r4
 8006932:	4621      	mov	r1, r4
 8006934:	4630      	mov	r0, r6
 8006936:	f7ff ff0d 	bl	8006754 <__multiply>
 800693a:	6020      	str	r0, [r4, #0]
 800693c:	f8c0 9000 	str.w	r9, [r0]
 8006940:	4604      	mov	r4, r0
 8006942:	e7e4      	b.n	800690e <__pow5mult+0x6a>
 8006944:	4638      	mov	r0, r7
 8006946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800694a:	bf00      	nop
 800694c:	08007d38 	.word	0x08007d38
 8006950:	08007b0f 	.word	0x08007b0f
 8006954:	08007bef 	.word	0x08007bef

08006958 <__lshift>:
 8006958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800695c:	460c      	mov	r4, r1
 800695e:	4607      	mov	r7, r0
 8006960:	4691      	mov	r9, r2
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	6849      	ldr	r1, [r1, #4]
 8006966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800696a:	68a3      	ldr	r3, [r4, #8]
 800696c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006970:	f108 0601 	add.w	r6, r8, #1
 8006974:	42b3      	cmp	r3, r6
 8006976:	db0b      	blt.n	8006990 <__lshift+0x38>
 8006978:	4638      	mov	r0, r7
 800697a:	f7ff fd95 	bl	80064a8 <_Balloc>
 800697e:	4605      	mov	r5, r0
 8006980:	b948      	cbnz	r0, 8006996 <__lshift+0x3e>
 8006982:	4602      	mov	r2, r0
 8006984:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006988:	4b27      	ldr	r3, [pc, #156]	; (8006a28 <__lshift+0xd0>)
 800698a:	4828      	ldr	r0, [pc, #160]	; (8006a2c <__lshift+0xd4>)
 800698c:	f000 fcda 	bl	8007344 <__assert_func>
 8006990:	3101      	adds	r1, #1
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	e7ee      	b.n	8006974 <__lshift+0x1c>
 8006996:	2300      	movs	r3, #0
 8006998:	f100 0114 	add.w	r1, r0, #20
 800699c:	f100 0210 	add.w	r2, r0, #16
 80069a0:	4618      	mov	r0, r3
 80069a2:	4553      	cmp	r3, sl
 80069a4:	db33      	blt.n	8006a0e <__lshift+0xb6>
 80069a6:	6920      	ldr	r0, [r4, #16]
 80069a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069ac:	f104 0314 	add.w	r3, r4, #20
 80069b0:	f019 091f 	ands.w	r9, r9, #31
 80069b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069bc:	d02b      	beq.n	8006a16 <__lshift+0xbe>
 80069be:	468a      	mov	sl, r1
 80069c0:	2200      	movs	r2, #0
 80069c2:	f1c9 0e20 	rsb	lr, r9, #32
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	fa00 f009 	lsl.w	r0, r0, r9
 80069cc:	4310      	orrs	r0, r2
 80069ce:	f84a 0b04 	str.w	r0, [sl], #4
 80069d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069d6:	459c      	cmp	ip, r3
 80069d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80069dc:	d8f3      	bhi.n	80069c6 <__lshift+0x6e>
 80069de:	ebac 0304 	sub.w	r3, ip, r4
 80069e2:	3b15      	subs	r3, #21
 80069e4:	f023 0303 	bic.w	r3, r3, #3
 80069e8:	3304      	adds	r3, #4
 80069ea:	f104 0015 	add.w	r0, r4, #21
 80069ee:	4584      	cmp	ip, r0
 80069f0:	bf38      	it	cc
 80069f2:	2304      	movcc	r3, #4
 80069f4:	50ca      	str	r2, [r1, r3]
 80069f6:	b10a      	cbz	r2, 80069fc <__lshift+0xa4>
 80069f8:	f108 0602 	add.w	r6, r8, #2
 80069fc:	3e01      	subs	r6, #1
 80069fe:	4638      	mov	r0, r7
 8006a00:	4621      	mov	r1, r4
 8006a02:	612e      	str	r6, [r5, #16]
 8006a04:	f7ff fd90 	bl	8006528 <_Bfree>
 8006a08:	4628      	mov	r0, r5
 8006a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a12:	3301      	adds	r3, #1
 8006a14:	e7c5      	b.n	80069a2 <__lshift+0x4a>
 8006a16:	3904      	subs	r1, #4
 8006a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1c:	459c      	cmp	ip, r3
 8006a1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a22:	d8f9      	bhi.n	8006a18 <__lshift+0xc0>
 8006a24:	e7ea      	b.n	80069fc <__lshift+0xa4>
 8006a26:	bf00      	nop
 8006a28:	08007b7e 	.word	0x08007b7e
 8006a2c:	08007bef 	.word	0x08007bef

08006a30 <__mcmp>:
 8006a30:	4603      	mov	r3, r0
 8006a32:	690a      	ldr	r2, [r1, #16]
 8006a34:	6900      	ldr	r0, [r0, #16]
 8006a36:	b530      	push	{r4, r5, lr}
 8006a38:	1a80      	subs	r0, r0, r2
 8006a3a:	d10d      	bne.n	8006a58 <__mcmp+0x28>
 8006a3c:	3314      	adds	r3, #20
 8006a3e:	3114      	adds	r1, #20
 8006a40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a50:	4295      	cmp	r5, r2
 8006a52:	d002      	beq.n	8006a5a <__mcmp+0x2a>
 8006a54:	d304      	bcc.n	8006a60 <__mcmp+0x30>
 8006a56:	2001      	movs	r0, #1
 8006a58:	bd30      	pop	{r4, r5, pc}
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	d3f4      	bcc.n	8006a48 <__mcmp+0x18>
 8006a5e:	e7fb      	b.n	8006a58 <__mcmp+0x28>
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295
 8006a64:	e7f8      	b.n	8006a58 <__mcmp+0x28>
	...

08006a68 <__mdiff>:
 8006a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	460d      	mov	r5, r1
 8006a6e:	4607      	mov	r7, r0
 8006a70:	4611      	mov	r1, r2
 8006a72:	4628      	mov	r0, r5
 8006a74:	4614      	mov	r4, r2
 8006a76:	f7ff ffdb 	bl	8006a30 <__mcmp>
 8006a7a:	1e06      	subs	r6, r0, #0
 8006a7c:	d111      	bne.n	8006aa2 <__mdiff+0x3a>
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7ff fd11 	bl	80064a8 <_Balloc>
 8006a86:	4602      	mov	r2, r0
 8006a88:	b928      	cbnz	r0, 8006a96 <__mdiff+0x2e>
 8006a8a:	f240 2137 	movw	r1, #567	; 0x237
 8006a8e:	4b3a      	ldr	r3, [pc, #232]	; (8006b78 <__mdiff+0x110>)
 8006a90:	483a      	ldr	r0, [pc, #232]	; (8006b7c <__mdiff+0x114>)
 8006a92:	f000 fc57 	bl	8007344 <__assert_func>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa2:	bfa4      	itt	ge
 8006aa4:	4623      	movge	r3, r4
 8006aa6:	462c      	movge	r4, r5
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	6861      	ldr	r1, [r4, #4]
 8006aac:	bfa6      	itte	ge
 8006aae:	461d      	movge	r5, r3
 8006ab0:	2600      	movge	r6, #0
 8006ab2:	2601      	movlt	r6, #1
 8006ab4:	f7ff fcf8 	bl	80064a8 <_Balloc>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	b918      	cbnz	r0, 8006ac4 <__mdiff+0x5c>
 8006abc:	f240 2145 	movw	r1, #581	; 0x245
 8006ac0:	4b2d      	ldr	r3, [pc, #180]	; (8006b78 <__mdiff+0x110>)
 8006ac2:	e7e5      	b.n	8006a90 <__mdiff+0x28>
 8006ac4:	f102 0814 	add.w	r8, r2, #20
 8006ac8:	46c2      	mov	sl, r8
 8006aca:	f04f 0c00 	mov.w	ip, #0
 8006ace:	6927      	ldr	r7, [r4, #16]
 8006ad0:	60c6      	str	r6, [r0, #12]
 8006ad2:	692e      	ldr	r6, [r5, #16]
 8006ad4:	f104 0014 	add.w	r0, r4, #20
 8006ad8:	f105 0914 	add.w	r9, r5, #20
 8006adc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006ae0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ae4:	3410      	adds	r4, #16
 8006ae6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006aea:	f859 3b04 	ldr.w	r3, [r9], #4
 8006aee:	fa1f f18b 	uxth.w	r1, fp
 8006af2:	4461      	add	r1, ip
 8006af4:	fa1f fc83 	uxth.w	ip, r3
 8006af8:	0c1b      	lsrs	r3, r3, #16
 8006afa:	eba1 010c 	sub.w	r1, r1, ip
 8006afe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b02:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006b06:	b289      	uxth	r1, r1
 8006b08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006b0c:	454e      	cmp	r6, r9
 8006b0e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006b12:	f84a 1b04 	str.w	r1, [sl], #4
 8006b16:	d8e6      	bhi.n	8006ae6 <__mdiff+0x7e>
 8006b18:	1b73      	subs	r3, r6, r5
 8006b1a:	3b15      	subs	r3, #21
 8006b1c:	f023 0303 	bic.w	r3, r3, #3
 8006b20:	3515      	adds	r5, #21
 8006b22:	3304      	adds	r3, #4
 8006b24:	42ae      	cmp	r6, r5
 8006b26:	bf38      	it	cc
 8006b28:	2304      	movcc	r3, #4
 8006b2a:	4418      	add	r0, r3
 8006b2c:	4443      	add	r3, r8
 8006b2e:	461e      	mov	r6, r3
 8006b30:	4605      	mov	r5, r0
 8006b32:	4575      	cmp	r5, lr
 8006b34:	d30e      	bcc.n	8006b54 <__mdiff+0xec>
 8006b36:	f10e 0103 	add.w	r1, lr, #3
 8006b3a:	1a09      	subs	r1, r1, r0
 8006b3c:	f021 0103 	bic.w	r1, r1, #3
 8006b40:	3803      	subs	r0, #3
 8006b42:	4586      	cmp	lr, r0
 8006b44:	bf38      	it	cc
 8006b46:	2100      	movcc	r1, #0
 8006b48:	440b      	add	r3, r1
 8006b4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b4e:	b189      	cbz	r1, 8006b74 <__mdiff+0x10c>
 8006b50:	6117      	str	r7, [r2, #16]
 8006b52:	e7a3      	b.n	8006a9c <__mdiff+0x34>
 8006b54:	f855 8b04 	ldr.w	r8, [r5], #4
 8006b58:	fa1f f188 	uxth.w	r1, r8
 8006b5c:	4461      	add	r1, ip
 8006b5e:	140c      	asrs	r4, r1, #16
 8006b60:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b64:	b289      	uxth	r1, r1
 8006b66:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b6a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006b6e:	f846 1b04 	str.w	r1, [r6], #4
 8006b72:	e7de      	b.n	8006b32 <__mdiff+0xca>
 8006b74:	3f01      	subs	r7, #1
 8006b76:	e7e8      	b.n	8006b4a <__mdiff+0xe2>
 8006b78:	08007b7e 	.word	0x08007b7e
 8006b7c:	08007bef 	.word	0x08007bef

08006b80 <__ulp>:
 8006b80:	4b0e      	ldr	r3, [pc, #56]	; (8006bbc <__ulp+0x3c>)
 8006b82:	400b      	ands	r3, r1
 8006b84:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dc08      	bgt.n	8006b9e <__ulp+0x1e>
 8006b8c:	425b      	negs	r3, r3
 8006b8e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006b92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b96:	da04      	bge.n	8006ba2 <__ulp+0x22>
 8006b98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b9c:	4113      	asrs	r3, r2
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	e008      	b.n	8006bb4 <__ulp+0x34>
 8006ba2:	f1a2 0314 	sub.w	r3, r2, #20
 8006ba6:	2b1e      	cmp	r3, #30
 8006ba8:	bfd6      	itet	le
 8006baa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006bae:	2201      	movgt	r2, #1
 8006bb0:	40da      	lsrle	r2, r3
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	7ff00000 	.word	0x7ff00000

08006bc0 <__b2d>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	6905      	ldr	r5, [r0, #16]
 8006bc4:	f100 0714 	add.w	r7, r0, #20
 8006bc8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006bcc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006bd0:	1f2e      	subs	r6, r5, #4
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f7ff fd5a 	bl	800668c <__hi0bits>
 8006bd8:	f1c0 0220 	rsb	r2, r0, #32
 8006bdc:	280a      	cmp	r0, #10
 8006bde:	4603      	mov	r3, r0
 8006be0:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006c4c <__b2d+0x8c>
 8006be4:	600a      	str	r2, [r1, #0]
 8006be6:	dc12      	bgt.n	8006c0e <__b2d+0x4e>
 8006be8:	f1c0 0e0b 	rsb	lr, r0, #11
 8006bec:	fa24 f20e 	lsr.w	r2, r4, lr
 8006bf0:	42b7      	cmp	r7, r6
 8006bf2:	ea42 010c 	orr.w	r1, r2, ip
 8006bf6:	bf2c      	ite	cs
 8006bf8:	2200      	movcs	r2, #0
 8006bfa:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006bfe:	3315      	adds	r3, #21
 8006c00:	fa04 f303 	lsl.w	r3, r4, r3
 8006c04:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0e:	42b7      	cmp	r7, r6
 8006c10:	bf2e      	itee	cs
 8006c12:	2200      	movcs	r2, #0
 8006c14:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006c18:	f1a5 0608 	subcc.w	r6, r5, #8
 8006c1c:	3b0b      	subs	r3, #11
 8006c1e:	d012      	beq.n	8006c46 <__b2d+0x86>
 8006c20:	f1c3 0520 	rsb	r5, r3, #32
 8006c24:	fa22 f105 	lsr.w	r1, r2, r5
 8006c28:	409c      	lsls	r4, r3
 8006c2a:	430c      	orrs	r4, r1
 8006c2c:	42be      	cmp	r6, r7
 8006c2e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006c32:	bf94      	ite	ls
 8006c34:	2400      	movls	r4, #0
 8006c36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006c3a:	409a      	lsls	r2, r3
 8006c3c:	40ec      	lsrs	r4, r5
 8006c3e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006c42:	4322      	orrs	r2, r4
 8006c44:	e7e1      	b.n	8006c0a <__b2d+0x4a>
 8006c46:	ea44 010c 	orr.w	r1, r4, ip
 8006c4a:	e7de      	b.n	8006c0a <__b2d+0x4a>
 8006c4c:	3ff00000 	.word	0x3ff00000

08006c50 <__d2b>:
 8006c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c52:	2101      	movs	r1, #1
 8006c54:	4617      	mov	r7, r2
 8006c56:	461c      	mov	r4, r3
 8006c58:	9e08      	ldr	r6, [sp, #32]
 8006c5a:	f7ff fc25 	bl	80064a8 <_Balloc>
 8006c5e:	4605      	mov	r5, r0
 8006c60:	b930      	cbnz	r0, 8006c70 <__d2b+0x20>
 8006c62:	4602      	mov	r2, r0
 8006c64:	f240 310f 	movw	r1, #783	; 0x30f
 8006c68:	4b22      	ldr	r3, [pc, #136]	; (8006cf4 <__d2b+0xa4>)
 8006c6a:	4823      	ldr	r0, [pc, #140]	; (8006cf8 <__d2b+0xa8>)
 8006c6c:	f000 fb6a 	bl	8007344 <__assert_func>
 8006c70:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006c74:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006c78:	bb24      	cbnz	r4, 8006cc4 <__d2b+0x74>
 8006c7a:	2f00      	cmp	r7, #0
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	d026      	beq.n	8006cce <__d2b+0x7e>
 8006c80:	4668      	mov	r0, sp
 8006c82:	9700      	str	r7, [sp, #0]
 8006c84:	f7ff fd22 	bl	80066cc <__lo0bits>
 8006c88:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c8c:	b1e8      	cbz	r0, 8006cca <__d2b+0x7a>
 8006c8e:	f1c0 0320 	rsb	r3, r0, #32
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	430b      	orrs	r3, r1
 8006c98:	40c2      	lsrs	r2, r0
 8006c9a:	616b      	str	r3, [r5, #20]
 8006c9c:	9201      	str	r2, [sp, #4]
 8006c9e:	9b01      	ldr	r3, [sp, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bf14      	ite	ne
 8006ca4:	2102      	movne	r1, #2
 8006ca6:	2101      	moveq	r1, #1
 8006ca8:	61ab      	str	r3, [r5, #24]
 8006caa:	6129      	str	r1, [r5, #16]
 8006cac:	b1bc      	cbz	r4, 8006cde <__d2b+0x8e>
 8006cae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006cb2:	4404      	add	r4, r0
 8006cb4:	6034      	str	r4, [r6, #0]
 8006cb6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cbc:	6018      	str	r0, [r3, #0]
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	b003      	add	sp, #12
 8006cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cc8:	e7d7      	b.n	8006c7a <__d2b+0x2a>
 8006cca:	6169      	str	r1, [r5, #20]
 8006ccc:	e7e7      	b.n	8006c9e <__d2b+0x4e>
 8006cce:	a801      	add	r0, sp, #4
 8006cd0:	f7ff fcfc 	bl	80066cc <__lo0bits>
 8006cd4:	9b01      	ldr	r3, [sp, #4]
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	616b      	str	r3, [r5, #20]
 8006cda:	3020      	adds	r0, #32
 8006cdc:	e7e5      	b.n	8006caa <__d2b+0x5a>
 8006cde:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ce2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006ce6:	6030      	str	r0, [r6, #0]
 8006ce8:	6918      	ldr	r0, [r3, #16]
 8006cea:	f7ff fccf 	bl	800668c <__hi0bits>
 8006cee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006cf2:	e7e2      	b.n	8006cba <__d2b+0x6a>
 8006cf4:	08007b7e 	.word	0x08007b7e
 8006cf8:	08007bef 	.word	0x08007bef

08006cfc <__ratio>:
 8006cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d00:	4688      	mov	r8, r1
 8006d02:	4669      	mov	r1, sp
 8006d04:	4681      	mov	r9, r0
 8006d06:	f7ff ff5b 	bl	8006bc0 <__b2d>
 8006d0a:	460f      	mov	r7, r1
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	460d      	mov	r5, r1
 8006d10:	4640      	mov	r0, r8
 8006d12:	a901      	add	r1, sp, #4
 8006d14:	f7ff ff54 	bl	8006bc0 <__b2d>
 8006d18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d1c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006d20:	468b      	mov	fp, r1
 8006d22:	eba3 0c02 	sub.w	ip, r3, r2
 8006d26:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006d2a:	1a9b      	subs	r3, r3, r2
 8006d2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	bfd5      	itete	le
 8006d34:	460a      	movle	r2, r1
 8006d36:	462a      	movgt	r2, r5
 8006d38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d3c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006d40:	bfd8      	it	le
 8006d42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006d46:	465b      	mov	r3, fp
 8006d48:	4602      	mov	r2, r0
 8006d4a:	4639      	mov	r1, r7
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f7f9 fced 	bl	800072c <__aeabi_ddiv>
 8006d52:	b003      	add	sp, #12
 8006d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d58 <__copybits>:
 8006d58:	3901      	subs	r1, #1
 8006d5a:	b570      	push	{r4, r5, r6, lr}
 8006d5c:	1149      	asrs	r1, r1, #5
 8006d5e:	6914      	ldr	r4, [r2, #16]
 8006d60:	3101      	adds	r1, #1
 8006d62:	f102 0314 	add.w	r3, r2, #20
 8006d66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d6e:	1f05      	subs	r5, r0, #4
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d30c      	bcc.n	8006d8e <__copybits+0x36>
 8006d74:	1aa3      	subs	r3, r4, r2
 8006d76:	3b11      	subs	r3, #17
 8006d78:	f023 0303 	bic.w	r3, r3, #3
 8006d7c:	3211      	adds	r2, #17
 8006d7e:	42a2      	cmp	r2, r4
 8006d80:	bf88      	it	hi
 8006d82:	2300      	movhi	r3, #0
 8006d84:	4418      	add	r0, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	4288      	cmp	r0, r1
 8006d8a:	d305      	bcc.n	8006d98 <__copybits+0x40>
 8006d8c:	bd70      	pop	{r4, r5, r6, pc}
 8006d8e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d92:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d96:	e7eb      	b.n	8006d70 <__copybits+0x18>
 8006d98:	f840 3b04 	str.w	r3, [r0], #4
 8006d9c:	e7f4      	b.n	8006d88 <__copybits+0x30>

08006d9e <__any_on>:
 8006d9e:	f100 0214 	add.w	r2, r0, #20
 8006da2:	6900      	ldr	r0, [r0, #16]
 8006da4:	114b      	asrs	r3, r1, #5
 8006da6:	4298      	cmp	r0, r3
 8006da8:	b510      	push	{r4, lr}
 8006daa:	db11      	blt.n	8006dd0 <__any_on+0x32>
 8006dac:	dd0a      	ble.n	8006dc4 <__any_on+0x26>
 8006dae:	f011 011f 	ands.w	r1, r1, #31
 8006db2:	d007      	beq.n	8006dc4 <__any_on+0x26>
 8006db4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006db8:	fa24 f001 	lsr.w	r0, r4, r1
 8006dbc:	fa00 f101 	lsl.w	r1, r0, r1
 8006dc0:	428c      	cmp	r4, r1
 8006dc2:	d10b      	bne.n	8006ddc <__any_on+0x3e>
 8006dc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d803      	bhi.n	8006dd4 <__any_on+0x36>
 8006dcc:	2000      	movs	r0, #0
 8006dce:	bd10      	pop	{r4, pc}
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	e7f7      	b.n	8006dc4 <__any_on+0x26>
 8006dd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	d0f5      	beq.n	8006dc8 <__any_on+0x2a>
 8006ddc:	2001      	movs	r0, #1
 8006dde:	e7f6      	b.n	8006dce <__any_on+0x30>

08006de0 <_malloc_usable_size_r>:
 8006de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de4:	1f18      	subs	r0, r3, #4
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bfbc      	itt	lt
 8006dea:	580b      	ldrlt	r3, [r1, r0]
 8006dec:	18c0      	addlt	r0, r0, r3
 8006dee:	4770      	bx	lr

08006df0 <_strtol_l.constprop.0>:
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df6:	4686      	mov	lr, r0
 8006df8:	4690      	mov	r8, r2
 8006dfa:	d001      	beq.n	8006e00 <_strtol_l.constprop.0+0x10>
 8006dfc:	2b24      	cmp	r3, #36	; 0x24
 8006dfe:	d906      	bls.n	8006e0e <_strtol_l.constprop.0+0x1e>
 8006e00:	f7fe f8dc 	bl	8004fbc <__errno>
 8006e04:	2316      	movs	r3, #22
 8006e06:	6003      	str	r3, [r0, #0]
 8006e08:	2000      	movs	r0, #0
 8006e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0e:	460d      	mov	r5, r1
 8006e10:	4835      	ldr	r0, [pc, #212]	; (8006ee8 <_strtol_l.constprop.0+0xf8>)
 8006e12:	462a      	mov	r2, r5
 8006e14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e18:	5d06      	ldrb	r6, [r0, r4]
 8006e1a:	f016 0608 	ands.w	r6, r6, #8
 8006e1e:	d1f8      	bne.n	8006e12 <_strtol_l.constprop.0+0x22>
 8006e20:	2c2d      	cmp	r4, #45	; 0x2d
 8006e22:	d12e      	bne.n	8006e82 <_strtol_l.constprop.0+0x92>
 8006e24:	2601      	movs	r6, #1
 8006e26:	782c      	ldrb	r4, [r5, #0]
 8006e28:	1c95      	adds	r5, r2, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d057      	beq.n	8006ede <_strtol_l.constprop.0+0xee>
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d109      	bne.n	8006e46 <_strtol_l.constprop.0+0x56>
 8006e32:	2c30      	cmp	r4, #48	; 0x30
 8006e34:	d107      	bne.n	8006e46 <_strtol_l.constprop.0+0x56>
 8006e36:	782a      	ldrb	r2, [r5, #0]
 8006e38:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006e3c:	2a58      	cmp	r2, #88	; 0x58
 8006e3e:	d149      	bne.n	8006ed4 <_strtol_l.constprop.0+0xe4>
 8006e40:	2310      	movs	r3, #16
 8006e42:	786c      	ldrb	r4, [r5, #1]
 8006e44:	3502      	adds	r5, #2
 8006e46:	2200      	movs	r2, #0
 8006e48:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006e4c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006e50:	fbbc f9f3 	udiv	r9, ip, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	fb03 ca19 	mls	sl, r3, r9, ip
 8006e5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006e5e:	2f09      	cmp	r7, #9
 8006e60:	d814      	bhi.n	8006e8c <_strtol_l.constprop.0+0x9c>
 8006e62:	463c      	mov	r4, r7
 8006e64:	42a3      	cmp	r3, r4
 8006e66:	dd20      	ble.n	8006eaa <_strtol_l.constprop.0+0xba>
 8006e68:	1c57      	adds	r7, r2, #1
 8006e6a:	d007      	beq.n	8006e7c <_strtol_l.constprop.0+0x8c>
 8006e6c:	4581      	cmp	r9, r0
 8006e6e:	d319      	bcc.n	8006ea4 <_strtol_l.constprop.0+0xb4>
 8006e70:	d101      	bne.n	8006e76 <_strtol_l.constprop.0+0x86>
 8006e72:	45a2      	cmp	sl, r4
 8006e74:	db16      	blt.n	8006ea4 <_strtol_l.constprop.0+0xb4>
 8006e76:	2201      	movs	r2, #1
 8006e78:	fb00 4003 	mla	r0, r0, r3, r4
 8006e7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e80:	e7eb      	b.n	8006e5a <_strtol_l.constprop.0+0x6a>
 8006e82:	2c2b      	cmp	r4, #43	; 0x2b
 8006e84:	bf04      	itt	eq
 8006e86:	782c      	ldrbeq	r4, [r5, #0]
 8006e88:	1c95      	addeq	r5, r2, #2
 8006e8a:	e7ce      	b.n	8006e2a <_strtol_l.constprop.0+0x3a>
 8006e8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006e90:	2f19      	cmp	r7, #25
 8006e92:	d801      	bhi.n	8006e98 <_strtol_l.constprop.0+0xa8>
 8006e94:	3c37      	subs	r4, #55	; 0x37
 8006e96:	e7e5      	b.n	8006e64 <_strtol_l.constprop.0+0x74>
 8006e98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006e9c:	2f19      	cmp	r7, #25
 8006e9e:	d804      	bhi.n	8006eaa <_strtol_l.constprop.0+0xba>
 8006ea0:	3c57      	subs	r4, #87	; 0x57
 8006ea2:	e7df      	b.n	8006e64 <_strtol_l.constprop.0+0x74>
 8006ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea8:	e7e8      	b.n	8006e7c <_strtol_l.constprop.0+0x8c>
 8006eaa:	1c53      	adds	r3, r2, #1
 8006eac:	d108      	bne.n	8006ec0 <_strtol_l.constprop.0+0xd0>
 8006eae:	2322      	movs	r3, #34	; 0x22
 8006eb0:	4660      	mov	r0, ip
 8006eb2:	f8ce 3000 	str.w	r3, [lr]
 8006eb6:	f1b8 0f00 	cmp.w	r8, #0
 8006eba:	d0a6      	beq.n	8006e0a <_strtol_l.constprop.0+0x1a>
 8006ebc:	1e69      	subs	r1, r5, #1
 8006ebe:	e006      	b.n	8006ece <_strtol_l.constprop.0+0xde>
 8006ec0:	b106      	cbz	r6, 8006ec4 <_strtol_l.constprop.0+0xd4>
 8006ec2:	4240      	negs	r0, r0
 8006ec4:	f1b8 0f00 	cmp.w	r8, #0
 8006ec8:	d09f      	beq.n	8006e0a <_strtol_l.constprop.0+0x1a>
 8006eca:	2a00      	cmp	r2, #0
 8006ecc:	d1f6      	bne.n	8006ebc <_strtol_l.constprop.0+0xcc>
 8006ece:	f8c8 1000 	str.w	r1, [r8]
 8006ed2:	e79a      	b.n	8006e0a <_strtol_l.constprop.0+0x1a>
 8006ed4:	2430      	movs	r4, #48	; 0x30
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1b5      	bne.n	8006e46 <_strtol_l.constprop.0+0x56>
 8006eda:	2308      	movs	r3, #8
 8006edc:	e7b3      	b.n	8006e46 <_strtol_l.constprop.0+0x56>
 8006ede:	2c30      	cmp	r4, #48	; 0x30
 8006ee0:	d0a9      	beq.n	8006e36 <_strtol_l.constprop.0+0x46>
 8006ee2:	230a      	movs	r3, #10
 8006ee4:	e7af      	b.n	8006e46 <_strtol_l.constprop.0+0x56>
 8006ee6:	bf00      	nop
 8006ee8:	080079c1 	.word	0x080079c1

08006eec <_strtol_r>:
 8006eec:	f7ff bf80 	b.w	8006df0 <_strtol_l.constprop.0>

08006ef0 <__ascii_wctomb>:
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	4608      	mov	r0, r1
 8006ef4:	b141      	cbz	r1, 8006f08 <__ascii_wctomb+0x18>
 8006ef6:	2aff      	cmp	r2, #255	; 0xff
 8006ef8:	d904      	bls.n	8006f04 <__ascii_wctomb+0x14>
 8006efa:	228a      	movs	r2, #138	; 0x8a
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	4770      	bx	lr
 8006f04:	2001      	movs	r0, #1
 8006f06:	700a      	strb	r2, [r1, #0]
 8006f08:	4770      	bx	lr

08006f0a <__ssputs_r>:
 8006f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f0e:	461f      	mov	r7, r3
 8006f10:	688e      	ldr	r6, [r1, #8]
 8006f12:	4682      	mov	sl, r0
 8006f14:	42be      	cmp	r6, r7
 8006f16:	460c      	mov	r4, r1
 8006f18:	4690      	mov	r8, r2
 8006f1a:	680b      	ldr	r3, [r1, #0]
 8006f1c:	d82c      	bhi.n	8006f78 <__ssputs_r+0x6e>
 8006f1e:	898a      	ldrh	r2, [r1, #12]
 8006f20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f24:	d026      	beq.n	8006f74 <__ssputs_r+0x6a>
 8006f26:	6965      	ldr	r5, [r4, #20]
 8006f28:	6909      	ldr	r1, [r1, #16]
 8006f2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f2e:	eba3 0901 	sub.w	r9, r3, r1
 8006f32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f36:	1c7b      	adds	r3, r7, #1
 8006f38:	444b      	add	r3, r9
 8006f3a:	106d      	asrs	r5, r5, #1
 8006f3c:	429d      	cmp	r5, r3
 8006f3e:	bf38      	it	cc
 8006f40:	461d      	movcc	r5, r3
 8006f42:	0553      	lsls	r3, r2, #21
 8006f44:	d527      	bpl.n	8006f96 <__ssputs_r+0x8c>
 8006f46:	4629      	mov	r1, r5
 8006f48:	f7fc f96e 	bl	8003228 <_malloc_r>
 8006f4c:	4606      	mov	r6, r0
 8006f4e:	b360      	cbz	r0, 8006faa <__ssputs_r+0xa0>
 8006f50:	464a      	mov	r2, r9
 8006f52:	6921      	ldr	r1, [r4, #16]
 8006f54:	f7fe f86c 	bl	8005030 <memcpy>
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	6126      	str	r6, [r4, #16]
 8006f66:	444e      	add	r6, r9
 8006f68:	6026      	str	r6, [r4, #0]
 8006f6a:	463e      	mov	r6, r7
 8006f6c:	6165      	str	r5, [r4, #20]
 8006f6e:	eba5 0509 	sub.w	r5, r5, r9
 8006f72:	60a5      	str	r5, [r4, #8]
 8006f74:	42be      	cmp	r6, r7
 8006f76:	d900      	bls.n	8006f7a <__ssputs_r+0x70>
 8006f78:	463e      	mov	r6, r7
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	4641      	mov	r1, r8
 8006f7e:	6820      	ldr	r0, [r4, #0]
 8006f80:	f000 f9c6 	bl	8007310 <memmove>
 8006f84:	2000      	movs	r0, #0
 8006f86:	68a3      	ldr	r3, [r4, #8]
 8006f88:	1b9b      	subs	r3, r3, r6
 8006f8a:	60a3      	str	r3, [r4, #8]
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	4433      	add	r3, r6
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f96:	462a      	mov	r2, r5
 8006f98:	f7fc f9d2 	bl	8003340 <_realloc_r>
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d1e0      	bne.n	8006f64 <__ssputs_r+0x5a>
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	6921      	ldr	r1, [r4, #16]
 8006fa6:	f7fe fecb 	bl	8005d40 <_free_r>
 8006faa:	230c      	movs	r3, #12
 8006fac:	f8ca 3000 	str.w	r3, [sl]
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	e7e9      	b.n	8006f92 <__ssputs_r+0x88>
	...

08006fc0 <_svfiprintf_r>:
 8006fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	4698      	mov	r8, r3
 8006fc6:	898b      	ldrh	r3, [r1, #12]
 8006fc8:	4607      	mov	r7, r0
 8006fca:	061b      	lsls	r3, r3, #24
 8006fcc:	460d      	mov	r5, r1
 8006fce:	4614      	mov	r4, r2
 8006fd0:	b09d      	sub	sp, #116	; 0x74
 8006fd2:	d50e      	bpl.n	8006ff2 <_svfiprintf_r+0x32>
 8006fd4:	690b      	ldr	r3, [r1, #16]
 8006fd6:	b963      	cbnz	r3, 8006ff2 <_svfiprintf_r+0x32>
 8006fd8:	2140      	movs	r1, #64	; 0x40
 8006fda:	f7fc f925 	bl	8003228 <_malloc_r>
 8006fde:	6028      	str	r0, [r5, #0]
 8006fe0:	6128      	str	r0, [r5, #16]
 8006fe2:	b920      	cbnz	r0, 8006fee <_svfiprintf_r+0x2e>
 8006fe4:	230c      	movs	r3, #12
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fec:	e0d0      	b.n	8007190 <_svfiprintf_r+0x1d0>
 8006fee:	2340      	movs	r3, #64	; 0x40
 8006ff0:	616b      	str	r3, [r5, #20]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff6:	2320      	movs	r3, #32
 8006ff8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ffc:	2330      	movs	r3, #48	; 0x30
 8006ffe:	f04f 0901 	mov.w	r9, #1
 8007002:	f8cd 800c 	str.w	r8, [sp, #12]
 8007006:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80071a8 <_svfiprintf_r+0x1e8>
 800700a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800700e:	4623      	mov	r3, r4
 8007010:	469a      	mov	sl, r3
 8007012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007016:	b10a      	cbz	r2, 800701c <_svfiprintf_r+0x5c>
 8007018:	2a25      	cmp	r2, #37	; 0x25
 800701a:	d1f9      	bne.n	8007010 <_svfiprintf_r+0x50>
 800701c:	ebba 0b04 	subs.w	fp, sl, r4
 8007020:	d00b      	beq.n	800703a <_svfiprintf_r+0x7a>
 8007022:	465b      	mov	r3, fp
 8007024:	4622      	mov	r2, r4
 8007026:	4629      	mov	r1, r5
 8007028:	4638      	mov	r0, r7
 800702a:	f7ff ff6e 	bl	8006f0a <__ssputs_r>
 800702e:	3001      	adds	r0, #1
 8007030:	f000 80a9 	beq.w	8007186 <_svfiprintf_r+0x1c6>
 8007034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007036:	445a      	add	r2, fp
 8007038:	9209      	str	r2, [sp, #36]	; 0x24
 800703a:	f89a 3000 	ldrb.w	r3, [sl]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 80a1 	beq.w	8007186 <_svfiprintf_r+0x1c6>
 8007044:	2300      	movs	r3, #0
 8007046:	f04f 32ff 	mov.w	r2, #4294967295
 800704a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800704e:	f10a 0a01 	add.w	sl, sl, #1
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	9307      	str	r3, [sp, #28]
 8007056:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800705a:	931a      	str	r3, [sp, #104]	; 0x68
 800705c:	4654      	mov	r4, sl
 800705e:	2205      	movs	r2, #5
 8007060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007064:	4850      	ldr	r0, [pc, #320]	; (80071a8 <_svfiprintf_r+0x1e8>)
 8007066:	f7fd ffd5 	bl	8005014 <memchr>
 800706a:	9a04      	ldr	r2, [sp, #16]
 800706c:	b9d8      	cbnz	r0, 80070a6 <_svfiprintf_r+0xe6>
 800706e:	06d0      	lsls	r0, r2, #27
 8007070:	bf44      	itt	mi
 8007072:	2320      	movmi	r3, #32
 8007074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007078:	0711      	lsls	r1, r2, #28
 800707a:	bf44      	itt	mi
 800707c:	232b      	movmi	r3, #43	; 0x2b
 800707e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007082:	f89a 3000 	ldrb.w	r3, [sl]
 8007086:	2b2a      	cmp	r3, #42	; 0x2a
 8007088:	d015      	beq.n	80070b6 <_svfiprintf_r+0xf6>
 800708a:	4654      	mov	r4, sl
 800708c:	2000      	movs	r0, #0
 800708e:	f04f 0c0a 	mov.w	ip, #10
 8007092:	9a07      	ldr	r2, [sp, #28]
 8007094:	4621      	mov	r1, r4
 8007096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800709a:	3b30      	subs	r3, #48	; 0x30
 800709c:	2b09      	cmp	r3, #9
 800709e:	d94d      	bls.n	800713c <_svfiprintf_r+0x17c>
 80070a0:	b1b0      	cbz	r0, 80070d0 <_svfiprintf_r+0x110>
 80070a2:	9207      	str	r2, [sp, #28]
 80070a4:	e014      	b.n	80070d0 <_svfiprintf_r+0x110>
 80070a6:	eba0 0308 	sub.w	r3, r0, r8
 80070aa:	fa09 f303 	lsl.w	r3, r9, r3
 80070ae:	4313      	orrs	r3, r2
 80070b0:	46a2      	mov	sl, r4
 80070b2:	9304      	str	r3, [sp, #16]
 80070b4:	e7d2      	b.n	800705c <_svfiprintf_r+0x9c>
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	1d19      	adds	r1, r3, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	9103      	str	r1, [sp, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bfbb      	ittet	lt
 80070c2:	425b      	neglt	r3, r3
 80070c4:	f042 0202 	orrlt.w	r2, r2, #2
 80070c8:	9307      	strge	r3, [sp, #28]
 80070ca:	9307      	strlt	r3, [sp, #28]
 80070cc:	bfb8      	it	lt
 80070ce:	9204      	strlt	r2, [sp, #16]
 80070d0:	7823      	ldrb	r3, [r4, #0]
 80070d2:	2b2e      	cmp	r3, #46	; 0x2e
 80070d4:	d10c      	bne.n	80070f0 <_svfiprintf_r+0x130>
 80070d6:	7863      	ldrb	r3, [r4, #1]
 80070d8:	2b2a      	cmp	r3, #42	; 0x2a
 80070da:	d134      	bne.n	8007146 <_svfiprintf_r+0x186>
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	3402      	adds	r4, #2
 80070e0:	1d1a      	adds	r2, r3, #4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	9203      	str	r2, [sp, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bfb8      	it	lt
 80070ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80070ee:	9305      	str	r3, [sp, #20]
 80070f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80071ac <_svfiprintf_r+0x1ec>
 80070f4:	2203      	movs	r2, #3
 80070f6:	4650      	mov	r0, sl
 80070f8:	7821      	ldrb	r1, [r4, #0]
 80070fa:	f7fd ff8b 	bl	8005014 <memchr>
 80070fe:	b138      	cbz	r0, 8007110 <_svfiprintf_r+0x150>
 8007100:	2240      	movs	r2, #64	; 0x40
 8007102:	9b04      	ldr	r3, [sp, #16]
 8007104:	eba0 000a 	sub.w	r0, r0, sl
 8007108:	4082      	lsls	r2, r0
 800710a:	4313      	orrs	r3, r2
 800710c:	3401      	adds	r4, #1
 800710e:	9304      	str	r3, [sp, #16]
 8007110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007114:	2206      	movs	r2, #6
 8007116:	4826      	ldr	r0, [pc, #152]	; (80071b0 <_svfiprintf_r+0x1f0>)
 8007118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800711c:	f7fd ff7a 	bl	8005014 <memchr>
 8007120:	2800      	cmp	r0, #0
 8007122:	d038      	beq.n	8007196 <_svfiprintf_r+0x1d6>
 8007124:	4b23      	ldr	r3, [pc, #140]	; (80071b4 <_svfiprintf_r+0x1f4>)
 8007126:	bb1b      	cbnz	r3, 8007170 <_svfiprintf_r+0x1b0>
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	3307      	adds	r3, #7
 800712c:	f023 0307 	bic.w	r3, r3, #7
 8007130:	3308      	adds	r3, #8
 8007132:	9303      	str	r3, [sp, #12]
 8007134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007136:	4433      	add	r3, r6
 8007138:	9309      	str	r3, [sp, #36]	; 0x24
 800713a:	e768      	b.n	800700e <_svfiprintf_r+0x4e>
 800713c:	460c      	mov	r4, r1
 800713e:	2001      	movs	r0, #1
 8007140:	fb0c 3202 	mla	r2, ip, r2, r3
 8007144:	e7a6      	b.n	8007094 <_svfiprintf_r+0xd4>
 8007146:	2300      	movs	r3, #0
 8007148:	f04f 0c0a 	mov.w	ip, #10
 800714c:	4619      	mov	r1, r3
 800714e:	3401      	adds	r4, #1
 8007150:	9305      	str	r3, [sp, #20]
 8007152:	4620      	mov	r0, r4
 8007154:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007158:	3a30      	subs	r2, #48	; 0x30
 800715a:	2a09      	cmp	r2, #9
 800715c:	d903      	bls.n	8007166 <_svfiprintf_r+0x1a6>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0c6      	beq.n	80070f0 <_svfiprintf_r+0x130>
 8007162:	9105      	str	r1, [sp, #20]
 8007164:	e7c4      	b.n	80070f0 <_svfiprintf_r+0x130>
 8007166:	4604      	mov	r4, r0
 8007168:	2301      	movs	r3, #1
 800716a:	fb0c 2101 	mla	r1, ip, r1, r2
 800716e:	e7f0      	b.n	8007152 <_svfiprintf_r+0x192>
 8007170:	ab03      	add	r3, sp, #12
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	462a      	mov	r2, r5
 8007176:	4638      	mov	r0, r7
 8007178:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <_svfiprintf_r+0x1f8>)
 800717a:	a904      	add	r1, sp, #16
 800717c:	f7fc ffc6 	bl	800410c <_printf_float>
 8007180:	1c42      	adds	r2, r0, #1
 8007182:	4606      	mov	r6, r0
 8007184:	d1d6      	bne.n	8007134 <_svfiprintf_r+0x174>
 8007186:	89ab      	ldrh	r3, [r5, #12]
 8007188:	065b      	lsls	r3, r3, #25
 800718a:	f53f af2d 	bmi.w	8006fe8 <_svfiprintf_r+0x28>
 800718e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007190:	b01d      	add	sp, #116	; 0x74
 8007192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007196:	ab03      	add	r3, sp, #12
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	462a      	mov	r2, r5
 800719c:	4638      	mov	r0, r7
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <_svfiprintf_r+0x1f8>)
 80071a0:	a904      	add	r1, sp, #16
 80071a2:	f7fd fa53 	bl	800464c <_printf_i>
 80071a6:	e7eb      	b.n	8007180 <_svfiprintf_r+0x1c0>
 80071a8:	08007d44 	.word	0x08007d44
 80071ac:	08007d4a 	.word	0x08007d4a
 80071b0:	08007d4e 	.word	0x08007d4e
 80071b4:	0800410d 	.word	0x0800410d
 80071b8:	08006f0b 	.word	0x08006f0b

080071bc <__sflush_r>:
 80071bc:	898a      	ldrh	r2, [r1, #12]
 80071be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c0:	4605      	mov	r5, r0
 80071c2:	0710      	lsls	r0, r2, #28
 80071c4:	460c      	mov	r4, r1
 80071c6:	d457      	bmi.n	8007278 <__sflush_r+0xbc>
 80071c8:	684b      	ldr	r3, [r1, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	dc04      	bgt.n	80071d8 <__sflush_r+0x1c>
 80071ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	dc01      	bgt.n	80071d8 <__sflush_r+0x1c>
 80071d4:	2000      	movs	r0, #0
 80071d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071da:	2e00      	cmp	r6, #0
 80071dc:	d0fa      	beq.n	80071d4 <__sflush_r+0x18>
 80071de:	2300      	movs	r3, #0
 80071e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071e4:	682f      	ldr	r7, [r5, #0]
 80071e6:	6a21      	ldr	r1, [r4, #32]
 80071e8:	602b      	str	r3, [r5, #0]
 80071ea:	d032      	beq.n	8007252 <__sflush_r+0x96>
 80071ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	075a      	lsls	r2, r3, #29
 80071f2:	d505      	bpl.n	8007200 <__sflush_r+0x44>
 80071f4:	6863      	ldr	r3, [r4, #4]
 80071f6:	1ac0      	subs	r0, r0, r3
 80071f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071fa:	b10b      	cbz	r3, 8007200 <__sflush_r+0x44>
 80071fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071fe:	1ac0      	subs	r0, r0, r3
 8007200:	2300      	movs	r3, #0
 8007202:	4602      	mov	r2, r0
 8007204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007206:	4628      	mov	r0, r5
 8007208:	6a21      	ldr	r1, [r4, #32]
 800720a:	47b0      	blx	r6
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	d106      	bne.n	8007220 <__sflush_r+0x64>
 8007212:	6829      	ldr	r1, [r5, #0]
 8007214:	291d      	cmp	r1, #29
 8007216:	d82b      	bhi.n	8007270 <__sflush_r+0xb4>
 8007218:	4a28      	ldr	r2, [pc, #160]	; (80072bc <__sflush_r+0x100>)
 800721a:	410a      	asrs	r2, r1
 800721c:	07d6      	lsls	r6, r2, #31
 800721e:	d427      	bmi.n	8007270 <__sflush_r+0xb4>
 8007220:	2200      	movs	r2, #0
 8007222:	6062      	str	r2, [r4, #4]
 8007224:	6922      	ldr	r2, [r4, #16]
 8007226:	04d9      	lsls	r1, r3, #19
 8007228:	6022      	str	r2, [r4, #0]
 800722a:	d504      	bpl.n	8007236 <__sflush_r+0x7a>
 800722c:	1c42      	adds	r2, r0, #1
 800722e:	d101      	bne.n	8007234 <__sflush_r+0x78>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b903      	cbnz	r3, 8007236 <__sflush_r+0x7a>
 8007234:	6560      	str	r0, [r4, #84]	; 0x54
 8007236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007238:	602f      	str	r7, [r5, #0]
 800723a:	2900      	cmp	r1, #0
 800723c:	d0ca      	beq.n	80071d4 <__sflush_r+0x18>
 800723e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007242:	4299      	cmp	r1, r3
 8007244:	d002      	beq.n	800724c <__sflush_r+0x90>
 8007246:	4628      	mov	r0, r5
 8007248:	f7fe fd7a 	bl	8005d40 <_free_r>
 800724c:	2000      	movs	r0, #0
 800724e:	6360      	str	r0, [r4, #52]	; 0x34
 8007250:	e7c1      	b.n	80071d6 <__sflush_r+0x1a>
 8007252:	2301      	movs	r3, #1
 8007254:	4628      	mov	r0, r5
 8007256:	47b0      	blx	r6
 8007258:	1c41      	adds	r1, r0, #1
 800725a:	d1c8      	bne.n	80071ee <__sflush_r+0x32>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0c5      	beq.n	80071ee <__sflush_r+0x32>
 8007262:	2b1d      	cmp	r3, #29
 8007264:	d001      	beq.n	800726a <__sflush_r+0xae>
 8007266:	2b16      	cmp	r3, #22
 8007268:	d101      	bne.n	800726e <__sflush_r+0xb2>
 800726a:	602f      	str	r7, [r5, #0]
 800726c:	e7b2      	b.n	80071d4 <__sflush_r+0x18>
 800726e:	89a3      	ldrh	r3, [r4, #12]
 8007270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007274:	81a3      	strh	r3, [r4, #12]
 8007276:	e7ae      	b.n	80071d6 <__sflush_r+0x1a>
 8007278:	690f      	ldr	r7, [r1, #16]
 800727a:	2f00      	cmp	r7, #0
 800727c:	d0aa      	beq.n	80071d4 <__sflush_r+0x18>
 800727e:	0793      	lsls	r3, r2, #30
 8007280:	bf18      	it	ne
 8007282:	2300      	movne	r3, #0
 8007284:	680e      	ldr	r6, [r1, #0]
 8007286:	bf08      	it	eq
 8007288:	694b      	ldreq	r3, [r1, #20]
 800728a:	1bf6      	subs	r6, r6, r7
 800728c:	600f      	str	r7, [r1, #0]
 800728e:	608b      	str	r3, [r1, #8]
 8007290:	2e00      	cmp	r6, #0
 8007292:	dd9f      	ble.n	80071d4 <__sflush_r+0x18>
 8007294:	4633      	mov	r3, r6
 8007296:	463a      	mov	r2, r7
 8007298:	4628      	mov	r0, r5
 800729a:	6a21      	ldr	r1, [r4, #32]
 800729c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80072a0:	47e0      	blx	ip
 80072a2:	2800      	cmp	r0, #0
 80072a4:	dc06      	bgt.n	80072b4 <__sflush_r+0xf8>
 80072a6:	89a3      	ldrh	r3, [r4, #12]
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	e790      	b.n	80071d6 <__sflush_r+0x1a>
 80072b4:	4407      	add	r7, r0
 80072b6:	1a36      	subs	r6, r6, r0
 80072b8:	e7ea      	b.n	8007290 <__sflush_r+0xd4>
 80072ba:	bf00      	nop
 80072bc:	dfbffffe 	.word	0xdfbffffe

080072c0 <_fflush_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	690b      	ldr	r3, [r1, #16]
 80072c4:	4605      	mov	r5, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	b913      	cbnz	r3, 80072d0 <_fflush_r+0x10>
 80072ca:	2500      	movs	r5, #0
 80072cc:	4628      	mov	r0, r5
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	b118      	cbz	r0, 80072da <_fflush_r+0x1a>
 80072d2:	6a03      	ldr	r3, [r0, #32]
 80072d4:	b90b      	cbnz	r3, 80072da <_fflush_r+0x1a>
 80072d6:	f7fd fd63 	bl	8004da0 <__sinit>
 80072da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0f3      	beq.n	80072ca <_fflush_r+0xa>
 80072e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072e4:	07d0      	lsls	r0, r2, #31
 80072e6:	d404      	bmi.n	80072f2 <_fflush_r+0x32>
 80072e8:	0599      	lsls	r1, r3, #22
 80072ea:	d402      	bmi.n	80072f2 <_fflush_r+0x32>
 80072ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ee:	f7fd fe8f 	bl	8005010 <__retarget_lock_acquire_recursive>
 80072f2:	4628      	mov	r0, r5
 80072f4:	4621      	mov	r1, r4
 80072f6:	f7ff ff61 	bl	80071bc <__sflush_r>
 80072fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072fc:	4605      	mov	r5, r0
 80072fe:	07da      	lsls	r2, r3, #31
 8007300:	d4e4      	bmi.n	80072cc <_fflush_r+0xc>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	059b      	lsls	r3, r3, #22
 8007306:	d4e1      	bmi.n	80072cc <_fflush_r+0xc>
 8007308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800730a:	f7fd fe82 	bl	8005012 <__retarget_lock_release_recursive>
 800730e:	e7dd      	b.n	80072cc <_fflush_r+0xc>

08007310 <memmove>:
 8007310:	4288      	cmp	r0, r1
 8007312:	b510      	push	{r4, lr}
 8007314:	eb01 0402 	add.w	r4, r1, r2
 8007318:	d902      	bls.n	8007320 <memmove+0x10>
 800731a:	4284      	cmp	r4, r0
 800731c:	4623      	mov	r3, r4
 800731e:	d807      	bhi.n	8007330 <memmove+0x20>
 8007320:	1e43      	subs	r3, r0, #1
 8007322:	42a1      	cmp	r1, r4
 8007324:	d008      	beq.n	8007338 <memmove+0x28>
 8007326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800732a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800732e:	e7f8      	b.n	8007322 <memmove+0x12>
 8007330:	4601      	mov	r1, r0
 8007332:	4402      	add	r2, r0
 8007334:	428a      	cmp	r2, r1
 8007336:	d100      	bne.n	800733a <memmove+0x2a>
 8007338:	bd10      	pop	{r4, pc}
 800733a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800733e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007342:	e7f7      	b.n	8007334 <memmove+0x24>

08007344 <__assert_func>:
 8007344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007346:	4614      	mov	r4, r2
 8007348:	461a      	mov	r2, r3
 800734a:	4b09      	ldr	r3, [pc, #36]	; (8007370 <__assert_func+0x2c>)
 800734c:	4605      	mov	r5, r0
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68d8      	ldr	r0, [r3, #12]
 8007352:	b14c      	cbz	r4, 8007368 <__assert_func+0x24>
 8007354:	4b07      	ldr	r3, [pc, #28]	; (8007374 <__assert_func+0x30>)
 8007356:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800735a:	9100      	str	r1, [sp, #0]
 800735c:	462b      	mov	r3, r5
 800735e:	4906      	ldr	r1, [pc, #24]	; (8007378 <__assert_func+0x34>)
 8007360:	f000 f822 	bl	80073a8 <fiprintf>
 8007364:	f000 f832 	bl	80073cc <abort>
 8007368:	4b04      	ldr	r3, [pc, #16]	; (800737c <__assert_func+0x38>)
 800736a:	461c      	mov	r4, r3
 800736c:	e7f3      	b.n	8007356 <__assert_func+0x12>
 800736e:	bf00      	nop
 8007370:	200001d0 	.word	0x200001d0
 8007374:	08007d55 	.word	0x08007d55
 8007378:	08007d62 	.word	0x08007d62
 800737c:	08007d90 	.word	0x08007d90

08007380 <_calloc_r>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	fba1 5402 	umull	r5, r4, r1, r2
 8007386:	b934      	cbnz	r4, 8007396 <_calloc_r+0x16>
 8007388:	4629      	mov	r1, r5
 800738a:	f7fb ff4d 	bl	8003228 <_malloc_r>
 800738e:	4606      	mov	r6, r0
 8007390:	b928      	cbnz	r0, 800739e <_calloc_r+0x1e>
 8007392:	4630      	mov	r0, r6
 8007394:	bd70      	pop	{r4, r5, r6, pc}
 8007396:	220c      	movs	r2, #12
 8007398:	2600      	movs	r6, #0
 800739a:	6002      	str	r2, [r0, #0]
 800739c:	e7f9      	b.n	8007392 <_calloc_r+0x12>
 800739e:	462a      	mov	r2, r5
 80073a0:	4621      	mov	r1, r4
 80073a2:	f7fd fd96 	bl	8004ed2 <memset>
 80073a6:	e7f4      	b.n	8007392 <_calloc_r+0x12>

080073a8 <fiprintf>:
 80073a8:	b40e      	push	{r1, r2, r3}
 80073aa:	b503      	push	{r0, r1, lr}
 80073ac:	4601      	mov	r1, r0
 80073ae:	ab03      	add	r3, sp, #12
 80073b0:	4805      	ldr	r0, [pc, #20]	; (80073c8 <fiprintf+0x20>)
 80073b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b6:	6800      	ldr	r0, [r0, #0]
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	f000 f835 	bl	8007428 <_vfiprintf_r>
 80073be:	b002      	add	sp, #8
 80073c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073c4:	b003      	add	sp, #12
 80073c6:	4770      	bx	lr
 80073c8:	200001d0 	.word	0x200001d0

080073cc <abort>:
 80073cc:	2006      	movs	r0, #6
 80073ce:	b508      	push	{r3, lr}
 80073d0:	f000 fa02 	bl	80077d8 <raise>
 80073d4:	2001      	movs	r0, #1
 80073d6:	f7f9 ffbf 	bl	8001358 <_exit>

080073da <__sfputc_r>:
 80073da:	6893      	ldr	r3, [r2, #8]
 80073dc:	b410      	push	{r4}
 80073de:	3b01      	subs	r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	6093      	str	r3, [r2, #8]
 80073e4:	da07      	bge.n	80073f6 <__sfputc_r+0x1c>
 80073e6:	6994      	ldr	r4, [r2, #24]
 80073e8:	42a3      	cmp	r3, r4
 80073ea:	db01      	blt.n	80073f0 <__sfputc_r+0x16>
 80073ec:	290a      	cmp	r1, #10
 80073ee:	d102      	bne.n	80073f6 <__sfputc_r+0x1c>
 80073f0:	bc10      	pop	{r4}
 80073f2:	f000 b933 	b.w	800765c <__swbuf_r>
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	1c58      	adds	r0, r3, #1
 80073fa:	6010      	str	r0, [r2, #0]
 80073fc:	7019      	strb	r1, [r3, #0]
 80073fe:	4608      	mov	r0, r1
 8007400:	bc10      	pop	{r4}
 8007402:	4770      	bx	lr

08007404 <__sfputs_r>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	4606      	mov	r6, r0
 8007408:	460f      	mov	r7, r1
 800740a:	4614      	mov	r4, r2
 800740c:	18d5      	adds	r5, r2, r3
 800740e:	42ac      	cmp	r4, r5
 8007410:	d101      	bne.n	8007416 <__sfputs_r+0x12>
 8007412:	2000      	movs	r0, #0
 8007414:	e007      	b.n	8007426 <__sfputs_r+0x22>
 8007416:	463a      	mov	r2, r7
 8007418:	4630      	mov	r0, r6
 800741a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741e:	f7ff ffdc 	bl	80073da <__sfputc_r>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d1f3      	bne.n	800740e <__sfputs_r+0xa>
 8007426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007428 <_vfiprintf_r>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	460d      	mov	r5, r1
 800742e:	4614      	mov	r4, r2
 8007430:	4698      	mov	r8, r3
 8007432:	4606      	mov	r6, r0
 8007434:	b09d      	sub	sp, #116	; 0x74
 8007436:	b118      	cbz	r0, 8007440 <_vfiprintf_r+0x18>
 8007438:	6a03      	ldr	r3, [r0, #32]
 800743a:	b90b      	cbnz	r3, 8007440 <_vfiprintf_r+0x18>
 800743c:	f7fd fcb0 	bl	8004da0 <__sinit>
 8007440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007442:	07d9      	lsls	r1, r3, #31
 8007444:	d405      	bmi.n	8007452 <_vfiprintf_r+0x2a>
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	059a      	lsls	r2, r3, #22
 800744a:	d402      	bmi.n	8007452 <_vfiprintf_r+0x2a>
 800744c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800744e:	f7fd fddf 	bl	8005010 <__retarget_lock_acquire_recursive>
 8007452:	89ab      	ldrh	r3, [r5, #12]
 8007454:	071b      	lsls	r3, r3, #28
 8007456:	d501      	bpl.n	800745c <_vfiprintf_r+0x34>
 8007458:	692b      	ldr	r3, [r5, #16]
 800745a:	b99b      	cbnz	r3, 8007484 <_vfiprintf_r+0x5c>
 800745c:	4629      	mov	r1, r5
 800745e:	4630      	mov	r0, r6
 8007460:	f000 f93a 	bl	80076d8 <__swsetup_r>
 8007464:	b170      	cbz	r0, 8007484 <_vfiprintf_r+0x5c>
 8007466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007468:	07dc      	lsls	r4, r3, #31
 800746a:	d504      	bpl.n	8007476 <_vfiprintf_r+0x4e>
 800746c:	f04f 30ff 	mov.w	r0, #4294967295
 8007470:	b01d      	add	sp, #116	; 0x74
 8007472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007476:	89ab      	ldrh	r3, [r5, #12]
 8007478:	0598      	lsls	r0, r3, #22
 800747a:	d4f7      	bmi.n	800746c <_vfiprintf_r+0x44>
 800747c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800747e:	f7fd fdc8 	bl	8005012 <__retarget_lock_release_recursive>
 8007482:	e7f3      	b.n	800746c <_vfiprintf_r+0x44>
 8007484:	2300      	movs	r3, #0
 8007486:	9309      	str	r3, [sp, #36]	; 0x24
 8007488:	2320      	movs	r3, #32
 800748a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800748e:	2330      	movs	r3, #48	; 0x30
 8007490:	f04f 0901 	mov.w	r9, #1
 8007494:	f8cd 800c 	str.w	r8, [sp, #12]
 8007498:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007648 <_vfiprintf_r+0x220>
 800749c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074a0:	4623      	mov	r3, r4
 80074a2:	469a      	mov	sl, r3
 80074a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074a8:	b10a      	cbz	r2, 80074ae <_vfiprintf_r+0x86>
 80074aa:	2a25      	cmp	r2, #37	; 0x25
 80074ac:	d1f9      	bne.n	80074a2 <_vfiprintf_r+0x7a>
 80074ae:	ebba 0b04 	subs.w	fp, sl, r4
 80074b2:	d00b      	beq.n	80074cc <_vfiprintf_r+0xa4>
 80074b4:	465b      	mov	r3, fp
 80074b6:	4622      	mov	r2, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	4630      	mov	r0, r6
 80074bc:	f7ff ffa2 	bl	8007404 <__sfputs_r>
 80074c0:	3001      	adds	r0, #1
 80074c2:	f000 80a9 	beq.w	8007618 <_vfiprintf_r+0x1f0>
 80074c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074c8:	445a      	add	r2, fp
 80074ca:	9209      	str	r2, [sp, #36]	; 0x24
 80074cc:	f89a 3000 	ldrb.w	r3, [sl]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 80a1 	beq.w	8007618 <_vfiprintf_r+0x1f0>
 80074d6:	2300      	movs	r3, #0
 80074d8:	f04f 32ff 	mov.w	r2, #4294967295
 80074dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e0:	f10a 0a01 	add.w	sl, sl, #1
 80074e4:	9304      	str	r3, [sp, #16]
 80074e6:	9307      	str	r3, [sp, #28]
 80074e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074ec:	931a      	str	r3, [sp, #104]	; 0x68
 80074ee:	4654      	mov	r4, sl
 80074f0:	2205      	movs	r2, #5
 80074f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f6:	4854      	ldr	r0, [pc, #336]	; (8007648 <_vfiprintf_r+0x220>)
 80074f8:	f7fd fd8c 	bl	8005014 <memchr>
 80074fc:	9a04      	ldr	r2, [sp, #16]
 80074fe:	b9d8      	cbnz	r0, 8007538 <_vfiprintf_r+0x110>
 8007500:	06d1      	lsls	r1, r2, #27
 8007502:	bf44      	itt	mi
 8007504:	2320      	movmi	r3, #32
 8007506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800750a:	0713      	lsls	r3, r2, #28
 800750c:	bf44      	itt	mi
 800750e:	232b      	movmi	r3, #43	; 0x2b
 8007510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007514:	f89a 3000 	ldrb.w	r3, [sl]
 8007518:	2b2a      	cmp	r3, #42	; 0x2a
 800751a:	d015      	beq.n	8007548 <_vfiprintf_r+0x120>
 800751c:	4654      	mov	r4, sl
 800751e:	2000      	movs	r0, #0
 8007520:	f04f 0c0a 	mov.w	ip, #10
 8007524:	9a07      	ldr	r2, [sp, #28]
 8007526:	4621      	mov	r1, r4
 8007528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800752c:	3b30      	subs	r3, #48	; 0x30
 800752e:	2b09      	cmp	r3, #9
 8007530:	d94d      	bls.n	80075ce <_vfiprintf_r+0x1a6>
 8007532:	b1b0      	cbz	r0, 8007562 <_vfiprintf_r+0x13a>
 8007534:	9207      	str	r2, [sp, #28]
 8007536:	e014      	b.n	8007562 <_vfiprintf_r+0x13a>
 8007538:	eba0 0308 	sub.w	r3, r0, r8
 800753c:	fa09 f303 	lsl.w	r3, r9, r3
 8007540:	4313      	orrs	r3, r2
 8007542:	46a2      	mov	sl, r4
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	e7d2      	b.n	80074ee <_vfiprintf_r+0xc6>
 8007548:	9b03      	ldr	r3, [sp, #12]
 800754a:	1d19      	adds	r1, r3, #4
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	9103      	str	r1, [sp, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	bfbb      	ittet	lt
 8007554:	425b      	neglt	r3, r3
 8007556:	f042 0202 	orrlt.w	r2, r2, #2
 800755a:	9307      	strge	r3, [sp, #28]
 800755c:	9307      	strlt	r3, [sp, #28]
 800755e:	bfb8      	it	lt
 8007560:	9204      	strlt	r2, [sp, #16]
 8007562:	7823      	ldrb	r3, [r4, #0]
 8007564:	2b2e      	cmp	r3, #46	; 0x2e
 8007566:	d10c      	bne.n	8007582 <_vfiprintf_r+0x15a>
 8007568:	7863      	ldrb	r3, [r4, #1]
 800756a:	2b2a      	cmp	r3, #42	; 0x2a
 800756c:	d134      	bne.n	80075d8 <_vfiprintf_r+0x1b0>
 800756e:	9b03      	ldr	r3, [sp, #12]
 8007570:	3402      	adds	r4, #2
 8007572:	1d1a      	adds	r2, r3, #4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	9203      	str	r2, [sp, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	bfb8      	it	lt
 800757c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007580:	9305      	str	r3, [sp, #20]
 8007582:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800764c <_vfiprintf_r+0x224>
 8007586:	2203      	movs	r2, #3
 8007588:	4650      	mov	r0, sl
 800758a:	7821      	ldrb	r1, [r4, #0]
 800758c:	f7fd fd42 	bl	8005014 <memchr>
 8007590:	b138      	cbz	r0, 80075a2 <_vfiprintf_r+0x17a>
 8007592:	2240      	movs	r2, #64	; 0x40
 8007594:	9b04      	ldr	r3, [sp, #16]
 8007596:	eba0 000a 	sub.w	r0, r0, sl
 800759a:	4082      	lsls	r2, r0
 800759c:	4313      	orrs	r3, r2
 800759e:	3401      	adds	r4, #1
 80075a0:	9304      	str	r3, [sp, #16]
 80075a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a6:	2206      	movs	r2, #6
 80075a8:	4829      	ldr	r0, [pc, #164]	; (8007650 <_vfiprintf_r+0x228>)
 80075aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075ae:	f7fd fd31 	bl	8005014 <memchr>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d03f      	beq.n	8007636 <_vfiprintf_r+0x20e>
 80075b6:	4b27      	ldr	r3, [pc, #156]	; (8007654 <_vfiprintf_r+0x22c>)
 80075b8:	bb1b      	cbnz	r3, 8007602 <_vfiprintf_r+0x1da>
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	3307      	adds	r3, #7
 80075be:	f023 0307 	bic.w	r3, r3, #7
 80075c2:	3308      	adds	r3, #8
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c8:	443b      	add	r3, r7
 80075ca:	9309      	str	r3, [sp, #36]	; 0x24
 80075cc:	e768      	b.n	80074a0 <_vfiprintf_r+0x78>
 80075ce:	460c      	mov	r4, r1
 80075d0:	2001      	movs	r0, #1
 80075d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075d6:	e7a6      	b.n	8007526 <_vfiprintf_r+0xfe>
 80075d8:	2300      	movs	r3, #0
 80075da:	f04f 0c0a 	mov.w	ip, #10
 80075de:	4619      	mov	r1, r3
 80075e0:	3401      	adds	r4, #1
 80075e2:	9305      	str	r3, [sp, #20]
 80075e4:	4620      	mov	r0, r4
 80075e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ea:	3a30      	subs	r2, #48	; 0x30
 80075ec:	2a09      	cmp	r2, #9
 80075ee:	d903      	bls.n	80075f8 <_vfiprintf_r+0x1d0>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0c6      	beq.n	8007582 <_vfiprintf_r+0x15a>
 80075f4:	9105      	str	r1, [sp, #20]
 80075f6:	e7c4      	b.n	8007582 <_vfiprintf_r+0x15a>
 80075f8:	4604      	mov	r4, r0
 80075fa:	2301      	movs	r3, #1
 80075fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007600:	e7f0      	b.n	80075e4 <_vfiprintf_r+0x1bc>
 8007602:	ab03      	add	r3, sp, #12
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	462a      	mov	r2, r5
 8007608:	4630      	mov	r0, r6
 800760a:	4b13      	ldr	r3, [pc, #76]	; (8007658 <_vfiprintf_r+0x230>)
 800760c:	a904      	add	r1, sp, #16
 800760e:	f7fc fd7d 	bl	800410c <_printf_float>
 8007612:	4607      	mov	r7, r0
 8007614:	1c78      	adds	r0, r7, #1
 8007616:	d1d6      	bne.n	80075c6 <_vfiprintf_r+0x19e>
 8007618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800761a:	07d9      	lsls	r1, r3, #31
 800761c:	d405      	bmi.n	800762a <_vfiprintf_r+0x202>
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	059a      	lsls	r2, r3, #22
 8007622:	d402      	bmi.n	800762a <_vfiprintf_r+0x202>
 8007624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007626:	f7fd fcf4 	bl	8005012 <__retarget_lock_release_recursive>
 800762a:	89ab      	ldrh	r3, [r5, #12]
 800762c:	065b      	lsls	r3, r3, #25
 800762e:	f53f af1d 	bmi.w	800746c <_vfiprintf_r+0x44>
 8007632:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007634:	e71c      	b.n	8007470 <_vfiprintf_r+0x48>
 8007636:	ab03      	add	r3, sp, #12
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	462a      	mov	r2, r5
 800763c:	4630      	mov	r0, r6
 800763e:	4b06      	ldr	r3, [pc, #24]	; (8007658 <_vfiprintf_r+0x230>)
 8007640:	a904      	add	r1, sp, #16
 8007642:	f7fd f803 	bl	800464c <_printf_i>
 8007646:	e7e4      	b.n	8007612 <_vfiprintf_r+0x1ea>
 8007648:	08007d44 	.word	0x08007d44
 800764c:	08007d4a 	.word	0x08007d4a
 8007650:	08007d4e 	.word	0x08007d4e
 8007654:	0800410d 	.word	0x0800410d
 8007658:	08007405 	.word	0x08007405

0800765c <__swbuf_r>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	460e      	mov	r6, r1
 8007660:	4614      	mov	r4, r2
 8007662:	4605      	mov	r5, r0
 8007664:	b118      	cbz	r0, 800766e <__swbuf_r+0x12>
 8007666:	6a03      	ldr	r3, [r0, #32]
 8007668:	b90b      	cbnz	r3, 800766e <__swbuf_r+0x12>
 800766a:	f7fd fb99 	bl	8004da0 <__sinit>
 800766e:	69a3      	ldr	r3, [r4, #24]
 8007670:	60a3      	str	r3, [r4, #8]
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	071a      	lsls	r2, r3, #28
 8007676:	d525      	bpl.n	80076c4 <__swbuf_r+0x68>
 8007678:	6923      	ldr	r3, [r4, #16]
 800767a:	b31b      	cbz	r3, 80076c4 <__swbuf_r+0x68>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	6922      	ldr	r2, [r4, #16]
 8007680:	b2f6      	uxtb	r6, r6
 8007682:	1a98      	subs	r0, r3, r2
 8007684:	6963      	ldr	r3, [r4, #20]
 8007686:	4637      	mov	r7, r6
 8007688:	4283      	cmp	r3, r0
 800768a:	dc04      	bgt.n	8007696 <__swbuf_r+0x3a>
 800768c:	4621      	mov	r1, r4
 800768e:	4628      	mov	r0, r5
 8007690:	f7ff fe16 	bl	80072c0 <_fflush_r>
 8007694:	b9e0      	cbnz	r0, 80076d0 <__swbuf_r+0x74>
 8007696:	68a3      	ldr	r3, [r4, #8]
 8007698:	3b01      	subs	r3, #1
 800769a:	60a3      	str	r3, [r4, #8]
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	6022      	str	r2, [r4, #0]
 80076a2:	701e      	strb	r6, [r3, #0]
 80076a4:	6962      	ldr	r2, [r4, #20]
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d004      	beq.n	80076b6 <__swbuf_r+0x5a>
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	07db      	lsls	r3, r3, #31
 80076b0:	d506      	bpl.n	80076c0 <__swbuf_r+0x64>
 80076b2:	2e0a      	cmp	r6, #10
 80076b4:	d104      	bne.n	80076c0 <__swbuf_r+0x64>
 80076b6:	4621      	mov	r1, r4
 80076b8:	4628      	mov	r0, r5
 80076ba:	f7ff fe01 	bl	80072c0 <_fflush_r>
 80076be:	b938      	cbnz	r0, 80076d0 <__swbuf_r+0x74>
 80076c0:	4638      	mov	r0, r7
 80076c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076c4:	4621      	mov	r1, r4
 80076c6:	4628      	mov	r0, r5
 80076c8:	f000 f806 	bl	80076d8 <__swsetup_r>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d0d5      	beq.n	800767c <__swbuf_r+0x20>
 80076d0:	f04f 37ff 	mov.w	r7, #4294967295
 80076d4:	e7f4      	b.n	80076c0 <__swbuf_r+0x64>
	...

080076d8 <__swsetup_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4b2a      	ldr	r3, [pc, #168]	; (8007784 <__swsetup_r+0xac>)
 80076dc:	4605      	mov	r5, r0
 80076de:	6818      	ldr	r0, [r3, #0]
 80076e0:	460c      	mov	r4, r1
 80076e2:	b118      	cbz	r0, 80076ec <__swsetup_r+0x14>
 80076e4:	6a03      	ldr	r3, [r0, #32]
 80076e6:	b90b      	cbnz	r3, 80076ec <__swsetup_r+0x14>
 80076e8:	f7fd fb5a 	bl	8004da0 <__sinit>
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076f2:	0718      	lsls	r0, r3, #28
 80076f4:	d422      	bmi.n	800773c <__swsetup_r+0x64>
 80076f6:	06d9      	lsls	r1, r3, #27
 80076f8:	d407      	bmi.n	800770a <__swsetup_r+0x32>
 80076fa:	2309      	movs	r3, #9
 80076fc:	602b      	str	r3, [r5, #0]
 80076fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007702:	f04f 30ff 	mov.w	r0, #4294967295
 8007706:	81a3      	strh	r3, [r4, #12]
 8007708:	e034      	b.n	8007774 <__swsetup_r+0x9c>
 800770a:	0758      	lsls	r0, r3, #29
 800770c:	d512      	bpl.n	8007734 <__swsetup_r+0x5c>
 800770e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007710:	b141      	cbz	r1, 8007724 <__swsetup_r+0x4c>
 8007712:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007716:	4299      	cmp	r1, r3
 8007718:	d002      	beq.n	8007720 <__swsetup_r+0x48>
 800771a:	4628      	mov	r0, r5
 800771c:	f7fe fb10 	bl	8005d40 <_free_r>
 8007720:	2300      	movs	r3, #0
 8007722:	6363      	str	r3, [r4, #52]	; 0x34
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800772a:	81a3      	strh	r3, [r4, #12]
 800772c:	2300      	movs	r3, #0
 800772e:	6063      	str	r3, [r4, #4]
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	6023      	str	r3, [r4, #0]
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	f043 0308 	orr.w	r3, r3, #8
 800773a:	81a3      	strh	r3, [r4, #12]
 800773c:	6923      	ldr	r3, [r4, #16]
 800773e:	b94b      	cbnz	r3, 8007754 <__swsetup_r+0x7c>
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800774a:	d003      	beq.n	8007754 <__swsetup_r+0x7c>
 800774c:	4621      	mov	r1, r4
 800774e:	4628      	mov	r0, r5
 8007750:	f000 f883 	bl	800785a <__smakebuf_r>
 8007754:	89a0      	ldrh	r0, [r4, #12]
 8007756:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800775a:	f010 0301 	ands.w	r3, r0, #1
 800775e:	d00a      	beq.n	8007776 <__swsetup_r+0x9e>
 8007760:	2300      	movs	r3, #0
 8007762:	60a3      	str	r3, [r4, #8]
 8007764:	6963      	ldr	r3, [r4, #20]
 8007766:	425b      	negs	r3, r3
 8007768:	61a3      	str	r3, [r4, #24]
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	b943      	cbnz	r3, 8007780 <__swsetup_r+0xa8>
 800776e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007772:	d1c4      	bne.n	80076fe <__swsetup_r+0x26>
 8007774:	bd38      	pop	{r3, r4, r5, pc}
 8007776:	0781      	lsls	r1, r0, #30
 8007778:	bf58      	it	pl
 800777a:	6963      	ldrpl	r3, [r4, #20]
 800777c:	60a3      	str	r3, [r4, #8]
 800777e:	e7f4      	b.n	800776a <__swsetup_r+0x92>
 8007780:	2000      	movs	r0, #0
 8007782:	e7f7      	b.n	8007774 <__swsetup_r+0x9c>
 8007784:	200001d0 	.word	0x200001d0

08007788 <_raise_r>:
 8007788:	291f      	cmp	r1, #31
 800778a:	b538      	push	{r3, r4, r5, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	460d      	mov	r5, r1
 8007790:	d904      	bls.n	800779c <_raise_r+0x14>
 8007792:	2316      	movs	r3, #22
 8007794:	6003      	str	r3, [r0, #0]
 8007796:	f04f 30ff 	mov.w	r0, #4294967295
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800779e:	b112      	cbz	r2, 80077a6 <_raise_r+0x1e>
 80077a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077a4:	b94b      	cbnz	r3, 80077ba <_raise_r+0x32>
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 f830 	bl	800780c <_getpid_r>
 80077ac:	462a      	mov	r2, r5
 80077ae:	4601      	mov	r1, r0
 80077b0:	4620      	mov	r0, r4
 80077b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077b6:	f000 b817 	b.w	80077e8 <_kill_r>
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d00a      	beq.n	80077d4 <_raise_r+0x4c>
 80077be:	1c59      	adds	r1, r3, #1
 80077c0:	d103      	bne.n	80077ca <_raise_r+0x42>
 80077c2:	2316      	movs	r3, #22
 80077c4:	6003      	str	r3, [r0, #0]
 80077c6:	2001      	movs	r0, #1
 80077c8:	e7e7      	b.n	800779a <_raise_r+0x12>
 80077ca:	2400      	movs	r4, #0
 80077cc:	4628      	mov	r0, r5
 80077ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077d2:	4798      	blx	r3
 80077d4:	2000      	movs	r0, #0
 80077d6:	e7e0      	b.n	800779a <_raise_r+0x12>

080077d8 <raise>:
 80077d8:	4b02      	ldr	r3, [pc, #8]	; (80077e4 <raise+0xc>)
 80077da:	4601      	mov	r1, r0
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	f7ff bfd3 	b.w	8007788 <_raise_r>
 80077e2:	bf00      	nop
 80077e4:	200001d0 	.word	0x200001d0

080077e8 <_kill_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	2300      	movs	r3, #0
 80077ec:	4d06      	ldr	r5, [pc, #24]	; (8007808 <_kill_r+0x20>)
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	4611      	mov	r1, r2
 80077f4:	602b      	str	r3, [r5, #0]
 80077f6:	f7f9 fd9f 	bl	8001338 <_kill>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d102      	bne.n	8007804 <_kill_r+0x1c>
 80077fe:	682b      	ldr	r3, [r5, #0]
 8007800:	b103      	cbz	r3, 8007804 <_kill_r+0x1c>
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	bd38      	pop	{r3, r4, r5, pc}
 8007806:	bf00      	nop
 8007808:	20000474 	.word	0x20000474

0800780c <_getpid_r>:
 800780c:	f7f9 bd8d 	b.w	800132a <_getpid>

08007810 <__swhatbuf_r>:
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	460c      	mov	r4, r1
 8007814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007818:	4615      	mov	r5, r2
 800781a:	2900      	cmp	r1, #0
 800781c:	461e      	mov	r6, r3
 800781e:	b096      	sub	sp, #88	; 0x58
 8007820:	da0c      	bge.n	800783c <__swhatbuf_r+0x2c>
 8007822:	89a3      	ldrh	r3, [r4, #12]
 8007824:	2100      	movs	r1, #0
 8007826:	f013 0f80 	tst.w	r3, #128	; 0x80
 800782a:	bf0c      	ite	eq
 800782c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007830:	2340      	movne	r3, #64	; 0x40
 8007832:	2000      	movs	r0, #0
 8007834:	6031      	str	r1, [r6, #0]
 8007836:	602b      	str	r3, [r5, #0]
 8007838:	b016      	add	sp, #88	; 0x58
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	466a      	mov	r2, sp
 800783e:	f000 f849 	bl	80078d4 <_fstat_r>
 8007842:	2800      	cmp	r0, #0
 8007844:	dbed      	blt.n	8007822 <__swhatbuf_r+0x12>
 8007846:	9901      	ldr	r1, [sp, #4]
 8007848:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800784c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007850:	4259      	negs	r1, r3
 8007852:	4159      	adcs	r1, r3
 8007854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007858:	e7eb      	b.n	8007832 <__swhatbuf_r+0x22>

0800785a <__smakebuf_r>:
 800785a:	898b      	ldrh	r3, [r1, #12]
 800785c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800785e:	079d      	lsls	r5, r3, #30
 8007860:	4606      	mov	r6, r0
 8007862:	460c      	mov	r4, r1
 8007864:	d507      	bpl.n	8007876 <__smakebuf_r+0x1c>
 8007866:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	6123      	str	r3, [r4, #16]
 800786e:	2301      	movs	r3, #1
 8007870:	6163      	str	r3, [r4, #20]
 8007872:	b002      	add	sp, #8
 8007874:	bd70      	pop	{r4, r5, r6, pc}
 8007876:	466a      	mov	r2, sp
 8007878:	ab01      	add	r3, sp, #4
 800787a:	f7ff ffc9 	bl	8007810 <__swhatbuf_r>
 800787e:	9900      	ldr	r1, [sp, #0]
 8007880:	4605      	mov	r5, r0
 8007882:	4630      	mov	r0, r6
 8007884:	f7fb fcd0 	bl	8003228 <_malloc_r>
 8007888:	b948      	cbnz	r0, 800789e <__smakebuf_r+0x44>
 800788a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800788e:	059a      	lsls	r2, r3, #22
 8007890:	d4ef      	bmi.n	8007872 <__smakebuf_r+0x18>
 8007892:	f023 0303 	bic.w	r3, r3, #3
 8007896:	f043 0302 	orr.w	r3, r3, #2
 800789a:	81a3      	strh	r3, [r4, #12]
 800789c:	e7e3      	b.n	8007866 <__smakebuf_r+0xc>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	6020      	str	r0, [r4, #0]
 80078a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	9b00      	ldr	r3, [sp, #0]
 80078aa:	6120      	str	r0, [r4, #16]
 80078ac:	6163      	str	r3, [r4, #20]
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	b15b      	cbz	r3, 80078ca <__smakebuf_r+0x70>
 80078b2:	4630      	mov	r0, r6
 80078b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b8:	f000 f81e 	bl	80078f8 <_isatty_r>
 80078bc:	b128      	cbz	r0, 80078ca <__smakebuf_r+0x70>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	f023 0303 	bic.w	r3, r3, #3
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	81a3      	strh	r3, [r4, #12]
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	431d      	orrs	r5, r3
 80078ce:	81a5      	strh	r5, [r4, #12]
 80078d0:	e7cf      	b.n	8007872 <__smakebuf_r+0x18>
	...

080078d4 <_fstat_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	2300      	movs	r3, #0
 80078d8:	4d06      	ldr	r5, [pc, #24]	; (80078f4 <_fstat_r+0x20>)
 80078da:	4604      	mov	r4, r0
 80078dc:	4608      	mov	r0, r1
 80078de:	4611      	mov	r1, r2
 80078e0:	602b      	str	r3, [r5, #0]
 80078e2:	f7f9 fd87 	bl	80013f4 <_fstat>
 80078e6:	1c43      	adds	r3, r0, #1
 80078e8:	d102      	bne.n	80078f0 <_fstat_r+0x1c>
 80078ea:	682b      	ldr	r3, [r5, #0]
 80078ec:	b103      	cbz	r3, 80078f0 <_fstat_r+0x1c>
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	bd38      	pop	{r3, r4, r5, pc}
 80078f2:	bf00      	nop
 80078f4:	20000474 	.word	0x20000474

080078f8 <_isatty_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	2300      	movs	r3, #0
 80078fc:	4d05      	ldr	r5, [pc, #20]	; (8007914 <_isatty_r+0x1c>)
 80078fe:	4604      	mov	r4, r0
 8007900:	4608      	mov	r0, r1
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	f7f9 fd85 	bl	8001412 <_isatty>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d102      	bne.n	8007912 <_isatty_r+0x1a>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	b103      	cbz	r3, 8007912 <_isatty_r+0x1a>
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	20000474 	.word	0x20000474

08007918 <_init>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr

08007924 <_fini>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	bf00      	nop
 8007928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792a:	bc08      	pop	{r3}
 800792c:	469e      	mov	lr, r3
 800792e:	4770      	bx	lr
